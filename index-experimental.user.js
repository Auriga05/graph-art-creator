// ==UserScript==
// @name         Graph Art Creator - Experimental
// @namespace    http://tampermonkey.net/
// @version      1.0a
// @description  precal thing
// @author       Auriga05
// @match        https://www.desmos.com/calculator*
// @icon         https://www.google.com/s2/favicons?domain=desmos.com
// @grant        unsafeWindow
// @updateURL    https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js
// @downloadURL  https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js
// @require      https://code.jquery.com/jquery-3.5.1.slim.min.js
// @require      https://cdn.jsdelivr.net/npm/evaluatex@2.2.0/dist/evaluatex.min.js
// ==/UserScript==
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Graph.ts":
/*!**********************!*\
  !*** ./src/Graph.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Graph\": () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass Graph {\r\n    constructor(expression, graphType) {\r\n        this.color = expression.color;\r\n        this.hidden = expression.hidden;\r\n        this.id = expression.id;\r\n        this.latex = expression.latex;\r\n        this.type = expression.type;\r\n        this.graphId = parseInt(this.id.split('_')[0], 10);\r\n        if (graphType) {\r\n            this.graphType = graphType;\r\n        }\r\n        else {\r\n            this.graphType = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getGraphType)(expression);\r\n        }\r\n    }\r\n    // return `${A}x^{2}+${C}y^{2}+${D}x+${E}y+${F}=0`;\r\n    toExpression() {\r\n        return {\r\n            id: this.id,\r\n            latex: this.latex,\r\n            type: this.type,\r\n            color: this.color,\r\n            hidden: this.hidden,\r\n        };\r\n    }\r\n    evaluateBounds(variables, bounds) {\r\n        const ya = this.evaluator('y', variables, { x: bounds.xMin });\r\n        const yb = this.evaluator('y', variables, { x: bounds.xMax });\r\n        const xa = this.evaluator('x', variables, { y: bounds.yMin });\r\n        const xb = this.evaluator('x', variables, { y: bounds.yMax });\r\n        return { xa, xb, ya, yb };\r\n    }\r\n    getBoundPoints(domains, evaluations) {\r\n        const xPoints = [\r\n            { x: domains.xMin, y: evaluations.ya.min },\r\n            { x: domains.xMin, y: evaluations.ya.max },\r\n            { x: domains.xMax, y: evaluations.yb.min },\r\n            { x: domains.xMax, y: evaluations.yb.max },\r\n        ].filter((point) => Number.isFinite(point.x.value));\r\n        const yPoints = [\r\n            { x: evaluations.xa.min, y: domains.yMin },\r\n            { x: evaluations.xa.max, y: domains.yMin },\r\n            { x: evaluations.xb.min, y: domains.yMax },\r\n            { x: evaluations.xb.max, y: domains.yMax },\r\n        ].filter((point) => Number.isFinite(point.y.value));\r\n        return [...xPoints, ...yPoints];\r\n    }\r\n    getBounds() {\r\n        const { graphId } = this;\r\n        let { xMin, yMin, xMax, yMax } = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        const { specialPoints, cropPoints } = this.getEndpoints();\r\n        const points = [...specialPoints, ...cropPoints];\r\n        const innerPoints = points.filter((point) => (xMin.value <= point.x.value)\r\n            && (point.x.value <= xMax.value)\r\n            && (yMin.value <= point.y.value)\r\n            && (point.y.value <= yMax.value));\r\n        const x1 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(innerPoints.map((point) => point.x));\r\n        const x2 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(innerPoints.map((point) => point.x));\r\n        const y1 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(innerPoints.map((point) => point.y));\r\n        const y2 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(innerPoints.map((point) => point.y));\r\n        const x1s = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(specialPoints.map((point) => point.x));\r\n        const x2s = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(specialPoints.map((point) => point.x));\r\n        const y1s = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(specialPoints.map((point) => point.y));\r\n        const y2s = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(specialPoints.map((point) => point.y));\r\n        xMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([xMin, x1]);\r\n        yMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([yMin, y1]);\r\n        xMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([xMax, x2]);\r\n        yMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([yMax, y2]);\r\n        const cropType = this.getCropType();\r\n        const { xMin: xMinDomain, yMin: yMinDomain, xMax: xMaxDomain, yMax: yMaxDomain, } = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(this.graphId);\r\n        xMin = parseFloat(xMinDomain.value.toFixed(4)) < parseFloat(xMin.value.toFixed(4)) ? xMin : xMinDomain;\r\n        xMax = parseFloat(xMaxDomain.value.toFixed(4)) > parseFloat(xMax.value.toFixed(4)) ? xMax : xMaxDomain;\r\n        yMin = parseFloat(yMinDomain.value.toFixed(4)) < parseFloat(yMin.value.toFixed(4)) ? yMin : yMinDomain;\r\n        yMax = parseFloat(yMaxDomain.value.toFixed(4)) > parseFloat(yMax.value.toFixed(4)) ? yMax : yMaxDomain;\r\n        xMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.hasXDomain)(cropType) ? xMin : _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(-Infinity);\r\n        xMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.hasXDomain)(cropType) ? xMax : _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(Infinity);\r\n        yMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.hasYDomain)(cropType) ? yMin : _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(-Infinity);\r\n        yMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.hasYDomain)(cropType) ? yMax : _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(Infinity);\r\n        return { xMin, yMin, xMax, yMax };\r\n    }\r\n    getCropType() {\r\n        return 3\r\n            - (this.latex.includes('\\\\left\\\\{x') ? 2 : 0)\r\n            - (this.latex.includes('\\\\left\\\\{y') ? 1 : 0);\r\n    }\r\n    convertToYRelevant() {\r\n        const relevantIndices = this.getRelevant('y');\r\n        const converted = this.convertToY();\r\n        return relevantIndices.map((index) => converted[index]);\r\n    }\r\n    convertToXRelevant() {\r\n        const relevantIndices = this.getRelevant('x');\r\n        const converted = this.convertToX();\r\n        return relevantIndices.map((index) => converted[index]);\r\n    }\r\n    evaluator(axis, _variables, input) {\r\n        const variables = {};\r\n        const inputAxis = axis === 'x' ? 'y' : 'x';\r\n        Object.entries(_variables)\r\n            .forEach(([key, value]) => {\r\n            variables[key] = value.value;\r\n        });\r\n        variables[inputAxis] = input[inputAxis].value;\r\n        const values = [];\r\n        const expressions = axis === 'x' ? _constants__WEBPACK_IMPORTED_MODULE_0__.xExpressionsEval[this.graphType] : _constants__WEBPACK_IMPORTED_MODULE_0__.yExpressionsEval[this.graphType];\r\n        for (let i = 0; i < expressions.length; i++) {\r\n            let expression = expressions[i].replaceAll('_{1}', '');\r\n            expression = expression.replaceAll('}\\\\sqrt{', '}\\\\cdot\\\\sqrt{');\r\n            const value = evaluatex(expression, variables)();\r\n            if (value) {\r\n                values.push(_index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`f_{${this.graphId}${axis}${String.fromCharCode(97 + i)}}(${input[inputAxis].reference})`, value));\r\n            }\r\n        }\r\n        return { min: (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(values), max: (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(values) };\r\n    }\r\n    getRealBounds() {\r\n        const { graphId } = this;\r\n        let { xMin, yMin, xMax, yMax } = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let [newXMin, newXMax, newYMin, newYMax] = [\r\n            _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, -Infinity), _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity), _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, -Infinity), _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity),\r\n        ];\r\n        const { specialPoints, cropPoints } = this.getEndpoints();\r\n        const points = [...specialPoints, ...cropPoints];\r\n        const innerPoints = points.filter((point) => (xMin.value <= point.x.value)\r\n            && (point.x.value <= xMax.value)\r\n            && (yMin.value <= point.y.value)\r\n            && (point.y.value <= yMax.value));\r\n        const x1 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(innerPoints.map((point) => point.x));\r\n        const x2 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(innerPoints.map((point) => point.x));\r\n        const y1 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)(innerPoints.map((point) => point.y));\r\n        const y2 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)(innerPoints.map((point) => point.y));\r\n        if (y1 !== undefined && y2 !== undefined) {\r\n            newYMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([y1, newYMin]);\r\n            newYMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([y2, newYMax]);\r\n        }\r\n        if (x1 !== undefined && x2 !== undefined) {\r\n            newXMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([x1, newXMin]);\r\n            newXMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([x2, newXMax]);\r\n        }\r\n        xMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([xMin, newXMin]);\r\n        yMin = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.maxLinkedVariable)([yMin, newYMin]);\r\n        xMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([xMax, newXMax]);\r\n        yMax = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minLinkedVariable)([yMax, newYMax]);\r\n        return { xMin, yMin, xMax, yMax };\r\n    }\r\n    convertToY() {\r\n        const { graphType } = this;\r\n        const latexList = _constants__WEBPACK_IMPORTED_MODULE_0__.yExpressions[graphType];\r\n        const newLatexList = [];\r\n        for (let i = 0; i < latexList.length; i++) {\r\n            const latex = latexList[i].replaceAll('_{1', `_{${this.graphId}`);\r\n            newLatexList.push(latex);\r\n        }\r\n        return newLatexList;\r\n    }\r\n    convertToX() {\r\n        const { graphType } = this;\r\n        const latexList = _constants__WEBPACK_IMPORTED_MODULE_0__.xExpressions[graphType];\r\n        const newLatexList = [];\r\n        for (let i = 0; i < latexList.length; i++) {\r\n            const latex = latexList[i].replaceAll('_{1', `_{${this.graphId}`);\r\n            newLatexList.push(latex);\r\n        }\r\n        return newLatexList;\r\n    }\r\n    getClosestEndpoint(point) {\r\n        const endpoints = this.getEndpoints().cropPoints;\r\n        const currEndPoint = {\r\n            endpoint: null,\r\n            currMinSqrMagnitude: Infinity,\r\n        };\r\n        endpoints.forEach((endpoint) => {\r\n            const sqrMagnitude = (endpoint.x.value - point.x) ** 2 + (endpoint.y.value - point.y) ** 2;\r\n            if (sqrMagnitude < currEndPoint.currMinSqrMagnitude) {\r\n                currEndPoint.endpoint = endpoint;\r\n                currEndPoint.currMinSqrMagnitude = sqrMagnitude;\r\n            }\r\n        });\r\n        if (currEndPoint.endpoint) {\r\n            return currEndPoint.endpoint;\r\n        }\r\n        throw Error('No endpoint found');\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/Graph.ts?");

/***/ }),

/***/ "./src/MyCalc.ts":
/*!***********************!*\
  !*** ./src/MyCalc.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MyCalcClass\": () => (/* binding */ MyCalcClass)\n/* harmony export */ });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib */ \"./src/lib.ts\");\n\r\nclass MyCalcClass {\r\n    constructor(_Calc) {\r\n        this.Calc = _Calc;\r\n        this.Controller = _Calc.controller;\r\n        this.logicalExpressions = {};\r\n        this.usedId = [];\r\n        this.globalVariablesObject = {};\r\n        this.globalFunctionsObject = {};\r\n        this.linkedVariables = {};\r\n        this.update();\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.getExpressions().forEach((expression) => {\r\n            if (expression.id.includes('_')) {\r\n                const split = expression.id.split('_');\r\n                if (split[0] === 'final') {\r\n                    this.usedId.push(parseInt(split[1]));\r\n                }\r\n                else if (/\\d+/.test(split[0])) {\r\n                    const matches = [...expression.latex.matchAll(_lib__WEBPACK_IMPORTED_MODULE_0__.functionRegex)];\r\n                    if (matches.length > 0) { // Is a function\r\n                        this.globalFunctionsObject[matches[0][1]] = {\r\n                            id: expression.id,\r\n                            args: matches[0][2].split(','),\r\n                            definition: expression.latex.split('=')[1],\r\n                        };\r\n                    }\r\n                    if (expression.id.endsWith('_0')) {\r\n                        this.usedId.push(parseInt(split[0]));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    update() {\r\n        const expressions = this.getExpressions();\r\n        const expressionsToSet = [];\r\n        const maxNumber = {};\r\n        expressions.forEach((_expression) => {\r\n            const expression = _expression;\r\n            if (expression.latex) {\r\n                if (expression.latex.includes('e_{')) {\r\n                    expression.latex = expression.latex.replace('e_{', 'q_{');\r\n                    expressionsToSet.push(expression);\r\n                }\r\n                if (expression.id.includes('_')) {\r\n                    const split = expression.id.split('_');\r\n                    if (!['final', 'shade'].includes(split[0])) {\r\n                        const id = parseInt(split[0]);\r\n                        const num = parseInt(split[1]);\r\n                        if (id in maxNumber) {\r\n                            if (num > maxNumber[id]) {\r\n                                maxNumber[id] = num;\r\n                            }\r\n                        }\r\n                        else {\r\n                            maxNumber[id] = num;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.updateExpressions(expressionsToSet);\r\n    }\r\n    getSelected() {\r\n        if (this.selectedExpressionId) {\r\n            return this.getExpression(this.selectedExpressionId);\r\n        }\r\n        return undefined;\r\n    }\r\n    getExpression(_id) {\r\n        if (Object.keys(this.logicalExpressions).includes(_id)) {\r\n            return this.logicalExpressions[_id];\r\n        }\r\n        else {\r\n            const expression = this.Controller.getItemModel(_id);\r\n            if (expression) {\r\n                return expression;\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n    getExpressions() {\r\n        return this.Calc.getExpressions();\r\n    }\r\n    setLogicalExpression(expression) {\r\n        if (!Object.keys(this.logicalExpressions).includes(expression.id)) {\r\n            this.logicalExpressions[expression.id] = expression;\r\n        }\r\n    }\r\n    get expressionAnalysis() {\r\n        return this.Calc.expressionAnalysis;\r\n    }\r\n    get selectedExpressionId() {\r\n        return this.Calc.selectedExpressionId;\r\n    }\r\n    set selectedExpressionId(id) {\r\n        this.Controller.dispatch({ type: \"set-selected-id\", id: id });\r\n    }\r\n    removeExpressions(expressions) {\r\n        expressions.forEach((expression) => {\r\n            const split = expression.id.split('_');\r\n            if (['final', 'shade'].includes(split[0])) {\r\n                const id = parseInt(split[1]);\r\n                if (this.usedId.includes(id)) {\r\n                    this.usedId = this.usedId.filter(_id => _id !== id);\r\n                }\r\n            }\r\n            else {\r\n                const id = parseInt(split[0]);\r\n                if (this.usedId.includes(id)) {\r\n                    this.usedId = this.usedId.filter(_id => _id !== id);\r\n                }\r\n            }\r\n        });\r\n        this.Calc.removeExpressions(expressions);\r\n    }\r\n    removeExpression(expression) {\r\n        if (this.isLogical(expression.id)) {\r\n            delete this.logicalExpressions[expression.id];\r\n        }\r\n        else {\r\n            this.Calc.removeExpression(expression);\r\n            const split = expression.id.split('_');\r\n            if (['final', 'shade'].includes(split[0])) {\r\n                const id = parseInt(split[1]);\r\n                this.usedId = this.usedId.filter(_id => _id !== id);\r\n            }\r\n            else {\r\n                const id = parseInt(split[0]);\r\n                this.usedId = this.usedId.filter(_id => _id !== id);\r\n            }\r\n        }\r\n    }\r\n    removeExpressionById(expressionId) {\r\n        if (this.isLogical(expressionId)) {\r\n            delete this.logicalExpressions[expressionId];\r\n        }\r\n        else {\r\n            const expression = this.getExpression(expressionId);\r\n            if (expression) {\r\n                this.removeExpression(expression);\r\n            }\r\n        }\r\n    }\r\n    newGraph(id, expressions) {\r\n        if (this.usedId.includes(id)) {\r\n            throw Error('id already in expressions list');\r\n        }\r\n        else {\r\n            this.usedId.push(id);\r\n            this.setExpressions(expressions);\r\n        }\r\n    }\r\n    setExpressions(expressions) {\r\n        const expressionsToBeCreated = [];\r\n        expressions.forEach((expression) => {\r\n            if (this.getExpression(expression.id)) {\r\n                throw Error(\"Tried to update create existent expression\");\r\n            }\r\n            else {\r\n                expressionsToBeCreated.push(expression);\r\n            }\r\n        });\r\n        this.Calc.setExpressions(expressionsToBeCreated);\r\n    }\r\n    updateExpressions(expressions) {\r\n        const expressionsToBeUpdated = [];\r\n        expressions.forEach((expression) => {\r\n            if (this.getExpression(expression.id)) {\r\n                expressionsToBeUpdated.push(expression);\r\n            }\r\n            else {\r\n                throw Error(\"Tried to update non-existent expression\");\r\n            }\r\n        });\r\n        this.Calc.setExpressions(expressionsToBeUpdated);\r\n    }\r\n    updateExpression(expression, _logical) {\r\n        const logical = !!_logical;\r\n        if (logical) {\r\n            this.setLogicalExpression(expression);\r\n        }\r\n        else {\r\n            this.Calc.setExpression(expression);\r\n        }\r\n    }\r\n    setExpression(expression, _logical) {\r\n        const logical = !!_logical;\r\n        if (logical) {\r\n            this.setLogicalExpression(expression);\r\n        }\r\n        else {\r\n            this.Calc.setExpression(expression);\r\n        }\r\n    }\r\n    getOffset() {\r\n        const graphContainer = document.querySelector('#graph-container');\r\n        const graphContainerRect = graphContainer.getBoundingClientRect();\r\n        return { x: graphContainerRect.left, y: graphContainerRect.top };\r\n    }\r\n    pixelsToMath(point) {\r\n        const { x: xOffset, y: yOffset } = this.getOffset();\r\n        return this.Calc.pixelsToMath({\r\n            x: point.x - xOffset,\r\n            y: point.y - yOffset,\r\n        });\r\n    }\r\n    get graphpaperBounds() {\r\n        return this.Calc.graphpaperBounds;\r\n    }\r\n    getState() {\r\n        return this.Calc.getState();\r\n    }\r\n    setState(state) {\r\n        return this.Calc.setState(state);\r\n    }\r\n    getItemCount() {\r\n        return this.Controller.getItemCount();\r\n    }\r\n    isLogical(id) {\r\n        return Object.keys(this.logicalExpressions).includes(id);\r\n    }\r\n    dependsOn(graphId) {\r\n        const expressionList = [];\r\n        const allExpressions = this.getExpressions();\r\n        for (let i = 0; i < allExpressions.length; i++) {\r\n            const expression = allExpressions[i];\r\n            if (expression.latex) {\r\n                if ((0,_lib__WEBPACK_IMPORTED_MODULE_0__.usesVariable)(expression.latex, graphId)) {\r\n                    expressionList.push(expression);\r\n                }\r\n            }\r\n        }\r\n        return expressionList;\r\n    }\r\n    table(points) {\r\n        const table = {\r\n            id: \"reg_table\",\r\n            type: \"table\",\r\n            columns: [\r\n                {\r\n                    latex: \"r_{x}\",\r\n                    color: \"BLACK\",\r\n                    id: \"reg_1\",\r\n                    values: points.map((point) => parseFloat(point.x.toFixed(4)))\r\n                },\r\n                {\r\n                    latex: \"r_{y}\",\r\n                    color: \"BLACK\",\r\n                    id: \"reg_2\",\r\n                    values: points.map((point) => parseFloat(point.y.toFixed(4)))\r\n                }\r\n            ]\r\n        };\r\n        return table;\r\n    }\r\n    regression(points) {\r\n        const newExp = {\r\n            reg: \"r_{A}r_{x}^{2}+r_{C}r_{x}^{2}+r_{D}r_{x}+r_{E}r_{y}+r_{F}\\\\sim0\\\\left\\{\\\\frac{r_{F}^{2}}{r_{A}r_{C}}>1\\\\right\\\\}\",\r\n            reg_exp: \"r_{A}r_{x}^{2}+r_{C}r_{x}^{2}+r_{D}r_{x}+r_{E}r_{y}+r_{F}\\\\sim0\\\\left\\\\{\\\\frac{r_{F}^{2}}{r_{A}r_{C}}>1\\\\right\\\\}\"\r\n        };\r\n        this.setExpression(this.table(points));\r\n    }\r\n    linkedVariable(reference, _value) {\r\n        if (typeof reference === 'number') {\r\n            return new _lib__WEBPACK_IMPORTED_MODULE_0__.LinkedVariable(reference, _value);\r\n        }\r\n        else {\r\n            if (reference) {\r\n                if (reference in this.linkedVariables) {\r\n                    if (_value) {\r\n                        this.linkedVariables[reference].value = _value;\r\n                    }\r\n                    return this.linkedVariables[reference];\r\n                }\r\n                else {\r\n                    return new _lib__WEBPACK_IMPORTED_MODULE_0__.LinkedVariable(reference, _value);\r\n                }\r\n            }\r\n            else {\r\n                return new _lib__WEBPACK_IMPORTED_MODULE_0__.LinkedVariable(reference, _value);\r\n            }\r\n        }\r\n    }\r\n    addLinkedVariable(linkedVariable) {\r\n        if (linkedVariable.reference) {\r\n            if (linkedVariable.reference in this.linkedVariables) {\r\n                this.linkedVariables[linkedVariable.reference] = linkedVariable;\r\n            }\r\n            else {\r\n                this.linkedVariables[linkedVariable.reference] = linkedVariable;\r\n            }\r\n        }\r\n    }\r\n    updateLinkedVariables() {\r\n        Object.values(this.linkedVariables).forEach(linkedVariable => {\r\n            if (linkedVariable.reference && !linkedVariable.alwaysClean) {\r\n                this.linkedVariables[linkedVariable.reference].clean = false;\r\n            }\r\n        });\r\n    }\r\n    getConicById(id) {\r\n        let graph = this.getExpression(`final_${id}`);\r\n        if (!graph) {\r\n            graph = this.getExpression(`${id}_0`);\r\n            if (!graph) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return graph;\r\n    }\r\n    intersectConicsById(a, b) {\r\n        const aExpression = this.getConicById(a);\r\n        const bExpression = this.getConicById(b);\r\n        if (aExpression && bExpression) {\r\n            const aGraph = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(aExpression);\r\n            const bGraph = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(bExpression);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.intersectConics)(aGraph, bGraph);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/MyCalc.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultExpressionFormat\": () => (/* binding */ defaultExpressionFormat),\n/* harmony export */   \"yExpressions\": () => (/* binding */ yExpressions),\n/* harmony export */   \"xExpressions\": () => (/* binding */ xExpressions),\n/* harmony export */   \"yExpressionsEval\": () => (/* binding */ yExpressionsEval),\n/* harmony export */   \"xExpressionsEval\": () => (/* binding */ xExpressionsEval),\n/* harmony export */   \"expressionFormat\": () => (/* binding */ expressionFormat),\n/* harmony export */   \"expressionNames\": () => (/* binding */ expressionNames),\n/* harmony export */   \"baseExpressionFormat\": () => (/* binding */ baseExpressionFormat)\n/* harmony export */ });\nconst defaultExpressionFormat = [\r\n    { latex: '\\\\left(x_{1cb},y_{1ca}+\\\\left(y_{1cb}-y_{1ca}\\\\right)t\\\\right)', types: ['segment', 'delete', 'hide', 'y'] },\r\n    { latex: '\\\\left(x_{1ca},y_{1ca}+\\\\left(y_{1cb}-y_{1ca}\\\\right)t\\\\right)', types: ['segment', 'delete', 'hide', 'y'] },\r\n    { latex: '\\\\left(x_{1ca}+\\\\left(x_{1cb}-x_{1ca}\\\\right)t,y_{1ca}\\\\right)', types: ['segment', 'delete', 'hide', 'x'] },\r\n    { latex: '\\\\left(x_{1ca}+\\\\left(x_{1cb}-x_{1ca}\\\\right)t,y_{1cb}\\\\right)', types: ['segment', 'delete', 'hide', 'x'] },\r\n    { latex: '\\\\left(x_{1cam}+\\\\operatorname{sgn}(h_{1})\\\\operatorname{abs}(h_{1}),y_{1cam}+\\\\operatorname{sgn}(k_{1})\\\\operatorname{abs}(k_{1})\\\\right)', types: ['point', 'delete', 'hide', 'xy'] },\r\n    { latex: '\\\\left(x_{1cbm}+\\\\operatorname{sgn}(h_{1})\\\\operatorname{abs}(h_{1}),y_{1cbm}+\\\\operatorname{sgn}(k_{1})\\\\operatorname{abs}(k_{1})\\\\right)', types: ['point', 'delete', 'hide', 'xy'] },\r\n    { latex: 'x_{1ca}=x_{1cam}+h_{1}', types: ['helper_var', 'delete'] },\r\n    { latex: 'y_{1ca}=y_{1cam}+k_{1}', types: ['helper_var', 'delete'] },\r\n    { latex: 'x_{1cb}=x_{1cbm}+h_{1}', types: ['helper_var', 'delete'] },\r\n    { latex: 'y_{1cb}=y_{1cbm}+k_{1}', types: ['helper_var', 'delete'] },\r\n    { latex: 'x_{1cam}=0', types: ['var', 'delete'] },\r\n    { latex: 'y_{1cam}=0', types: ['var', 'delete'] },\r\n    { latex: 'x_{1cbm}=0', types: ['var', 'delete'] },\r\n    { latex: 'y_{1cbm}=0', types: ['var', 'delete'] },\r\n];\r\nconst yExpressions = [\r\n    ['k_{1}-\\\\sqrt{r_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\sqrt{r_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['k_{1}-\\\\sqrt{4c_{1}\\\\left(x-h_{1}\\\\right)}', 'k_{1}+\\\\sqrt{4c_{1}\\\\left(x-h_{1}\\\\right)}'],\r\n    ['k_{1}+\\\\frac{\\\\left(x-h_{1}\\\\right)^{2}}{4c_{1}}'],\r\n    ['k_{1}-\\\\frac{b_{1}}{a_{1}}\\\\sqrt{a_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\frac{b_{1}}{a_{1}}\\\\sqrt{a_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['k_{1}-\\\\frac{b_{1}}{a_{1}}\\\\sqrt{\\\\left(x-h_{1}\\\\right)^{2}-a_{1}^{2}}', 'k_{1}+\\\\frac{b_{1}}{a_{1}}\\\\sqrt{\\\\left(x-h_{1}\\\\right)^{2}-a_{1}^{2}}'],\r\n    ['k_{1}-\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}+\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}+\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['m_{1}x+b_{1}'],\r\n];\r\nconst xExpressions = [\r\n    ['h_{1}-\\\\sqrt{r_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\sqrt{r_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}+\\\\frac{\\\\left(y-k_{1}\\\\right)^{2}}{4c_{1}}'],\r\n    ['h_{1}-\\\\sqrt{4c_{1}\\\\left(y-k_{1}\\\\right)}', 'h_{1}+\\\\sqrt{4c_{1}\\\\left(y-k_{1}\\\\right)}'],\r\n    ['h_{1}-\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}-\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}+\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\frac{a_{1}}{b_{1}}\\\\sqrt{b_{1}^{2}+\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}-\\\\frac{b_{1}}{a_{1}}\\\\sqrt{\\\\left(y-k_{1}\\\\right)^{2}-a_{1}^{2}}', 'h_{1}+\\\\frac{b_{1}}{a_{1}}\\\\sqrt{\\\\left(y-k_{1}\\\\right)^{2}-a_{1}^{2}}'],\r\n    ['\\\\frac{\\\\left(y-b_{1}\\\\right)}{m_{1}}'],\r\n];\r\nconst yExpressionsEval = [\r\n    ['k_{1}-\\\\sqrt{r_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\sqrt{r_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['k_{1}-\\\\sqrt{4c_{1}\\\\left(x-h_{1}\\\\right)}', 'k_{1}+\\\\sqrt{4c_{1}\\\\left(x-h_{1}\\\\right)}'],\r\n    ['k_{1}+\\\\frac{\\\\left(x-h_{1}\\\\right)^{2}}{4c_{1}}'],\r\n    ['k_{1}-\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{a_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{a_{1}^{2}-\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['k_{1}-\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{\\\\left(x-h_{1}\\\\right)^{2}-a_{1}^{2}}', 'k_{1}+\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{\\\\left(x-h_{1}\\\\right)^{2}-a_{1}^{2}}'],\r\n    ['k_{1}-\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}+\\\\left(x-h_{1}\\\\right)^{2}}', 'k_{1}+\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}+\\\\left(x-h_{1}\\\\right)^{2}}'],\r\n    ['m_{1}\\\\cdot x+b_{1}'],\r\n];\r\nconst xExpressionsEval = [\r\n    ['h_{1}-\\\\sqrt{r_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\sqrt{r_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}+\\\\frac{\\\\left(y-k_{1}\\\\right)^{2}}{4c_{1}}'],\r\n    ['h_{1}-\\\\sqrt{4c_{1}\\\\left(y-k_{1}\\\\right)}', 'h_{1}+\\\\sqrt{4c_{1}\\\\left(y-k_{1}\\\\right)}'],\r\n    ['h_{1}-\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}-\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}-\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}+\\\\left(y-k_{1}\\\\right)^{2}}', 'h_{1}+\\\\frac{a_{1}}{b_{1}}\\\\cdot\\\\sqrt{b_{1}^{2}+\\\\left(y-k_{1}\\\\right)^{2}}'],\r\n    ['h_{1}-\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{\\\\left(y-k_{1}\\\\right)^{2}-a_{1}^{2}}', 'h_{1}+\\\\frac{b_{1}}{a_{1}}\\\\cdot\\\\sqrt{\\\\left(y-k_{1}\\\\right)^{2}-a_{1}^{2}}'],\r\n    ['\\\\frac{\\\\left(y-b_{1}\\\\right)}{m_{1}}'],\r\n];\r\nconst expressionFormat = [\r\n    [\r\n        { latex: '\\\\left(x-h_{1}\\\\right)^{2}+\\\\left(y-k_{1}\\\\right)^{2}=r_{1}^{2}', types: ['graph'], name: 'graph' },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+a_{1},k_{1}+b_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'r_{1}=\\\\sqrt{a_{1}^{2}+b_{1}^{2}}', types: ['helper_var'], name: 'r' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'a_{1}=1', types: ['var'], name: 'a' },\r\n        { latex: 'b_{1}=0', types: ['var'], name: 'b' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[0].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[0].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: '\\\\left(y-k_{1}\\\\right)^{2}=4c_{1}\\\\left(x-h_{1}\\\\right)', types: ['graph'] },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+d_{1},k_{1}+q_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'q_{1}=1', types: ['var'], name: 'e' },\r\n        { latex: 'd_{1}=1', types: ['var'], name: 'd' },\r\n        { latex: 'c_{1}=\\\\frac{q_{1}^{2}}{4d_{1}}', types: ['helper_var'], name: 'c' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[1].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[1].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: '\\\\left(x-h_{1}\\\\right)^{2}=4c_{1}\\\\left(y-k_{1}\\\\right)', types: ['graph'] },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+q_{1},k_{1}+d_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'q_{1}=1', types: ['var'], name: 'e' },\r\n        { latex: 'd_{1}=1', types: ['var'], name: 'd' },\r\n        { latex: 'c_{1}=\\\\frac{q_{1}^{2}}{4d_{1}}', types: ['helper_var'], name: 'c' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[2].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[2].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: '\\\\frac{\\\\left(x-h_{1}\\\\right)^{2}}{a_{1}^{2}}+\\\\frac{\\\\left(y-k_{1}\\\\right)^{2}}{b_{1}^{2}}=1', types: ['graph'] },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+a_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1},k_{1}+b_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'a_{1}=1', types: ['var'], name: 'a' },\r\n        { latex: 'b_{1}=1', types: ['var'], name: 'b' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[3].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[3].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: '\\\\frac{\\\\left(x-h_{1}\\\\right)^{2}}{a_{1}^{2}}-\\\\frac{\\\\left(y-k_{1}\\\\right)^{2}}{b_{1}^{2}}=1', types: ['graph'] },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+a_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+\\\\sqrt{2}a_{1},k_{1}+b_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'a_{1}=1', types: ['var'], name: 'a' },\r\n        { latex: 'b_{1}=1', types: ['var'], name: 'b' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[4].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[4].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: '\\\\frac{\\\\left(y-k_{1}\\\\right)^{2}}{a_{1}^{2}}-\\\\frac{\\\\left(x-h_{1}\\\\right)^{2}}{b_{1}^{2}}=1', types: ['graph'] },\r\n        { latex: '\\\\left(h_{1},k_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1},k_{1}+a_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(h_{1}+b_{1},k_{1}+\\\\sqrt{2}a_{1}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'k_{1}=0', types: ['var'], name: 'k' },\r\n        { latex: 'h_{1}=0', types: ['var'], name: 'h' },\r\n        { latex: 'a_{1}=1', types: ['var'], name: 'a' },\r\n        { latex: 'b_{1}=1', types: ['var'], name: 'b' },\r\n        ...defaultExpressionFormat,\r\n        ...yExpressions[5].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[5].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n    ],\r\n    [\r\n        { latex: 'y=m_{1}x+b_{1}\\\\left\\\\{x_{1ca}<x<x_{1cb}\\\\right\\\\}', types: ['graph'] },\r\n        { latex: '\\\\left(x_{1a},y_{1a}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: '\\\\left(x_{1b},y_{1b}\\\\right)', types: ['point', 'hide'] },\r\n        { latex: 'x_{1ca}=\\\\min\\\\left(x_{1a},x_{1b}\\\\right)', types: ['helper_var'] },\r\n        { latex: 'x_{1cb}=\\\\max\\\\left(x_{1a},x_{1b}\\\\right)', types: ['helper_var'] },\r\n        { latex: 'm_{1}=\\\\frac{\\\\left(y_{1b}-y_{1a}\\\\right)}{\\\\left(x_{1b}-x_{1a}\\\\right)}', types: ['helper_var'] },\r\n        { latex: 'b_{1}=y_{1a}-\\\\frac{\\\\left(y_{1b}-y_{1a}\\\\right)x_{1a}}{\\\\left(x_{1b}-x_{1a}\\\\right)}', types: ['helper_var'] },\r\n        { latex: 'y_{1a}=0', types: ['var'], name: 'ya' },\r\n        { latex: 'y_{1b}=1', types: ['var'], name: 'yb' },\r\n        { latex: 'x_{1a}=0', types: ['var'], name: 'xa' },\r\n        { latex: 'x_{1b}=1', types: ['var'], name: 'xb' },\r\n        ...yExpressions[6].map((yExpression, c) => ({ latex: `f_{1y${String.fromCharCode(97 + c)}}(x)=${yExpression}`, types: ['y_expression'], name: `f_{1y${String.fromCharCode(97 + c)}}` })),\r\n        ...xExpressions[6].map((xExpression, c) => ({ latex: `f_{1x${String.fromCharCode(97 + c)}}(y)=${xExpression}`, types: ['x_expression'], name: `f_{1x${String.fromCharCode(97 + c)}}` })),\r\n        { latex: 'y_{1ca}=m_{1}x_{1ca}+b_{1}', types: ['helper_var'] },\r\n        { latex: 'y_{1cb}=m_{1}x_{1cb}+b_{1}', types: ['helper_var'] },\r\n    ],\r\n];\r\nconst expressionNames = expressionFormat.map((expressionList) => {\r\n    const x = {};\r\n    expressionList.forEach((latexExpression, expressionId) => {\r\n        if (latexExpression.name) {\r\n            x[latexExpression.name] = expressionId;\r\n        }\r\n    });\r\n    return x;\r\n});\r\nconst baseExpressionFormat = [];\r\nfor (let i = 0; i < expressionFormat.length; i++) {\r\n    const expression = expressionFormat[i];\r\n    baseExpressionFormat.push(expression[0].latex);\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/constants.ts?");

/***/ }),

/***/ "./src/graphs/Circle.ts":
/*!******************************!*\
  !*** ./src/graphs/Circle.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Circle\": () => (/* binding */ Circle)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass Circle extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 0);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const r = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`r_{${this.graphId}}`);\r\n        const A = 1;\r\n        const C = 1;\r\n        const D = -2 * h;\r\n        const E = -2 * k;\r\n        const F = k ** 2 + h ** 2 - r ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        const r = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`r_{${graphId}}`);\r\n        return { h, k, r };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const { xMin, yMin, xMax, yMax } = this.getBounds();\r\n        const r2 = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`r_{${currId}}`) ** 2;\r\n        latex = latex.replace(`r_{${currId}}^{2}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(r2, 4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = `${latex.split('\\\\left\\\\{')[0]}${(0,_lib__WEBPACK_IMPORTED_MODULE_2__.generateBounds)(xMin, yMin, xMax, yMax).value}`;\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, r } = variables;\r\n        points = [\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}-${r.reference}`), y: k },\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}-${r.reference}`) },\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}+${r.reference}`), y: k },\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}+${r.reference}`) },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            if (h < xMax.value)\r\n                relevantIndices.push(1);\r\n            if (xMin.value < h)\r\n                relevantIndices.push(0);\r\n        }\r\n        if (axis === 'y') {\r\n            if (k < yMax.value)\r\n                relevantIndices.push(1);\r\n            if (yMin.value < k)\r\n                relevantIndices.push(0);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [h, k, r] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        r = Math.sqrt(Math.abs(r));\r\n        return { h, k, r };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { h, k, r } = variables;\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${graphId}}`, r);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${graphId}}`, '0');\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`r_{${graphId}}`, r);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${id}}`, size * 0.3);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${id}}`, 0);\r\n    }\r\n}\r\nCircle.hasCenter = true;\r\nCircle.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/Circle.ts?");

/***/ }),

/***/ "./src/graphs/Ellipse.ts":
/*!*******************************!*\
  !*** ./src/graphs/Ellipse.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ellipse\": () => (/* binding */ Ellipse)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass Ellipse extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 3);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${this.graphId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${this.graphId}}`);\r\n        const A = b ** 2;\r\n        const C = a ** 2;\r\n        const D = -2 * h * b ** 2;\r\n        const E = -2 * k * a ** 2;\r\n        const F = b ** 2 * h ** 2 + a ** 2 * k ** 2 - a ** 2 * b ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        const a = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`a_{${graphId}}`);\r\n        const b = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`b_{${graphId}}`);\r\n        return { h, k, a, b };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const { xMin, yMin, xMax, yMax } = this.getBounds();\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${currId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${currId}}`);\r\n        const a2 = a ** 2;\r\n        const b2 = b ** 2;\r\n        latex = latex.replace(`a_{${currId}}^{2}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(a2, 4));\r\n        latex = latex.replace(`b_{${currId}}^{2}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(b2, 4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = `${latex.split('\\\\left\\\\{')[0]}${(0,_lib__WEBPACK_IMPORTED_MODULE_2__.generateBounds)(xMin, yMin, xMax, yMax).value}`;\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, a, b } = variables;\r\n        points = [\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}-${a.reference}`), y: k },\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}-${b.reference}`) },\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}+${a.reference}`), y: k },\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}+${b.reference}`) },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            if (h < xMax.value)\r\n                relevantIndices.push(1);\r\n            if (xMin.value < h)\r\n                relevantIndices.push(0);\r\n        }\r\n        if (axis === 'y') {\r\n            if (k < yMax.value)\r\n                relevantIndices.push(1);\r\n            if (yMin.value < k)\r\n                relevantIndices.push(0);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [h, a, k, b] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        a = Math.sqrt(Math.abs(a));\r\n        b = Math.sqrt(Math.abs(b));\r\n        return { h, a, k, b };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { h, k, a, b } = variables;\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${graphId}}`, a);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${graphId}}`, b);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${id}}`, size * 0.3);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${id}}`, size * 0.2);\r\n    }\r\n}\r\nEllipse.hasCenter = true;\r\nEllipse.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/Ellipse.ts?");

/***/ }),

/***/ "./src/graphs/HorizontalHyperbola.ts":
/*!*******************************************!*\
  !*** ./src/graphs/HorizontalHyperbola.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HorizontalHyperbola\": () => (/* binding */ HorizontalHyperbola)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass HorizontalHyperbola extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 4);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${this.graphId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${this.graphId}}`);\r\n        const A = b ** 2;\r\n        const C = -(a ** 2);\r\n        const D = -2 * h * b ** 2;\r\n        const E = 2 * k * a ** 2;\r\n        const F = b ** 2 * h ** 2 - a ** 2 * k ** 2 - a ** 2 * b ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        const a = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`a_{${graphId}}`);\r\n        const b = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`b_{${graphId}}`);\r\n        return { h, k, a, b };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${currId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${currId}}`);\r\n        const a2 = a ** 2;\r\n        const b2 = b ** 2;\r\n        latex = latex.replace(`a_{${currId}}^{2}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(a2, 4));\r\n        latex = latex.replace(`b_{${currId}}^{2}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(b2, 4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, a, b } = variables;\r\n        points = [\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}-${a.reference}`), y: k },\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${h.reference}+${a.reference}`), y: k },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${graphId}}`);\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${graphId}}`);\r\n        // const b = getVariable(`b_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            if (xMax.value < h + a)\r\n                relevantIndices.push(0);\r\n            if (xMin.value > h - a)\r\n                relevantIndices.push(1);\r\n        }\r\n        if (axis === 'y') {\r\n            if (yMax.value < k)\r\n                relevantIndices.push(0);\r\n            if (yMin.value > k)\r\n                relevantIndices.push(1);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [h, a, k, b] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        a = Math.sqrt(Math.abs(a));\r\n        b = Math.sqrt(Math.abs(b));\r\n        return { h, k, a, b };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { h, k, a, b } = variables;\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${graphId}}`, a);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${graphId}}`, b);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${id}}`, size * 0.2);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${id}}`, size * 0.2);\r\n    }\r\n}\r\nHorizontalHyperbola.hasCenter = true;\r\nHorizontalHyperbola.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/HorizontalHyperbola.ts?");

/***/ }),

/***/ "./src/graphs/HorizontalParabola.ts":
/*!******************************************!*\
  !*** ./src/graphs/HorizontalParabola.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HorizontalParabola\": () => (/* binding */ HorizontalParabola)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass HorizontalParabola extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 1);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const c = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`c_{${this.graphId}}`);\r\n        const A = 0;\r\n        const C = 1;\r\n        const D = -4 * c;\r\n        const E = -2 * k;\r\n        const F = 4 * c * h + k ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const c = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`c_{${graphId}}`);\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        return { h, k, c };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const { xMin, yMin, xMax, yMax } = this.getBounds();\r\n        latex = latex.replace(`4c_{${currId}}`, (0,_lib__WEBPACK_IMPORTED_MODULE_2__.simplify)(4 * (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`c_{${currId}}`), 4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = `${latex.split('\\\\left\\\\{')[0]}${(0,_lib__WEBPACK_IMPORTED_MODULE_2__.generateBounds)(xMin, yMin, xMax, yMax).value}`;\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, c } = variables;\r\n        points = [\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity), y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, -Infinity) },\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity), y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity) },\r\n            { x: h, y: k },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            relevantIndices.push(0);\r\n        }\r\n        if (axis === 'y') {\r\n            if (k < yMax.value)\r\n                relevantIndices.push(1);\r\n            if (yMin.value < k)\r\n                relevantIndices.push(0);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [k, c, h] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        c /= 4;\r\n        return { h, k, c };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { k, c, h } = variables;\r\n        const d = Math.sign(c) / 4;\r\n        const e = Math.sqrt(Math.abs(c));\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`d_{${graphId}}`, d);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`q_{${graphId}}`, e);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`c_{${graphId}}`, c);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`q_{${id}}`, size * 0.3);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`d_{${id}}`, size * 0.3);\r\n    }\r\n}\r\nHorizontalParabola.hasCenter = true;\r\nHorizontalParabola.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/HorizontalParabola.ts?");

/***/ }),

/***/ "./src/graphs/LineSegment.ts":
/*!***********************************!*\
  !*** ./src/graphs/LineSegment.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LineSegment\": () => (/* binding */ LineSegment)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass LineSegment extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 6);\r\n    }\r\n    getGeneralForm() {\r\n        const m = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`m_{${this.graphId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${this.graphId}}`);\r\n        const A = 0;\r\n        const C = 0;\r\n        const D = m;\r\n        const E = 0;\r\n        const F = b;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const x1 = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`x_{${graphId}ca}`);\r\n        const x2 = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`x_{${graphId}cb}`);\r\n        const y1 = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`y_{${graphId}ca}`);\r\n        const y2 = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`y_{${graphId}cb}`);\r\n        return { x1, x2, y1, y2 };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        const points = [];\r\n        const variables = this.getConicVariables();\r\n        const { x1, x2, y1, y2 } = variables;\r\n        const xa = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minMax)([x1, x2]);\r\n        const xb = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minMax)([x1, x2]);\r\n        const ya = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minMax)([y1, y2]);\r\n        const yb = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.minMax)([y1, y2]);\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, { xa, xb, ya, yb }),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        relevantIndices.push(0);\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        const [m, b, x1, x2] = variables;\r\n        return { m, b, x1, x2 };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { m, b, x1, x2 } = variables;\r\n        const y1 = m * x1 + b;\r\n        const y2 = m * x2 + b;\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`x_{${graphId}a}`, x1.toString());\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`y_{${graphId}a}`, y1.toString());\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`x_{${graphId}b}`, x2.toString());\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`y_{${graphId}b}`, y2.toString());\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`x_{${id}a}`, expressionPos.x - size * 0.2);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`y_{${id}a}`, expressionPos.y - size * 0.2);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`x_{${id}b}`, expressionPos.x + size * 0.2);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`y_{${id}b}`, expressionPos.y + size * 0.2);\r\n    }\r\n}\r\nLineSegment.hasCenter = false;\r\nLineSegment.hasCrop = false;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/LineSegment.ts?");

/***/ }),

/***/ "./src/graphs/VerticalHyperbola.ts":
/*!*****************************************!*\
  !*** ./src/graphs/VerticalHyperbola.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VerticalHyperbola\": () => (/* binding */ VerticalHyperbola)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass VerticalHyperbola extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 5);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${this.graphId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${this.graphId}}`);\r\n        const A = -(b ** 2);\r\n        const C = a ** 2;\r\n        const D = 2 * h * b ** 2;\r\n        const E = -2 * k * a ** 2;\r\n        const F = a ** 2 * k ** 2 - b ** 2 * h ** 2 - a ** 2 * b ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        const a = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`a_{${graphId}}`);\r\n        const b = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`b_{${graphId}}`);\r\n        return { h, k, a, b };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${currId}}`);\r\n        const b = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`b_{${currId}}`);\r\n        const a2 = a ** 2;\r\n        const b2 = b ** 2;\r\n        latex = latex.replace(`a_{${currId}}^{2}`, a2.toFixed(4));\r\n        latex = latex.replace(`b_{${currId}}^{2}`, b2.toFixed(4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, a, b } = variables;\r\n        points = [\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}-${b.reference}`) },\r\n            { x: h, y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`${k.reference}+${b.reference}`) },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${graphId}}`);\r\n        const a = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`a_{${graphId}}`);\r\n        // const b = getVariable(`b_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            if (yMax.value < h)\r\n                relevantIndices.push(0);\r\n            if (yMin.value > h)\r\n                relevantIndices.push(1);\r\n        }\r\n        if (axis === 'y') {\r\n            if (yMax.value < k + a)\r\n                relevantIndices.push(0);\r\n            if (yMin.value > k - a)\r\n                relevantIndices.push(1);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [k, a, h, b] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        a = Math.sqrt(Math.abs(a));\r\n        b = Math.sqrt(Math.abs(b));\r\n        return { h, k, a, b };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { h, k, a, b } = variables;\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${graphId}}`, a);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${graphId}}`, b);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`a_{${id}}`, size * 0.2);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`b_{${id}}`, size * 0.2);\r\n    }\r\n}\r\nVerticalHyperbola.hasCenter = true;\r\nVerticalHyperbola.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/VerticalHyperbola.ts?");

/***/ }),

/***/ "./src/graphs/VerticalParabola.ts":
/*!****************************************!*\
  !*** ./src/graphs/VerticalParabola.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VerticalParabola\": () => (/* binding */ VerticalParabola)\n/* harmony export */ });\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/lib.ts\");\n\r\n\r\n\r\nclass VerticalParabola extends _Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(expression) {\r\n        super(expression, 2);\r\n    }\r\n    getGeneralForm() {\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${this.graphId}}`);\r\n        const k = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`k_{${this.graphId}}`);\r\n        const c = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`c_{${this.graphId}}`);\r\n        const A = 1;\r\n        const C = 0;\r\n        const D = -2 * h;\r\n        const E = -4 * c;\r\n        const F = 4 * c * k + h ** 2;\r\n        return { A, C, D, E, F };\r\n    }\r\n    getConicVariables() {\r\n        const { graphId } = this;\r\n        const c = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`c_{${graphId}}`);\r\n        const h = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`h_{${graphId}}`);\r\n        const k = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`k_{${graphId}}`);\r\n        return { h, k, c };\r\n    }\r\n    convertToStandard() {\r\n        let { latex } = this;\r\n        const currId = this.graphId;\r\n        const { xMin, yMin, xMax, yMax } = this.getBounds();\r\n        latex = latex.replace(`4c_{${currId}}`, (4 * (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`c_{${currId}}`)).toFixed(4));\r\n        latex = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.substitute)(latex);\r\n        latex = `${latex.split('\\\\left\\\\{')[0]}${(0,_lib__WEBPACK_IMPORTED_MODULE_2__.generateBounds)(xMin, yMin, xMax, yMax).value}`;\r\n        latex = latex.replaceAll('--', '+');\r\n        latex = latex.replaceAll('+-', '-');\r\n        return latex;\r\n    }\r\n    getEndpoints() {\r\n        const { graphId } = this;\r\n        const domains = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getDomains)(graphId);\r\n        let points = [];\r\n        const variables = this.getConicVariables();\r\n        const evaluations = this.evaluateBounds(variables, domains);\r\n        const { h, k, c } = variables;\r\n        points = [\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, -Infinity), y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity) },\r\n            { x: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity), y: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity) },\r\n            { x: h, y: k },\r\n        ];\r\n        return {\r\n            specialPoints: points,\r\n            cropPoints: this.getBoundPoints(domains, evaluations),\r\n        };\r\n    }\r\n    getRelevant(axis) {\r\n        const { graphType, graphId } = this;\r\n        const { xMin, yMin, xMax, yMax } = this.getRealBounds();\r\n        const relevantIndices = [];\r\n        const h = (0,_lib__WEBPACK_IMPORTED_MODULE_2__.getVariable)(`h_{${graphId}}`);\r\n        if (axis === 'x') {\r\n            if (h < xMax.value)\r\n                relevantIndices.push(1);\r\n            if (xMin.value < h)\r\n                relevantIndices.push(0);\r\n        }\r\n        if (axis === 'y') {\r\n            relevantIndices.push(0);\r\n        }\r\n        return relevantIndices;\r\n    }\r\n    static transformVariables(variables) {\r\n        let [h, c, k] = variables;\r\n        h = -h;\r\n        k = -k;\r\n        c /= 4;\r\n        return { h, k, c };\r\n    }\r\n    static setGraphVariables(variables, graphId) {\r\n        const { h, c, k } = variables;\r\n        const d = Math.sign(c) / 4;\r\n        const e = Math.sqrt(Math.abs(c));\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`h_{${graphId}}`, h);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`k_{${graphId}}`, k);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`d_{${graphId}}`, d);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`q_{${graphId}}`, e);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`c_{${graphId}}`, c);\r\n    }\r\n    static setDefault(id, expressionPos, size) {\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`q_{${id}}`, size * 0.3);\r\n        (0,_lib__WEBPACK_IMPORTED_MODULE_2__.setVariable)(`d_{${id}}`, size * 0.3);\r\n    }\r\n}\r\nVerticalParabola.hasCenter = true;\r\nVerticalParabola.hasCrop = true;\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/VerticalParabola.ts?");

/***/ }),

/***/ "./src/index.user.ts":
/*!***************************!*\
  !*** ./src/index.user.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MyCalc\": () => (/* binding */ MyCalc)\n/* harmony export */ });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib */ \"./src/lib.ts\");\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graph */ \"./src/Graph.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _MyCalc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MyCalc */ \"./src/MyCalc.ts\");\n// ==UserScript==\r\n// @name         Precal thing\r\n// @namespace    http://tampermonkey.net/\r\n// @version      0.1.2\r\n// @description  precal thing\r\n// @author       You (not Watanabe)\r\n// @match        https://www.desmos.com/calculator*\r\n// @icon         https://www.google.com/s2/favicons?domain=desmos.com\r\n// @grant        unsafeWindow\r\n// @updateURL    https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js\r\n// @downloadURL  https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js\r\n// @require      https://code.jquery.com/jquery-3.5.1.slim.min.js\r\n// @require      https://cdn.jsdelivr.net/npm/evaluatex@2.2.0/dist/evaluatex.min.js\r\n// ==/UserScript==\r\n\r\n\r\n\r\n\r\nfunction isGraph(expression) {\r\n    return expression.id.endsWith('_0') || expression.id.startsWith('final_');\r\n}\r\nlet MyCalc;\r\nfunction main() {\r\n    MyCalc = new _MyCalc__WEBPACK_IMPORTED_MODULE_3__.MyCalcClass(Calc);\r\n    const selections = [];\r\n    let easySelections = [];\r\n    let lastSelection;\r\n    const graphAbbrev = ['C', 'HP', 'VP', 'E', 'HH', 'VH', 'LS'];\r\n    let easyMode = false;\r\n    let lastSelectedId = '';\r\n    let currentlyPressed = [];\r\n    let idSet = false;\r\n    let shadeIdSet = false;\r\n    let altTime = 0;\r\n    let ctrlTime = 0;\r\n    let expressionPos = { x: 0, y: 0 };\r\n    let globalId = 1;\r\n    let shadeId = 1;\r\n    let currGraphId = 0;\r\n    let centerPoint = {\r\n        x: Infinity,\r\n        y: Infinity,\r\n    };\r\n    let lastCenterPoint = {\r\n        x: Infinity,\r\n        y: Infinity,\r\n    };\r\n    function getShadeId() {\r\n        return Math.max(...MyCalc\r\n            .getExpressions()\r\n            .filter((x) => x.id.startsWith('shade_'))\r\n            .filter((x) => !x.id.includes('folder'))\r\n            .map((x) => parseInt(x.id.split('_')[1], 10)), 0);\r\n    }\r\n    const shadingData = {\r\n        lastUpperBoundary: {\r\n            x: MyCalc.linkedVariable(null, -Infinity),\r\n            y: MyCalc.linkedVariable(null, -Infinity),\r\n        },\r\n        lastLowerBoundary: {\r\n            x: MyCalc.linkedVariable(null, Infinity),\r\n            y: MyCalc.linkedVariable(null, Infinity),\r\n        },\r\n    };\r\n    function updateVariables(filter) {\r\n        Object.keys(MyCalc.globalVariablesObject).forEach(key => {\r\n            delete MyCalc.globalVariablesObject[key];\r\n        });\r\n        let currExpressions = MyCalc.getExpressions();\r\n        if (filter) {\r\n            const idFilter = `${filter}_`;\r\n            currExpressions = currExpressions.filter((x) => x.id.startsWith(idFilter));\r\n        }\r\n        for (let i = 0; i < currExpressions.length; i++) {\r\n            const expression = currExpressions[i];\r\n            const analysis = MyCalc.expressionAnalysis[expression.id];\r\n            if (analysis) {\r\n                if (analysis.evaluation) {\r\n                    if (analysis.evaluation.type === 'Number') {\r\n                        const variable = expression.latex.split('=')[0];\r\n                        if (variable.includes('_') && !(['x', 'y'].includes(variable))) {\r\n                            MyCalc.globalVariablesObject[variable] = analysis.evaluation.value.toString();\r\n                        }\r\n                    }\r\n                }\r\n                else if (expression.latex) {\r\n                    if (expression.latex.includes('f_')) {\r\n                        // console.log(expression);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function intersect(array1, array2) {\r\n        return array1.filter((value) => array2.includes(value));\r\n    }\r\n    function doesIntersect(array1, array2) {\r\n        const filteredArray = intersect(array1, array2);\r\n        return (filteredArray.length > 0);\r\n    }\r\n    function typeFilter(expressionList, graphType, types) {\r\n        const ceTypes = _constants__WEBPACK_IMPORTED_MODULE_2__.expressionFormat[graphType];\r\n        return expressionList.filter((x) => doesIntersect(ceTypes[parseInt(x.id.split('_')[1], 10)].types, types));\r\n    }\r\n    function getDomainsFromLatex(latex) {\r\n        return [\r\n            ...latex.matchAll(/\\\\left\\\\{((?:[-+]?\\d+\\.?\\d*<)?[xy](?:<[-+]?\\d+\\.?\\d*)?)\\\\right\\\\}/g),\r\n        ].map((domain) => domain[1]);\r\n    }\r\n    function transformVariables(graphType, variables) {\r\n        return _lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].transformVariables(variables);\r\n    }\r\n    function toId(expression, _id) {\r\n        return expression.replace(/_\\{\\d+([a-z]*)}/g, `_{${_id}$1}`);\r\n    }\r\n    function createGraphWithBounds(graphId, graphType, variables, _bounds, _logical) {\r\n        const logical = !!_logical;\r\n        let { xMin, yMin, xMax, yMax } = _bounds;\r\n        let cropType = 0;\r\n        // 0 - default (x and y), 1 - x only, 2 - y only, 3 - no crop\r\n        if (!Number.isFinite(xMin) && !Number.isFinite(xMax)) { // Has no x domain\r\n            cropType += 2;\r\n        }\r\n        if (!Number.isFinite(yMin) && !Number.isFinite(yMax)) { // Has no y domain\r\n            cropType += 1;\r\n        }\r\n        let h = 0;\r\n        let k = 0;\r\n        const expression = _constants__WEBPACK_IMPORTED_MODULE_2__.expressionFormat[graphType];\r\n        const expressionsToSet = [];\r\n        _lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].setGraphVariables(variables, graphId);\r\n        if (_lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].hasCenter) {\r\n            ({ h, k } = variables);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cam}`, (xMin - h).toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cam}`, (yMin - k).toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cbm}`, (xMax - h).toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cbm}`, (yMax - k).toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}ca}`, xMin.toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}ca}`, yMin.toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cb}`, xMax.toString());\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cb}`, yMax.toString());\r\n        }\r\n        if (logical) {\r\n            const newExpression = expression[0];\r\n            let newExpressionLatex = newExpression.latex;\r\n            newExpressionLatex = newExpressionLatex.replaceAll('_{1', `_{${graphId}`);\r\n            if (_lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].hasCenter) {\r\n                newExpressionLatex += (0,_lib__WEBPACK_IMPORTED_MODULE_0__.generateBounds)(MyCalc.linkedVariable(`x_{${graphId}ca}`, xMin), MyCalc.linkedVariable(`y_{${graphId}ca}`, yMin), MyCalc.linkedVariable(`x_{${graphId}cb}`, xMax), MyCalc.linkedVariable(`y_{${graphId}cb}`, yMax))\r\n                    .reference;\r\n                const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)({\r\n                    id: `${graphId.toString()}_${0}`,\r\n                    latex: newExpressionLatex,\r\n                    color: 'BLACK',\r\n                    hidden: false,\r\n                    type: 'expression'\r\n                });\r\n                const bounds = conic.getRealBounds();\r\n                if (!Number.isFinite(xMin)) {\r\n                    xMin = bounds.xMin.value - 2;\r\n                }\r\n                if (!Number.isFinite(yMin)) {\r\n                    yMin = bounds.yMin.value - 2;\r\n                }\r\n                if (!Number.isFinite(xMax)) {\r\n                    xMax = bounds.xMax.value + 2;\r\n                }\r\n                if (!Number.isFinite(yMax)) {\r\n                    yMax = bounds.yMax.value + 2;\r\n                }\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cam}`, (xMin - h).toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cam}`, (yMin - k).toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cbm}`, (xMax - h).toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cbm}`, (yMax - k).toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}ca}`, xMin.toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}ca}`, yMin.toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cb}`, xMax.toString());\r\n                (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cb}`, yMax.toString());\r\n                MyCalc.setLogicalExpression({\r\n                    id: `${graphId.toString()}_${0}`,\r\n                    latex: newExpressionLatex,\r\n                    color: 'BLACK',\r\n                    hidden: false,\r\n                    type: 'expression',\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < expression.length; i++) {\r\n                const newExpression = expression[i];\r\n                let newExpressionLatex = newExpression.latex;\r\n                newExpressionLatex = newExpressionLatex.replaceAll('_{1', `_{${graphId}`);\r\n                if (doesIntersect(newExpression.types, ['var'])) {\r\n                    const [variable] = newExpressionLatex.split('=');\r\n                    const value = MyCalc.globalVariablesObject[toId(variable, graphId)];\r\n                    newExpressionLatex = `${variable}=${(0,_lib__WEBPACK_IMPORTED_MODULE_0__.simplify)(parseFloat(value), 4)}`;\r\n                }\r\n                if (graphType !== 6) {\r\n                    if (i === 0) {\r\n                        newExpressionLatex += (0,_lib__WEBPACK_IMPORTED_MODULE_0__.generateBounds)(MyCalc.linkedVariable(`x_{${graphId}ca}`, xMin), MyCalc.linkedVariable(`y_{${graphId}ca}`, yMin), MyCalc.linkedVariable(`x_{${graphId}cb}`, xMax), MyCalc.linkedVariable(`y_{${graphId}cb}`, yMax))\r\n                            .reference;\r\n                        const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)({ id: `${graphId.toString()}_${i}`, latex: newExpressionLatex, color: 'BLACK', hidden: doesIntersect(expression[i].types, ['x_expression', 'y_expression']), type: 'expression' });\r\n                        const bounds = conic.getRealBounds();\r\n                        if (!Number.isFinite(xMin)) {\r\n                            xMin = bounds.xMin.value - 2;\r\n                        }\r\n                        if (!Number.isFinite(yMin)) {\r\n                            yMin = bounds.yMin.value - 2;\r\n                        }\r\n                        if (!Number.isFinite(xMax)) {\r\n                            xMax = bounds.xMax.value + 2;\r\n                        }\r\n                        if (!Number.isFinite(yMax)) {\r\n                            yMax = bounds.yMax.value + 2;\r\n                        }\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cam}`, (xMin - h).toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cam}`, (yMin - k).toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cbm}`, (xMax - h).toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cbm}`, (yMax - k).toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}ca}`, xMin.toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}ca}`, yMin.toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${graphId}cb}`, xMax.toString());\r\n                        (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${graphId}cb}`, yMax.toString());\r\n                    }\r\n                }\r\n                let isHidden = doesIntersect(expression[i].types, ['x_expression', 'y_expression']);\r\n                if (doesIntersect(expression[i].types, ['x']))\r\n                    isHidden = (cropType % 2 === 1);\r\n                if (doesIntersect(expression[i].types, ['y']))\r\n                    isHidden = cropType > 1;\r\n                if (doesIntersect(expression[i].types, ['xy']))\r\n                    isHidden = cropType === 3;\r\n                expressionsToSet.push({\r\n                    id: `${graphId.toString()}_${i}`,\r\n                    latex: newExpressionLatex,\r\n                    color: 'BLACK',\r\n                    hidden: isHidden,\r\n                    type: 'expression',\r\n                });\r\n            }\r\n            MyCalc.setExpressions(expressionsToSet);\r\n        }\r\n    }\r\n    function convertFromStandard(latex, _id, _logical) {\r\n        const logical = !!_logical;\r\n        const graphId = parseInt(_id, 10);\r\n        const regex = [\r\n            /\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\+\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}=([-+]?\\d+\\.?\\d*)/g,\r\n            /\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}=([-+]?\\d+\\.?\\d*)\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)/g,\r\n            /\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}=([-+]?\\d+\\.?\\d*)\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)/g,\r\n            /\\\\frac\\{\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}\\+\\\\frac\\{\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}=1/g,\r\n            /\\\\frac\\{\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}-\\\\frac\\{\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}=1/g,\r\n            /\\\\frac\\{\\\\left\\(y([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}-\\\\frac\\{\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}\\{([-+]?\\d+\\.?\\d*)\\}=1/g,\r\n            /y=([-+]?\\d+\\.?\\d*)x([-+]?\\d+\\.?\\d*)\\\\left\\\\{([-+]?\\d+\\.?\\d*)<x<([-+]?\\d+\\.?\\d*)\\\\right\\\\}/g,\r\n        ];\r\n        const graphType = regex.findIndex((pattern) => pattern.test(latex));\r\n        if (graphType === -1) {\r\n        }\r\n        else {\r\n            const currRegex = regex[graphType];\r\n            const match = latex.match(currRegex);\r\n            if (match) {\r\n                const variables = [...match[0].matchAll(currRegex)][0].slice(1)\r\n                    .map((x) => parseFloat(x));\r\n                const domains = getDomainsFromLatex(latex);\r\n                if (domains) {\r\n                    const bounds = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.parseDomains)(domains);\r\n                    createGraphWithBounds(graphId, graphType, transformVariables(graphType, variables), bounds, logical);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function unfinalizeConvert(expressionId) {\r\n        const regex = /y=([-+]?(?:\\d+\\.?\\d*)?)\\\\sqrt\\{([-+]?\\d+\\.?\\d*)\\+\\\\left\\(x([-+]?\\d+\\.?\\d*)\\\\right\\)\\^\\{2\\}\\}([-+]?\\d+\\.?\\d*)/g;\r\n        const expression = MyCalc.getExpression(expressionId);\r\n        if (expression) {\r\n            const variables = [...expression.latex.matchAll(regex)][0].slice(1);\r\n            if (variables.length) {\r\n                const [_a, _b, _h, _k] = variables;\r\n                const a = parseFloat(_a === '-' ? '-1' : _a);\r\n                const b = parseFloat(_b);\r\n                const h = -parseFloat(_h);\r\n                const k = parseFloat(_k);\r\n                const a2 = b * a ** 2;\r\n                const b2 = b;\r\n                const { xMin: _xMin, xMax: _xMax, yMin: _yMin, yMax: _yMax } = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.parseDomains)(getDomainsFromLatex(expression.latex));\r\n                const xMin = Math.max(-Infinity, _xMin);\r\n                const xMax = Math.min(Infinity, _xMax);\r\n                if (a < 0) { // down\r\n                    const yMin = Math.max(-Infinity, _yMin);\r\n                    const yMax = Math.min(k, _yMax);\r\n                    if (b < 0) { // horizontal hyperbola\r\n                        createGraphWithBounds(globalId, 4, { h, a: Math.sqrt(Math.abs(b2)), k, b: Math.sqrt(Math.abs(a2)) }, { xMin, xMax, yMin, yMax });\r\n                    }\r\n                    else if (b > 0) { // vertical hyperbola\r\n                        createGraphWithBounds(globalId, 5, { h, a: Math.sqrt(Math.abs(a2)), k, b: Math.sqrt(Math.abs(b2)) }, { xMin, xMax, yMin, yMax });\r\n                    }\r\n                }\r\n                else if (a > 0) { // up\r\n                    const yMin = Math.max(k, _yMin);\r\n                    const yMax = Math.min(Infinity, _yMax);\r\n                    if (b < 0) { // horizontal hyperbola\r\n                        createGraphWithBounds(globalId, 4, { h, a: Math.sqrt(Math.abs(b2)), k, b: Math.sqrt(Math.abs(a2)) }, { xMin, xMax, yMin, yMax });\r\n                    }\r\n                    else if (b > 0) { // vertical parabola\r\n                        createGraphWithBounds(globalId, 5, { h, a: Math.sqrt(Math.abs(a2)), k, b: Math.sqrt(Math.abs(b2)) }, { xMin, xMax, yMin, yMax });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function unfinalize(expressionId, _logical) {\r\n        const logical = !!_logical;\r\n        const currId = expressionId.split('_')[1];\r\n        const baseExpression = MyCalc.getExpression(expressionId);\r\n        if (baseExpression) {\r\n            convertFromStandard(baseExpression.latex, currId, logical);\r\n            if (!logical) {\r\n                MyCalc.removeExpressions([baseExpression]);\r\n            }\r\n        }\r\n    }\r\n    function finalize(expressionId) {\r\n        if (MyCalc.isLogical(expressionId)) {\r\n            const graphId = parseInt(expressionId.split(\"_\")[0]);\r\n            const expressionList = MyCalc.dependsOn(graphId).map((_expression) => {\r\n                const expression = _expression;\r\n                expression.latex = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.substituteFromId)(expression.latex, graphId);\r\n                return expression;\r\n            });\r\n            MyCalc.updateExpressions(expressionList);\r\n            MyCalc.removeExpressionById(expressionId);\r\n        }\r\n        else {\r\n            const currId = expressionId.split('_')[0];\r\n            const sameIdItem = MyCalc.getExpression(`final_${currId}`);\r\n            if (sameIdItem) {\r\n                // throw Error('Same id for some reason')\r\n            }\r\n            const idFilter = `${currId}_`;\r\n            const filteredExpressions = MyCalc.getExpressions().filter((expression) => expression.id.startsWith(idFilter));\r\n            const baseExpression = MyCalc.getExpression(`${currId}_0`);\r\n            if (!baseExpression) {\r\n                throw Error(`Cannot find expression with id ${currId}_0`);\r\n            }\r\n            const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(baseExpression);\r\n            const expressionList = [];\r\n            MyCalc.removeExpressions(filteredExpressions);\r\n            const allExpressions = MyCalc.getExpressions();\r\n            for (let i = 0; i < allExpressions.length; i++) {\r\n                const expression = allExpressions[i];\r\n                if (expression.latex) {\r\n                    if ((0,_lib__WEBPACK_IMPORTED_MODULE_0__.usesVariable)(expression.latex, conic.graphId)) {\r\n                        expression.latex = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.substituteFromId)(expression.latex, conic.graphId);\r\n                        expressionList.push(expression);\r\n                    }\r\n                }\r\n            }\r\n            MyCalc.updateExpressions(expressionList);\r\n            conic.latex = conic.convertToStandard();\r\n            if (sameIdItem) {\r\n                conic.id = `final_${globalId}`;\r\n                globalId += 1;\r\n            }\r\n            else {\r\n                conic.id = `final_${conic.graphId}`;\r\n            }\r\n            MyCalc.setExpression(conic);\r\n        }\r\n    }\r\n    function createConic(graphType) {\r\n        const expression = _constants__WEBPACK_IMPORTED_MODULE_2__.expressionFormat[graphType];\r\n        const expressionsToSet = [];\r\n        for (let i = 0; i < expression.length; i++) {\r\n            const newExpression = expression[i];\r\n            let newExpressionLatex = newExpression.latex;\r\n            if (i === 0) {\r\n                if (graphType !== 6) {\r\n                    newExpressionLatex += '\\\\left\\\\{x_{1ca}<x<x_{1cb}\\\\right\\\\}\\\\left\\\\{y_{1ca}<y<y_{1cb}\\\\right\\\\}';\r\n                }\r\n            }\r\n            newExpressionLatex = newExpressionLatex.replace(/_\\{\\d+([a-z]*)}/g, `_{${globalId}$1}`);\r\n            if (doesIntersect(newExpression.types, ['var'])) {\r\n                const [variable] = newExpressionLatex.split('=');\r\n                const value = MyCalc.globalVariablesObject[toId(variable, globalId)];\r\n                newExpressionLatex = `${variable}=${(0,_lib__WEBPACK_IMPORTED_MODULE_0__.simplify)(parseFloat(value), 4)}`;\r\n            }\r\n            const hidden = doesIntersect(expression[i].types, ['x_expression', 'y_expression']);\r\n            if (hidden) {\r\n                const split = newExpressionLatex.split('=');\r\n                const matches = [...split[0].matchAll(_lib__WEBPACK_IMPORTED_MODULE_0__.functionRegex)];\r\n                if (matches.length > 0) {\r\n                    const [full, name, args] = matches[0];\r\n                    MyCalc.globalFunctionsObject[name] = {\r\n                        id: `${globalId.toString()}_${i}`,\r\n                        args: args.split(','),\r\n                        definition: split[1],\r\n                    };\r\n                }\r\n            }\r\n            expressionsToSet.push({ id: `${globalId.toString()}_${i}`,\r\n                latex: newExpressionLatex,\r\n                color: 'BLACK',\r\n                hidden,\r\n                type: 'expression' });\r\n        }\r\n        MyCalc.newGraph(globalId, expressionsToSet);\r\n        globalId += 1;\r\n    }\r\n    function createDefaultConic(graphType) {\r\n        const coordinates = MyCalc.graphpaperBounds.mathCoordinates;\r\n        expressionPos = { x: parseFloat(((coordinates.left + coordinates.right) / 2).toFixed(4)), y: parseFloat(((coordinates.top + coordinates.bottom) / 2).toFixed(4)) };\r\n        const verticalSize = (coordinates.top - coordinates.bottom);\r\n        const horizontalSize = (coordinates.right - coordinates.left);\r\n        const size = Math.min(verticalSize, horizontalSize);\r\n        _lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].setDefault(globalId, expressionPos, size);\r\n        if (_lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].hasCenter) {\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`h_{${globalId}}`, expressionPos.x);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`k_{${globalId}}`, expressionPos.y);\r\n        }\r\n        if (_lib__WEBPACK_IMPORTED_MODULE_0__.GraphTypes[graphType].hasCrop) {\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${globalId}cam}`, -size * 0.4);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${globalId}cam}`, -size * 0.4);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${globalId}cbm}`, size * 0.4);\r\n            (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${globalId}cbm}`, size * 0.4);\r\n        }\r\n        createConic(graphType);\r\n    }\r\n    function freeze(force, append) {\r\n        let newId = 1;\r\n        const numExpressions = MyCalc.getItemCount();\r\n        if (append) {\r\n            const expressionsString = localStorage.getItem('expressions');\r\n            if (expressionsString) {\r\n                const expressions = JSON.parse(expressionsString);\r\n                let newId = globalId;\r\n                let newShadeId = shadeId;\r\n                const newExpressions = expressions.map((_expression) => {\r\n                    const expression = _expression;\r\n                    const split = expression.id.split(\"_\");\r\n                    if (split[0] === \"final\") {\r\n                        expression.id = `final_${newId}`;\r\n                        newId += 1;\r\n                    }\r\n                    else if (split[0] === \"shade\") {\r\n                        expression.id = `shade_${newShadeId}`;\r\n                        newShadeId += 1;\r\n                    }\r\n                    return expression;\r\n                });\r\n                MyCalc.setExpressions(newExpressions);\r\n                globalId = newId;\r\n                shadeId = newShadeId;\r\n            }\r\n        }\r\n        else {\r\n            if (numExpressions !== 1) {\r\n                const expressions = MyCalc.getExpressions();\r\n                let graphExpressionsNormal = [];\r\n                if (force) {\r\n                    graphExpressionsNormal = expressions.filter((x) => !x.id.includes('_'));\r\n                }\r\n                const graphExpressionsBase = expressions.filter((x) => x.id.endsWith('_0') && !x.id.startsWith('final_'));\r\n                const graphExpressionsFinal = expressions.filter((x) => x.id.startsWith('final_') && !x.id.includes('folder'));\r\n                const graphExpressionsShade = expressions.filter((x) => x.id.startsWith('shade_') && !x.id.includes('folder'));\r\n                const graphExpressionsNormalLatex = graphExpressionsNormal.map((_graphExpression) => {\r\n                    const graphExpression = _graphExpression;\r\n                    graphExpression.id = `final_${newId}`;\r\n                    newId += 1;\r\n                    return graphExpression;\r\n                });\r\n                const graphExpressionsBaseLatex = graphExpressionsBase.map((_graphExpression) => {\r\n                    const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(_graphExpression);\r\n                    conic.latex = conic.convertToStandard();\r\n                    conic.id = `final_${newId}`;\r\n                    conic.graphId = newId;\r\n                    newId += 1;\r\n                    return conic.toExpression();\r\n                });\r\n                const graphExpressionsFinalLatex = graphExpressionsFinal.map((_graphExpression) => {\r\n                    const graphExpression = _graphExpression;\r\n                    graphExpression.id = `final_${newId}`;\r\n                    newId += 1;\r\n                    return graphExpression;\r\n                });\r\n                const graphExpressionsShadeLatex = graphExpressionsShade.map((_graphExpression) => {\r\n                    const graphExpression = _graphExpression;\r\n                    const latex = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.substituteParenthesis)(graphExpression.latex);\r\n                    const expression = { color: graphExpression.color, fillOpacity: graphExpression.fillOpacity, hidden: false, id: graphExpression.id, latex, type: 'expression' };\r\n                    return expression;\r\n                });\r\n                const latexAll = [\r\n                    ...graphExpressionsNormalLatex,\r\n                    ...graphExpressionsShadeLatex,\r\n                    ...graphExpressionsBaseLatex,\r\n                    ...graphExpressionsFinalLatex,\r\n                ];\r\n                localStorage.setItem('expressions', JSON.stringify(latexAll));\r\n            }\r\n            else {\r\n                const expressionsString = localStorage.getItem('expressions');\r\n                if (expressionsString) {\r\n                    const expressions = JSON.parse(expressionsString);\r\n                    MyCalc.setExpressions(expressions);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function resetSelection() {\r\n        shadingData.lastUpperBoundary = { x: MyCalc.linkedVariable(-Infinity), y: MyCalc.linkedVariable(-Infinity) };\r\n        shadingData.lastLowerBoundary = { x: MyCalc.linkedVariable(Infinity), y: MyCalc.linkedVariable(Infinity) };\r\n    }\r\n    function finalizeId(_id) {\r\n        if (_id.startsWith('final_')) {\r\n            unfinalize(_id);\r\n        }\r\n        else if (_id.includes('_')) {\r\n            finalize(_id);\r\n        }\r\n        else {\r\n            unfinalizeConvert(_id);\r\n        }\r\n    }\r\n    function fixNegative() {\r\n        let toFix = [];\r\n        const negativeab = MyCalc.getExpressions()\r\n            .filter((x) => /[ab]_{\\d*\\w+}=-\\d+[.]{0,1}\\d*/g.test(x.latex)); // Selects ellipse, hyperbola with negative a, b\r\n        toFix = [...toFix, ...negativeab.map((expression) => {\r\n                expression.latex.replaceAll('-', '');\r\n                return expression;\r\n            })];\r\n        MyCalc.updateExpressions(toFix);\r\n    }\r\n    function deleteById(_id) {\r\n        if (_id.includes('_')) {\r\n            if (['shade', 'final'].includes(_id.split('_')[0])) {\r\n                const expression = MyCalc.getExpression(_id);\r\n                if (expression) {\r\n                    MyCalc.removeExpression(expression);\r\n                }\r\n            }\r\n            else {\r\n                const graphId = parseInt(_id.split('_')[0]);\r\n                const idFilter = `${graphId}_`;\r\n                let filteredExpressions = MyCalc.getExpressions();\r\n                filteredExpressions = filteredExpressions.filter((x) => x.id.startsWith(idFilter));\r\n                MyCalc.removeExpressions(filteredExpressions);\r\n                // MyCalc.removeExpressions(MyCalc.dependsOn(parseInt(currId)))\r\n                const expressionList = MyCalc.dependsOn(graphId).map((_expression) => {\r\n                    const expression = _expression;\r\n                    expression.latex = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.substituteFromId)(expression.latex, graphId);\r\n                    return expression;\r\n                });\r\n                MyCalc.updateExpressions(expressionList);\r\n            }\r\n        }\r\n    }\r\n    function changeCropMode(_id) {\r\n        if (_id.includes('_')) {\r\n            const currId = _id.split('_')[0];\r\n            const idFilter = `${currId}_`;\r\n            let filteredExpressions = MyCalc.getExpressions();\r\n            filteredExpressions = filteredExpressions.filter((x) => x.id.startsWith(idFilter) && !x.id.includes('folder'));\r\n            const graphExpression = filteredExpressions.find((x) => x.id.endsWith('_0'));\r\n            if (!graphExpression) {\r\n                throw new Error();\r\n            }\r\n            const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(graphExpression);\r\n            const { graphType } = conic;\r\n            // 0 - default (x and y), 1 - x only, 2 - y only, 3 - no crop\r\n            let cropType = conic.getCropType();\r\n            cropType = (cropType + 1) % 4;\r\n            [conic.latex] = conic.latex.split('\\\\left\\\\{');\r\n            const addition = (cropType < 2 ? '\\\\left\\\\{x_{1ca}<x<x_{1cb}\\\\right\\\\}' : '') + (!(cropType % 2) ? '\\\\left\\\\{y_{1ca}<y<y_{1cb}\\\\right\\\\}' : '');\r\n            conic.latex += addition.replaceAll('_{1', `_{${currId}`);\r\n            const xBoundary = typeFilter(filteredExpressions, graphType, ['x']); // x only domain\r\n            const yBoundary = typeFilter(filteredExpressions, graphType, ['y']); // y only domain\r\n            const xyPoints = typeFilter(filteredExpressions, graphType, ['xy']); // points\r\n            const expressionsToSet = [];\r\n            for (let i = 0; i < xBoundary.length; i++) {\r\n                const expression = xBoundary[i];\r\n                expression.hidden = (cropType % 2 === 1);\r\n                expressionsToSet.push(expression);\r\n            }\r\n            for (let i = 0; i < yBoundary.length; i++) {\r\n                const expression = yBoundary[i];\r\n                expression.hidden = (cropType > 1);\r\n                expressionsToSet.push(expression);\r\n            }\r\n            for (let i = 0; i < xyPoints.length; i++) {\r\n                const expression = xyPoints[i];\r\n                expression.hidden = (cropType === 3);\r\n                expressionsToSet.push(expression);\r\n            }\r\n            expressionsToSet.push(conic);\r\n            MyCalc.updateExpressions(expressionsToSet);\r\n        }\r\n    }\r\n    function hideCropLines(_id) {\r\n        if (_id.includes('_')) {\r\n            const idFilter = `${_id.split('_')[0]}_`;\r\n            let filteredExpressions = MyCalc.getExpressions();\r\n            filteredExpressions = filteredExpressions.filter((x) => x.id.startsWith(idFilter))\r\n                .filter((x) => !x.id.includes('folder'));\r\n            const graphExpression = filteredExpressions.find((x) => x.id.endsWith('_0'));\r\n            if (!graphExpression) {\r\n                throw new Error();\r\n            }\r\n            const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(graphExpression);\r\n            const { graphType } = conic;\r\n            filteredExpressions = typeFilter(filteredExpressions, graphType, ['hide']);\r\n            let [newExpression] = filteredExpressions;\r\n            const newState = !newExpression.hidden;\r\n            const expressionsToSet = [];\r\n            const cropType = conic.getCropType();\r\n            const xBoundary = typeFilter(filteredExpressions, graphType, ['x']); // x only domain\r\n            const yBoundary = typeFilter(filteredExpressions, graphType, ['y']); // y only domain\r\n            const xyPoints = typeFilter(filteredExpressions, graphType, ['xy']); // points\r\n            const avoidPoints = [\r\n                ...xBoundary.map((exp) => exp.id),\r\n                ...yBoundary.map((exp) => exp.id),\r\n                ...xyPoints.map((exp) => exp.id),\r\n            ];\r\n            if (!newState) {\r\n                for (let i = 0; i < filteredExpressions.length; i++) {\r\n                    newExpression = filteredExpressions[i];\r\n                    if (!avoidPoints.includes(newExpression.id)) {\r\n                        newExpression.hidden = false;\r\n                    }\r\n                    expressionsToSet.push(newExpression);\r\n                }\r\n                for (let j = 0; j < xBoundary.length; j++) {\r\n                    const expression = xBoundary[j];\r\n                    expression.hidden = (cropType % 2 === 1);\r\n                    expressionsToSet.push(expression);\r\n                }\r\n                for (let j = 0; j < yBoundary.length; j++) {\r\n                    const expression = yBoundary[j];\r\n                    expression.hidden = (cropType > 1);\r\n                    expressionsToSet.push(expression);\r\n                }\r\n                for (let j = 0; j < xyPoints.length; j++) {\r\n                    const expression = xyPoints[j];\r\n                    expression.hidden = (cropType === 3);\r\n                    expressionsToSet.push(expression);\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < filteredExpressions.length; i++) {\r\n                    newExpression = filteredExpressions[i];\r\n                    if ('hidden' in newExpression) {\r\n                        newExpression.hidden = newState;\r\n                    }\r\n                    expressionsToSet.push(newExpression);\r\n                }\r\n            }\r\n            MyCalc.updateExpressions(expressionsToSet);\r\n        }\r\n    }\r\n    function setId() {\r\n        const baseId = Math.max(0, Math.max(...MyCalc.getExpressions()\r\n            .filter((x) => x.id.endsWith('_0'))\r\n            .map((x) => parseInt(x.id.split('_')[0], 10))\r\n            .filter((x) => !Number.isNaN(x)))) + 1;\r\n        const finalId = Math.max(0, Math.max(...MyCalc.getExpressions()\r\n            .filter((x) => x.id.startsWith('final_'))\r\n            .map((x) => parseInt(x.id.split('_')[1], 10))\r\n            .filter((x) => !Number.isNaN(x)))) + 1;\r\n        globalId = Math.max(baseId, finalId);\r\n        idSet = true;\r\n    }\r\n    function shadeToBack() {\r\n        const state = MyCalc.getState();\r\n        state.expressions.list = state.expressions.list\r\n            .filter((x) => x.id.startsWith('shade_'))\r\n            .concat(state.expressions.list.filter((x) => !x.id.startsWith('shade_')));\r\n        MyCalc.setState(state);\r\n    }\r\n    function toggleShading() {\r\n        const shade = MyCalc.getExpressions()\r\n            .filter((x) => x.id.startsWith('shade_') && !x.id.includes('folder'));\r\n        const newState = !shade[0].hidden;\r\n        MyCalc.updateExpressions(shade.map((_x) => {\r\n            const x = _x;\r\n            x.hidden = newState;\r\n            return x;\r\n        }));\r\n    }\r\n    function getBoundsById(_id) {\r\n        const graphExpression = MyCalc.getExpression(_id);\r\n        if (graphExpression) {\r\n            console.log(((0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(graphExpression))\r\n                .getRealBounds());\r\n        }\r\n    }\r\n    function expressionToFront(_id) {\r\n        const state = MyCalc.getState();\r\n        const expression = state.expressions.list\r\n            .filter((_expression) => _expression.id === _id);\r\n        const multipleExpressions = state.expressions.list\r\n            .filter((_expression) => _expression.id !== _id);\r\n        state.expressions.list = expression.concat(multipleExpressions);\r\n        MyCalc.setState(state);\r\n    }\r\n    function keyUpHandler(e) {\r\n        if (MyCalc)\r\n            MyCalc.updateLinkedVariables();\r\n        updateVariables();\r\n        setId();\r\n        if (currentlyPressed.includes(e.keyCode)) {\r\n            currentlyPressed = currentlyPressed.filter((key) => key !== e.keyCode);\r\n        }\r\n        if (e.ctrlKey && e.shiftKey) {\r\n            const { key } = e;\r\n            if (key === '<') {\r\n                if (MyCalc.selectedExpressionId) {\r\n                    expressionToFront(MyCalc.selectedExpressionId);\r\n                }\r\n            }\r\n            if (key === 'F') { // F - Finalize\r\n                if (MyCalc.selectedExpressionId) {\r\n                    finalizeId(MyCalc.selectedExpressionId);\r\n                }\r\n            }\r\n        }\r\n        if (e.key === 'Control') {\r\n            ctrlTime = Date.now();\r\n        }\r\n        if (e.key === 'Alt') {\r\n            altTime = Date.now();\r\n        }\r\n        if (e.ctrlKey || (Date.now() - ctrlTime) < 100) {\r\n            ctrlTime = Date.now();\r\n            const { key } = e;\r\n        }\r\n        if (e.altKey || (Date.now() - altTime) < 100) {\r\n            altTime = Date.now();\r\n            const { keyCode } = e;\r\n            if (keyCode === 87) {\r\n                const selection = selections.pop();\r\n            }\r\n            if (keyCode === 77) {\r\n                if (MyCalc.selectedExpressionId) {\r\n                    getBoundsById(MyCalc.selectedExpressionId);\r\n                }\r\n            }\r\n            if (keyCode === 219) {\r\n                fixNegative();\r\n            }\r\n            if (keyCode === 189) {\r\n                shadeToBack();\r\n            }\r\n            else if (keyCode === 187) {\r\n                toggleShading();\r\n            }\r\n            else if ((keyCode >= 49) && (keyCode <= 56)) {\r\n                createDefaultConic(keyCode - 49);\r\n            }\r\n            else if (keyCode === 83) { // bottom\r\n                resetSelection();\r\n            }\r\n            else if (keyCode === 48) {\r\n                freeze(e.shiftKey, e.ctrlKey);\r\n            }\r\n            else if (keyCode === 88) {\r\n                if (MyCalc.selectedExpressionId)\r\n                    deleteById(MyCalc.selectedExpressionId);\r\n            }\r\n            else if (keyCode === 81) {\r\n                if (MyCalc.selectedExpressionId)\r\n                    changeCropMode(MyCalc.selectedExpressionId);\r\n            }\r\n            else if (keyCode === 72) {\r\n                if (MyCalc.selectedExpressionId)\r\n                    hideCropLines(MyCalc.selectedExpressionId);\r\n            }\r\n            else if (keyCode === 70) {\r\n                easyMode = !easyMode;\r\n            }\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    function keyDownHandler(e) {\r\n        if (MyCalc)\r\n            MyCalc.updateLinkedVariables();\r\n        if (e.altKey) {\r\n            if (!currentlyPressed.includes(e.keyCode)) {\r\n                currentlyPressed.push(e.keyCode);\r\n            }\r\n        }\r\n    }\r\n    function fillInside(expressionId) {\r\n        const object = MyCalc.getExpression(expressionId);\r\n        if (object) {\r\n            const conic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(object);\r\n            if ([0, 4].includes(conic.graphType)) {\r\n                conic.latex = conic.latex.replace('=', '>');\r\n            }\r\n            else if ([1, 2, 3, 5, 6].includes(conic.graphType)) {\r\n                conic.latex = conic.latex.replace('=', '<');\r\n            }\r\n            MyCalc.setExpression({ color: 'BLACK', hidden: false, type: 'expression', id: `shade_${shadeId}`, latex: conic.latex });\r\n            shadeId += 1;\r\n        }\r\n    }\r\n    function fillIntersection(lowerId, upperId, axis) {\r\n        const lowerObject = MyCalc.getExpression(lowerId);\r\n        const upperObject = MyCalc.getExpression(upperId);\r\n        if (!upperObject || !lowerObject) {\r\n            throw new Error(\"This shouldn't happen\");\r\n        }\r\n        const lowerConic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(lowerObject);\r\n        const upperConic = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(upperObject);\r\n        const lowerBounds = lowerConic.getRealBounds();\r\n        const upperBounds = upperConic.getRealBounds();\r\n        if (axis === 'y') {\r\n            let realMin = lowerBounds.xMin.value < upperBounds.xMin.value\r\n                ? upperBounds.xMin : lowerBounds.xMin;\r\n            let realMax = lowerBounds.xMax.value > upperBounds.xMax.value\r\n                ? upperBounds.xMax : lowerBounds.xMax;\r\n            if (Number.isFinite(lastCenterPoint.x)) {\r\n                if (shadingData.lastUpperBoundary.y.value > realMin.value && lastCenterPoint.x < centerPoint.x) { // To right\r\n                    realMin = shadingData.lastUpperBoundary.y;\r\n                }\r\n                if (shadingData.lastLowerBoundary.y.value < realMax.value && lastCenterPoint.x > centerPoint.x) {\r\n                    realMax = shadingData.lastLowerBoundary.y;\r\n                }\r\n            }\r\n            shadingData.lastUpperBoundary.y = realMax;\r\n            shadingData.lastLowerBoundary.y = realMin;\r\n            const bounds = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.generateBounds)(realMin, MyCalc.linkedVariable(-Infinity), realMax, MyCalc.linkedVariable(Infinity)).reference;\r\n            const newExpressions = [];\r\n            const lowerConicConverted = lowerConic.convertToYRelevant();\r\n            const upperConicConverted = upperConic.convertToYRelevant();\r\n            for (let lowerIndex = 0; lowerIndex < lowerConicConverted.length; lowerIndex++) {\r\n                const currLowerConic = lowerConicConverted[lowerIndex];\r\n                for (let upperIndex = 0; upperIndex < upperConicConverted.length; upperIndex++) {\r\n                    const currUpperConic = upperConicConverted[upperIndex];\r\n                    const newExpression = `${currLowerConic}<y<${currUpperConic}${bounds}`;\r\n                    newExpressions.push({ color: 'BLACK', hidden: false, type: 'expression', id: `shade_${shadeId}`, latex: newExpression, fillOpacity: '1' });\r\n                    shadeId += 1;\r\n                }\r\n            }\r\n            MyCalc.setExpressions(newExpressions);\r\n        }\r\n        else if (axis === 'x') {\r\n            let realMin = lowerBounds.yMin.value < upperBounds.yMin.value\r\n                ? upperBounds.yMin : lowerBounds.yMin;\r\n            let realMax = lowerBounds.yMax.value > upperBounds.yMax.value\r\n                ? upperBounds.yMax : lowerBounds.yMax;\r\n            if (Number.isFinite(lastCenterPoint.y)) {\r\n                if (shadingData.lastUpperBoundary.x.value > realMin.value && lastCenterPoint.y < centerPoint.y) {\r\n                    realMin = shadingData.lastUpperBoundary.x;\r\n                }\r\n                if (shadingData.lastLowerBoundary.x.value < realMax.value && lastCenterPoint.y > centerPoint.y) {\r\n                    realMax = shadingData.lastLowerBoundary.x;\r\n                }\r\n            }\r\n            shadingData.lastUpperBoundary.x = realMax;\r\n            shadingData.lastLowerBoundary.x = realMin;\r\n            const bounds = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.generateBounds)(MyCalc.linkedVariable(-Infinity), realMin, MyCalc.linkedVariable(Infinity), realMax)\r\n                .reference;\r\n            const newExpressions = [];\r\n            const lowerConicConverted = lowerConic.convertToXRelevant();\r\n            const upperConicConverted = upperConic.convertToXRelevant();\r\n            for (let lowerIndex = 0; lowerIndex < lowerConicConverted.length; lowerIndex++) {\r\n                const currLowerConic = lowerConicConverted[lowerIndex];\r\n                for (let upperIndex = 0; upperIndex < upperConicConverted.length; upperIndex++) {\r\n                    const currUpperConic = upperConicConverted[upperIndex];\r\n                    const newExpression = `${currLowerConic}<x<${currUpperConic}${bounds}`;\r\n                    newExpressions.push({ color: 'BLACK', hidden: false, type: 'expression', id: `shade_${shadeId}`, latex: newExpression });\r\n                    shadeId += 1;\r\n                }\r\n            }\r\n            MyCalc.setExpressions(newExpressions);\r\n        }\r\n    }\r\n    function mouseUpHandler(e) {\r\n        if (MyCalc)\r\n            MyCalc.updateLinkedVariables();\r\n        setId();\r\n        if (MyCalc.selectedExpressionId) {\r\n            lastSelectedId = MyCalc.selectedExpressionId;\r\n        }\r\n        updateVariables();\r\n        if (!shadeIdSet) {\r\n            shadeId = getShadeId() + 1;\r\n            shadeIdSet = true;\r\n        }\r\n        if (easyMode) {\r\n            // if (easySelections.length > 4) {\r\n            //   easySelections.pop()\r\n            // }\r\n            console.log(easySelections);\r\n            if (e.button === 0) {\r\n                const selectedExpression = MyCalc.getSelected();\r\n                MyCalc.selectedExpressionId = undefined;\r\n                if (selectedExpression?.type === 'expression' && isGraph(selectedExpression)) {\r\n                    console.log(selectedExpression);\r\n                    const point = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.createGraphObject)(selectedExpression).getClosestEndpoint(MyCalc.pixelsToMath({\r\n                        x: e.clientX,\r\n                        y: e.clientY,\r\n                    }));\r\n                    console.log(point);\r\n                    easySelections.push({\r\n                        x: point.x.value,\r\n                        y: point.y.value,\r\n                    });\r\n                }\r\n                else {\r\n                    easySelections.push(MyCalc.pixelsToMath({ x: e.clientX, y: e.clientY }));\r\n                }\r\n            }\r\n            else if (e.button == 1) {\r\n                if (easySelections.length === 1) {\r\n                }\r\n                if (easySelections.length === 2) {\r\n                    (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${globalId}a}`, easySelections[0].x);\r\n                    (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${globalId}a}`, easySelections[0].y);\r\n                    (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`x_{${globalId}b}`, easySelections[1].x);\r\n                    (0,_lib__WEBPACK_IMPORTED_MODULE_0__.setVariable)(`y_{${globalId}b}`, easySelections[1].y);\r\n                    createConic(6);\r\n                }\r\n                if (easySelections.length === 4) {\r\n                    MyCalc.regression(easySelections);\r\n                }\r\n                easySelections = [];\r\n            }\r\n        }\r\n        else {\r\n            if (e.button === 1) {\r\n                const shade = MyCalc.getExpressions().filter((expression) => expression.id.includes(\"shade_\"));\r\n                shade.forEach((shade) => {\r\n                    const { xMin, xMax, yMin, yMax } = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.parseDomains)(getDomainsFromLatex(shade.latex));\r\n                });\r\n            }\r\n            if (currentlyPressed.includes(65)) {\r\n                const selected = MyCalc.getSelected();\r\n                if (selected && isGraph(selected)) {\r\n                    selections.push({ id: selected.id, pos: MyCalc.pixelsToMath({ x: e.clientX, y: e.clientY }) });\r\n                }\r\n                if (selections.length >= 2) {\r\n                    const lowerSelection = selections.shift();\r\n                    const upperSelection = selections.shift();\r\n                    if (!upperSelection || !lowerSelection) {\r\n                        throw new Error(\"This shouldn't happen\");\r\n                    }\r\n                    centerPoint = {\r\n                        x: (upperSelection.pos.x + lowerSelection.pos.x) / 2,\r\n                        y: (upperSelection.pos.x + lowerSelection.pos.y) / 2,\r\n                    };\r\n                    const slope = (Math.abs(upperSelection.pos.y - lowerSelection.pos.y) + 1)\r\n                        / (Math.abs(upperSelection.pos.x - lowerSelection.pos.x) + 1);\r\n                    const axis = (slope > 1) ? 'y' : 'x';\r\n                    let upperId = upperSelection.id;\r\n                    let lowerId = lowerSelection.id;\r\n                    if (upperId === lowerId) {\r\n                        const lowerFinal = lowerId.startsWith('final_');\r\n                        if (lowerFinal) {\r\n                            unfinalize(lowerId);\r\n                            lowerId = `${lowerId.split('_')[1]}_0`;\r\n                        }\r\n                        fillInside(lowerId);\r\n                        if (lowerFinal)\r\n                            finalize(lowerId);\r\n                    }\r\n                    else {\r\n                        const lowerFinal = lowerId.startsWith('final_');\r\n                        const upperFinal = upperId.startsWith('final_');\r\n                        if (lowerFinal) {\r\n                            unfinalize(lowerId, true);\r\n                            lowerId = `${lowerId.split('_')[1]}_0`;\r\n                        }\r\n                        if (upperFinal) {\r\n                            unfinalize(upperId, true);\r\n                            upperId = `${upperId.split('_')[1]}_0`;\r\n                        }\r\n                        fillIntersection(lowerId, upperId, axis);\r\n                        if (lowerFinal)\r\n                            finalize(lowerId);\r\n                        if (upperFinal)\r\n                            finalize(upperId);\r\n                    }\r\n                    lastCenterPoint = centerPoint;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    document.addEventListener('keydown', keyDownHandler, false);\r\n    document.addEventListener('keyup', keyUpHandler, false);\r\n    document.addEventListener('pointerup', mouseUpHandler, false);\r\n    function toggleArtist() {\r\n        const x = document.querySelector('#artist');\r\n        const y = document.querySelector('#artist-container');\r\n        if (x)\r\n            x.style.display = x.style.display === 'none' ? 'block' : 'none';\r\n        if (y)\r\n            y.style.display = y.style.display === 'none' ? 'block' : 'none';\r\n    }\r\n    function changeColor() {\r\n        const graphExpression = MyCalc.getExpression(lastSelectedId);\r\n        if (graphExpression) {\r\n            const colorForm = $('#colorForm');\r\n            if (colorForm) {\r\n                const data = colorForm.serializeArray();\r\n                data.forEach((pair) => {\r\n                    graphExpression[pair.name] = pair.value;\r\n                });\r\n                MyCalc.updateExpression(graphExpression);\r\n            }\r\n        }\r\n    }\r\n    function changegraphType() {\r\n        currGraphId = (currGraphId + 1) % 7;\r\n        const button = document.querySelector('#artist-button');\r\n        if (button) {\r\n            button.innerHTML = graphAbbrev[currGraphId];\r\n        }\r\n    }\r\n    function createConicHandler() {\r\n        createDefaultConic(currGraphId);\r\n    }\r\n    const shortcutButtons = false;\r\n    const pillbox = unsafeWindow.document.querySelector('.dcg-overgraph-pillbox-elements');\r\n    if (pillbox) {\r\n        pillbox.insertAdjacentHTML('beforeend', '<div id=\"artist-button-container\"><div class=\"dcg-tooltip-hit-area-container\"><div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings\" role=\"button\" onclick=\\'toggleArtist()\\' style=\"background:#ededed\"><i class=\"dcg-icon-wrench\" aria-hidden=\"true\"></i></div></div><div style=\"display: none\"></div></div>');\r\n        pillbox.insertAdjacentHTML('beforeend', '<div id=\"artist-container\" class=\"dcg-artist-view-container\"></div>');\r\n        const artistContainer = unsafeWindow.document.querySelector('#artist-container');\r\n        if (shortcutButtons) {\r\n            if (artistContainer) {\r\n                artistContainer.insertAdjacentHTML('beforeend', `<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div id=\"artist-button\" class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" oncontextmenu=\"createConicHandler();return false;\" onclick=\"changegraphType()\" style=\"background:#ededed\">${graphAbbrev[currGraphId]}</div></div>`);\r\n                artistContainer.insertAdjacentHTML('beforeend', '<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" onclick=\"deleteById(Calc.selectedExpressionId)\" style=\"background:#ededed\">X</div></div>');\r\n                artistContainer.insertAdjacentHTML('beforeend', '<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" onclick=\"hideCropLines(Calc.selectedExpressionId)\" style=\"background:#ededed\">H</div></div>');\r\n                artistContainer.insertAdjacentHTML('beforeend', '<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" onclick=\"changeCropMode(Calc.selectedExpressionId)\" style=\"background:#ededed\">Q</div></div>');\r\n                artistContainer.insertAdjacentHTML('beforeend', '<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" onclick=\"finalizeId(Calc.selectedExpressionId)\" style=\"background:#ededed\">F</div></div>');\r\n                artistContainer.insertAdjacentHTML('beforeend', '<div class=\"dcg-tooltip-hit-area-container dcg-hovered\"> <div class=\"dcg-btn-flat-gray dcg-settings-pillbox dcg-action-settings dcg-hovered\" role=\"button\" oncontextmenu=\"freeze(false);return false;\" style=\"background:#ededed\">S</div></div>');\r\n            }\r\n        }\r\n    }\r\n    const body = document.querySelector('.dcg-grapher');\r\n    if (body) {\r\n        body.insertAdjacentHTML('beforeend', '<div id=\"artist\" style=\"position: absolute; bottom: 5%; right: 5%; padding: 10px; border: 1px solid black; border-radius: 10px\"><form id=\"colorForm\" onSubmit=\"return changeColor()\"><div> Color <input name=\"color\" type=\"color\"></div><div> Opacity <input name=\"fillOpacity\" type=\"number\" min=\"0\" max=\"1\" value=\"0.4\"></div><div><input type=\"button\" value=\"Apply\" onclick=\"changeColor()\"></div></form></div>');\r\n    }\r\n    unsafeWindow.MyCalc = MyCalc;\r\n    unsafeWindow.idSet = idSet;\r\n    unsafeWindow.id = globalId;\r\n    unsafeWindow.Conic = _Graph__WEBPACK_IMPORTED_MODULE_1__.Graph;\r\n    unsafeWindow.changeColor = changeColor;\r\n    unsafeWindow.changegraphType = changegraphType;\r\n    unsafeWindow.createConicHandler = createConicHandler;\r\n    unsafeWindow.deleteById = deleteById;\r\n    unsafeWindow.toggleArtist = toggleArtist;\r\n}\r\n(async () => {\r\n    while (typeof Calc === 'undefined') {\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    }\r\n    main();\r\n})();\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/index.user.ts?");

/***/ }),

/***/ "./src/lib.ts":
/*!********************!*\
  !*** ./src/lib.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GraphTypes\": () => (/* binding */ GraphTypes),\n/* harmony export */   \"functionRegex\": () => (/* binding */ functionRegex),\n/* harmony export */   \"functionVariableRegex\": () => (/* binding */ functionVariableRegex),\n/* harmony export */   \"getVariable\": () => (/* binding */ getVariable),\n/* harmony export */   \"substituteParenthesis\": () => (/* binding */ substituteParenthesis),\n/* harmony export */   \"LinkedVariable\": () => (/* binding */ LinkedVariable),\n/* harmony export */   \"getGraphType\": () => (/* binding */ getGraphType),\n/* harmony export */   \"hasXDomain\": () => (/* binding */ hasXDomain),\n/* harmony export */   \"hasYDomain\": () => (/* binding */ hasYDomain),\n/* harmony export */   \"getDomains\": () => (/* binding */ getDomains),\n/* harmony export */   \"parseDomains\": () => (/* binding */ parseDomains),\n/* harmony export */   \"maxLinkedVariable\": () => (/* binding */ maxLinkedVariable),\n/* harmony export */   \"minLinkedVariable\": () => (/* binding */ minLinkedVariable),\n/* harmony export */   \"minMax\": () => (/* binding */ minMax),\n/* harmony export */   \"simplify\": () => (/* binding */ simplify),\n/* harmony export */   \"getVariablesNeeded\": () => (/* binding */ getVariablesNeeded),\n/* harmony export */   \"substitute\": () => (/* binding */ substitute),\n/* harmony export */   \"generateBounds\": () => (/* binding */ generateBounds),\n/* harmony export */   \"usesVariable\": () => (/* binding */ usesVariable),\n/* harmony export */   \"substituteFromId\": () => (/* binding */ substituteFromId),\n/* harmony export */   \"setVariable\": () => (/* binding */ setVariable),\n/* harmony export */   \"intersectConics\": () => (/* binding */ intersectConics),\n/* harmony export */   \"createGraphObject\": () => (/* binding */ createGraphObject)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _nerdamer_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nerdamer/index.js */ \"./src/nerdamer/index.js\");\n/* harmony import */ var _nerdamer_index_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_nerdamer_index_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _graphs_Circle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graphs/Circle */ \"./src/graphs/Circle.ts\");\n/* harmony import */ var _graphs_Ellipse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./graphs/Ellipse */ \"./src/graphs/Ellipse.ts\");\n/* harmony import */ var _graphs_HorizontalHyperbola__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./graphs/HorizontalHyperbola */ \"./src/graphs/HorizontalHyperbola.ts\");\n/* harmony import */ var _graphs_HorizontalParabola__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graphs/HorizontalParabola */ \"./src/graphs/HorizontalParabola.ts\");\n/* harmony import */ var _graphs_LineSegment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./graphs/LineSegment */ \"./src/graphs/LineSegment.ts\");\n/* harmony import */ var _graphs_VerticalHyperbola__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./graphs/VerticalHyperbola */ \"./src/graphs/VerticalHyperbola.ts\");\n/* harmony import */ var _graphs_VerticalParabola__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./graphs/VerticalParabola */ \"./src/graphs/VerticalParabola.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GraphTypes = [\r\n    _graphs_Circle__WEBPACK_IMPORTED_MODULE_3__.Circle,\r\n    _graphs_HorizontalParabola__WEBPACK_IMPORTED_MODULE_6__.HorizontalParabola,\r\n    _graphs_VerticalParabola__WEBPACK_IMPORTED_MODULE_9__.VerticalParabola,\r\n    _graphs_Ellipse__WEBPACK_IMPORTED_MODULE_4__.Ellipse,\r\n    _graphs_HorizontalHyperbola__WEBPACK_IMPORTED_MODULE_5__.HorizontalHyperbola,\r\n    _graphs_VerticalHyperbola__WEBPACK_IMPORTED_MODULE_8__.VerticalHyperbola,\r\n    _graphs_LineSegment__WEBPACK_IMPORTED_MODULE_7__.LineSegment\r\n];\r\nconst functionRegex = /([a-z]+_{[\\w\\d]+})(?:\\(([^,\\n=<>]+(?:,.+)*)\\))/g;\r\nconst functionVariableRegex = /([a-z]+_{[\\w\\d]+})(?:\\(([^,\\n=<>]+(?:,.+)*)\\))?/g;\r\nfunction getVariable(name) {\r\n    const match = name.match(/(\\w_{\\d+\\w*})/g);\r\n    if (match && match[0].length === name.length) {\r\n        if (name in _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.globalVariablesObject) {\r\n            return parseFloat(_index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.globalVariablesObject[name]);\r\n        }\r\n    }\r\n    else {\r\n        const match = [...name.matchAll(functionRegex)];\r\n        if (match.length > 0) {\r\n            const parts = match[0];\r\n            const args = parts[2].split(',');\r\n            const value = evaluateFunction(parts[1], args.map((arg) => getVariable(arg)));\r\n            return value;\r\n        }\r\n        else {\r\n            const value = evaluatex(substitute(name))();\r\n            if (value) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n    throw Error(`The variable ${name} is missing`);\r\n}\r\nfunction substituteParenthesis(_latex) {\r\n    let latex = _latex;\r\n    const variablesNeeded = getVariablesNeeded(latex);\r\n    for (let j = 0; j < variablesNeeded.length; j++) {\r\n        const variableNeeded = variablesNeeded[j][0];\r\n        latex = latex.replace(variableNeeded, `(${simplify(getVariable(variableNeeded), 4)})`);\r\n    }\r\n    return latex;\r\n}\r\nfunction evaluateFunction(_func, values) {\r\n    const funcObject = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.globalFunctionsObject[_func];\r\n    if (!funcObject) {\r\n        throw Error(`Cannot find function with name ${_func}`);\r\n    }\r\n    const args = funcObject.args;\r\n    if (args.length !== values.length) {\r\n        throw Error(`Variable length (${args.length}) and value length (${values.length}) mismatch`);\r\n    }\r\n    else {\r\n        const variablesNeeded = getVariablesNeeded(funcObject.definition)\r\n            .map((variable) => variable[0])\r\n            .filter((variable) => !args.includes(variable));\r\n        const variableObject = {};\r\n        args.forEach((value, index) => variableObject[value] = values[index]);\r\n        variablesNeeded.forEach((value) => variableObject[value.replace(/([a-z])(?:_{(\\d+[a-z]*)})/g, '$1_$2')] = getVariable(value));\r\n        let newDefinition = funcObject.definition;\r\n        variablesNeeded.forEach((value) => {\r\n            newDefinition = newDefinition.replace(value, value.replace(/([a-z])(?:_{(\\d+[a-z]*)})/g, '$1_$2'));\r\n        });\r\n        newDefinition = newDefinition.replaceAll('}\\\\sqrt{', '}\\\\cdot\\\\sqrt{');\r\n        const value = evaluatex(newDefinition, variableObject)();\r\n        if (value !== undefined) {\r\n            return value;\r\n        }\r\n    }\r\n    throw Error('function broken lul');\r\n}\r\nclass LinkedVariable {\r\n    constructor(reference, _value) {\r\n        if (typeof reference === 'number') {\r\n            this.reference = null;\r\n            this._value = reference;\r\n            this.clean = true;\r\n            this.alwaysClean = true;\r\n        }\r\n        else {\r\n            this.clean = true;\r\n            this.alwaysClean = false;\r\n            this.reference = reference;\r\n            if (_value === undefined) {\r\n                if (reference != null) {\r\n                    this._value = getVariable(reference);\r\n                }\r\n                else {\r\n                    throw new Error('Null reference and undefined value');\r\n                }\r\n            }\r\n            else {\r\n                this._value = _value;\r\n            }\r\n        }\r\n        if (_index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc) {\r\n            _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.addLinkedVariable(this);\r\n        }\r\n    }\r\n    get value() {\r\n        if (!this.clean) {\r\n            if (this.reference) {\r\n                try {\r\n                    return getVariable(this.reference);\r\n                }\r\n                catch {\r\n                    return this._value;\r\n                }\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n    set value(_value) {\r\n        if (!this.alwaysClean) {\r\n            this.clean = true;\r\n        }\r\n        if (this.reference) {\r\n            _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.globalVariablesObject[this.reference] = _value.toString();\r\n        }\r\n        this._value = _value;\r\n    }\r\n}\r\nfunction getGraphType(expression) {\r\n    const graphId = parseInt(expression.id.split('_')[0], 10);\r\n    let type = null;\r\n    for (let i = 0; i < _constants__WEBPACK_IMPORTED_MODULE_0__.baseExpressionFormat.length; i++) {\r\n        const currExpressionFormat = _constants__WEBPACK_IMPORTED_MODULE_0__.baseExpressionFormat[i];\r\n        const newExpression = currExpressionFormat.replaceAll('_{1', `_{${graphId}`);\r\n        if (expression.latex.includes(newExpression)) {\r\n            type = i;\r\n            break;\r\n        }\r\n    }\r\n    if (type === null) {\r\n        throw new Error('Cannot find conic type');\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\nfunction hasXDomain(cropType) {\r\n    return cropType <= 1;\r\n}\r\nfunction hasYDomain(cropType) {\r\n    return !(cropType % 2);\r\n}\r\nfunction getDomains(currId) {\r\n    return {\r\n        xMin: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`x_{${currId}ca}`),\r\n        yMin: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`y_{${currId}ca}`),\r\n        xMax: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`x_{${currId}cb}`),\r\n        yMax: _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(`y_{${currId}cb}`),\r\n    };\r\n}\r\nfunction parseDomains(domains) {\r\n    let [xMin, yMin, xMax, yMax] = [-Infinity, -Infinity, Infinity, Infinity];\r\n    for (let i = 0; i < domains.length; i++) {\r\n        const latex = domains[i];\r\n        const split = latex.split('<');\r\n        let variable = '';\r\n        if (split.includes('x')) {\r\n            variable = 'x';\r\n        }\r\n        else if (split.includes('y')) {\r\n            variable = 'y';\r\n        }\r\n        if (variable !== '') {\r\n            if (['x', 'y'].includes(split[0])) { // x < 2\r\n                if (variable === 'x') {\r\n                    xMax = parseFloat(split[1]);\r\n                }\r\n                else if (variable === 'y') {\r\n                    yMax = parseFloat(split[1]);\r\n                }\r\n            }\r\n            else if (['x', 'y'].includes(split[1]) && split.length === 2) { // 2 < x\r\n                if (variable === 'x') {\r\n                    xMin = parseFloat(split[0]);\r\n                }\r\n                else if (variable === 'y') {\r\n                    yMin = parseFloat(split[0]);\r\n                }\r\n            }\r\n            else if (['x', 'y'].includes(split[1]) && split.length === 3) { // 2 < x < 3\r\n                if (variable === 'x') {\r\n                    xMin = parseFloat(split[0]);\r\n                    xMax = parseFloat(split[2]);\r\n                }\r\n                else if (variable === 'y') {\r\n                    yMin = parseFloat(split[0]);\r\n                    yMax = parseFloat(split[2]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return { xMin, xMax, yMin, yMax };\r\n}\r\nfunction maxLinkedVariable(linkedVariables) {\r\n    let maxVariable = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, -Infinity);\r\n    linkedVariables.forEach((variable) => {\r\n        maxVariable = variable.value > maxVariable.value ? variable : maxVariable;\r\n    });\r\n    return maxVariable;\r\n}\r\nfunction minLinkedVariable(linkedVariables) {\r\n    let minVariable = _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.linkedVariable(null, Infinity);\r\n    linkedVariables.forEach((variable) => {\r\n        minVariable = variable.value < minVariable.value ? variable : minVariable;\r\n    });\r\n    return minVariable;\r\n}\r\nfunction minMax(variables) {\r\n    return {\r\n        min: minLinkedVariable(variables),\r\n        max: maxLinkedVariable(variables),\r\n    };\r\n}\r\nfunction simplify(_number, decimalPlaces) {\r\n    return parseFloat(_number.toFixed(decimalPlaces))\r\n        .toString();\r\n}\r\nfunction getVariablesNeeded(latex) {\r\n    return [...latex.matchAll(functionVariableRegex)];\r\n}\r\nfunction substitute(_latex) {\r\n    let latex = _latex;\r\n    const variablesNeeded = getVariablesNeeded(latex);\r\n    for (let j = 0; j < variablesNeeded.length; j++) {\r\n        const variableNeeded = variablesNeeded[j][0];\r\n        latex = latex.replace(variableNeeded, simplify(getVariable(variableNeeded), 4));\r\n    }\r\n    return latex;\r\n}\r\nfunction generateBounds(_xMin, _yMin, _xMax, _yMax) {\r\n    const xMin = _xMin;\r\n    xMin.value = parseFloat(xMin.value.toFixed(4));\r\n    const yMin = _yMin;\r\n    yMin.value = parseFloat(yMin.value.toFixed(4));\r\n    const xMax = _xMax;\r\n    xMax.value = parseFloat(xMax.value.toFixed(4));\r\n    const yMax = _yMax;\r\n    yMax.value = parseFloat(yMax.value.toFixed(4));\r\n    const xBounds = { value: '', reference: '' };\r\n    const yBounds = { value: '', reference: '' };\r\n    if (xMin.value === -Infinity) {\r\n        if (xMax.value !== Infinity) {\r\n            xBounds.value = `\\\\left\\\\{x<${xMax.value}\\\\right\\\\}`;\r\n            xBounds.reference = `\\\\left\\\\{x<${xMax.reference}\\\\right\\\\}`;\r\n        }\r\n    }\r\n    else if (xMax.value === Infinity) {\r\n        xBounds.value = `\\\\left\\\\{${xMin.value}<x\\\\right\\\\}`;\r\n        xBounds.reference = `\\\\left\\\\{${xMin.reference}<x\\\\right\\\\}`;\r\n    }\r\n    else {\r\n        xBounds.value = `\\\\left\\\\{${xMin.value}<x<${xMax.value}\\\\right\\\\}`;\r\n        xBounds.reference = `\\\\left\\\\{${xMin.reference}<x<${xMax.reference}\\\\right\\\\}`;\r\n    }\r\n    if (yMin.value === -Infinity) {\r\n        if (yMax.value !== Infinity) {\r\n            yBounds.value = `\\\\left\\\\{y<${yMax.value}\\\\right\\\\}`;\r\n            yBounds.reference = `\\\\left\\\\{y<${yMax.reference}\\\\right\\\\}`;\r\n        }\r\n    }\r\n    else if (yMax.value === Infinity) {\r\n        yBounds.value = `\\\\left\\\\{${yMin.value}<y\\\\right\\\\}`;\r\n        yBounds.reference = `\\\\left\\\\{${yMin.reference}<y\\\\right\\\\}`;\r\n    }\r\n    else {\r\n        yBounds.value = `\\\\left\\\\{${yMin.value}<y<${yMax.value}\\\\right\\\\}`;\r\n        yBounds.reference = `\\\\left\\\\{${yMin.reference}<y<${yMax.reference}\\\\right\\\\}`;\r\n    }\r\n    return { value: `${xBounds.value}${yBounds.value}`, reference: `${xBounds.reference}${yBounds.reference}` };\r\n}\r\nfunction usesVariable(latex, _id) {\r\n    const variablesNeeded = getVariablesNeeded(latex);\r\n    return variablesNeeded.some((variable) => {\r\n        if (variable) {\r\n            const newVariable = [...variable[0].matchAll(/[a-z]_{(\\d+)[a-z]*}/g)][0];\r\n            if (newVariable) {\r\n                return newVariable[1] === _id.toString();\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction substituteFromId(_latex, expressionId) {\r\n    let latex = _latex;\r\n    const variablesNeeded = getVariablesNeeded(latex);\r\n    for (let j = 0; j < variablesNeeded.length; j++) {\r\n        const variableNeeded = variablesNeeded[j][0];\r\n        if (usesVariable(variableNeeded, expressionId)) {\r\n            const variableValue = simplify(getVariable(variableNeeded), 4);\r\n            latex = latex.replace(variableNeeded, `(${variableValue})`);\r\n        }\r\n    }\r\n    return latex;\r\n}\r\nfunction setVariable(variable, _value) {\r\n    let value = _value;\r\n    if (typeof value === 'number') {\r\n        value = value.toString();\r\n    }\r\n    if (value == undefined) {\r\n        throw Error('undefined bruh what');\r\n    }\r\n    _index_user__WEBPACK_IMPORTED_MODULE_1__.MyCalc.globalVariablesObject[variable] = value;\r\n}\r\nclass Matrix {\r\n    constructor(ary) {\r\n        this.mtx = ary;\r\n        this.height = ary.length;\r\n        this.width = ary[0].length;\r\n    }\r\n    toReducedRowEchelonForm() {\r\n        let lead = 0;\r\n        for (let r = 0; r < this.height; r++) {\r\n            if (this.width <= lead) {\r\n                return;\r\n            }\r\n            let i = r;\r\n            while (this.mtx[i][lead] == 0) {\r\n                i++;\r\n                if (this.height == i) {\r\n                    i = r;\r\n                    lead++;\r\n                    if (this.width == lead) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            const tmp = this.mtx[i];\r\n            this.mtx[i] = this.mtx[r];\r\n            this.mtx[r] = tmp;\r\n            let val = this.mtx[r][lead];\r\n            for (let j = 0; j < this.width; j++) {\r\n                this.mtx[r][j] /= val;\r\n            }\r\n            for (let i = 0; i < this.height; i++) {\r\n                if (i == r)\r\n                    continue;\r\n                val = this.mtx[i][lead];\r\n                for (let j = 0; j < this.width; j++) {\r\n                    this.mtx[i][j] -= val * this.mtx[r][j];\r\n                }\r\n            }\r\n            lead++;\r\n        }\r\n        return this;\r\n    }\r\n}\r\nfunction intersectConics(aGraph, bGraph) {\r\n    let { A: A_1, C: C_1, D: D_1, E: E_1, F: F_1 } = aGraph.getGeneralForm();\r\n    let { A: A_2, C: C_2, D: D_2, E: E_2, F: F_2 } = bGraph.getGeneralForm();\r\n    A_1 = A_1;\r\n    C_1 = C_1;\r\n    D_1 = D_1 / 2;\r\n    E_1 = E_1 / 2;\r\n    F_1 = F_1;\r\n    A_2 = A_2;\r\n    C_2 = C_2;\r\n    D_2 = D_2 / 2;\r\n    E_2 = E_2 / 2;\r\n    F_2 = F_2;\r\n    const _variables = { A_1, C_1, D_1, E_1, F_1, A_2, C_2, D_2, E_2, F_2 };\r\n    const variables = {};\r\n    Object.entries(_variables).map((value) => {\r\n        variables[value[0]] = value[1].toString();\r\n    });\r\n    const a = -A_2 * E_2 ** 2 - C_2 * D_2 ** 2 + A_2 * C_2 * F_2;\r\n    const b = -2 * A_2 * E_1 * E_2 - 2 * C_2 * D_1 * D_2 - A_1 * E_2 ** 2 - C_1 * D_2 ** 2 + A_1 * C_2 * F_2 + A_2 * C_1 * F_2 + A_2 * C_2 * F_1;\r\n    const c = 0 - 2 * A_1 * E_1 * E_2 - 2 * C_1 * D_1 * D_2 - A_2 * E_1 ** 2 - C_2 * D_1 ** 2 + A_1 * C_1 * F_2 + A_1 * C_2 * F_1 + A_2 * C_1 * F_1;\r\n    const d = -A_1 * E_1 ** 2 - C_1 * D_1 ** 2 + A_1 * C_1 * F_1;\r\n    const var2 = {\r\n        a0: a.toString(),\r\n        a1: b.toString(),\r\n        a2: c.toString(),\r\n        a3: d.toString(),\r\n    };\r\n    console.log(var2);\r\n    const startTime = performance.now();\r\n    const p = (3 * a * c - b ** 2) / (3 * a ** 2);\r\n    const q = (2 * b ** 3 - 9 * a * b * c + 27 * a ** 2 * d) / (27 * a ** 3);\r\n    let det = q ** 2 / 4 + p ** 3 / 27;\r\n    if (det < 0) {\r\n        console.log('bruh', det);\r\n    }\r\n    det = 0;\r\n    const t = Math.cbrt(-q / 2 + Math.sqrt(det)) + Math.cbrt(-q / 2 - Math.sqrt(det)) - b / (3 * a);\r\n    const A = A_1 + t * A_2;\r\n    const C = D_1 + t * D_2;\r\n    const E = C_1 + t * C_2;\r\n    const F = E_1 + t * E_2;\r\n    const I = F_1 + t * F_2;\r\n    const matrix = new Matrix([\r\n        [A, 0, C],\r\n        [0, E, F],\r\n        [C, F, I]\r\n    ]);\r\n    console.log(t);\r\n    console.log(matrix);\r\n    console.log(matrix.toReducedRowEchelonForm());\r\n    console.log(_nerdamer_index_js__WEBPACK_IMPORTED_MODULE_2___default()('(-A_2*E_2^2-C_2*D_2^2+A_2*C_2*F_2)*t^3+(-2*A_2*E_1*E_2-2*C_2*D_1*D_2-A_1*E_2^2-C_1*D_2^2+A_1*C_2*F_2+A_2*C_1*F_2+A_2*C_2*F_1)*t^2+(0-2*A_1*E_1*E_2-2*C_1*D_1*D_2-A_2*E_1^2-C_2*D_1^2+A_1*C_1*F_2+A_1*C_2*F_1+A_2*C_1*F_1)*t+(-A_1*E_1^2-C_1*D_1^2+A_1*C_1*F_1) = 0', variables).solveFor('t').toString());\r\n    console.log(performance.now() - startTime);\r\n}\r\nfunction createGraphObject(expression) {\r\n    const graphType = getGraphType(expression);\r\n    const Class = GraphTypes[graphType];\r\n    if (Class) {\r\n        return new Class(expression);\r\n    }\r\n    throw Error('Tried to convert non-conic to a conic');\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/lib.ts?");

/***/ }),

/***/ "./src/nerdamer/Algebra.js":
/*!*********************************!*\
  !*** ./src/nerdamer/Algebra.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module, Function */\r\n\r\nif(true) {\r\n    var nerdamer = __webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\");\r\n    __webpack_require__(/*! ./Calculus.js */ \"./src/nerdamer/Calculus.js\");\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    /*shortcuts*/\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            N = core.groups.N,\r\n            P = core.groups.P,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            keys = core.Utils.keys,\r\n            even = core.Utils.even,\r\n            variables = core.Utils.variables,\r\n            format = core.Utils.format,\r\n            round = core.Utils.round,\r\n            Frac = core.Frac,\r\n            isInt = core.Utils.isInt,\r\n            Symbol = core.Symbol,\r\n            CONST_HASH = core.Settings.CONST_HASH,\r\n            math = core.Utils.importFunctions(),\r\n            evaluate = core.Utils.evaluate;\r\n    //*************** CLASSES ***************//\r\n    /**\r\n     * Converts a symbol into an equivalent polynomial arrays of \r\n     * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n     * Univariate polymials only. \r\n     * @param {Symbol|Number} symbol\r\n     * @param {String} variable The variable name of the polynomial\r\n     * @param {int} order\r\n     */\r\n    function Polynomial(symbol, variable, order) {\r\n        if(core.Utils.isSymbol(symbol)) {\r\n            this.parse(symbol);\r\n            this.variable = this.variable || variable;\r\n        }\r\n        else if(!isNaN(symbol)) {\r\n            order = order || 0;\r\n            if(variable === undefined)\r\n                throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\r\n            this.coeffs = [];\r\n            this.coeffs[order] = symbol;\r\n            this.fill(symbol);\r\n        }\r\n        else if(typeof symbol === 'string') {\r\n            this.parse(_.parse(symbol));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Polynomial given an array of coefficients\r\n     * @param {int[]} arr\r\n     * @param {String} variable\r\n     * @returns {Polynomial}\r\n     */\r\n    Polynomial.fromArray = function (arr, variable) {\r\n        if(typeof variable === 'undefined')\r\n            throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\r\n        var p = new Polynomial();\r\n        p.coeffs = arr;\r\n        p.variable = variable;\r\n        return p;\r\n    };\r\n\r\n    Polynomial.fit = function (c1, c2, n, base, p, variable) {\r\n        //after having looped through and mod 10 the number to get the matching factor\r\n        var terms = new Array(p + 1),\r\n                t = n - c2;\r\n        terms[0] = c2; //the constants is assumed to be correct\r\n        //constant for x^p is also assumed know so add\r\n        terms[p] = c1;\r\n        t -= c1 * Math.pow(base, p);\r\n        //start fitting\r\n        for(var i = p - 1; i > 0; i--) {\r\n            var b = Math.pow(base, i), //we want as many wholes as possible\r\n                    q = t / b,\r\n                    sign = Math.sign(q);\r\n            var c = sign * Math.floor(Math.abs(q));\r\n            t -= c * b;\r\n            terms[i] = c;\r\n        }\r\n        if(t !== 0)\r\n            return null;\r\n        for(var i = 0; i < terms.length; i++)\r\n            terms[i] = new Frac(terms[i]);\r\n\r\n        return Polynomial.fromArray(terms, variable);\r\n    };\r\n\r\n    Polynomial.prototype = {\r\n        /**\r\n         * Converts Symbol to Polynomial\r\n         * @param {Symbol} symbol\r\n         * @param {Array} c - a collector array\r\n         * @returns {Polynomial}\r\n         */\r\n        parse: function (symbol, c) {\r\n            this.variable = variables(symbol)[0];\r\n            if(!symbol.isPoly())\r\n                throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received ' + core.Utils.text(symbol));\r\n            c = c || [];\r\n            if(!symbol.power.absEquals(1))\r\n                symbol = _.expand(symbol);\r\n\r\n            if(symbol.group === core.groups.N) {\r\n                c[0] = symbol.multiplier;\r\n            }\r\n            else if(symbol.group === core.groups.S) {\r\n                c[symbol.power.toDecimal()] = symbol.multiplier;\r\n            }\r\n            else {\r\n                for(var x in symbol.symbols) {\r\n                    var sub = symbol.symbols[x],\r\n                            p = sub.power;\r\n                    if(core.Utils.isSymbol(p))\r\n                        throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\r\n\r\n                    p = sub.group === N ? 0 : p.toDecimal();\r\n                    if(sub.symbols) {\r\n                        this.parse(sub, c);\r\n                    }\r\n                    else {\r\n                        c[p] = sub.multiplier;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.coeffs = c;\r\n\r\n            this.fill();\r\n        },\r\n        /**\r\n         * Fills in the holes in a polynomial with zeroes\r\n         * @param {Number} x - The number to fill the holes with\r\n         */\r\n        fill: function (x) {\r\n            x = Number(x) || 0;\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(this.coeffs[i] === undefined) {\r\n                    this.coeffs[i] = new Frac(x);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Removes higher order zeros or a specific coefficient\r\n         * @returns {Array}\r\n         */\r\n        trim: function () {\r\n            var l = this.coeffs.length;\r\n            while(l--) {\r\n                var c = this.coeffs[l];\r\n                var equalsZero = c.equals(0);\r\n                if(c && equalsZero) {\r\n                    if(l === 0)\r\n                        break;\r\n                    this.coeffs.pop();\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /*\r\n         * Returns polynomial mod p **currently fails**\r\n         * @param {Number} p\r\n         * @returns {Polynomial}\r\n         */\r\n        modP: function (p) {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = this.coeffs[i];\r\n                if(c < 0) { //go borrow\r\n                    var b; //a coefficient > 0\r\n                    for(var j = i; j < l; j++) {//starting from where we left off\r\n                        if(this.coeffs[j] > 0) {\r\n                            b = this.coeffs[j];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(b) { //if such a coefficient exists\r\n                        for(j; j > i; j--) { //go down the line and adjust using p\r\n                            this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\r\n                            this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));\r\n                        }\r\n                        c = this.coeffs[i]; //reset c\r\n                    }\r\n                }\r\n\r\n                var d = c.mod(p);\r\n                var w = c.subtract(d).divide(p);\r\n                if(!w.equals(0)) {\r\n                    var up_one = i + 1;\r\n                    var next = this.coeffs[up_one] || new Frac(0);\r\n                    next = next.add(w);\r\n                    this.coeffs[up_one] = new Frac(next);\r\n                    this.coeffs[i] = new Frac(d);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        add: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.add(b);\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        subtract: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.subtract(b);\r\n            }\r\n            return this;\r\n        },\r\n        divide: function (poly) {\r\n            var variable = this.variable,\r\n                    dividend = core.Utils.arrayClone(this.coeffs),\r\n                    divisor = core.Utils.arrayClone(poly.coeffs),\r\n                    n = dividend.length,\r\n                    mp = divisor.length - 1,\r\n                    quotient = [];\r\n\r\n            //loop through the dividend\r\n            for(var i = 0; i < n; i++) {\r\n                var p = n - (i + 1);\r\n                //get the difference of the powers\r\n                var d = p - mp;\r\n                //get the quotient of the coefficients\r\n                var q = dividend[p].divide(divisor[mp]);\r\n\r\n                if(d < 0)\r\n                    break;//the divisor is not greater than the dividend\r\n                //place it in the quotient\r\n                quotient[d] = q;\r\n\r\n                for(var j = 0; j <= mp; j++) {\r\n                    //reduce the dividend\r\n                    dividend[j + d] = dividend[j + d].subtract((divisor[j].multiply(q)));\r\n                }\r\n            }\r\n\r\n            //clean up\r\n            var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(), //pass in x for safety\r\n                    p2 = Polynomial.fromArray(quotient, variable || 'x');\r\n            return [p2, p1];\r\n        },\r\n        multiply: function (poly) {\r\n            var l1 = this.coeffs.length, l2 = poly.coeffs.length,\r\n                    c = []; //array to be returned\r\n            for(var i = 0; i < l1; i++) {\r\n                var x1 = this.coeffs[i];\r\n                for(var j = 0; j < l2; j++) {\r\n                    var k = i + j, //add the powers together\r\n                            x2 = poly.coeffs[j],\r\n                            e = c[k] || new Frac(0); //get the existing term from the new array\r\n                    c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\r\n                }\r\n            }\r\n            this.coeffs = c;\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks if a polynomial is zero\r\n         * @returns {Boolean}\r\n         */\r\n        isZero: function () {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /** \r\n         * Substitutes in a number n into the polynomial p(n)\r\n         * @param {Number} n\r\n         * @returns {Frac}\r\n         */\r\n        sub: function (n) {\r\n            var sum = new Frac(0), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var t = this.coeffs[i];\r\n                if(!t.equals(0))\r\n                    sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\r\n            }\r\n            return sum;\r\n        },\r\n        /**\r\n         * Returns a clone of the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        clone: function () {\r\n            var p = new Polynomial();\r\n            p.coeffs = this.coeffs;\r\n            p.variable = this.variable;\r\n            return p;\r\n        },\r\n        /**\r\n         * Gets the degree of the polynomial\r\n         * @returns {Number}\r\n         */\r\n        deg: function () {\r\n            this.trim();\r\n            return this.coeffs.length - 1;\r\n        },\r\n        /**\r\n         * Returns a lead coefficient\r\n         * @returns {Frac}\r\n         */\r\n        lc: function () {\r\n            return this.coeffs[this.deg()].clone();\r\n        },\r\n        /**\r\n         * Converts polynomial into a monic polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        monic: function () {\r\n            var lc = this.lc(), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++)\r\n                this.coeffs[i] = this.coeffs[i].divide(lc);\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the GCD of two polynomials\r\n         * @param {Polynomial} poly\r\n         * @returns {Polynomial}\r\n         */\r\n        gcd: function (poly) {\r\n            //get the maximum power of each\r\n            var mp1 = this.coeffs.length - 1,\r\n                    mp2 = poly.coeffs.length - 1,\r\n                    T;\r\n            //swap so we always have the greater power first\r\n            if(mp1 < mp2) {\r\n                return poly.gcd(this);\r\n            }\r\n            var a = this;\r\n\r\n            while(!poly.isZero()) {\r\n                var t = poly.clone();\r\n                a = a.clone();\r\n                T = a.divide(t);\r\n                poly = T[1];\r\n                a = t;\r\n            }\r\n\r\n            var gcd = core.Math2.QGCD.apply(null, a.coeffs);\r\n            if(!gcd.equals(1)) {\r\n                var l = a.coeffs.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    a.coeffs[i] = a.coeffs[i].divide(gcd);\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        /**\r\n         * Differentiates the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        diff: function () {\r\n            var new_array = [], l = this.coeffs.length;\r\n            for(var i = 1; i < l; i++)\r\n                new_array.push(this.coeffs[i].multiply(new Frac(i)));\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Integrates the polynomial\r\n         * @returns {Polynomial} \r\n         */\r\n        integrate: function () {\r\n            var new_array = [0], l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = new Frac(i + 1);\r\n                new_array[c] = this.coeffs[i].divide(c);\r\n            }\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the Greatest common factor of the polynomial\r\n         * @param {bool} toPolynomial - true if a polynomial is wanted\r\n         * @returns {Frac|Polynomial}\r\n         */\r\n        gcf: function (toPolynomial) {\r\n            //get the first nozero coefficient and returns its power\r\n            var fnz = function (a) {\r\n                for(var i = 0; i < a.length; i++)\r\n                    if(!a[i].equals(0))\r\n                        return i;\r\n            },\r\n                    ca = [];\r\n            for(var i = 0; i < this.coeffs.length; i++) {\r\n                var c = this.coeffs[i];\r\n                if(!c.equals(0) && ca.indexOf(c) === -1)\r\n                    ca.push(c);\r\n            }\r\n            var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal();\r\n\r\n            if(toPolynomial) {\r\n                var parr = [];\r\n                parr[p[1] - 1] = p[0];\r\n                p = Polynomial.fromArray(parr, this.variable).fill();\r\n            }\r\n\r\n            return p;\r\n        },\r\n        /**\r\n         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n         * @param {bool} incl_img - Include imaginary numbers \r\n         */\r\n        quad: function (incl_img) {\r\n            var roots = [];\r\n            if(this.coeffs.length > 3)\r\n                throw new Error('Cannot calculate quadratic order of ' + (this.coeffs.length - 1));\r\n            if(this.coeffs.length === 0)\r\n                throw new Error('Polynomial array has no terms');\r\n            var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];\r\n            var dsc = b * b - 4 * a * c;\r\n            if(dsc < 0 && !incl_img)\r\n                return roots;\r\n            else {\r\n                roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);\r\n                roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);\r\n            }\r\n            return roots;\r\n        },\r\n        /**\r\n         * Makes polynomial square free\r\n         * @returns {Array}\r\n         */\r\n        squareFree: function () {\r\n\r\n            var a = this.clone(),\r\n                    i = 1,\r\n                    b = a.clone().diff(),\r\n                    c = a.clone().gcd(b),\r\n                    w = a.divide(c)[0];\r\n            var output = Polynomial.fromArray([new Frac(1)], a.variable);\r\n            while(!c.equalsNumber(1)) {\r\n                var y = w.gcd(c);\r\n                var z = w.divide(y)[0];\r\n                //one of the factors may have shown up since it's square but smaller than the \r\n                //one where finding\r\n                if(!z.equalsNumber(1) && i > 1) {\r\n                    var t = z.clone();\r\n                    for(var j = 1; j < i; j++)\r\n                        t.multiply(z.clone());\r\n                    z = t;\r\n                }\r\n                output = output.multiply(z);\r\n                i++;\r\n                w = y;\r\n                c = c.divide(y)[0];\r\n            }\r\n\r\n            return [output, w, i];\r\n        },\r\n        /**\r\n         * Converts polynomial to Symbol\r\n         * @returns {Symbol}\r\n         */\r\n        toSymbol: function () {\r\n            var l = this.coeffs.length,\r\n                    variable = this.variable;\r\n            if(l === 0)\r\n                return new core.Symbol(0);\r\n            var end = l - 1, str = '';\r\n\r\n            for(var i = 0; i < l; i++) {\r\n                //place the plus sign for all but the last one\r\n                var plus = i === end ? '' : '+',\r\n                        e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    str += (e + '*' + variable + '^' + i + plus);\r\n            }\r\n            return _.parse(str);\r\n        },\r\n        /**\r\n         * Checks if polynomial is equal to a number\r\n         * @param {Number} x\r\n         * @returns {Boolean}\r\n         */\r\n        equalsNumber: function (x) {\r\n            this.trim();\r\n            return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\r\n        },\r\n        toString: function () {\r\n            return this.toSymbol().toString();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * TODO\r\n     * ===================================================================================\r\n     * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n     * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n     * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n     * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n     * ===================================================================================\r\n     * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n     * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n     * so the symbol multiplier carries the coefficients for all contained symbols.\r\n     * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n     * @param {Array} c The coefficient array\r\n     * @param {boolean} with_order \r\n     * @return {Array}\r\n     */\r\n    Symbol.prototype.coeffs = function (c, with_order) {\r\n        if(with_order && !this.isPoly(true))\r\n            _.error('Polynomial expected when requesting coefficients with order');\r\n        c = c || [];\r\n        var s = this.clone().distributeMultiplier();\r\n        if(s.isComposite()) {\r\n            for(var x in s.symbols) {\r\n                var sub = s.symbols[x];\r\n                if(sub.isComposite()) {\r\n                    sub.clone().distributeMultiplier().coeffs(c, with_order);\r\n                }\r\n                else {\r\n                    if(with_order)\r\n                        c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;\r\n                    else {\r\n                        c.push(sub.multiplier);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(with_order)\r\n                c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;\r\n            else {\r\n                if(s.group === CB && s.isImaginary()) {\r\n                    var m = new Symbol(s.multiplier);\r\n                    s.each(function (x) {\r\n                        //add the imaginary part\r\n                        if(x.isConstant(true) || x.imaginary)\r\n                            m = _.multiply(m, x);\r\n                    });\r\n                    c.push(m);\r\n                }\r\n                else\r\n                    c.push(s.multiplier);\r\n            }\r\n        }\r\n        //fill the holes\r\n        if(with_order) {\r\n            for(var i = 0; i < c.length; i++)\r\n                if(c[i] === undefined)\r\n                    c[i] = new Symbol(0);\r\n        }\r\n        return c;\r\n    };\r\n    Symbol.prototype.tBase = function (map) {\r\n        if(typeof map === 'undefined')\r\n            throw new Error('Symbol.tBase requires a map object!');\r\n        var terms = [];\r\n        var symbols = this.collectSymbols(null, null, null, true),\r\n                l = symbols.length;\r\n        for(var i = 0; i < l; i++) {\r\n            var symbol = symbols[i],\r\n                    g = symbol.group,\r\n                    nterm = new MVTerm(symbol.multiplier, [], map);\r\n            if(g === CB) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    nterm.terms[map[x]] = sym.power;\r\n                }\r\n            }\r\n            else {\r\n                nterm.terms[map[symbol.value]] = symbol.power;\r\n            }\r\n\r\n            terms.push(nterm.fill());\r\n            nterm.updateCount();\r\n        }\r\n        return terms;\r\n    };\r\n    Symbol.prototype.altVar = function (x) {\r\n        var m = this.multiplier.toString(), p = this.power.toString();\r\n        return (m === '1' ? '' : m + '*') + x + (p === '1' ? '' : '^' + p);\r\n    };\r\n    /**\r\n     * Checks to see if the symbols contain the same variables\r\n     * @param {Symbol} symbol\r\n     * @returns {Boolean}\r\n     */\r\n    Symbol.prototype.sameVars = function (symbol) {\r\n        if(!(this.symbols || this.group === symbol.group))\r\n            return false;\r\n        for(var x in this.symbols) {\r\n            var a = this.symbols[x], b = symbol.symbols[x];\r\n            if(!b)\r\n                return false;\r\n            if(a.value !== b.value)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Groups the terms in a symbol with respect to a variable\r\n     * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n     * @returns {Factors}\r\n     */\r\n    Symbol.prototype.groupTerms = function (x) {\r\n        x = String(x);\r\n        var f, p, egrouped;\r\n        var grouped = [];\r\n        this.each(function (e) {\r\n            if(e.group === PL) {\r\n                egrouped = e.groupTerms(x);\r\n                for(var i = 0; i < egrouped.length; i++) {\r\n                    var el = egrouped[i];\r\n                    if(el)\r\n                        grouped[i] = el;\r\n                }\r\n            }\r\n            else {\r\n                f = core.Utils.decompose_fn(e, x, true);\r\n                p = f.x.value === x ? Number(f.x.power) : 0;\r\n                //check if there's an existing value\r\n                grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\r\n            }\r\n        });\r\n        return grouped;\r\n    };\r\n    /**\r\n     * Use this to collect Factors\r\n     * @returns {Symbol[]}\r\n     */\r\n    Symbol.prototype.collectFactors = function () {\r\n        var factors = [];\r\n        if(this.group === CB)\r\n            this.each(function (x) {\r\n                factors.push(x.clone());\r\n            });\r\n        else\r\n            factors.push(this.clone());\r\n        return factors;\r\n    };\r\n    /**\r\n     * A container class for factors\r\n     * @returns {Factors}\r\n     */\r\n    function Factors() {\r\n        this.factors = {};\r\n        this.length = 0;\r\n    }\r\n    ;\r\n    Factors.prototype.getNumberSymbolics = function () {\r\n        var n = 0;\r\n        this.each(function (x) {\r\n            if(!x.isConstant(true))\r\n                n++;\r\n        });\r\n        return n;\r\n    };\r\n    /**\r\n     * Adds the factors to the factor object\r\n     * @param {Symbo} s\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.add = function (s) {\r\n        if(s.equals(0))\r\n            return this; //nothing to add\r\n\r\n        //we don't want to carry -1 as a factor. If a factor already exists,\r\n        //then add the minus one to that factor and return.\r\n        if(s.equals(-1) && this.length > 0) {\r\n            var fo = core.Utils.firstObject(this.factors, null, true);\r\n            this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\r\n            delete this.factors[fo.key];\r\n            this.length--;\r\n            return this;\r\n        }\r\n\r\n        if(s.group === CB) {\r\n            var factors = this;\r\n            if(!s.multiplier.equals(1))\r\n                factors.add(new Symbol(s.multiplier));\r\n            s.each(function (x) {\r\n                factors.add(x);\r\n            });\r\n        }\r\n        else {\r\n            if(this.preAdd) //if a preAdd function was defined call it to do prep\r\n                s = this.preAdd(s);\r\n            if(this.pFactor) //if the symbol isn't linear add back the power\r\n                s = _.pow(s, new Symbol(this.pFactor));\r\n\r\n            var is_constant = s.isConstant();\r\n            if(is_constant && s.equals(1))\r\n                return this; //don't add 1\r\n            var v = is_constant ? s.value : s.text();\r\n            if(v in this.factors) {\r\n                this.factors[v] = _.multiply(this.factors[v], s);\r\n                //did the addition cancel out the existing factor? If so remove it and decrement the length\r\n                if(this.factors[v].equals(1)) {\r\n                    delete this.factors[v];\r\n                    this.length--;\r\n                }\r\n            }\r\n            else {\r\n                this.factors[v] = s;\r\n                this.length++;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts the factor object to a Symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Factors.prototype.toSymbol = function () {\r\n        var factored = new Symbol(1);\r\n        var factors = Object.values(this.factors).sort(function (a, b) {\r\n            return a.group > b.group;\r\n        });\r\n\r\n        for(var i = 0, l = factors.length; i < l; i++) {\r\n            var f = factors[i];\r\n\r\n            //don't wrap group S or FN\r\n            var factor = f.power.equals(1) && f.fname !== '' /* don't wrap it twice */ ?\r\n                    _.symfunction(core.PARENTHESIS, [f]) : f;\r\n\r\n            factored = _.multiply(factored, factor);\r\n        }\r\n        if(factored.fname === '')\r\n            factored = Symbol.unwrapPARENS(factored);\r\n        return factored;\r\n    };\r\n    /**\r\n     * Merges 2 factor objects into one\r\n     * @param {Factor} o\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.merge = function (o) {\r\n        for(var x in o) {\r\n            if(x in this.factors)\r\n                this.factors[x] = _.multiply(this.factors[x], o[x]);\r\n            else\r\n                this.factors[x] = o[x];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The iterator for the factor object\r\n     * @param {Function} f - callback\r\n     * @returns {Factor}\r\n     */\r\n    Factors.prototype.each = function (f) {\r\n        for(var x in this.factors) {\r\n            var factor = this.factors[x];\r\n            if(factor.fname === core.PARENTHESIS && factor.isLinear())\r\n                factor = factor.args[0];\r\n            f.call(this, factor, x);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Return the number of factors contained in the factor object\r\n     * @returns {int}\r\n     */\r\n    Factors.prototype.count = function () {\r\n        return keys(this.factors).length;\r\n    };\r\n    /**\r\n     * Cleans up factors from -1\r\n     * @returns {undefined}\r\n     */\r\n    Factors.prototype.clean = function () {\r\n        try {\r\n            var h = core.Settings.CONST_HASH;\r\n            if(this.factors[h].lessThan(0)) {\r\n                if(this.factors[h].equals(-1))\r\n                    delete this.factors[h];\r\n                else\r\n                    this.factors[h].negate();\r\n                this.each(function (x) {\r\n                    x.negate();\r\n                });\r\n            }\r\n        }\r\n        catch(e) {\r\n        }\r\n        ;\r\n    };\r\n    Factors.prototype.toString = function () {\r\n        return this.toSymbol().toString();\r\n    };\r\n\r\n    //a wrapper for performing multivariate division\r\n    function MVTerm(coeff, terms, map) {\r\n        this.terms = terms || [];\r\n        this.coeff = coeff;\r\n        this.map = map; //careful! all maps are the same object\r\n        this.sum = new core.Frac(0);\r\n        this.image = undefined;\r\n    }\r\n    ;\r\n    MVTerm.prototype.updateCount = function () {\r\n        this.count = this.count || 0;\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            if(!this.terms[i].equals(0))\r\n                this.count++;\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.getVars = function () {\r\n        var vars = [];\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var term = this.terms[i],\r\n                    rev_map = this.getRevMap();\r\n            if(!term.equals(0))\r\n                vars.push(this.rev_map[i]);\r\n        }\r\n        return vars.join(' ');\r\n    };\r\n    MVTerm.prototype.len = function () {\r\n        if(typeof this.count === 'undefined') {\r\n            this.updateCount();\r\n        }\r\n        return this.count;\r\n    };\r\n    MVTerm.prototype.toSymbol = function (rev_map) {\r\n        rev_map = rev_map || this.getRevMap();\r\n        var symbol = new Symbol(this.coeff);\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var v = rev_map[i],\r\n                    t = this.terms[i];\r\n            if(t.equals(0) || v === CONST_HASH)\r\n                continue;\r\n            var mapped = new Symbol(v);\r\n            mapped.power = t;\r\n            symbol = _.multiply(symbol, mapped);\r\n        }\r\n        return symbol;\r\n    };\r\n    MVTerm.prototype.getRevMap = function () {\r\n        if(this.rev_map)\r\n            return this.rev_map;\r\n        var o = {};\r\n        for(var x in this.map)\r\n            o[this.map[x]] = x;\r\n        this.rev_map = o;\r\n        return o;\r\n    };\r\n    MVTerm.prototype.generateImage = function () {\r\n        this.image = this.terms.join(' ');\r\n        return this;\r\n    },\r\n            MVTerm.prototype.getImg = function () {\r\n                if(!this.image)\r\n                    this.generateImage();\r\n                return this.image;\r\n            },\r\n            MVTerm.prototype.fill = function () {\r\n                var l = this.map.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    if(typeof this.terms[i] === 'undefined')\r\n                        this.terms[i] = new core.Frac(0);\r\n                    else {\r\n                        this.sum = this.sum.add(this.terms[i]);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n    MVTerm.prototype.divide = function (mvterm) {\r\n        var c = this.coeff.divide(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.multiply = function (mvterm) {\r\n        var c = this.coeff.multiply(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.isZero = function () {\r\n        return this.coeff.equals(0);\r\n    };\r\n    MVTerm.prototype.toString = function () {\r\n        return '{ coeff: ' + this.coeff.toString() + ', terms: [' +\r\n                this.terms.join(',') + ']: sum: ' + this.sum.toString() + ', count: ' + this.count + '}';\r\n    };\r\n\r\n    core.Utils.toMapObj = function (arr) {\r\n        var c = 0, o = {};\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var v = arr[i];\r\n            if(typeof o[v] === 'undefined') {\r\n                o[v] = c;\r\n                c++;\r\n            }\r\n        }\r\n        o.length = c;\r\n        return o;\r\n    };\r\n    core.Utils.filledArray = function (v, n, clss) {\r\n        var a = [];\r\n        while(n--) {\r\n            a[n] = clss ? new clss(v) : v;\r\n        }\r\n        return a;\r\n    };\r\n    core.Utils.arrSum = function (arr) {\r\n        var sum = 0, l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            sum += arr[i];\r\n        return sum;\r\n    };\r\n    /**\r\n     * Determines if 2 arrays have intersecting elements.\r\n     * @param {Array} a\r\n     * @param {Array} b\r\n     * @returns {Boolean} True if a and b have intersecting elements.\r\n     */\r\n    core.Utils.haveIntersection = function (a, b) {\r\n        var t;\r\n        if(b.length > a.length)\r\n            t = b, b = a, a = t; // indexOf to loop over shorter\r\n        return a.some(function (e) {\r\n            return b.indexOf(e) > -1;\r\n        });\r\n    };\r\n    /**\r\n     * Substitutes out functions as variables so they can be used in regular algorithms\r\n     * @param {Symbol} symbol\r\n     * @param {Object} map\r\n     * @returns {String} The expression string\r\n     */\r\n    core.Utils.subFunctions = function (symbol, map) {\r\n        map = map || {};\r\n        var subbed = [];\r\n        symbol.each(function (x) {\r\n            if(x.group === FN || x.previousGroup === FN) {\r\n                //we need a new variable name so why not use one of the existing\r\n                var val = core.Utils.text(x, 'hash'), tvar = map[val];\r\n                if(!tvar) {\r\n                    //generate a unique enough name\r\n                    var t = x.fname + keys(map).length;\r\n                    map[val] = t;\r\n                    subbed.push(x.altVar(t));\r\n                }\r\n                else\r\n                    subbed.push(x.altVar(tvar));\r\n            }\r\n            else if(x.group === CB || x.group === PL || x.group === CP) {\r\n                subbed.push(core.Utils.subFunctions(x, map));\r\n            }\r\n            else\r\n                subbed.push(x.text());\r\n        });\r\n        if(symbol.group === CP || symbol.group === PL)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));\r\n        ;\r\n        if(symbol.group === CB)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\r\n        return symbol.text();\r\n    };\r\n    core.Utils.getFunctionsSubs = function (map) {\r\n        var subs = {};\r\n        //prepare substitutions\r\n        for(var x in map)\r\n            subs[map[x]] = _.parse(x);\r\n        return subs;\r\n    };\r\n\r\n    var __ = core.Algebra = {\r\n        version: '1.4.6',\r\n        proots: function (symbol, decp) {\r\n            //the roots will be rounded up to 7 decimal places.\r\n            //if this causes trouble you can explicitly pass in a different number of places\r\n            //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\r\n            decp = decp || 7;\r\n            var zeros = 0;\r\n            var known_roots = [];\r\n            var get_roots = function (rarr, powers, max) {\r\n                var roots = calcroots(rarr, powers, max).concat(known_roots);\r\n                for(var i = 0; i < zeros; i++)\r\n                    roots.unshift(0);\r\n                return roots;\r\n            };\r\n\r\n            if(symbol instanceof Symbol && symbol.isPoly()) {\r\n                symbol.distributeMultiplier();\r\n                //make it so the symbol has a constants as the lowest term\r\n                if(symbol.group === PL) {\r\n                    var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\r\n                    var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\r\n                    symbol = _.expand(_.divide(symbol, lowest_symbol));\r\n                    known_roots.push(0); //add zero since this is a known root\r\n                }\r\n                if(symbol.group === core.groups.S) {\r\n                    return [0];\r\n                }\r\n                else if(symbol.group === core.groups.PL) {\r\n                    var powers = keys(symbol.symbols),\r\n                            minpower = core.Utils.arrayMin(powers),\r\n                            symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + '^' + minpower));\r\n                }\r\n\r\n                var variable = keys(symbol.symbols).sort().pop(),\r\n                        sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable],\r\n                        g = sym.group,\r\n                        powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\r\n                        rarr = [],\r\n                        max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\r\n\r\n                // Prepare the data\r\n                for(var i = 1; i <= max; i++) {\r\n                    var c = 0; //if there is no power then the hole must be filled with a zero\r\n                    if(powers.indexOf(i + '') !== -1) {\r\n                        if(g === S) {\r\n                            c = sym.multiplier;\r\n                        }\r\n                        else {\r\n                            c = sym.symbols[i].multiplier;\r\n                        }\r\n                    }\r\n                    // Insert the coeffient but from the front\r\n                    rarr.unshift(c);\r\n                }\r\n\r\n                rarr.push(symbol.symbols[CONST_HASH].multiplier);\r\n\r\n                if(sym.group === S)\r\n                    rarr[0] = sym.multiplier;//the symbol maybe of group CP with one variable\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else if(core.Utils.isArray(symbol)) {\r\n                var parr = symbol;\r\n                var rarr = [],\r\n                        powers = [],\r\n                        last_power = 0;\r\n                for(var i = 0; i < parr.length; i++) {\r\n\r\n                    var coeff = parr[i][0],\r\n                            pow = parr[i][1],\r\n                            d = pow - last_power - 1;\r\n                    //insert the zeros\r\n                    for(var j = 0; j < d; j++)\r\n                        rarr.unshift(0);\r\n\r\n                    rarr.unshift(coeff);\r\n                    if(pow !== 0)\r\n                        powers.push(pow);\r\n                    last_power = pow;\r\n                }\r\n                var max = Math.max.apply(undefined, powers);\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else {\r\n                throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\r\n            }\r\n\r\n            function calcroots(rarr, powers, max) {\r\n                var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\r\n\r\n                // Make a clone of the coefficients before appending the max power\r\n                var p = rarr.slice(0);\r\n\r\n                // Divide the string up into its individual entries, which--presumably--are separated by whitespace\r\n                rarr.unshift(max);\r\n\r\n                if(max > MAXDEGREE) {\r\n                    throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\r\n                }\r\n\r\n                var zeroi = [], // Vector of imaginary components of roots\r\n                        degreePar = {};    // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\r\n                degreePar.Degree = max;\r\n\r\n                for(i = 0; i < max; i++) {\r\n                    zeroi.push(0);\r\n                }\r\n                var zeror = zeroi.slice(0); // Vector of real components of roots\r\n\r\n                // Find the roots\r\n                //--> Begin Jenkins-Traub\r\n\r\n                /*\r\n                 * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n                 */\r\n                function QuadSD_ak1(NN, u, v, p, q, iPar) {\r\n                    // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\r\n                    // iPar is a dummy variable for passing in the two parameters--a and b--by reference\r\n                    q[0] = iPar.b = p[0];\r\n                    q[1] = iPar.a = -(u * iPar.b) + p[1];\r\n\r\n                    for(var i = 2; i < NN; i++) {\r\n                        q[i] = -(u * iPar.a + v * iPar.b) + p[i];\r\n                        iPar.b = iPar.a;\r\n                        iPar.a = q[i];\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk) {\r\n                    // This routine calculates scalar quantities used to compute the next K polynomial and\r\n                    // new estimates of the quadratic coefficients.\r\n                    // calcSC -\tinteger variable set here indicating how the calculations are normalized\r\n                    // to avoid overflow.\r\n                    // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\r\n\r\n                    // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\r\n                    var sdPar = new Object(),\r\n                            // TYPE = 3 indicates the quadratic is almost a factor of K\r\n                            dumFlag = 3;\r\n\r\n                    // Synthetic division of K by the quadratic 1, u, v\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(N, u, v, K, qk, sdPar);\r\n                    iPar.c = sdPar.a;\r\n                    iPar.d = sdPar.b;\r\n\r\n                    if(Math.abs(iPar.c) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 1]))) {\r\n                        if(Math.abs(iPar.d) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 2])))\r\n                            return dumFlag;\r\n                    }\r\n\r\n                    iPar.h = v * b;\r\n                    if(Math.abs(iPar.d) >= Math.abs(iPar.c)) {\r\n                        // TYPE = 2 indicates that all formulas are divided by d\r\n                        dumFlag = 2;\r\n                        iPar.e = a / (iPar.d);\r\n                        iPar.f = (iPar.c) / (iPar.d);\r\n                        iPar.g = u * b;\r\n                        iPar.a3 = (iPar.e) * ((iPar.g) + a) + (iPar.h) * (b / (iPar.d));\r\n                        iPar.a1 = -a + (iPar.f) * b;\r\n                        iPar.a7 = (iPar.h) + ((iPar.f) + u) * a;\r\n                    }\r\n                    else {\r\n                        // TYPE = 1 indicates that all formulas are divided by c;\r\n                        dumFlag = 1;\r\n                        iPar.e = a / (iPar.c);\r\n                        iPar.f = (iPar.d) / (iPar.c);\r\n                        iPar.g = (iPar.e) * u;\r\n                        iPar.a3 = (iPar.e) * a + ((iPar.g) + (iPar.h) / (iPar.c)) * b;\r\n                        iPar.a1 = -(a * ((iPar.d) / (iPar.c))) + b;\r\n                        iPar.a7 = (iPar.g) * (iPar.d) + (iPar.h) * (iPar.f) + a;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp) {\r\n                    // Computes the next K polynomials using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\r\n                    var temp;\r\n                    if(tFlag == 3) {\t// Use unscaled form of the recurrence\r\n                        K[1] = K[0] = 0.0;\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = qk[i - 2];\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    temp = ((tFlag == 1) ? b : a);\r\n                    if(Math.abs(iPar.a1) > (10.0 * DBL_EPSILON * Math.abs(temp))) {\r\n                        // Use scaled form of the recurrence\r\n                        iPar.a7 /= iPar.a1;\r\n                        iPar.a3 /= iPar.a1;\r\n                        K[0] = qp[0];\r\n                        K[1] = -(qp[0] * iPar.a7) + qp[1];\r\n                        for(var i = 2; i < N; i++)\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3 + qp[i];\r\n                    }\r\n                    else {\r\n                        // If a1 is nearly zero, then use a special form of the recurrence\r\n                        K[0] = 0.0;\r\n                        K[1] = -(qp[0] * iPar.a7);\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3;\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p) {\r\n                    // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\r\n                    // iPar.a = uu, iPar.b = vv\r\n\r\n                    var a4, a5, b1, b2, c1, c2, c3, c4, temp;\r\n                    iPar.b = iPar.a = 0.0;// The quadratic is zeroed\r\n\r\n                    if(tFlag != 3) {\r\n                        if(tFlag != 2) {\r\n                            a4 = a + u * b + h * f;\r\n                            a5 = c + (u + v * f) * d;\r\n                        }\r\n                        else {\r\n                            a4 = (a + g) * f + h;\r\n                            a5 = (f + u) * c + v * d;\r\n                        }\r\n\r\n                        // Evaluate new quadratic coefficients\r\n                        b1 = -(K[N - 1] / p[N]);\r\n                        b2 = -(K[N - 2] + b1 * p[N - 1]) / p[N];\r\n                        c1 = v * b2 * a1;\r\n                        c2 = b1 * a7;\r\n                        c3 = b1 * b1 * a3;\r\n                        c4 = -(c2 + c3) + c1;\r\n                        temp = -c4 + a5 + b1 * a4;\r\n                        if(temp != 0.0) {\r\n                            iPar.a = -((u * (c3 + c2) + v * (b1 * a1 + b2 * a7)) / temp) + u;\r\n                            iPar.b = v * (1.0 + c4 / temp);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function Quad_ak1(a, b1, c, iPar) {\r\n                    // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\r\n                    // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\r\n                    // zeros are real and both zeros are complex. The smaller real zero is found directly from\r\n                    // the product of the zeros c/a.\r\n\r\n                    // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\r\n\r\n                    var b, d, e;\r\n                    iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\r\n\r\n                    if(a == 0) {\r\n                        iPar.sr = ((b1 != 0) ? -(c / b1) : iPar.sr);\r\n                        return;\r\n                    }\r\n                    if(c == 0) {\r\n                        iPar.lr = -(b1 / a);\r\n                        return;\r\n                    }\r\n\r\n                    // Compute discriminant avoiding overflow\r\n                    b = b1 / 2.0;\r\n                    if(Math.abs(b) < Math.abs(c)) {\r\n                        e = ((c >= 0) ? a : -a);\r\n                        e = -e + b * (b / Math.abs(c));\r\n                        d = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c));\r\n                    }\r\n                    else {\r\n                        e = -((a / b) * (c / b)) + 1.0;\r\n                        d = Math.sqrt(Math.abs(e)) * (Math.abs(b));\r\n                    }\r\n\r\n                    if(e >= 0) {\r\n                        // Real zeros\r\n                        d = ((b >= 0) ? -d : d);\r\n                        iPar.lr = (-b + d) / a;\r\n                        iPar.sr = ((iPar.lr != 0) ? (c / (iPar.lr)) / a : iPar.sr);\r\n                    }\r\n                    else {\r\n                        // Complex conjugate zeros\r\n                        iPar.lr = iPar.sr = -(b / a);\r\n                        iPar.si = Math.abs(d / a);\r\n                        iPar.li = -(iPar.si);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K) {\r\n                    // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\r\n                    // zeros are equimodular or nearly so.\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\r\n                    // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\r\n\r\n                    // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\r\n                    var qPar = new Object(),\r\n                            ee, mp, omp, relstp, t, u, ui, v, vi, zm,\r\n                            i, j = 0, tFlag, triedFlag = 0;   // Integer variables\r\n\r\n                    iPar.NZ = 0;// Number of zeros found\r\n                    u = uu; // uu and vv are coefficients of the starting quadratic\r\n                    v = vv;\r\n\r\n                    do {\r\n                        qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                        Quad_ak1(1.0, u, v, qPar);\r\n                        iPar.szr = qPar.sr;\r\n                        iPar.szi = qPar.si;\r\n                        iPar.lzr = qPar.lr;\r\n                        iPar.lzi = qPar.li;\r\n\r\n                        // Return if roots of the quadratic are real and not close to multiple or nearly\r\n                        // equal and of opposite sign.\r\n                        if(Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr))\r\n                            break;\r\n\r\n                        // Evaluate polynomial by quadratic synthetic division\r\n\r\n                        QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n\r\n                        mp = Math.abs(-((iPar.szr) * (sdPar.b)) + (sdPar.a)) + Math.abs((iPar.szi) * (sdPar.b));\r\n\r\n                        // Compute a rigorous bound on the rounding error in evaluating p\r\n\r\n                        zm = Math.sqrt(Math.abs(v));\r\n                        ee = 2.0 * Math.abs(qp[0]);\r\n                        t = -((iPar.szr) * (sdPar.b));\r\n\r\n                        for(i = 1; i < N; i++) {\r\n                            ee = ee * zm + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        ee = ee * zm + Math.abs(t + sdPar.a);\r\n                        ee = (9.0 * ee + 2.0 * Math.abs(t) - 7.0 * (Math.abs((sdPar.a) + t) + zm * Math.abs((sdPar.b)))) * DBL_EPSILON;\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\r\n                        if(mp <= 20.0 * ee) {\r\n                            iPar.NZ = 2;\r\n                            break;\r\n                        }\r\n\r\n                        j++;\r\n                        // Stop iteration after 20 steps\r\n                        if(j > 20)\r\n                            break;\r\n                        if(j >= 2) {\r\n                            if((relstp <= 0.01) && (mp >= omp) && (!triedFlag)) {\r\n                                // A cluster appears to be stalling the convergence. Five fixed shift\r\n                                // steps are taken with a u, v close to the cluster.\r\n                                relstp = ((relstp < DBL_EPSILON) ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp));\r\n                                u -= u * relstp;\r\n                                v += v * relstp;\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                for(i = 0; i < 5; i++) {\r\n                                    tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                                    nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                                }\r\n\r\n                                triedFlag = 1;\r\n                                j = 0;\r\n\r\n                            }\r\n                        }\r\n                        omp = mp;\r\n\r\n                        // Calculate next K polynomial and new u and v\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vi = sdPar.b;\r\n\r\n                        // If vi is zero, the iteration is not converging\r\n                        if(vi != 0) {\r\n                            relstp = Math.abs((-v + vi) / vi);\r\n                            u = ui;\r\n                            v = vi;\r\n                        }\r\n                    }\r\n                    while(vi != 0);\r\n                    return;\r\n                }\r\n\r\n                function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk) {\r\n                    // Variable-shift H-polynomial iteration for a real zero\r\n                    // sss\t- starting iterate = sdPar.a\r\n                    // NZ\t\t- number of zeros found = iPar.NZ\r\n                    // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\r\n\r\n                    var ee, kv, mp, ms, omp, pv, s, t,\r\n                            dumFlag, i, j, nm1 = N - 1;   // Integer variables\r\n\r\n                    iPar.NZ = j = dumFlag = 0;\r\n                    s = sdPar.a;\r\n\r\n                    for(; ; ) {\r\n                        pv = p[0];\r\n\r\n                        // Evaluate p at s\r\n                        qp[0] = pv;\r\n                        for(i = 1; i < NN; i++) {\r\n                            qp[i] = pv = pv * s + p[i];\r\n                        }\r\n                        mp = Math.abs(pv);\r\n\r\n                        // Compute a rigorous bound on the error in evaluating p\r\n                        ms = Math.abs(s);\r\n                        ee = 0.5 * Math.abs(qp[0]);\r\n                        for(i = 1; i < NN; i++) {\r\n                            ee = ee * ms + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than\r\n                        // 20 times this bound\r\n                        if(mp <= 20.0 * DBL_EPSILON * (2.0 * ee - mp)) {\r\n                            iPar.NZ = 1;\r\n                            iPar.szr = s;\r\n                            iPar.szi = 0.0;\r\n                            break;\r\n                        }\r\n                        j++;\r\n                        // Stop iteration after 10 steps\r\n                        if(j > 10)\r\n                            break;\r\n\r\n                        if(j >= 2) {\r\n                            if((Math.abs(t) <= 0.001 * Math.abs(-t + s)) && (mp > omp)) {\r\n                                // A cluster of zeros near the real axis has been encountered.\r\n                                // Return with iFlag set to initiate a quadratic iteration.\r\n                                dumFlag = 1;\r\n                                iPar.a = s;\r\n                                break;\r\n                            } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\r\n                        } //End if (j >= 2)\r\n\r\n                        // Return if the polynomial value has increased significantly\r\n                        omp = mp;\r\n\r\n                        // Compute t, the next polynomial and the new iterate\r\n                        qk[0] = kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            qk[i] = kv = kv * s + K[i];\r\n                        }\r\n\r\n                        if(Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON) {\r\n                            // Use the scaled form of the recurrence if the value of K at s is non-zero\r\n                            t = -(pv / kv);\r\n                            K[0] = qp[0];\r\n                            for(i = 1; i < N; i++) {\r\n                                K[i] = t * qk[i - 1] + qp[i];\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Use unscaled form\r\n                            K[0] = 0.0;\r\n                            for(i = 1; i < N; i++)\r\n                                K[i] = qk[i - 1];\r\n                        }\r\n\r\n                        kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            kv = kv * s + K[i];\r\n                        }\r\n                        t = ((Math.abs(kv) > (Math.abs(K[nm1]) * 10.0 * DBL_EPSILON)) ? -(pv / kv) : 0.0);\r\n                        s += t;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar) {\r\n\r\n                    // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\r\n                    // quadratic case. Initiates one of the variable shift iterations and returns with the\r\n                    // number of zeros found.\r\n                    // L2\tlimit of fixed shift steps\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // NZ\tnumber of zeros found\r\n                    var sdPar = new Object(), // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\r\n                            calcPar = new Object(),\r\n                            // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\r\n\r\n                            qk = new Array(MDP1),\r\n                            svk = new Array(MDP1),\r\n                            a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv,\r\n                            fflag, i, iFlag = 1, j, spass, stry, tFlag, vpass, vtry;     // Integer variables\r\n\r\n                    iPar.NZ = 0;\r\n                    betav = betas = 0.25;\r\n                    oss = sr;\r\n                    ovv = v;\r\n\r\n                    //Evaluate polynomial by synthetic division\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                    a = sdPar.a;\r\n                    b = sdPar.b;\r\n                    calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\r\n                    tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                    for(j = 0; j < L2; j++) {\r\n                        fflag = 1;\r\n\r\n                        // Calculate next K polynomial and estimate v\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                        // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\r\n                        // sdPar.a = ui, sdPar.b = vi\r\n                        newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vv = vi = sdPar.b;\r\n\r\n                        // Estimate s\r\n                        ss = ((K[N - 1] != 0.0) ? -(p[N] / K[N - 1]) : 0.0);\r\n                        ts = tv = 1.0;\r\n\r\n                        if((j != 0) && (tFlag != 3)) {\r\n                            // Compute relative measures of convergence of s and v sequences\r\n                            tv = ((vv != 0.0) ? Math.abs((vv - ovv) / vv) : tv);\r\n                            ts = ((ss != 0.0) ? Math.abs((ss - oss) / ss) : ts);\r\n\r\n                            // If decreasing, multiply the two most recent convergence measures\r\n                            tvv = ((tv < otv) ? tv * otv : 1.0);\r\n                            tss = ((ts < ots) ? ts * ots : 1.0);\r\n\r\n                            // Compare with convergence criteria\r\n                            vpass = ((tvv < betav) ? 1 : 0);\r\n                            spass = ((tss < betas) ? 1 : 0);\r\n\r\n                            if((spass) || (vpass)) {\r\n\r\n                                // At least one sequence has passed the convergence test.\r\n                                // Store variables before iterating\r\n\r\n                                for(i = 0; i < N; i++) {\r\n                                    svk[i] = K[i];\r\n                                }\r\n                                s = ss;\r\n\r\n                                // Choose iteration according to the fastest converging sequence\r\n\r\n                                stry = vtry = 0;\r\n\r\n                                for(; ; ) {\r\n                                    if((fflag && ((fflag = 0) == 0)) && ((spass) && (!vpass || (tss < tvv)))) {\r\n                                        ;// Do nothing. Provides a quick \"short circuit\".\r\n                                    }\r\n                                    else {\r\n                                        QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\r\n                                        a = sdPar.a;\r\n                                        b = sdPar.b;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Quadratic iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        iFlag = vtry = 1;\r\n                                        betav *= 0.25;\r\n\r\n                                        // Try linear iteration if it has not been tried and the s sequence is converging\r\n                                        if(stry || (!spass)) {\r\n                                            iFlag = 0;\r\n                                        }\r\n                                        else {\r\n                                            for(i = 0; i < N; i++)\r\n                                                K[i] = svk[i];\r\n                                        }\r\n                                    }\r\n                                    //fflag = 0;\r\n                                    if(iFlag != 0) {\r\n                                        // Use sdPar for passing in s instead of defining a brand-new variable.\r\n                                        // sdPar.a = s\r\n                                        sdPar.a = s;\r\n                                        iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\r\n                                        s = sdPar.a;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Linear iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        stry = 1;\r\n                                        betas *= 0.25;\r\n\r\n                                        if(iFlag != 0) {\r\n                                            // If linear iteration signals an almost double real zero, attempt quadratic iteration\r\n                                            ui = -(s + s);\r\n                                            vi = s * s;\r\n                                            continue;\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    // Restore variables\r\n                                    for(i = 0; i < N; i++)\r\n                                        K[i] = svk[i];\r\n\r\n                                    // Try quadratic iteration if it has not been tried and the v sequence is converging\r\n                                    if(!vpass || vtry)\r\n                                        break;\t\t// Break out of infinite for loop\r\n\r\n                                }\r\n\r\n                                // Re-compute qp and scalar values to continue the second stage\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                a = sdPar.a;\r\n                                b = sdPar.b;\r\n\r\n                                tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n                            }\r\n                        }\r\n                        ovv = vv;\r\n                        oss = ss;\r\n                        otv = tv;\r\n                        ots = ts;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function rpSolve(degPar, p, zeror, zeroi) {\r\n                    var N = degPar.Degree,\r\n                            RADFAC = 3.14159265358979323846 / 180, // Degrees-to-radians conversion factor = PI/180\r\n                            LB2 = Math.LN2, // Dummy variable to avoid re-calculating this value in loop below\r\n                            MDP1 = degPar.Degree + 1,\r\n                            K = new Array(MDP1),\r\n                            pt = new Array(MDP1),\r\n                            qp = new Array(MDP1),\r\n                            temp = new Array(MDP1),\r\n                            // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\r\n                            qPar = new Object(),\r\n                            // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\r\n                            Fxshfr_Par = new Object(),\r\n                            bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm,\r\n                            aa, bb, cc, sr, t, u, xxx,\r\n                            j, jj, l, NM1, NN, zerok;// Integer variables\r\n\r\n                    // Calculate the machine epsilon and store in the variable DBL_EPSILON.\r\n                    // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\r\n                    aa = 1.0;\r\n                    do {\r\n                        DBL_EPSILON = aa;\r\n                        aa /= 2;\r\n                        bb = 1.0 + aa;\r\n                    }\r\n                    while(bb > 1.0);\r\n\r\n                    var LO = Number.MIN_VALUE / DBL_EPSILON,\r\n                            cosr = Math.cos(94.0 * RADFAC), // = -0.069756474\r\n                            sinr = Math.sin(94.0 * RADFAC), // = 0.99756405\r\n                            xx = Math.sqrt(0.5), // = 0.70710678\r\n                            yy = -xx;\r\n\r\n                    Fxshfr_Par.NZ = j = 0;\r\n                    Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0;\r\n\r\n                    // Remove zeros at the origin, if any\r\n                    while(p[N] == 0) {\r\n                        zeror[j] = zeroi[j] = 0;\r\n                        N--;\r\n                        j++;\r\n                    }\r\n                    NN = N + 1;\r\n\r\n                    // >>>>> Begin Main Loop <<<<<\r\n                    while(N >= 1) { // Main loop\r\n                        // Start the algorithm for one zero\r\n                        if(N <= 2) {\r\n                            // Calculate the final zero or pair of zeros\r\n                            if(N < 2) {\r\n                                zeror[degPar.Degree - 1] = -(p[1] / p[0]);\r\n                                zeroi[degPar.Degree - 1] = 0;\r\n                            }\r\n                            else {\r\n                                qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                                Quad_ak1(p[0], p[1], p[2], qPar);\r\n                                zeror[degPar.Degree - 2] = qPar.sr;\r\n                                zeroi[degPar.Degree - 2] = qPar.si;\r\n                                zeror[degPar.Degree - 1] = qPar.lr;\r\n                                zeroi[degPar.Degree - 1] = qPar.li;\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        // Find the largest and smallest moduli of the coefficients\r\n                        moduli_max = 0.0;\r\n                        moduli_min = Number.MAX_VALUE;\r\n\r\n                        for(i = 0; i < NN; i++) {\r\n                            x = Math.abs(p[i]);\r\n                            if(x > moduli_max)\r\n                                moduli_max = x;\r\n                            if((x != 0) && (x < moduli_min))\r\n                                moduli_min = x;\r\n                        }\r\n\r\n                        // Scale if there are large or very small coefficients\r\n                        // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\r\n                        // is done to avoid overflow and to avoid undetected underflow interfering with the\r\n                        // convergence criterion.\r\n                        // The factor is a power of the base.\r\n                        sc = LO / moduli_min;\r\n\r\n                        if(((sc <= 1.0) && (moduli_max >= 10)) || ((sc > 1.0) && (Number.MAX_VALUE / sc >= moduli_max))) {\r\n                            sc = ((sc == 0) ? Number.MIN_VALUE : sc);\r\n                            l = Math.floor(Math.log(sc) / LB2 + 0.5);\r\n                            factor = Math.pow(2.0, l);\r\n                            if(factor != 1.0) {\r\n                                for(i = 0; i < NN; i++)\r\n                                    p[i] *= factor;\r\n                            }\r\n                        }\r\n\r\n                        // Compute lower bound on moduli of zeros\r\n                        for(var i = 0; i < NN; i++)\r\n                            pt[i] = Math.abs(p[i]);\r\n                        pt[N] = -(pt[N]);\r\n                        NM1 = N - 1;\r\n\r\n                        // Compute upper estimate of bound\r\n                        x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0])) / N);\r\n\r\n                        if(pt[NM1] != 0) {\r\n                            // If Newton step at the origin is better, use it\r\n                            xm = -pt[N] / pt[NM1];\r\n                            x = ((xm < x) ? xm : x);\r\n                        }\r\n\r\n                        // Chop the interval (0, x) until ff <= 0\r\n                        xm = x;\r\n                        do {\r\n                            x = xm;\r\n                            xm = 0.1 * x;\r\n                            ff = pt[0];\r\n                            for(var i = 1; i < NN; i++) {\r\n                                ff = ff * xm + pt[i];\r\n                            }\r\n                        }\r\n                        while(ff > 0); // End do-while loop\r\n\r\n                        dx = x;\r\n                        // Do Newton iteration until x converges to two decimal places\r\n\r\n                        do {\r\n                            df = ff = pt[0];\r\n                            for(var i = 1; i < N; i++) {\r\n                                ff = x * ff + pt[i];\r\n                                df = x * df + ff;\r\n                            } // End for i\r\n                            ff = x * ff + pt[N];\r\n                            dx = ff / df;\r\n                            x -= dx;\r\n                        }\r\n                        while(Math.abs(dx / x) > 0.005); // End do-while loop\r\n\r\n                        bnd = x;\r\n\r\n                        // Compute the derivative as the initial K polynomial and do 5 steps with no shift\r\n                        for(var i = 1; i < N; i++)\r\n                            K[i] = (N - i) * p[i] / N;\r\n                        K[0] = p[0];\r\n                        aa = p[N];\r\n                        bb = p[NM1];\r\n                        zerok = ((K[NM1] == 0) ? 1 : 0);\r\n\r\n                        for(jj = 0; jj < 5; jj++) {\r\n                            cc = K[NM1];\r\n                            if(zerok) {\r\n                                // Use unscaled form of recurrence\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = K[j - 1];\r\n                                } // End for i\r\n                                K[0] = 0;\r\n                                zerok = ((K[NM1] == 0) ? 1 : 0);\r\n                            }\r\n                            else {\r\n                                // Used scaled form of recurrence if value of K at 0 is nonzero\r\n                                t = -aa / cc;\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = t * K[j - 1] + p[j];\r\n                                } // End for i\r\n                                K[0] = p[0];\r\n                                zerok = ((Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10.0) ? 1 : 0);\r\n                            }\r\n                        }\r\n\r\n                        // Save K for restarts with new shifts\r\n                        for(var i = 0; i < N; i++)\r\n                            temp[i] = K[i];\r\n\r\n                        // Loop to select the quadratic corresponding to each new shift\r\n                        for(jj = 1; jj <= 20; jj++) {\r\n\r\n                            // Quadratic corresponds to a double shift to a non-real point and its\r\n                            // complex conjugate. The point has modulus BND and amplitude rotated\r\n                            // by 94 degrees from the previous shift.\r\n\r\n                            xxx = -(sinr * yy) + cosr * xx;\r\n                            yy = sinr * xx + cosr * yy;\r\n                            xx = xxx;\r\n                            sr = bnd * xx;\r\n                            u = -(2.0 * sr);\r\n\r\n                            // Second stage calculation, fixed quadratic\r\n                            Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\r\n\r\n                            if(Fxshfr_Par.NZ != 0) {\r\n                                // The second stage jumps directly to one of the third stage iterations and\r\n                                // returns here if successful. Deflate the polynomial, store the zero or\r\n                                // zeros, and return to the main algorithm.\r\n                                j = degPar.Degree - N;\r\n                                zeror[j] = Fxshfr_Par.szr;\r\n                                zeroi[j] = Fxshfr_Par.szi;\r\n                                NN = NN - Fxshfr_Par.NZ;\r\n                                N = NN - 1;\r\n                                for(var i = 0; i < NN; i++)\r\n                                    p[i] = qp[i];\r\n                                if(Fxshfr_Par.NZ != 1) {\r\n                                    zeror[j + 1] = Fxshfr_Par.lzr;\r\n                                    zeroi[j + 1] = Fxshfr_Par.lzi;\r\n                                }\r\n                                break;\r\n                            }\r\n                            else {\r\n                                // If the iteration is unsuccessful, another quadratic is chosen after restoring K\r\n                                for(var i = 0; i < N; i++) {\r\n                                    K[i] = temp[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        // Return with failure if no convergence with 20 shifts\r\n                        if(jj > 20) {\r\n                            degPar.Degree -= N;\r\n                            break;\r\n                        }\r\n                    }\r\n                    // >>>>> End Main Loop <<<<<\r\n                    return;\r\n                }\r\n                //--> End Jenkins-Traub\r\n                rpSolve(degreePar, p, zeror, zeroi);\r\n\r\n                var l = zeroi.length;\r\n                //format the output\r\n                for(i = 0; i < l; i++) {\r\n                    // We round the imaginary part to avoid having something crazy like 5.67e-16.\r\n                    var img = round(zeroi[i], decp + 8),\r\n                            real = round(zeror[i], decp + 8);\r\n                    // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\r\n                    // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \r\n                    // the original otherwise the rounding was worth it.\r\n                    real = decp - String(real).length > 2 ? real : zeror[i];\r\n                    var sign = img < 0 ? '-' : '';\r\n\r\n                    // Remove the zeroes\r\n                    if(real === 0) {\r\n                        real = '';\r\n                    }\r\n                    if(img === 0) {\r\n                        img = '';\r\n                    }\r\n\r\n                    // Remove 1 as the multiplier and discard imaginary part if there isn't one.\r\n                    img = Math.abs(img) === 1 ? sign + 'i' : (img ? img + '*i' : '');\r\n\r\n                    var num = (real && img) ? real + '+' + img : real + img;\r\n                    zeror[i] = num.replace(/\\+\\-/g, '-');\r\n                }\r\n                return zeror;\r\n            }\r\n        },\r\n        roots: function (symbol) {\r\n\r\n            if(symbol.isConstant(true, true)) {\r\n                return core.Utils.nroots(symbol);\r\n            }\r\n            var roots = __.proots(symbol).map(function (x) {\r\n                return _.parse(x);\r\n            });\r\n            return core.Vector.fromArray(roots);\r\n        },\r\n        froot: function (f, guess, dx) {\r\n            var newtonraph = function (xn) {\r\n                var mesh = 1e-12,\r\n                        // If the derivative was already provided then don't recalculate.\r\n                        df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\r\n                        // If the function was passed in as a function then don't recalculate.\r\n                        fn = f instanceof Function ? f : core.Utils.build(f),\r\n                        max = 10000,\r\n                        done = false,\r\n                        safety = 0;\r\n                while(!done) {\r\n                    var x = xn - (fn(xn) / df(xn));\r\n                    //absolute values for both x & xn ensures that we indeed have the radius    \r\n                    var r = Math.abs(x) - Math.abs(xn),\r\n                            delta = Math.abs(r);\r\n                    xn = x;\r\n\r\n                    if(delta < mesh)\r\n                        done = true;\r\n                    else if(safety > max) {\r\n                        xn = null;\r\n                        done = true;\r\n                    }\r\n\r\n                    safety++;\r\n                }\r\n                return xn;\r\n            };\r\n            return newtonraph(Number(guess));\r\n        },\r\n        quad: function (a, b, c) {\r\n            var q = function (a, b, c, sign) {\r\n                return _.parse('-(' + b + '+' + sign + '*sqrt((' + b + ')^2-4*(' + a + ')*(' + c + ')))/(2*' + a + ')');\r\n            };\r\n            return [q(a, b, c, 1), q(a, b, c, -1)];\r\n        },\r\n        sumProd: function (a, b) {\r\n            return __.quad(-b, a, -1).map(function (x) {\r\n                return x.invert();\r\n            });\r\n        },\r\n        coeffs: function (symbol, wrt, coeffs) {\r\n            wrt = String(wrt);\r\n            symbol = _.expand(symbol);\r\n            coeffs = coeffs || [new Symbol(0)];\r\n            //we cannot get coeffs for group EX\r\n            if(symbol.group === EX && symbol.contains(wrt, true))\r\n                _.error('Unable to get coefficients using expression ' + symbol.toString());\r\n            var vars = variables(symbol);\r\n            if(vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {\r\n                var a = new Polynomial(symbol).coeffs.map(function (x) {\r\n                    return new Symbol(x);\r\n                });\r\n\r\n                for(var i = 0, l = a.length; i < l; i++) {\r\n                    var coeff = a[i],\r\n                            e = coeffs[i];\r\n                    if(e)\r\n                        coeff = _.add(e, coeff);\r\n                    coeffs[i] = coeff; //transfer it all over\r\n                }\r\n            }\r\n            else {\r\n                if(!wrt)\r\n                    _.error('Polynomial contains more than one variable. Please specify which variable is to be used!');\r\n                //if the variable isn't part of this polynomial then we're looking at x^0\r\n\r\n                if(vars.indexOf(wrt) === -1) {\r\n                    coeffs[0] = _.add(symbol, coeffs[0]);\r\n                }\r\n                else {\r\n                    coeffs = coeffs || [new Symbol(0)];\r\n                    if(symbol.group === CB) {\r\n                        var s = symbol.symbols[wrt];\r\n                        if(!s)\r\n                            _.error('Expression is not a polynomial!');\r\n                        var p = Number(s.power);\r\n                        coeff = _.divide(symbol.clone(), s.clone());\r\n                        if(coeff.contains(wrt, true) || p < 0 || !isInt(p))\r\n                            _.error('Expression is not a polynomial!');\r\n                        var e = coeffs[p];\r\n                        if(e)\r\n                            coeff = _.add(e, coeff);\r\n                        coeffs[p] = coeff;\r\n                    }\r\n                    else if(symbol.group === CP) {\r\n                        symbol.each(function (x) {\r\n                            __.coeffs(x.clone(), wrt, coeffs);\r\n                        }, true);\r\n                    }\r\n                }\r\n            }\r\n            //fill holes\r\n            for(var i = 0, l = coeffs.length; i < l; i++)\r\n                if(typeof coeffs[i] === 'undefined')\r\n                    coeffs[i] = new Symbol(0);\r\n\r\n            return coeffs;\r\n        },\r\n        /**\r\n         * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n         * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n         * @param {Symbol} e\r\n         * @param {String} for_variable\r\n         * @param {Array} powers\r\n         * @returns {Array} An array of the powers\r\n         */\r\n        //assumes you've already verified that it's a polynomial\r\n        polyPowers: function (e, for_variable, powers) {\r\n            powers = powers || [];\r\n            var g = g = e.group;\r\n            if(g === PL && for_variable === e.value) {\r\n                powers = powers.concat(keys(e.symbols));\r\n            }\r\n            else if(g === CP) {\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s];\r\n                    var g = symbol.group, v = symbol.value;\r\n                    if(g === S && for_variable === v)\r\n                        powers.push(symbol.power);\r\n                    else if(g === PL || g === CP)\r\n                        powers = __.polyPowers(symbol, for_variable, powers);\r\n                    else if(g === CB && symbol.contains(for_variable)) {\r\n                        var t = symbol.symbols[for_variable];\r\n                        if(t)\r\n                            powers.push((t.power));\r\n                    }\r\n                    else if(g === N || for_variable !== v)\r\n                        powers.push(0);\r\n                }\r\n            }\r\n            else if(g === CB && e.contains(for_variable)) {\r\n                powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\r\n            }\r\n            return core.Utils.arrayUnique(powers).sort();\r\n        },\r\n        //The factor object\r\n        Factor: {\r\n            //splits the symbol in symbol and constant\r\n            split: function (symbol) {\r\n                var c = new Symbol(1); //the constants part\r\n                var s = new Symbol(1); //the symbolic part\r\n                __.Factor.factor(symbol, new Factors()).each(function (x) {\r\n                    var t = _.parse(x);\r\n                    if(x.isConstant(true)) {\r\n                        c = _.multiply(c, t);\r\n                    }\r\n                    else {\r\n                        s = _.multiply(s, t);\r\n                    }\r\n                });\r\n                return [c, s];\r\n            },\r\n            mix: function (o, include_negatives) {\r\n                var factors = keys(o);\r\n                var l = factors.length;\r\n                var m = [];//create a row which we'r going to be mixing\r\n                for(var i = 0; i < l; i++) {\r\n                    var factor = factors[i],\r\n                            p = o[factor];\r\n                    var ll = m.length;\r\n                    for(var j = 0; j < ll; j++) {\r\n                        var t = m[j] * factor;\r\n                        m.push(t);\r\n                        if(include_negatives)\r\n                            m.push(-t);\r\n                    }\r\n\r\n                    for(var j = 1; j <= p; j++)\r\n                        m.push(Math.pow(factor, j));\r\n                }\r\n                return m;\r\n            },\r\n            //TODO: this method is to replace common factoring\r\n            common: function (symbol, factors) {\r\n                try {\r\n                    if(symbol.group === CP) {\r\n                        //this may have the unfortunate side effect of expanding and factoring again\r\n                        //to only end up with the same result. \r\n                        //TODO: try to avoid this\r\n                        //collect the symbols and sort to have the longest first. Thinking is that the longest terms \r\n                        //has to contain the variable in order for it to be factorable\r\n                        var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function (a, b) {\r\n                            return (b.length || 1) - (a.length || 1);\r\n                        });\r\n\r\n                        var map = {}; //create a map of common factors\r\n                        var coeffs = [];\r\n                        for(var i = 0; i < symbols.length; i++) {\r\n                            var sym = symbols[i];\r\n                            coeffs.push(sym.multiplier.clone());\r\n                            sym.each(function (x) {\r\n                                var p = Number(x.power);\r\n                                //This check exits since we have a symbolic power.\r\n                                //For the future... think about removing this check and modify for symbolic powers\r\n                                if(isNaN(p))\r\n                                    throw new Error('exiting');\r\n                                //loop through the symbols and lump together common terms\r\n                                if(x.value in map) {\r\n                                    if(p < map[x.value][0])\r\n                                        map[x.value][0] = p;\r\n                                    map[x.value][1].push(x);\r\n                                }\r\n                                else\r\n                                    map[x.value] = [p, [x]];\r\n                            });\r\n                        }\r\n                        //the factor\r\n                        var factor = new Symbol(1);\r\n                        for(var x in map) {\r\n                            //if this factor is found in all terms since the length of \r\n                            //matching variable terms matches the number of original terms\r\n                            if(map[x][1].length === symbols.length) {\r\n                                //generate a symbol and multiply into the factor\r\n                                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\r\n                            }\r\n                        }\r\n                        //get coefficient factor\r\n                        var c = core.Math2.QGCD.apply(null, coeffs);\r\n\r\n                        if(!c.equals(1)) {\r\n                            factors.add(new Symbol(c));\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbols[i].multiplier = symbols[i].multiplier.divide(c);\r\n                            }\r\n                        }\r\n\r\n                        //if we actuall found any factors\r\n                        if(!factor.equals(1)) {\r\n                            factors.add(factor);\r\n                            symbol = new Symbol(0);\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            zeroes: function (symbol, factors) {\r\n                var exit = function () {\r\n                    throw new core.exceptions.ValueLimitExceededError('Exiting');\r\n                };\r\n                try {\r\n                    var vars, term, sum, p, e;\r\n                    symbol = _.expand(symbol.clone());\r\n                    e = symbol.toString();\r\n                    vars = variables(symbol);\r\n\r\n                    sum = new Symbol(0);\r\n\r\n                    var terms = [];\r\n                    var powers = [];\r\n\r\n                    //start setting each variable to zero\r\n                    for(var i = 0, l = vars.length; i < vars.length; i++) {\r\n                        var subs = {};\r\n                        //we want to create a subs object with all but the current variable set to zero\r\n                        for(var j = 0; j < l; j++)\r\n                            if(i !== j) //make sure we're not looking at the same variable\r\n                                subs[vars[j]] = 0;\r\n                        term = _.parse(e, subs);\r\n                        var tp = term.power;\r\n                        //the temporary power has to be an integer as well\r\n                        if(!isInt(tp))\r\n                            exit();\r\n                        terms.push(term);\r\n                        powers.push(term.power);\r\n                    }\r\n\r\n                    //get the gcd. This will be the p in (a^n+b^m)^p\r\n                    //if the gcd equals 1 meaning n = m then we need a tie breakder\r\n                    if(core.Utils.allSame(powers)) {\r\n                        //get p given x number of terms\r\n                        var n_terms = symbol.length;\r\n                        //the number of zeroes determines\r\n                        var n_zeroes = terms.length;\r\n                        if(n_zeroes === 2) {\r\n                            p = new Frac(powers[0] / (n_terms - 1));\r\n                        }\r\n                        if(n_zeroes === 3) {\r\n                            p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));\r\n                        }\r\n                        /*\r\n                         //get the lowest possible power\r\n                         //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n                         symbol.each(function(x) {\r\n                         if(x.group === CB)\r\n                         x.each(function(y) {\r\n                         if(!p || y.power.lessThan(p))\r\n                         //p = Number(y.power);\r\n                         p = y.power;\r\n                         });\r\n                         else if(!p || x.power.lessThan(p))\r\n                         //p = Number(x.power);\r\n                         p = x.power;\r\n                         });\r\n                         */\r\n                    }\r\n                    else\r\n                        //p is just the gcd of the powers\r\n                        p = core.Math2.QGCD.apply(null, powers);\r\n\r\n                    //if we don't have an integer then exit\r\n                    if(!isInt(p))\r\n                        exit();\r\n\r\n                    //build the factor\r\n                    for(var i = 0; i < terms.length; i++) {\r\n                        var t = terms[i];\r\n                        var n = t.power.clone().divide(p);\r\n                        t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n));\r\n                        t.power = p.clone();\r\n                        sum = _.add(sum, t);\r\n                    }\r\n\r\n                    //by now we have the factor of zeroes. We'll know if we got it right because \r\n                    //we'll get a remainder of zero each time we divide by it\r\n                    if(sum.group !== CP)\r\n                        return symbol; //nothing to do\r\n\r\n                    while(true) {\r\n                        var d = __.div(symbol.clone(), sum.clone());\r\n                        if(d[1].equals(0)) {\r\n                            symbol = d[0];\r\n                            factors.add(sum.clone());\r\n                            if(symbol.equals(1)) //we've reached 1 so done.\r\n                                break;\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                catch(e) {\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            },\r\n            factor: function (symbol, factors) {\r\n                // Don't try to factor constants\r\n                if(symbol.isConstant()) {\r\n                    return core.Math2.factor(symbol);\r\n                }\r\n\r\n                var _symbol = _.parse(symbol);\r\n                var retval = __.Factor._factor(_symbol, factors);\r\n                if(retval.equals(symbol)) {\r\n                    return retval;\r\n                }\r\n\r\n                if(retval.group === CB) {\r\n                    var t = new Symbol(1);\r\n                    var p = _.parse(retval.power);\r\n                    //store the multiplier and strip it\r\n                    var m = _.parse(retval.multiplier);\r\n\r\n                    retval.toUnitMultiplier();\r\n\r\n                    /* \r\n                     * NOTE: for sign issues with factor START DEBUGGING HERE\r\n                     */\r\n                    //move the sign to t\r\n                    if(retval.multiplier.lessThan(0)) {\r\n                        t.negate();\r\n                        retval.negate();\r\n                    }\r\n\r\n                    retval.each(function (x) {\r\n                        // Related to #566. Since the symbol's group may not have been properly\r\n                        // updated, it's easier to just parse the symbol and have the parser \r\n                        // do the update for us.\r\n                        var factored = _.parse(__.Factor._factor(x));\r\n\r\n                        if(factored.group === CB) {\r\n                            // Include the multiplier\r\n                            m = _.multiply(m, Symbol.create(factored.multiplier));\r\n                            factored.each(function (y) {\r\n                                var _factored = _.parse(__.Factor._factor(y));\r\n                                t = _.multiply(t, _factored);\r\n                                if(_factored.group === CB) {\r\n                                    m = _.multiply(m, Symbol.create(_factored.multiplier));\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            t = _.multiply(t, factored);\r\n                        }\r\n                    });\r\n\r\n                    //put back the multiplier and power\r\n                    retval = _.pow(_.multiply(m, t), p);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            quadFactor: function (symbol, factors) {\r\n                if(symbol.isPoly() && __.degree(symbol.equals(2))) {\r\n                    //We've  already checked that we're dealing with a polynomial\r\n                    var v = core.Utils.variables(symbol)[0]; //get the variable\r\n                    var coeffs = __.coeffs(symbol, v);\r\n                    //factor the lead coefficient\r\n                    var cf = __.Factor._factor(coeffs[2].clone());\r\n                    //check if we have factors\r\n                    if(cf.group === CB) {\r\n                        var symbols = cf.collectSymbols();\r\n                        //if the factors are greater than 2 we're done so exit\r\n                        if(symbols.length > 2)\r\n                            return symbol;\r\n                        //if we have two factors then attempt to factor the polynomial\r\n                        //let the factors be f1 and f1\r\n                        //let the factors be (ax+b)(cx+d)\r\n                        //let the coefficients be c1x^2+c2x+c3\r\n                        //then a(x1)+c(x2)=c2 and x1*x2=c3\r\n                        //we can solve for x1 and x2\r\n                        var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\r\n                        var b = _.parse(coeffs[1]).negate();\r\n                        var a = _.parse(symbols[1]);\r\n                        //solve the system\r\n                        var root = __.quad(a, b, c).filter(function (x) {\r\n                            if(core.Utils.isInt(x))\r\n                                return x;\r\n                        });\r\n                        //if we have one root then find the other one by dividing the constant\r\n                        if(root.length === 1) {\r\n                            var root1 = root[0];\r\n                            var root2 = _.divide(coeffs[0], _.parse(root1));\r\n                            if(core.Utils.isInt(root2)) {\r\n                                //we found them both\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            cubeFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var symbols = symbol.collectSymbols();\r\n                    // The symbol should be in the form of a^3+-b^3. The length\r\n                    // should therefore only be two. If it's any different from this\r\n                    // then we're done\r\n                    if(symbols.length === 2) {\r\n                        // Store the signs and then strip them from the symbols\r\n                        var sign_a = symbols[0].sign();\r\n                        var a = symbols[0].clone().abs();\r\n                        var sign_b = symbols[1].sign();\r\n                        var b = symbols[1].clone().abs();\r\n                        // Check if they're cube\r\n                        if(a.isCube() && b.isCube()) {\r\n                            // Keep the negative sign on the right, meaning b is always negative.\r\n                            if(sign_a < sign_b) {\r\n                                // Swap the signs and then the values\r\n                                [sign_a, sign_b] = [sign_b, sign_a];\r\n                                [a, b] = [b, a];\r\n                            }\r\n\r\n                            // Get teh roots\r\n                            var m_root_a = _.parse(a.getNth(3));\r\n                            var m_root_b = _.parse(b.getNth(3));\r\n\r\n                            // Remove the cube for both\r\n                            var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_a);\r\n                            var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_b);\r\n\r\n                            if(sign_a === 1 && sign_b === -1) {\r\n                                // Apply difference of cubes rule\r\n                                factors.add(_.parse(format('(({0})-({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2+({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                            else if(sign_a === 1 && sign_b === 1) {\r\n                                // Apply sum of cubes rule\r\n                                factors.add(_.parse(format('(({0})+({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2-({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            _factor: function (symbol, factors) {\r\n                //some items cannot be factored any further so return those right away\r\n                if(symbol.group === FN) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.group === S && arg.isSimple()) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                else if(symbol.group === S && symbol.isSimple()) {\r\n                    return symbol;\r\n                }\r\n\r\n                // Expand the symbol to get it in a predictable form. If this step\r\n                // is skipped some factors are missed.\r\n                //if(symbol.group === CP && !(even(symbol.power) && symbol.multiplier.lessThan(0))) {\r\n                if(symbol.group === CP) {\r\n                    symbol.distributeMultiplier(true);\r\n                    var t = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        if((x.group === CP && x.power.greaterThan(1) || x.group === CB))\r\n                            x = _.expand(x);\r\n                        t = _.add(t, x);\r\n                    });\r\n                    t.power = symbol.power;\r\n\r\n                    symbol = t;\r\n                }\r\n\r\n                if(symbol.group === FN && symbol.fname !== 'sqrt') {\r\n                    symbol = core.Utils.evaluate(symbol);\r\n                }\r\n\r\n                //make a copy of the symbol to return if something goes wrong\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    if(symbol.group === CB) {\r\n                        var p = _.parse(symbol.power);\r\n\r\n                        var den_array, num_array, den, num, dfact, nfact;\r\n                        //grab the denominator and strip the multiplier and power. Store them in an array\r\n                        den_array = __.Simplify.strip(symbol.getDenom());\r\n                        num_array = __.Simplify.strip(symbol.getNum());\r\n\r\n                        den = den_array.pop();\r\n                        num = num_array.pop();\r\n\r\n                        //if the numerator equals the symbol then we've hit the simplest form and then we're done\r\n                        if(num.equals(symbol)) {\r\n                            return symbol;\r\n                        }\r\n                        nfact = __.Factor.factor(num);\r\n                        dfact = __.Factor.factor(den);\r\n\r\n                        var n = __.Simplify.unstrip(num_array, nfact);\r\n                        var d = __.Simplify.unstrip(den_array, dfact);\r\n\r\n                        var retval = _.divide(n, d);\r\n\r\n                        return retval;\r\n                    }\r\n                    if(symbol.group === S) {\r\n                        return symbol; //absolutely nothing to do\r\n                    }\r\n\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol.equals(1))\r\n                            return symbol.clone();\r\n                        var ret = core.Math2.factor(symbol);\r\n                        return ret;\r\n                    }\r\n\r\n                    var p = symbol.power.clone();\r\n\r\n                    if(isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {\r\n                        var sign = p.sign();\r\n                        symbol.toLinear();\r\n                        factors = factors || new Factors();\r\n                        var map = {};\r\n                        symbol = _.parse(core.Utils.subFunctions(symbol, map));\r\n                        if(keys(map).length > 0) { //it might have functions\r\n                            factors.preAdd = function (factor) {\r\n                                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\r\n                                return ret;\r\n                            };\r\n                        }\r\n\r\n                        //strip the power\r\n                        if(!symbol.isLinear()) {\r\n                            factors.pFactor = symbol.power.toString();\r\n                            symbol.toLinear();\r\n                        }\r\n\r\n                        var vars = variables(symbol);\r\n                        //bypass for imaginary. TODO: find a better solution\r\n                        if(symbol.isImaginary()) {\r\n                            vars.push(core.Settings.IMAGINARY);\r\n                        }\r\n                        var multiVar = vars.length > 1;\r\n\r\n                        //minor optimization. Seems to cut factor time by half in some cases.\r\n                        if(multiVar) {\r\n                            var all_S = true, all_unit = true;\r\n                            symbol.each(function (x) {\r\n                                if(x.group !== S)\r\n                                    all_S = false;\r\n                                if(!x.multiplier.equals(1))\r\n                                    all_unit = false;\r\n                            });\r\n\r\n                            if(all_S && all_unit) {\r\n                                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\r\n                            }\r\n                        }\r\n\r\n                        //factor the coefficients\r\n                        var coeff_factors = new Factors();\r\n\r\n                        symbol = __.Factor.coeffFactor(symbol, coeff_factors);\r\n\r\n                        coeff_factors.each(function (x) {\r\n                            // If the factor was negative but was within a square then it becomes positive\r\n                            if(even(p) && x.lessThan(0)) {\r\n                                x.negate();\r\n                            }\r\n\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        //factor the power\r\n                        var power_factors = new Factors();\r\n                        symbol = __.Factor.powerFactor(symbol, power_factors);\r\n                        power_factors.each(function (x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        if(!multiVar) {\r\n                            //pass in vars[0] for safety\r\n                            var v = vars[0];\r\n\r\n                            symbol = __.Factor.squareFree(symbol, factors, v);\r\n\r\n                            var t_factors = new Factors();\r\n\r\n                            symbol = __.Factor.trialAndError(symbol, t_factors, v);\r\n\r\n                            //generate a symbol based off the last factors\r\n                            var tf_symbol = t_factors.toSymbol();\r\n                            //if nothing was factored then return the factors\r\n                            if(tf_symbol.equals(untouched)) {\r\n                                return tf_symbol;\r\n                            }\r\n\r\n                            for(var x in t_factors.factors) {\r\n                                //store the current factor in t_factor\r\n                                var t_factor = t_factors.factors[x];\r\n                                factors.add(_.pow(t_factor, _.parse(p)));\r\n                            }\r\n                            //if we still don't have a factor and it's quadratic then let's just do a quad factor\r\n                            if(symbol.equals(untouched)) {\r\n                                symbol = __.Factor.quadFactor(symbol, factors);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            // Try sum and difference of cubes\r\n                            symbol = __.Factor.cubeFactor(symbol, factors);\r\n\r\n                            symbol = __.Factor.mfactor(symbol, factors);\r\n\r\n                            //put back the sign of power\r\n                            factors.each(function (x) {\r\n                                if(sign < 0)\r\n                                    x.power.negate();\r\n                            });\r\n                        }\r\n\r\n                        //last minute clean up\r\n                        symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\r\n\r\n                        factors.add(_.pow(symbol, _.parse(p)));\r\n\r\n                        var retval = factors.toSymbol();\r\n\r\n                        return retval;\r\n                    }\r\n\r\n                    return symbol;\r\n                }\r\n                catch(e) {\r\n                    //no need to stop the show because something went wrong :). Just return the unfactored.\r\n                    return untouched;\r\n                }\r\n            },\r\n            reduce: function (symbol, factors) {\r\n                if(symbol.group === CP && symbol.length === 2) {\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return b.multiplier - a.multiplier;\r\n                    });\r\n                    if(symbols[0].power.equals(symbols[1].power)) {\r\n                        //x^n-a^n\r\n                        var n = _.parse(symbols[0].power),\r\n                                a = symbols[0].clone().toLinear(),\r\n                                b = symbols[1].clone().toLinear();\r\n\r\n                        //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\r\n                        factors.add(_.add(a.clone(), b.clone()));\r\n                        //flip the sign\r\n                        b.negate();\r\n                        //turn n into a number\r\n                        var nn = Number(n);\r\n                        //the remainder\r\n                        var result = new Symbol(0);\r\n                        for(var i = 1; i <= nn; i++) {\r\n                            var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\r\n                                    bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\r\n                            result = _.add(result, _.multiply(aa, bb));\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Makes Symbol square free\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @@param {String} variable The variable which is being factored \r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            squareFree: function (symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S)\r\n                    return symbol;\r\n\r\n                var poly = new Polynomial(symbol, variable);\r\n                var sqfr = poly.squareFree();\r\n                var p = sqfr[2];\r\n                //if we found a square then the p entry in the array will be non-unit\r\n                if(p !== 1) {\r\n                    //make sure the remainder doesn't have factors\r\n                    var t = sqfr[1].toSymbol();\r\n                    t.power = t.power.multiply(new Frac(p));\r\n                    //send the factor to be fatored to be sure it's completely factored\r\n                    factors.add(__.Factor.factor(t));\r\n\r\n                    var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);\r\n\r\n                    return retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Factors the powers such that the lowest power is a constant\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            powerFactor: function (symbol, factors) {\r\n                //only PL need apply\r\n                if(symbol.group !== PL || symbol.previousGroup === EX)\r\n                    return symbol;\r\n                var k = keys(symbol.symbols);\r\n                //we expect only numeric powers so return all else\r\n                if(!core.Utils.allNumeric(k))\r\n                    return symbol;\r\n\r\n                var d = core.Utils.arrayMin(k);\r\n                var retval = new Symbol(0);\r\n                var q = _.parse(symbol.value + '^' + d);\r\n                symbol.each(function (x) {\r\n                    x = _.divide(x, q.clone());\r\n                    retval = _.add(retval, x);\r\n                });\r\n\r\n                factors.add(q);\r\n                return retval;\r\n            },\r\n            /**\r\n             * Removes GCD from coefficients\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @returns {Symbol}\r\n             */\r\n            coeffFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\r\n\r\n                    if(!gcd.equals(1)) {\r\n                        symbol.each(function (x) {\r\n                            if(x.isComposite()) {\r\n                                x.each(function (y) {\r\n                                    y.multiplier = y.multiplier.divide(gcd);\r\n                                });\r\n                            }\r\n                            else\r\n                                x.multiplier = x.multiplier.divide(gcd);\r\n                        });\r\n                        symbol.updateHash();\r\n                    }\r\n                    else {\r\n                        // TODO: This should probably go to the prototype\r\n                        var power = function (symbol) {\r\n                            var p;\r\n                            if(symbol.group === CB) {\r\n                                p = 0;\r\n                                symbol.each(function (x) {\r\n                                    p += x.power;\r\n                                });\r\n                            }\r\n                            else {\r\n                                p = Number(symbol.power);\r\n                            }\r\n                            return p;\r\n                        };\r\n                        // Factor out negatives from the lead term\r\n                        var terms = symbol.collectSymbols(null, null, null, true).sort(function (a, b) {\r\n                            // Push constants to the back\r\n                            if(a.isConstant(true))\r\n                                return 1;\r\n                            return b.power - a.power;\r\n                        });\r\n\r\n                        var LT = terms[0];\r\n\r\n                        // Check if the LT is indeed the greatest\r\n                        if(power(LT) > power(terms[1]) || terms[1].isConstant(true)) {\r\n                            if(LT.multiplier.lessThan(0)) {\r\n                                // Although the symbol should always be linear at this point, remove the negative for squares\r\n                                // to be safe.\r\n                                factors.add(new Symbol(-1));\r\n\r\n                                symbol.each(function (x) {\r\n                                    x.negate();\r\n                                }, true);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(factors) {\r\n                        factors.add(new Symbol(gcd));\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * The name says it all :)\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @@param {String} variable \r\n             * @returns {Symbol}\r\n             */\r\n            trialAndError: function (symbol, factors, variable) {\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    // At temp holder for the factors. If all goes well then\r\n                    // they'll be moved to the actual factors.\r\n                    var factor_array = [];\r\n\r\n                    if(symbol.isConstant() || symbol.group === S)\r\n                        return symbol;\r\n                    var poly = new Polynomial(symbol, variable),\r\n                            cnst = poly.coeffs[0],\r\n                            cfactors = core.Math2.ifactor(cnst),\r\n                            roots = __.proots(symbol);\r\n                    for(var i = 0; i < roots.length; i++) {\r\n                        var r = roots[i],\r\n                                p = 1;\r\n                        if(!isNaN(r)) { //if it's a number\r\n                            for(var x in cfactors) {\r\n                                //check it's raised to a power\r\n                                var n = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);\r\n                                if(isInt(n)) {\r\n                                    r = x; //x must be the root since n gave us a whole\r\n                                    p = n;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            var root = new Frac(r),\r\n                                    terms = [new Frac(root.num).negate()];\r\n                            terms[p] = new Frac(root.den);\r\n                            //convert to Frac. The den is coeff of LT and the num is coeff of constant\r\n                            var div = Polynomial.fromArray(terms, poly.variable).fill(),\r\n                                    t = poly.divide(div);\r\n                            if(t[1].equalsNumber(0)) { //if it's zero we have a root and divide it out\r\n                                poly = t[0];\r\n                                // factors.add(div.toSymbol());\r\n                                factor_array.push(div.toSymbol());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!poly.equalsNumber(1)) {\r\n                        poly = __.Factor.search(poly, factors);\r\n                    }\r\n\r\n                    // Move the factors over since all went well.\r\n                    factor_array.forEach(function (x) {\r\n                        factors.add(x);\r\n                    });\r\n\r\n                    return poly.toSymbol();\r\n                }\r\n                catch(e) {\r\n                    return untouched;\r\n                }\r\n            },\r\n            search: function (poly, factors, base) {\r\n                base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\r\n                var v = poly.variable; //the polynmial variable name\r\n                /**\r\n                 * Attempt to remove a root by division given a number by first creating\r\n                 * a polynomial fromt he given information\r\n                 * @param {int} c1 - coeffient for the constant\r\n                 * @param {int} c2 - coefficient for the LT\r\n                 * @param {int} n - the number to be used to construct the polynomial\r\n                 * @param {int} p - the power at which to create the polynomial\r\n                 * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n                 */\r\n                var check = function (c1, c2, n, p) {\r\n                    var candidate = Polynomial.fit(c1, c2, n, base, p, v);\r\n                    if(candidate && candidate.coeffs.length > 1) {\r\n                        var t = poly.divide(candidate);\r\n                        if(t[1].equalsNumber(0)) {\r\n                            factors.add(candidate.toSymbol());\r\n                            return [t[0], candidate];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n                var cnst = poly.coeffs[0];\r\n                var cfactors = core.Math2.ifactor(cnst);\r\n                var lc = poly.lc();\r\n                var ltfactors = core.Math2.ifactor(lc);\r\n                var subbed = poly.sub(base);\r\n                var isubbed = core.Math2.ifactor(subbed);\r\n                var nfactors = __.Factor.mix(isubbed, subbed < 0);\r\n                var cp = Math.ceil(poly.coeffs.length / 2);\r\n                var lc_is_neg = lc.lessThan(0);\r\n                var cnst_is_neg = cnst.lessThan(0);\r\n                ltfactors['1'] = 1;\r\n                cfactors['1'] = 1;\r\n                while(cp--) {\r\n                    for(var x in ltfactors) {\r\n                        for(var y in cfactors) {\r\n                            for(var i = 0; i < nfactors.length; i++) {\r\n                                var factor_found = check(x, y, nfactors[i], cp);\r\n                                if(factor_found) {\r\n                                    poly = factor_found[0];\r\n                                    if(!core.Utils.isPrime(poly.sub(base)))\r\n                                        poly = __.Factor.search(poly, factors);\r\n                                    return poly;\r\n                                }\r\n                                else if(!factor_found) {\r\n                                    if(lc_is_neg && cnst_is_neg)\r\n                                        factor_found = check(-x, -y, nfactors[i], cp);\r\n                                    else if(lc_is_neg)\r\n                                        factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\r\n                                    else if(cnst_is_neg)\r\n                                        factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return poly;\r\n            },\r\n            /**\r\n             * Equivalent of square free factor for multivariate polynomials\r\n             * @param {type} symbol\r\n             * @param {type} factors\r\n             * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n             */\r\n            mSqfrFactor: function (symbol, factors) {\r\n                if(symbol.group !== FN) {\r\n                    var vars = variables(symbol).reverse();\r\n\r\n                    // Loop through all the variable and remove the partial derivatives\r\n                    for(var i = 0; i < vars.length; i++) {\r\n                        do {\r\n                            if(vars[i] === symbol.value) {\r\n                                //the derivative tells us nothing since this symbol is already the factor\r\n                                factors.add(symbol);\r\n                                symbol = new Symbol(1);\r\n                                continue;\r\n                            }\r\n\r\n                            var diff = core.Calculus.diff(symbol, vars[i]);\r\n\r\n                            var d = __.Factor.coeffFactor(diff);\r\n\r\n                            if(d.equals(0))\r\n                                break;\r\n\r\n                            //trial division to see if factors have whole numbers. \r\n                            //This can be optimized by stopping as soon as can_divide is false\r\n                            //this will also need utilize big number at some point\r\n                            var can_divide = true;\r\n                            if(d.isConstant() && symbol.isComposite()) {\r\n                                //check the coefficients\r\n\r\n                                symbol.each(function (x) {\r\n                                    if(x.multiplier % d !== 0)\r\n                                        can_divide = false;\r\n                                }, true);\r\n                            }\r\n\r\n                            //if we can divide then do so\r\n                            if(can_divide) {\r\n\r\n                                var div = __.div(symbol, d.clone()),\r\n                                        is_factor = div[1].equals(0);\r\n\r\n                                if(div[0].isConstant()) {\r\n                                    factors.add(div[0]);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else\r\n                                is_factor = false;\r\n\r\n                            if(is_factor) {\r\n                                factors.add(div[0]);\r\n                                symbol = d;\r\n                            }\r\n                        }\r\n                        while(is_factor)\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //difference of squares factorization\r\n            sqdiff: function (symbol, factors) {\r\n                if(symbol.isConstant('all')) {\r\n                    // Nothing to do\r\n                    return symbol;\r\n                }\r\n\r\n                try {\r\n                    var remove_square = function (x) {\r\n                        return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                            return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\r\n                        }, true);\r\n                    };\r\n                    var separated = core.Utils.separate(symbol.clone());\r\n\r\n                    var obj_array = [];\r\n\r\n                    //get the unique variables\r\n                    for(var x in separated) {\r\n                        if(x !== 'constants') {\r\n                            obj_array.push(separated[x]);\r\n                        }\r\n                    }\r\n                    obj_array.sort(function (a, b) {\r\n                        return b.power - a.power;\r\n                    });\r\n\r\n                    //if we have the same number of variables as unique variables then we can apply the difference of squares\r\n                    if(obj_array.length === 2) {\r\n                        var a, b;\r\n                        a = obj_array.pop();\r\n                        b = obj_array.pop();\r\n\r\n                        if(even(a.power) && even(b.power)\r\n                                && a.sign() === b.sign()\r\n                                && a.group === S && b.group === S) {\r\n                            throw new Error('Unable to factor');\r\n                        }\r\n                        ;\r\n\r\n                        if(a.isComposite() && b.power.equals(2)) {\r\n                            //remove the square from b\r\n                            b = remove_square(b);\r\n                            var f = __.Factor.factor(_.add(a, separated.constants));\r\n                            if(f.power.equals(2)) {\r\n                                f.toLinear();\r\n                                factors.add(_.subtract(f.clone(), b.clone()));\r\n                                factors.add(_.add(f, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                        else {\r\n                            a = a.powSimp();\r\n                            b = b.powSimp();\r\n\r\n                            if((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2) && !separated.constants) {\r\n                                if(a.multiplier.lessThan(0)) {\r\n                                    var t = b;\r\n                                    b = a;\r\n                                    a = t;\r\n                                }\r\n                                if(a.multiplier.greaterThan(0)) {\r\n                                    a = remove_square(a);\r\n                                    b = remove_square(b);\r\n                                }\r\n\r\n                                factors.add(_.subtract(a.clone(), b.clone()));\r\n                                factors.add(_.add(a, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //factoring for multivariate\r\n            mfactor: function (symbol, factors) {\r\n\r\n                if(symbol.group === FN) {\r\n                    if(symbol.fname === 'sqrt') {\r\n                        var factors2 = new Factors(),\r\n                                arg = __.Factor.common(symbol.args[0].clone(), factors2);\r\n                        arg = __.Factor.coeffFactor(arg, factors2);\r\n                        symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\r\n                        factors2.each(function (x) {\r\n                            symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\r\n                        });\r\n                    }\r\n                    else\r\n                        factors.add(symbol);\r\n                }\r\n                else {\r\n\r\n                    //square free factorization\r\n                    symbol = __.Factor.mSqfrFactor(symbol, factors);\r\n\r\n                    //try factor out common factors\r\n                    //symbol = __.Factor.common(symbol, factors);\r\n\r\n                    var vars = variables(symbol),\r\n                            symbols = symbol.collectSymbols().map(function (x) {\r\n                        return Symbol.unwrapSQRT(x);\r\n                    }),\r\n                            sorted = {},\r\n                            maxes = {},\r\n                            l = vars.length, n = symbols.length;\r\n                    //take all the variables in the symbol and organize by variable name\r\n                    //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\r\n\r\n                    for(var i = 0; i < l; i++) {\r\n                        var v = vars[i];\r\n                        sorted[v] = new Symbol(0);\r\n                        for(var j = 0; j < n; j++) {\r\n                            var s = symbols[j];\r\n                            if(s.contains(v)) {\r\n                                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\r\n                                if(!maxes[v] || p < maxes[v])\r\n                                    maxes[v] = p;\r\n                                sorted[v] = _.add(sorted[v], s.clone());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for(var x in sorted) {\r\n                        var r = _.parse(x + '^' + maxes[x]);\r\n                        var div = _.divide(sorted[x], r);\r\n                        var new_factor = _.expand(div);\r\n\r\n                        if(new_factor.equals(1))\r\n                            break; //why divide by one. Just move \r\n                        var divided = __.div(symbol.clone(), new_factor);\r\n\r\n                        if(divided[0].equals(0)) {\r\n                            //cant factor anymore\r\n                            break;\r\n                        }\r\n\r\n                        // We potentially ended up with fractional coefficients when the\r\n                        // trial division was performed. We need to remove \r\n                        // This check will more then likely become superfluous with improvements\r\n                        // to polynomial division\r\n                        if(divided[1].equals(0)) {\r\n                            var has_fractions = false;\r\n\r\n                            divided[0].each(function (x) {\r\n                                if(!isInt(x.multiplier)) {\r\n                                    has_fractions = true;\r\n                                }\r\n                            });\r\n\r\n                            // The factor isn't really a factor and needs to be put back\r\n                            if(has_fractions) {\r\n                                divided[1] = _.expand(_.multiply(divided[1], new_factor));\r\n                                // Since the new factor is not just one, we exit.\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\r\n\r\n                        if(divided[1].equals(0) && !neg_numeric_factor) { //we found at least one factor\r\n\r\n                            //factors.add(new_factor);\r\n                            var d = __.div(symbol.clone(), divided[0].clone());\r\n                            var r = d[0];\r\n\r\n                            // Nothing left to do since we didn't get a reduction\r\n                            if(r.equals(0)) {\r\n                                return symbol;\r\n                            }\r\n\r\n                            symbol = d[1];\r\n                            //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\r\n                            //and we just return the symbol;\r\n                            //If r equals zero then there's nothing left to do so we're done\r\n\r\n                            if(r.equals(-1) && !symbol.equals(0))\r\n                                return symbol;\r\n\r\n                            var factor = divided[0];\r\n\r\n                            if(symbol.equals(factor)) {\r\n                                var rem = __.Factor.reduce(factor, factors);\r\n\r\n                                if(!symbol.equals(rem))\r\n                                    return __.Factor.mfactor(rem, factors);\r\n\r\n                                return rem;\r\n                            }\r\n                            else {\r\n                                factors.add(factor);\r\n                                //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\r\n                                if(symbol.equals(0))\r\n                                    return r;\r\n                            }\r\n\r\n                            if(r.isConstant('all')) {\r\n                                factors.add(r);\r\n                                return r;\r\n                            }\r\n\r\n                            return __.Factor.mfactor(r, factors);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                //difference of squares factorization\r\n                symbol = __.Factor.sqdiff(symbol, factors);\r\n\r\n                //factors by fishing for zeroes\r\n                symbol = __.Factor.zeroes(symbol, factors);\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a set of \"equations\" is linear. \r\n         * @param {type} set\r\n         * @returns {Boolean}\r\n         */\r\n        allLinear: function (set) {\r\n            var l = set.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(!__.isLinear(set[i]))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /*\r\n         * Checks to see if the \"equation\" is linear\r\n         * @param {Symbol} e\r\n         * @returns {boolean}\r\n         */\r\n        isLinear: function (e) {\r\n            var status = false, g = e.group;\r\n            if(g === PL || g === CP) {\r\n                status = true;\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s], sg = symbol.group;\r\n                    if(sg === FN || sg === EX) {\r\n                        status = false;\r\n                    }\r\n                    if(sg === CB) {\r\n                        //needs further checking since it might be imaginary\r\n                        status = variables(symbol).length === 1;\r\n                    }\r\n                    else {\r\n                        if(sg === PL || sg === CP)\r\n                            status = __.isLinear(symbol);\r\n                        else {\r\n                            if(symbol.group !== N && symbol.power.toString() !== '1') {\r\n                                status = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(g === S && e.power === 1)\r\n                status = true;\r\n            return status;\r\n        },\r\n        gcd: function () {\r\n            var args;\r\n            if(arguments.length === 1 && arguments[0] instanceof core.Vector)\r\n                args = arguments[0].elements;\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //short-circuit early\r\n            if(args.length === 0)\r\n                return new Symbol(1);\r\n            else if(args.length === 1)\r\n                return args[0];\r\n\r\n            var appeared = [], evaluate = false;\r\n            for(var i = 0; i < args.length; i++) {\r\n                if(args[i].group === FN && args[i].fname === 'gcd')\r\n                {\r\n                    //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\r\n                    args = args.concat(arguments[i].args);\r\n                    //do not keep gcd in args\r\n                    args.splice(i, 1);\r\n                }\r\n                else\r\n                {\r\n                    //Look if there are any common variables such that\r\n                    //gcd(a,b) => gcd(a,b); gcd(a,a) => a\r\n                    var vars = variables(args[i]);\r\n                    if(core.Utils.haveIntersection(vars, appeared))\r\n                    {\r\n                        //Ok, there are common variables\r\n                        evaluate = true;\r\n                        break;\r\n                    }\r\n                    else\r\n                        appeared = appeared.concat(vars);\r\n                }\r\n            }\r\n\r\n            //appeared.length is 0 when all arguments are group N\r\n            if(evaluate || appeared.length === 0) {\r\n                //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\r\n                if(args.every(function (symbol) {\r\n                    return symbol.getDenom().equals(1)\r\n                })) {\r\n                    var aggregate = args[0];\r\n\r\n                    for(var i = 1; i < args.length; i++) {\r\n                        aggregate = __.gcd_(args[i], aggregate);\r\n                    }\r\n                    return aggregate;\r\n                }\r\n                else {\r\n                    //gcd_ cannot handle denominators correctly\r\n                    return _.divide(__.gcd.apply(null, args.map(function (symbol) {\r\n                        return symbol.getNum();\r\n                    })),\r\n                            __.lcm.apply(null, args.map(function (symbol) {\r\n                                return symbol.getDenom();\r\n                            })));\r\n                }\r\n            }\r\n            else\r\n                return _.symfunction('gcd', args);\r\n        },\r\n        gcd_: function (a, b) {\r\n            if(a.group === FN || a.group === P)\r\n                a = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(a);\r\n                });\r\n\r\n            if(b.group === FN)\r\n                b = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(b);\r\n                });\r\n\r\n            if(a.isConstant() && b.isConstant()) {\r\n                // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\r\n                return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\r\n            }\r\n\r\n            var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\r\n            a = _.multiply(a.clone(), den.clone());\r\n            b = _.multiply(b.clone(), den.clone());\r\n\r\n            //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\r\n            a = _.expand(a);\r\n            b = _.expand(b);\r\n\r\n            if(a.group === CB || b.group === CB) {\r\n                var q = _.divide(a.clone(), b.clone()); //get the quotient\r\n                var t = _.multiply(b.clone(), q.getDenom().invert());//multiply by the denominator\r\n                //if they have a common factor then the result will not equal one \r\n                if(!t.equals(1))\r\n                    return t;\r\n            }\r\n\r\n            //just take the gcd of each component when either of them is in group EX\r\n            if(a.group === EX || b.group === EX)\r\n            {\r\n                var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\r\n                var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\r\n                var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\r\n                return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\r\n            }\r\n\r\n            if(a.length < b.length) { //swap'm\r\n                var t = a;\r\n                a = b;\r\n                b = t;\r\n            }\r\n            var vars_a = variables(a), vars_b = variables(b);\r\n            if((vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0])\r\n                    || vars_a.length === 1 && vars_b.length === 0\r\n                    || vars_a.length === 0 && vars_b.length === 1) {\r\n                a = new Polynomial(a);\r\n                b = new Polynomial(b);\r\n                return _.divide(a.gcd(b).toSymbol(), den);\r\n            }\r\n            else {\r\n                //get the gcd of the multipiers\r\n                //get rid of gcd in coeffs\r\n                var multipliers = [];\r\n                a.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                b.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n\r\n                var T;\r\n                while(!b.equals(0)) {\r\n                    var t = b.clone();\r\n                    a = a.clone();\r\n                    T = __.div(a, t);\r\n\r\n                    b = T[1];\r\n                    if(T[0].equals(0)) {\r\n                        //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\r\n                        return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\r\n                    }\r\n                    a = t;\r\n                }\r\n\r\n                var gcd = core.Math2.QGCD.apply(undefined, multipliers);\r\n\r\n                if(!gcd.equals(1)) {\r\n                    a.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(gcd);\r\n                    });\r\n                }\r\n\r\n                //return symbolic function for gcd in indeterminate form\r\n                if(a.equals(1) && !a.isConstant() && !b.isConstant())\r\n                    return _.divide(_.symfunction('gcd', arguments), den);\r\n\r\n                return _.divide(a, den);\r\n            }\r\n        },\r\n        lcm: function () {\r\n            //https://math.stackexchange.com/a/319310\r\n            //generalization of the 2-variable formula of lcm\r\n\r\n            var args;\r\n            if(arguments.length === 1)\r\n                if(arguments[0] instanceof core.Vector)\r\n                    args = arguments[0].elements;\r\n                else\r\n                    _.error('lcm expects either 1 vector or 2 or more arguments');\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //product of all arguments\r\n            //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            var numer = args.reduce(function (prev, curr) {\r\n                return _.multiply(prev, curr.clone())\r\n            }, new Symbol(1));\r\n\r\n            //gcd of complementary terms\r\n            var denom_args =\r\n                    //https://stackoverflow.com/a/18223072\r\n                //take all complementary terms, e.g.\r\n                //[a,b,c] => [a*b, b*c, a*c]\r\n                //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\r\n                (function (input, size) {\r\n                        size = Number(size);\r\n                        var results = [], result, mask, i, total = Math.pow(2, input.length);\r\n                        for(mask = size; mask < total; mask++) {\r\n                            result = [];\r\n                            i = input.length - 1;\r\n\r\n                            do {\r\n                                if((mask & (1 << i)) !== 0) {\r\n                                    result.push(input[i]);\r\n                                }\r\n                            }\r\n                            while(i--);\r\n\r\n                            if(result.length === size) {\r\n                                results.push(result);\r\n                            }\r\n                        }\r\n                        return results;\r\n                        //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n                    })(arguments, arguments.length - 1).map(function (x) {\r\n                return x.reduce(function (prev, curr) {\r\n                    return _.multiply(prev, curr.clone())\r\n                }, new Symbol(1))\r\n            });\r\n\r\n            var denom;\r\n            //don't eat the gcd term if all arguments are symbols\r\n            if(args.every(function (x) {\r\n                return core.Utils.isVariableSymbol(x)\r\n            }))\r\n                denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));\r\n            else\r\n                denom = __.gcd.apply(null, denom_args);\r\n            //divide product of all arguments by gcd of complementary terms\r\n            var div = _.divide(numer, denom);\r\n            return div;\r\n        },\r\n        /**\r\n         * Divides one expression by another\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Array}\r\n         */\r\n        divide: function (symbol1, symbol2) {\r\n            var result, remainder, factored, den;\r\n            factored = core.Algebra.Factor.factor(symbol1.clone());\r\n            den = factored.getDenom();\r\n            if(!den.isConstant('all')) {\r\n                symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\r\n            }\r\n            else\r\n                //reset the denominator since we're not dividing by it anymore\r\n                den = new Symbol(1);\r\n            result = __.div(symbol1, symbol2);\r\n            remainder = _.divide(result[1], symbol2);\r\n            return _.divide(_.add(result[0], remainder), den);\r\n        },\r\n        div: function (symbol1, symbol2) {\r\n            // If all else fails then assume that division failed with\r\n            // a remainder of zero and the original quotient\r\n            var fail = [new Symbol(0), symbol1.clone()];\r\n\r\n            try {\r\n\r\n                // Division by constants\r\n                if(symbol2.isConstant('all')) {\r\n                    symbol1.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(symbol2.multiplier);\r\n                    });\r\n                    return [symbol1, new Symbol(0)];\r\n                }\r\n                // So that factorized symbols don't affect the result\r\n                symbol1 = _.expand(symbol1);\r\n                symbol2 = _.expand(symbol2);\r\n                // Special case. May need revisiting\r\n                if(symbol1.group === S && symbol2.group === CP) {\r\n                    var x = symbol1.value;\r\n                    var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\r\n                    if(symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\r\n                        var k = Symbol.create(symbol1.multiplier);\r\n                        return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\r\n                    }\r\n                }\r\n                if(symbol1.group === S && symbol2.group === S) {\r\n                    var r = _.divide(symbol1.clone(), symbol2.clone());\r\n                    if(r.isConstant()) //we have a whole\r\n                        return [r, new Symbol(0)];\r\n                    return [new Symbol(0), symbol1.clone()];\r\n                }\r\n                var symbol1_has_func = symbol1.hasFunc(),\r\n                        symbol2_has_func = symbol2.hasFunc(),\r\n                        parse_funcs = false;\r\n\r\n                //substitute out functions so we can treat them as regular variables\r\n                if(symbol1_has_func || symbol2_has_func) {\r\n                    parse_funcs = true;\r\n                    var map = {},\r\n                            symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\r\n                            symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\r\n                            subs = core.Utils.getFunctionsSubs(map);\r\n                }\r\n                //get a list of the variables\r\n                var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\r\n                        quot, rem;\r\n\r\n                //treat imaginary numbers as variables\r\n                if(symbol1.isImaginary() || symbol2.isImaginary()) {\r\n                    vars.push(core.Settings.IMAGINARY);\r\n                }\r\n\r\n                if(vars.length === 1) {\r\n                    var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\r\n                    quot = q[0].toSymbol();\r\n                    rem = q[1].toSymbol();\r\n                }\r\n                else {\r\n                    vars.push(CONST_HASH); //this is for the numbers\r\n                    var reconvert = function (arr) {\r\n                        var symbol = new Symbol(0);\r\n                        for(var i = 0; i < arr.length; i++) {\r\n                            var x = arr[i].toSymbol();\r\n                            symbol = _.add(symbol, x);\r\n                        }\r\n                        return symbol;\r\n                    };\r\n\r\n                    // Silly Martin. This is why you document. I don't remember now\r\n                    var get_unique_max = function (term, any) {\r\n                        var max = Math.max.apply(null, term.terms),\r\n                                count = 0, idx;\r\n\r\n                        if(!any) {\r\n                            for(var i = 0; i < term.terms.length; i++) {\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    count++;\r\n                                }\r\n                                if(count > 1)\r\n                                    return;\r\n                            }\r\n                        }\r\n                        if(any) {\r\n                            for(i = 0; i < term.terms.length; i++)\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    break;\r\n                                }\r\n                        }\r\n                        return [max, idx, term];\r\n                    };\r\n\r\n                    // Tries to find an LT in the dividend that will satisfy division\r\n                    var get_det = function (s, lookat) {\r\n                        lookat = lookat || 0;\r\n                        var det = s[lookat], l = s.length;\r\n                        if(!det)\r\n                            return;\r\n                        //eliminate the first term if it doesn't apply\r\n                        var umax = get_unique_max(det);\r\n                        for(var i = lookat + 1; i < l; i++) {\r\n                            var term = s[i],\r\n                                    is_equal = det.sum.equals(term.sum);\r\n                            if(!is_equal && umax) {\r\n                                break;\r\n                            }\r\n                            if(is_equal) {\r\n                                // Check the differences of their maxes. The one with the biggest difference governs\r\n                                // e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\r\n                                var max1, max2, idx1, idx2, l2 = det.terms.length;\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var item1 = det.terms[j], item2 = term.terms[j];\r\n                                    if(typeof max1 === 'undefined' || item1.greaterThan(max1)) {\r\n                                        max1 = item1;\r\n                                        idx1 = j;\r\n                                    }\r\n                                    if(typeof max2 === 'undefined' || item2.greaterThan(max2)) {\r\n                                        max2 = item2;\r\n                                        idx2 = j;\r\n                                    }\r\n                                }\r\n                                //check their differences\r\n                                var d1 = max1.subtract(term.terms[idx1]),\r\n                                        d2 = max2.subtract(det.terms[idx2]);\r\n                                if(d2 > d1) {\r\n                                    umax = [max2, idx2, term];\r\n                                    break;\r\n                                }\r\n                                if(d1 > d2) {\r\n                                    umax = [max1, idx1, det];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //check if it's a suitable pick to determine the order\r\n                                umax = get_unique_max(term);\r\n                                //if(umax) return umax;\r\n                                if(umax)\r\n                                    break;\r\n                            }\r\n                            umax = get_unique_max(term); //calculate a new unique max\r\n                        }\r\n\r\n                        //if still no umax then any will do since we have a tie\r\n                        if(!umax)\r\n                            return get_unique_max(s[0], true);\r\n                        var e, idx;\r\n                        for(var i = 0; i < s2.length; i++) {\r\n                            var cterm = s2[i].terms;\r\n                            //confirm that this is a good match for the denominator\r\n                            idx = umax[1];\r\n                            if(idx === cterm.length - 1)\r\n                                return;\r\n                            e = cterm[idx];\r\n                            if(!e.equals(0))\r\n                                break;\r\n                        }\r\n                        if(e.equals(0))\r\n                            return get_det(s, ++lookat); //look at the next term\r\n\r\n                        return umax;\r\n                    };\r\n\r\n                    var t_map = core.Utils.toMapObj(vars);\r\n                    var init_sort = function (a, b) {\r\n                        return b.sum.subtract(a.sum);\r\n                    };\r\n                    var is_larger = function (a, b) {\r\n                        if(!a || !b)\r\n                            return false; //it's empty so...\r\n                        for(var i = 0; i < a.terms.length; i++) {\r\n                            if(a.terms[i].lessThan(b.terms[i]))\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    };\r\n\r\n                    var s1 = symbol1.tBase(t_map).sort(init_sort),\r\n                            s2 = symbol2.tBase(t_map).sort(init_sort);\r\n                    var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\r\n                    var det = get_det(target);//we'll begin by assuming that this will let us know which term \r\n                    var quotient = [];\r\n                    if(det) {\r\n                        var lead_var = det[1];\r\n                        var can_divide = function (a, b) {\r\n                            if(a[0].sum.equals(b[0].sum))\r\n                                return a.length >= b.length;\r\n                            return true;\r\n                        };\r\n\r\n                        var try_better_lead_var = function (s1, s2, lead_var) {\r\n                            var checked = [];\r\n                            for(var i = 0; i < s1.length; i++) {\r\n                                var t = s1[i];\r\n                                for(var j = 0; j < t.terms.length; j++) {\r\n                                    var cf = checked[j], tt = t.terms[j];\r\n                                    if(i === 0)\r\n                                        checked[j] = tt; //add the terms for the first one\r\n                                    else if(cf && !cf.equals(tt))\r\n                                        checked[j] = undefined;\r\n                                }\r\n                            }\r\n                            for(var i = 0; i < checked.length; i++) {\r\n                                var t = checked[i];\r\n                                if(t && !t.equals(0))\r\n                                    return i;\r\n                            }\r\n                            return lead_var;\r\n                        };\r\n                        var sf = function (a, b) {\r\n                            var l1 = a.len(), l2 = b.len();\r\n                            var blv = b.terms[lead_var], alv = a.terms[lead_var];\r\n                            if(l2 > l1 && blv.greaterThan(alv))\r\n                                return l2 - l1;\r\n                            return blv.subtract(alv);\r\n                        };\r\n\r\n                        //check to see if there's a better lead_var\r\n                        lead_var = try_better_lead_var(s1, s2, lead_var);\r\n                        //reorder both according to the max power\r\n                        s1.sort(sf); //sort them both according to the leading variable power\r\n                        s2.sort(sf);\r\n\r\n                        //try to adjust if den is larger\r\n                        var fdt = s2[0], fnt = s1[0];\r\n\r\n                        var den = new MVTerm(new Frac(1), [], fnt.map);\r\n                        if(fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {\r\n                            for(var i = 0; i < fnt.terms.length; i++) {\r\n                                var d = fdt.terms[i].subtract(fnt.terms[i]);\r\n                                if(!d.equals(0)) {\r\n                                    var nd = d.add(new Frac(1));\r\n                                    den.terms[i] = d;\r\n                                    for(var j = 0; j < s1.length; j++) {\r\n                                        s1[j].terms[i] = s1[j].terms[i].add(nd);\r\n                                    }\r\n                                }\r\n                                else\r\n                                    den.terms[i] = new Frac(0);\r\n                            }\r\n                        }\r\n\r\n                        var dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                        var safety = 0;\r\n                        var max = 200;\r\n\r\n                        while(dividend_larger && can_divide(s1, s2)) {\r\n                            if(safety++ > max) {\r\n                                throw new core.exceptions.InfiniteLoopError('Unable to compute!');\r\n                            }\r\n\r\n                            var q = s1[0].divide(s2[0]);\r\n\r\n                            quotient.push(q); //add what's divided to the quotient\r\n                            s1.shift();//the first one is guaranteed to be gone so remove from dividend\r\n                            for(var i = 1; i < s2.length; i++) { //loop through the denominator\r\n                                var t = s2[i].multiply(q).generateImage(),\r\n                                        l2 = s1.length;\r\n                                //if we're subtracting from 0\r\n                                if(l2 === 0) {\r\n                                    t.coeff = t.coeff.neg();\r\n                                    s1.push(t);\r\n                                    s1.sort(sf);\r\n                                }\r\n\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var cur = s1[j];\r\n                                    if(cur.getImg() === t.getImg()) {\r\n                                        cur.coeff = cur.coeff.subtract(t.coeff);\r\n                                        if(cur.coeff.equals(0)) {\r\n                                            core.Utils.remove(s1, j);\r\n                                            j--; //adjust the iterator\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                    if(j === l2 - 1) {\r\n                                        t.coeff = t.coeff.neg();\r\n                                        s1.push(t);\r\n                                        s1.sort(sf);\r\n                                    }\r\n                                }\r\n                            }\r\n                            dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                            if(!dividend_larger && s1.length >= s2.length) {\r\n                                //One more try since there might be a terms that is larger than the LT of the divisor\r\n                                for(var i = 1; i < s1.length; i++) {\r\n                                    dividend_larger = is_larger(s1[i], s2[0]);\r\n                                    if(dividend_larger) {\r\n                                        //take it from its current position and move it to the front\r\n                                        s1.unshift(core.Utils.remove(s1, i));\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    quot = reconvert(quotient);\r\n                    rem = reconvert(s1);\r\n\r\n                    if(typeof den !== 'undefined') {\r\n                        den = den.toSymbol();\r\n                        quot = _.divide(quot, den.clone());\r\n                        rem = _.divide(rem, den);\r\n                    }\r\n                }\r\n\r\n                //put back the functions\r\n                if(parse_funcs) {\r\n                    quot = _.parse(quot.text(), subs);\r\n                    rem = _.parse(rem.text(), subs);\r\n                }\r\n\r\n                return [quot, rem];\r\n            }\r\n            catch(e) {\r\n                return fail;\r\n            }\r\n\r\n        },\r\n        line: function (v1, v2, x) {\r\n            if(core.Utils.isArray(v1))\r\n                v1 = core.Utils.convertToVector(v1);\r\n            if(core.Utils.isArray(v2))\r\n                v2 = core.Utils.convertToVector(v2);\r\n            x = _.parse(x || 'x');\r\n            if(!core.Utils.isVector(v1) || !core.Utils.isVector(v2))\r\n                _.error('Line expects a vector! Received \"' + v1 + '\" & \"' + v2 + '\"');\r\n            var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\r\n                    dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\r\n                    m = _.divide(dy, dx),\r\n                    a = _.multiply(x, m.clone()),\r\n                    b = _.multiply(v1.e(1).clone(), m);\r\n            return _.add(_.subtract(a, b), v1.e(2).clone());\r\n        },\r\n        PartFrac: {\r\n            createTemplate: function (den, denom_factors, f_array, v) {\r\n                //clean up the denominator function by factors so it reduces nicely\r\n                den = __.Factor.factor(den);\r\n\r\n                //clean up factors. This is so inefficient but factors are wrapped in parens for safety\r\n                den.each(function (x, key) {\r\n                    if(x.group === FN && x.fname === '' && x.args[0].group === S) {\r\n                        var y = x.args[0];\r\n                        if(this.symbols) {\r\n                            delete this.symbols[key];\r\n                            this.symbols[y.value] = y;\r\n                        }\r\n                        else {\r\n                            den = x.args[0];\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var factors, factors_vec, f, p, deg, degrees, m;\r\n                factors = denom_factors.collectFactors();\r\n                factors_vec = []; //a vector for the template\r\n                degrees = [];\r\n                m = new Symbol(1);\r\n\r\n                for(var i = 0; i < factors.length; i++) { //loop through the factors\r\n                    var factor = Symbol.unwrapPARENS(factors[i]);\r\n                    //if in he for P^n where P is polynomial and n = integer\r\n                    if(factor.power.greaterThan(1)) {\r\n                        p = Number(factor.power);\r\n                        f = factor.clone().toLinear(); //remove the power so we have only the function\r\n                        deg = Number(__.degree(f, v)); //get the degree of f\r\n                        //expand the factor\r\n                        for(var j = 0; j < p; j++) {\r\n                            var efactor = _.pow(f.clone(), new Symbol(j + 1));\r\n                            f_array.push(efactor.clone());\r\n                            var d = _.divide(den.clone(), efactor.clone());\r\n                            degrees.push(deg);\r\n                            factors_vec.push(d);\r\n                        }\r\n                    }\r\n                    /*\r\n                     Possible bug.\r\n                     Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n                     else if(factor.isConstant('all')) {\r\n                     m = _.multiply(m, factor);\r\n                     }\r\n                     */\r\n                    else {\r\n                        //get the degree of the factor so we tack it on tot he factor. This should probably be an array\r\n                        //but for now we note it on the symbol\r\n                        deg = Number(__.degree(factor, v));\r\n                        f_array.push(factor);\r\n                        var d = _.divide(den.clone(), factor.clone());\r\n                        d = _.expand(Symbol.unwrapPARENS(d));\r\n                        degrees.push(deg);\r\n                        factors_vec.push(d);\r\n                    }\r\n                }\r\n                //put back the constant\r\n                f_array = f_array.map(function (x) {\r\n                    return _.multiply(x, m.clone());\r\n                });\r\n                return [f_array, factors_vec, degrees];\r\n            },\r\n            partfrac: function (symbol, v, as_array) {\r\n\r\n                var vars = variables(symbol);\r\n\r\n                v = v || _.parse(vars[0]); //make wrt optional and assume first variable\r\n                try {\r\n                    var num, den, factors, tfactors, ofactors, nterms, degrees,\r\n                            dterms, max, M, c, powers, div, r, factors_vec, ks,\r\n                            template, tfactors;\r\n                    num = _.expand(symbol.getNum());\r\n                    den = _.expand(symbol.getDenom().toUnitMultiplier());\r\n                    //move the entire multipier to the numerator\r\n                    num.multiplier = symbol.multiplier;\r\n                    //we only have a meaningful change if n factors > 1. This means that\r\n                    //the returned group will be a CB\r\n                    //collect the terms wrt the x\r\n                    nterms = num.groupTerms(v);\r\n                    //divide out wholes if top is larger\r\n                    if(Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\r\n                        div = __.div(num.clone(), _.expand(den.clone()));\r\n                        r = div[0]; //remove the wholes\r\n                        num = div[1]; //work with the remainder\r\n                        nterms = num.groupTerms(v); //recalculate the nterms\r\n                    }\r\n                    else\r\n                        r = new Symbol(0);\r\n\r\n                    if(Number(__.degree(den, v)) === 1) {\r\n                        var q = _.divide(num, den);\r\n                        if(as_array)\r\n                            return [r, q];\r\n                        return _.add(r, q);\r\n                    }\r\n                    //first factor the denominator. This means that the strength of this\r\n                    //algorithm depends on how well we can factor the denominator. \r\n                    ofactors = __.Factor.factor(den);\r\n                    //create the template. This method will create the template for solving \r\n                    //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\r\n                    template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\r\n                    tfactors = template[0]; //grab the factors\r\n                    factors_vec = template[1]; //grab the factor vectors\r\n                    degrees = template[2]; //grab the degrees\r\n                    //make note of the powers of each term\r\n                    powers = [nterms.length];\r\n                    //create the dterms vector\r\n                    dterms = [];\r\n                    factors = [];\r\n                    ks = [];\r\n                    var factor, deg;\r\n                    factors_vec.map(function (x, idx) {\r\n                        factor = tfactors[idx];\r\n                        deg = degrees[idx];\r\n                        for(var i = 0; i < deg; i++) {\r\n                            factors.push(factor.clone());\r\n                            var k = Symbol.create(v, i);\r\n                            var t = _.expand(_.multiply(x, k.clone())).groupTerms(v);\r\n                            //make a note of the power which corresponds to the length of the array\r\n                            var p = t.length;\r\n                            powers.push(p);\r\n                            dterms.push(t);\r\n                            ks.push(k.clone());\r\n                        }\r\n                    });\r\n                    //get the max power\r\n                    max = core.Utils.arrayMax(powers);\r\n\r\n                    //fill the holes and create a matrix\r\n                    c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();\r\n                    //for each of the factors we do the same\r\n                    M = new core.Matrix();\r\n                    for(var i = 0; i < dterms.length; i++) {\r\n                        M.elements.push(core.Utils.fillHoles(dterms[i], max));\r\n                    }\r\n\r\n                    //solve the system of equations\r\n                    var partials = _.multiply(M.transpose().invert(), c);\r\n                    //the results are backwards to reverse it\r\n                    //partials.elements.reverse();\r\n                    //convert it all back\r\n                    var retval = as_array ? [r] : r;\r\n                    partials.each(function (e, i) {\r\n                        var term = _.multiply(ks[i], _.divide(e, factors[i]));\r\n                        if(as_array)\r\n                            retval.push(term);\r\n                        else\r\n                            retval = _.add(retval, term);\r\n                    });\r\n\r\n                    //done\r\n                    return retval;\r\n                }\r\n                catch(e) {\r\n                    //try to group symbols\r\n                    try {\r\n                        if(symbol.isComposite()) {\r\n                            //group denominators\r\n                            var denominators = {};\r\n\r\n                            symbol.each(function (x) {\r\n                                var d = x.getDenom();\r\n                                var n = x.getNum();\r\n                                var e = denominators[d];\r\n                                denominators[d] = e ? _.add(e, n) : n;\r\n                            });\r\n\r\n                            var t = new Symbol(0);\r\n\r\n                            for(var x in denominators) {\r\n                                t = _.add(t, _.divide(denominators[x], _.parse(x)));\r\n                            }\r\n\r\n                            symbol = t;\r\n                        }\r\n                    }\r\n                    catch(e2) {\r\n                    }\r\n                    ;\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        degree: function (symbol, v, o) {\r\n            o = o || {\r\n                nd: [], //numeric\r\n                sd: [], //symbolic\r\n                depth: 0 //call depth\r\n            };\r\n\r\n            if(!v) {\r\n                var vars = variables(symbol);\r\n                //The user must specify the variable for multivariate\r\n                if(vars.length > 1)\r\n                    throw new Error('You must specify the variable for multivariate polynomials!');\r\n                //if it's empty then we're dealing with a constant\r\n                if(vars.length === 0)\r\n                    return new Symbol(0);\r\n                //assume the variable for univariate\r\n                v = _.parse(vars[0]);\r\n            }\r\n\r\n            //store the group\r\n            var g = symbol.group;\r\n            //we're going to trust the user and assume no EX. Calling isPoly \r\n            //would eliminate this but no sense in checking twice. \r\n            if(symbol.isComposite()) {\r\n                symbol = symbol.clone();\r\n                symbol.distributeExponent();\r\n                symbol.each(function (x) {\r\n                    o.depth++; //mark a depth increase\r\n                    __.degree(x, v, o);\r\n                    o.depth--; //we're back\r\n                });\r\n            }\r\n            else if(symbol.group === CB) {\r\n                symbol.each(function (x) {\r\n                    o.depth++;\r\n                    __.degree(x, v, o);\r\n                    o.depth++;\r\n                });\r\n            }\r\n            else if(g === EX && symbol.value === v.value) {\r\n                o.sd.push(symbol.power.clone());\r\n            }\r\n            else if(g === S && symbol.value === v.value) {\r\n                o.nd.push(_.parse(symbol.power));\r\n            }\r\n            else\r\n                o.nd.push(new Symbol(0));\r\n\r\n            //get the max out of the array\r\n            var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\r\n\r\n            if(o.depth === 0 && o.sd.length > 0) {\r\n                if(deg !== undefined)\r\n                    o.sd.unshift(deg);\r\n                return _.symfunction('max', o.sd);\r\n            }\r\n            if(!core.Utils.isSymbol(deg))\r\n                deg = _.parse(deg);\r\n            //return the degree\r\n            return deg;\r\n        },\r\n        /**\r\n         * Attempts to complete the square of a polynomial\r\n         * @param {type} symbol\r\n         * @param {type} v\r\n         * @param {type} raw\r\n         * @throws {Error} \r\n         * @returns {Object|Symbol[]}\r\n         */\r\n        sqComplete: function (symbol, v, raw) {\r\n            if(!core.Utils.isSymbol(v))\r\n                v = _.parse(v);\r\n            var stop = function (msg) {\r\n                msg = msg || 'Stopping';\r\n                throw new core.exceptions.ValueLimitExceededError(msg);\r\n            };\r\n            //if not CP then nothing to do\r\n            if(!symbol.isPoly(true))\r\n                stop('Must be a polynomial!');\r\n\r\n            //declare vars\r\n            var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\r\n\r\n            br = core.Utils.inBrackets;\r\n            //make a copy\r\n            symbol = symbol.clone();\r\n            deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\r\n            //must be in form ax^2 +/- bx +/- c\r\n            if(!deg.equals(2))\r\n                stop('Cannot complete square for degree ' + deg);\r\n            //get the coeffs\r\n            coeffs = core.Algebra.coeffs(symbol, v);\r\n            a = coeffs[2];\r\n            //store the sign\r\n            sign = coeffs[1].sign();\r\n            //divide the linear term by two and square it\r\n            b = _.divide(coeffs[1], new Symbol(2));\r\n            //add the difference to the constant\r\n            c = _.pow(b.clone(), new Symbol(2));\r\n            if(raw)\r\n                return [a, b, d];\r\n            sqrt_a = math.sqrt(a);\r\n            e = _.divide(math.sqrt(c), sqrt_a.clone());\r\n            //calculate d which is the constant\r\n            d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2)));\r\n            //compute the square part\r\n            sym = _.parse(br(sqrt_a.clone() + '*' + v + (sign < 0 ? '-' : '+') + e));\r\n            return {\r\n                a: sym,\r\n                c: d,\r\n                f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\r\n            };\r\n        },\r\n        Simplify: {\r\n            strip: function (symbol) {\r\n                var c = _.parse(symbol.multiplier);\r\n                symbol.toUnitMultiplier();\r\n                var p = _.parse(symbol.power);\r\n                symbol.toLinear();\r\n                return [c, p, symbol];\r\n            },\r\n            unstrip: function (cp, symbol) {\r\n                var c = cp[0];\r\n                var p = cp[1];\r\n                return _.multiply(c, _.pow(symbol, p));\r\n            },\r\n            complexSimp: function (num, den) {\r\n                var ac, bd, bc, ad, cd, r1, r2, i1, i2;\r\n                r1 = num.realpart();\r\n                i1 = num.imagpart();\r\n                r2 = den.realpart();\r\n                i2 = den.imagpart();\r\n                //apply complex arithmatic rule\r\n                ac = _.multiply(r1.clone(), r2.clone());\r\n                bd = _.multiply(i1.clone(), i2.clone());\r\n                bc = _.multiply(r2.clone(), i1);\r\n                ad = _.multiply(r1, i2.clone());\r\n                cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\r\n\r\n                return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\r\n            },\r\n            trigSimp: function (symbol) {\r\n                if(symbol.containsFunction(['cos', 'sin', 'tan'])) {\r\n                    symbol = symbol.clone();\r\n                    //remove power and multiplier\r\n                    var sym_array = __.Simplify.strip(symbol);\r\n                    symbol = sym_array.pop();\r\n                    //the default return value is the symbol\r\n                    var retval = symbol.clone();\r\n\r\n                    //rewrite the symbol\r\n                    if(symbol.group === CP) {\r\n                        var sym = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            //rewrite the function\r\n                            var tr = __.Simplify.trigSimp(x.fnTransform());\r\n                            sym = _.add(sym, tr);\r\n                        }, true);\r\n\r\n                        //put back the power and multiplier and return\r\n                        retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\r\n                    }\r\n                    else if(symbol.group === CB) {\r\n\r\n                        var n = symbol.getNum();\r\n                        var d = symbol.getDenom();\r\n\r\n                        //try for tangent\r\n                        if(n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\r\n                            retval = _.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\r\n                        }\r\n                        if(retval.group === CB) {\r\n                            var t = new Symbol(1);\r\n                            retval.each(function (x) {\r\n                                if(x.fname === 'tan') {\r\n                                    x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\r\n                                }\r\n                                t = _.multiply(t, x);\r\n                            });\r\n                            retval = t;\r\n                        }\r\n                    }\r\n\r\n\r\n                    retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\r\n\r\n                    symbol = retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            fracSimp: function (symbol) {\r\n                //try a quick simplify of imaginary numbers\r\n                var den = symbol.getDenom();\r\n                var num = symbol.getNum();\r\n\r\n                if(num.isImaginary() && den.isImaginary())\r\n                    symbol = __.Simplify.complexSimp(num, den);\r\n\r\n                if(symbol.isComposite()) {\r\n                    if(symbol.power > 1) {\r\n                        symbol = _.expand(symbol);\r\n                    }\r\n\r\n                    var symbols = symbol.collectSymbols();\r\n                    //assumption 1.\r\n                    //since it's a composite, it has a length of at least 1\r\n                    var retval, a, b, d1, d2, n1, n2, x, y, c, den, num;\r\n                    a = symbols.pop(); //grab the first symbol\r\n                    //loop through each term and make denominator common\r\n                    while(symbols.length) {\r\n                        b = symbols.pop(); //grab the second symbol\r\n                        d1 = _.parse(a.getDenom());\r\n                        d2 = _.parse(b.getDenom());\r\n                        n1 = a.getNum();\r\n                        n2 = b.getNum();\r\n                        c = _.multiply(d1.clone(), d2.clone());\r\n                        x = _.multiply(n1, d2);\r\n                        y = _.multiply(n2, d1);\r\n                        a = _.divide(_.add(x, y), c);\r\n                    }\r\n                    den = _.expand(a.getDenom());\r\n                    num = _.expand(a.getNum());\r\n\r\n                    //simplify imaginary\r\n                    if(num.isImaginary() && den.isImaginary()) {\r\n                        retval = __.Simplify.complexSimp(num, den);\r\n                    }\r\n                    else {\r\n                        retval = _.divide(num, den);\r\n                    }\r\n\r\n                    //we've already hit the simplest form so return that\r\n                    if(retval.equals(symbol)) {\r\n                        return symbol;\r\n                    }\r\n\r\n                    //otherwise simplify it some more\r\n                    return __.Simplify.simplify(retval);\r\n                }\r\n                return symbol;\r\n            },\r\n            ratSimp: function (symbol) {\r\n                if(symbol.group === CB) {\r\n                    var den = symbol.getDenom();\r\n                    var num = symbol.getNum().distributeMultiplier();\r\n                    var d = __.Simplify.fracSimp(den);\r\n                    var n = __.Simplify.fracSimp(num);\r\n                    symbol = _.divide(n, d);\r\n                }\r\n                return symbol;\r\n            },\r\n            sqrtSimp: function (symbol, sym_array) {\r\n                var retval;\r\n                if(symbol.isSQRT()) {\r\n                    var factored = __.Factor.factor(symbol.args[0].clone());\r\n                    var m = _.parse(factored.multiplier);\r\n                    var sign = m.sign();\r\n\r\n                    var retval = _.sqrt(m.abs());\r\n                    var arg;\r\n\r\n                    if(isInt(retval)) {\r\n\r\n                        if(factored.group === CB) {\r\n                            var rem = new Symbol(1);\r\n\r\n                            factored.each(function (x) {\r\n                                if(x.group === N) {\r\n                                    var trial = _.sqrt(x.clone());\r\n\r\n                                    // Multiply back sqrt if it's an integer otherwise just put back the number\r\n                                    if(isInt(trial)) {\r\n                                        retval = _.multiply(retval, trial);\r\n                                    }\r\n                                    else {\r\n                                        rem = _.multiply(rem, x);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    rem = _.multiply(rem, x);\r\n                                }\r\n\r\n                            });\r\n                            var t = _.multiply(rem, _.parse(sign));\r\n                            arg = _.sqrt(t.clone());\r\n\r\n                            // Expand if it's imaginary\r\n                            if(arg.isImaginary) {\r\n                                arg = _.sqrt(_.expand(t.clone()));\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Strip the multiplier\r\n                            arg = _.sqrt(factored.clone().toUnitMultiplier());\r\n                        }\r\n                        return _.multiply(retval, arg);\r\n\r\n                    }\r\n\r\n                }\r\n                else if(symbol.isComposite() && symbol.isLinear()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.Simplify.sqrtSimp(x));\r\n                    }, true);\r\n                    // Put back the multiplier\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    retval = _.parse(symbol.multiplier);\r\n                    symbol.each(function (x) {\r\n                        var simp = __.Simplify.sqrtSimp(x);\r\n                        retval = _.multiply(retval, simp);\r\n\r\n                    }, true);\r\n                    // Put back the power\r\n                    retval = _.pow(retval, _.parse(symbol.power));\r\n                }\r\n\r\n                return retval ? retval : _.parse(symbol);\r\n            },\r\n            /**\r\n             * Unused. The goal is to substitute out patterns but it currently doesn't work.\r\n             * @param {Symbol} symbol\r\n             * @return {Array} The symbol and the matched patterns\r\n             */\r\n            patternSub: function (symbol) {\r\n                var patterns = {};\r\n\r\n                var has_CP = function (symbol) {\r\n                    var found = false;\r\n                    symbol.each(function (x) {\r\n                        if(x.group === CP) {\r\n                            found = true;\r\n                        }\r\n                        else if(x.symbols) {\r\n                            found = has_CP(x);\r\n                        }\r\n                    });\r\n\r\n                    return found;\r\n                };\r\n\r\n                var collect = function (sym) {\r\n                    // We loop through each symbol looking for anything in the simplest\r\n                    // form of ax+byz+...\r\n                    sym.each(function (x) {\r\n                        // Items of group N,P,S, need to apply\r\n                        if(!x.symbols && x.group !== FN) {\r\n                            return;\r\n                        }\r\n\r\n                        // Check to see if it has any symbols of group CP\r\n                        // Get the patterns in that symbol instead if it has anything of group CP\r\n                        if(has_CP(x)) {\r\n                            collect(x);\r\n                        }\r\n                        else {\r\n                            if(!patterns[x.value]) {\r\n                                var u = core.Utils.getU(symbol);\r\n                                // Get a u value and mark it for subsitution\r\n                                patterns[x.value] = u;\r\n                                symbol = symbol.sub(x.value, u);\r\n                            }\r\n                        }\r\n                    }, true);\r\n                };\r\n\r\n                // Collect a list of patterns\r\n                collect(symbol);\r\n\r\n                return [symbol, patterns];\r\n            },\r\n            simplify: function (symbol) {\r\n                //remove the multiplier to make calculation easier;\r\n                var sym_array = __.Simplify.strip(symbol);\r\n                symbol = sym_array.pop();\r\n                //remove gcd from denominator\r\n                symbol = __.Simplify.fracSimp(symbol);\r\n\r\n                //nothing more to do\r\n                if(symbol.isConstant() || symbol.group === core.groups.S) {\r\n                    sym_array.push(symbol);\r\n                    var ret = __.Simplify.unstrip(sym_array, symbol);\r\n                    return ret;\r\n                }\r\n\r\n                //var patterns;\r\n\r\n                var simplified = symbol.clone(); //make a copy\r\n\r\n                //[simplified, patterns] = __.Simplify.patternSub(symbol);\r\n\r\n                // Simplify sqrt within the symbol\r\n//                simplified = __.Simplify.sqrtSimp(simplified, sym_array);\r\n\r\n                // Try trig simplificatons e.g. cos(x)^2+sin(x)^2\r\n                simplified = __.Simplify.trigSimp(simplified);\r\n\r\n                // Simplify common denominators\r\n                simplified = __.Simplify.ratSimp(simplified);\r\n\r\n                // First go for the \"cheapest\" simplification which may eliminate \r\n                // your problems right away. factor -> evaluate. Remember\r\n                // that there's no need to expand since factor already does that\r\n\r\n                simplified = __.Factor.factor(simplified);\r\n\r\n                //If the simplfied is a sum then we can make a few more simplifications\r\n                //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\r\n                if(simplified.group === core.groups.CP && simplified.isLinear()) {\r\n                    var m = simplified.multiplier.clone();\r\n                    simplified.toUnitMultiplier(); //strip the multiplier\r\n                    var r = new Symbol(0);\r\n                    //return the sum of simplifications\r\n                    simplified.each(function (x) {\r\n                        var s = __.Simplify.simplify(x);\r\n                        r = _.add(r, s);\r\n                    });\r\n                    simplified = r;\r\n                    //put back the multiplier\r\n                    r.multiplier = r.multiplier.multiply(m);\r\n                }\r\n\r\n                //place back multiplier and return\r\n                var retval = __.Simplify.unstrip(sym_array, simplified);\r\n\r\n                // Back substitute\r\n                /*\r\n                 for(var x in patterns) {\r\n                 retval = retval.sub(patterns[x], x);\r\n                 }\r\n                 */\r\n\r\n                return retval;\r\n            }\r\n        },\r\n\r\n        Classes: {\r\n            Polynomial: Polynomial,\r\n            Factors: Factors,\r\n            MVTerm: MVTerm\r\n        }\r\n    };\r\n\r\n    // Add a link to simplify\r\n    core.Expression.prototype.simplify = function () {\r\n        return __.Simplify.simplify(this.symbol);\r\n    };\r\n\r\n    nerdamer.useAlgebraDiv = function () {\r\n        var divide = __.divideFn = _.divide;\r\n        var calls = 0; //keep track of how many calls were made\r\n        _.divide = function (a, b) {\r\n            calls++;\r\n            var ans;\r\n            if(calls === 1) //check if this is the first call. If it is use algebra divide\r\n                ans = core.Algebra.divide(a, b);\r\n            else //otherwise use parser divide\r\n                ans = divide(a, b);\r\n            calls = 0; //reset the number of calls back to none\r\n            return ans;\r\n        };\r\n    };\r\n\r\n    nerdamer.useParserDiv = function () {\r\n        if(__.divideFn)\r\n            _.divide = __.divideFn;\r\n        delete __.divideFn;\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'factor',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Factor.factor;\r\n            }\r\n        },\r\n        {\r\n            name: 'simplify',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Simplify.simplify;\r\n            }\r\n        },\r\n        {\r\n            name: 'gcd',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.gcd;\r\n            }\r\n        },\r\n        {\r\n            name: 'lcm',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.lcm;\r\n            }\r\n        },\r\n        {\r\n            name: 'roots',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.roots;\r\n            }\r\n        },\r\n        {\r\n            name: 'divide',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.divide;\r\n            }\r\n        },\r\n        {\r\n            name: 'div',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.div;\r\n            }\r\n        },\r\n        {\r\n            name: 'partfrac',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.PartFrac.partfrac;\r\n            }\r\n        },\r\n        {\r\n            name: 'deg',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.degree;\r\n            }\r\n        },\r\n        {\r\n            name: 'coeffs',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function () {\r\n                    var coeffs = __.coeffs.apply(__, arguments);\r\n                    return new core.Vector(coeffs);\r\n                };\r\n                return f;\r\n            }\r\n        },\r\n        {\r\n            name: 'line',\r\n            visible: true,\r\n            numargs: [2, 3],\r\n            build: function () {\r\n                return __.line;\r\n            }\r\n        },\r\n        {\r\n            name: 'sqcomp',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function (x, v) {\r\n                    try {\r\n                        v = v || variables(x)[0];\r\n                        var sq = __.sqComplete(x.clone(), v);\r\n                        return sq.f;\r\n                    }\r\n                    catch(e) {\r\n                        return x;\r\n                    }\r\n                };\r\n                return f;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.api();\r\n})();\n\n//# sourceURL=webpack://graph-art-creator/./src/nerdamer/Algebra.js?");

/***/ }),

/***/ "./src/nerdamer/Calculus.js":
/*!**********************************!*\
  !*** ./src/nerdamer/Calculus.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global module */\r\n\r\n/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\nif( true && typeof nerdamer === 'undefined') {\r\n    var nerdamer = __webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\");\r\n    __webpack_require__(/*! ./Algebra.js */ \"./src/nerdamer/Algebra.js\");\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Frac = core.Frac,\r\n            Settings = core.Settings,\r\n            isSymbol = core.Utils.isSymbol,\r\n            FN = core.groups.FN,\r\n            Symbol = core.Symbol,\r\n            text = core.Utils.text,\r\n            inBrackets = core.Utils.inBrackets,\r\n            isInt = core.Utils.isInt,\r\n            format = core.Utils.format,\r\n            even = core.Utils.even,\r\n            evaluate = core.Utils.evaluate,\r\n            N = core.groups.N,\r\n            S = core.groups.S,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            EX = core.groups.EX,\r\n            P = core.groups.P,\r\n            LOG = Settings.LOG,\r\n            EXP = 'exp',\r\n            ABS = 'abs',\r\n            SQRT = 'sqrt',\r\n            SIN = 'sin',\r\n            COS = 'cos',\r\n            TAN = 'tan',\r\n            SEC = 'sec',\r\n            CSC = 'csc',\r\n            COT = 'cot',\r\n            ASIN = 'asin',\r\n            ACOS = 'acos',\r\n            ATAN = 'atan',\r\n            ASEC = 'asec',\r\n            ACSC = 'acsc',\r\n            ACOT = 'acot',\r\n            SINH = 'sinh',\r\n            COSH = 'cosh',\r\n            TANH = 'tanh',\r\n            CSCH = 'csch',\r\n            SECH = 'sech',\r\n            COTH = 'coth',\r\n            ASECH = 'asech',\r\n            ACSCH = 'acsch',\r\n            ACOTH = 'acoth';\r\n\r\n    //custom errors\r\n    function NoIntegralFound(msg) {\r\n        this.message = msg || \"\";\r\n    }\r\n    NoIntegralFound.prototype = new Error();\r\n\r\n    //Preparations\r\n    Symbol.prototype.hasIntegral = function () {\r\n        return this.containsFunction('integrate');\r\n    };\r\n    //transforms a function\r\n    Symbol.prototype.fnTransform = function () {\r\n        if(this.group !== FN)\r\n            return this;\r\n        var retval, a = this.args[0];\r\n        var m = new Symbol(this.multiplier);\r\n        var sym = this.clone().toUnitMultiplier();\r\n        if(this.isLinear()) {\r\n            switch(this.fname) {\r\n                case SINH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\r\n                    break;\r\n                case TAN:\r\n                    retval = _.parse(format('sin({0})/cos({0})', a));\r\n                    break;\r\n                case CSC:\r\n                    retval = _.parse(format('1/sin({0})', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('1/cos({0})', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.power.equals(2)) {\r\n            switch(this.fname) {\r\n                case SIN:\r\n                    retval = _.parse(format('1/2-cos(2*({0}))/2', a));\r\n                    break;\r\n                case COS:\r\n                    retval = _.parse(format('1/2+cos(2*({0}))/2', a));\r\n                    break;\r\n                case TAN:\r\n                    //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\r\n                    retval = _.parse(format('sin({0})^2/cos({0})^2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case SINH:\r\n                    retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.fname === SEC) {\r\n            retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === CSC) {\r\n            retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === TAN) {\r\n            if(this.power.lessThan(0)) {\r\n                retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\r\n            }\r\n            else {\r\n                retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\r\n            }\r\n        }\r\n        else if(this.fname === SIN && this.power.lessThan(0)) {\r\n            retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === COS && this.power.lessThan(0)) {\r\n            retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === SIN && this.power.equals(3)) {\r\n            retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\r\n        }\r\n        else if(this.fname === COS && this.power.equals(3)) {\r\n            retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\r\n        }\r\n        //cos(a*x)^(2*n) or sin(a*x)^(2*n)\r\n        else if((this.fname === COS || this.fname === SIN) && even(this.power)) {\r\n            var n = this.power / 2;\r\n            //convert to a double angle\r\n            var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform();\r\n            //raise to the n and expand\r\n            var transformed = _.expand(_.pow(double_angle, _.parse(n)));\r\n\r\n            retval = new Symbol(0);\r\n\r\n            transformed.each(function (s) {\r\n                var t = s.fnTransform();\r\n                retval = _.add(retval, t);\r\n            }, true);\r\n        }\r\n        else\r\n            retval = sym;\r\n\r\n        return _.multiply(retval, m);\r\n    };\r\n\r\n    Symbol.prototype.hasTrig = function () {\r\n        if(this.isConstant(true) || this.group === S)\r\n            return false;\r\n        if(this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))\r\n            return true;\r\n        if(this.symbols) {\r\n            for(var x in this.symbols)\r\n                if(this.symbols[x].hasTrig())\r\n                    return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    core.Expression.prototype.hasIntegral = function () {\r\n        return this.symbol.hasIntegral();\r\n    };\r\n    /**\r\n     * Attempts to rewrite a symbol under one common denominator\r\n     * @param {Symbol} symbol \r\n     */\r\n    core.Utils.toCommonDenominator = function (symbol) {\r\n        //transform x/a+x -> (ax+x)/a\r\n        if(symbol.isComposite() && symbol.isLinear()) {\r\n            var m = new Symbol(symbol.multiplier);\r\n            var denominator = new Symbol(1);\r\n            var numerator = new Symbol(0);\r\n            symbol.each(function (x) {\r\n                denominator = _.multiply(denominator, x.getDenom());\r\n            }, true);\r\n\r\n            //remove the denomitor in each term\r\n            symbol.each(function (x) {\r\n                var num = x.getNum();\r\n                var den = x.getDenom();\r\n                var factor = _.multiply(num, _.divide(denominator.clone(), den));\r\n                numerator = _.add(numerator, factor);\r\n            });\r\n            var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\r\n            return retval;\r\n        }\r\n        return symbol;\r\n    };\r\n    //A function to check if a function name is an inverse trig function\r\n    core.Utils.in_inverse_trig = function (x) {\r\n        var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];\r\n        return inv_trig_fns.indexOf(x) !== -1;\r\n    };\r\n    //A function to check if a function name is a trig function\r\n    core.Utils.in_trig = function (x) {\r\n        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    core.Utils.in_htrig = function (x) {\r\n        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    // Matrix functions\r\n    core.Matrix.jacobian = function (eqns, vars) {\r\n        var jacobian = new core.Matrix();\r\n        //get the variables if not supplied\r\n        if(!vars) {\r\n            vars = core.Utils.arrayGetVariables(eqns);\r\n        }\r\n\r\n        vars.forEach(function (v, i) {\r\n            eqns.forEach(function (eq, j) {\r\n                var e = core.Calculus.diff(eq.clone(), v);\r\n                jacobian.set(j, i, e);\r\n            });\r\n        });\r\n\r\n        return jacobian;\r\n    };\r\n\r\n    core.Matrix.prototype.max = function () {\r\n        var max = new Symbol(0);\r\n        this.each(function (x) {\r\n            var e = x.abs();\r\n            if(e.gt(max))\r\n                max = e;\r\n        });\r\n        return max;\r\n    };\r\n\r\n    core.Matrix.cMatrix = function (value, vars) {\r\n        var m = new core.Matrix();\r\n        //make an initial guess\r\n        vars.forEach(function (v, i) {\r\n            m.set(i, 0, _.parse(value));\r\n        });\r\n        return m;\r\n    };\r\n\r\n    var all_functions = core.Utils.all_functions = function (arr) {\r\n        for(var i = 0, l = arr.length; i < l; i++)\r\n            if(arr[i].group !== FN)\r\n                return false;\r\n        return true;\r\n    },\r\n            cosAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\r\n            },\r\n            cosAsinAtransform = core.Utils.cosAsinAtranform = function (symbol1, symbol2) {\r\n                //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\r\n                //we technically know how to do this transform but more is needed for correct output\r\n                if(Number(symbol2.power) !== 1)\r\n                    return _.multiply(symbol1, symbol2);\r\n                var a;\r\n                a = symbol1.args[0];\r\n                return _.parse(format('(sin(2*({0})))/2', a));\r\n            },\r\n            sinAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\r\n            },\r\n            trigTransform = core.Utils.trigTransform = function (arr) {\r\n                var map = {}, symbol, t,\r\n                        retval = new Symbol(1);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    symbol = arr[i];\r\n\r\n                    if(symbol.group === FN) {\r\n                        var fname = symbol.fname;\r\n\r\n                        if(fname === COS && map[SIN]) {\r\n\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[SIN]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[SIN]);\r\n                            }\r\n                            delete map[SIN];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[COS]) {\r\n                            if(map[COS].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[COS]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[COS]);\r\n                            }\r\n                            delete map[COS];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[SIN]) {\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = sinAsinBtransform(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n                            else {\r\n                                //This should actually be redundant code but let's put just in case\r\n                                t = _.multiply(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n\r\n                            retval = t;\r\n                        }\r\n                        else {\r\n                            map[fname] = symbol;\r\n                        }\r\n                    }\r\n                    else\r\n                        retval = _.multiply(retval, symbol);\r\n                }\r\n\r\n                //put back the remaining functions\r\n                for(var x in map)\r\n                    retval = _.multiply(retval, map[x]);\r\n\r\n                return retval;\r\n\r\n            };\r\n\r\n    core.Settings.integration_depth = 10;\r\n\r\n    core.Settings.max_lim_depth = 10;\r\n\r\n    var __ = core.Calculus = {\r\n\r\n        version: '1.4.6',\r\n\r\n        sum: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                start = Number(start);\r\n                end = Number(end);\r\n                retval = core.Utils.block(modifier, function () {\r\n                    var f = fn.text(),\r\n                            subs = {'~': true}, //lock subs. Is this even being used?\r\n                            retval = new core.Symbol(0);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        var ans = _.parse(f, subs);\r\n                        retval = _.add(retval, ans);\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('sum', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        product: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                retval = core.Utils.block(modifier, function () {\r\n                    start = Number(start);\r\n                    end = Number(end.multiplier);\r\n\r\n                    var f = fn.text(),\r\n                            subs = {},\r\n                            retval = new core.Symbol(1);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        retval = _.multiply(retval, _.parse(f, subs));\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('product', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        diff: function (symbol, wrt, nth) {\r\n            if(core.Utils.isVector(symbol)) {\r\n                var vector = new core.Vector([]);\r\n                symbol.each(function (x) {\r\n                    vector.elements.push(__.diff(x, wrt, nth));\r\n                });\r\n                return vector;\r\n            }\r\n            else if(core.Utils.isMatrix(symbol)) {\r\n                var matrix = new core.Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    matrix.set(i, j, __.diff(x, wrt, nth));\r\n                });\r\n                return matrix;\r\n            }\r\n\r\n            var d = isSymbol(wrt) ? wrt.text() : wrt;\r\n            //the nth derivative\r\n            nth = isSymbol(nth) ? nth.multiplier : nth || 1;\r\n\r\n            if(d === undefined)\r\n                d = core.Utils.variables(symbol)[0];\r\n\r\n            //unwrap sqrt\r\n            if(symbol.group === FN && symbol.fname === SQRT) {\r\n                var s = symbol.args[0],\r\n                        sp = symbol.power.clone();\r\n                //these groups go to zero anyway so why waste time?\r\n                if(s.group !== N || s.group !== P) {\r\n                    s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\r\n                    s.multiplier = s.multiplier.multiply(symbol.multiplier);\r\n                }\r\n\r\n                symbol = s;\r\n            }\r\n\r\n            if(symbol.group === FN && !isSymbol(symbol.power)) {\r\n                var a = derive(_.parse(symbol));\r\n                var b = __.diff(symbol.args[0].clone(), d);\r\n                symbol = _.multiply(a, b);//chain rule\r\n            }\r\n            else {\r\n                symbol = derive(symbol);\r\n            }\r\n\r\n            if(nth > 1) {\r\n                nth--;\r\n                symbol = __.diff(symbol, wrt, nth);\r\n            }\r\n\r\n            return symbol;\r\n\r\n            // Equivalent to \"derivative of the outside\".\r\n            function polydiff(symbol) {\r\n                if(symbol.value === d || symbol.contains(d, true)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(symbol.power);\r\n                    symbol.power = symbol.power.subtract(new Frac(1));\r\n                    if(symbol.power.equals(0)) {\r\n                        symbol = Symbol(symbol.multiplier);\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            }\r\n            \r\n            function derive(symbol) {\r\n                var g = symbol.group, a, b, cp;\r\n\r\n                if(g === N || g === S && symbol.value !== d || g === P) {\r\n                    symbol = Symbol(0);\r\n                }\r\n                else if(g === S) {\r\n                    symbol = polydiff(symbol);\r\n                }\r\n                else if(g === CB) {\r\n                    var m = symbol.multiplier.clone();\r\n                    symbol.toUnitMultiplier();\r\n                    var retval = _.multiply(product_rule(symbol), polydiff(symbol));\r\n                    retval.multiplier = retval.multiplier.multiply(m);\r\n                    return retval;\r\n                }\r\n                else if(g === FN && symbol.power.equals(1)) {\r\n                    // Table of known derivatives\r\n                    switch(symbol.fname) {\r\n                        case LOG:\r\n                            cp = symbol.clone();\r\n                            symbol = symbol.args[0].clone();//get the arguments\r\n                            symbol.power = symbol.power.negate();\r\n                            symbol.multiplier = cp.multiplier.divide(symbol.multiplier);\r\n                            break;\r\n                        case COS:\r\n                            //cos -> -sin\r\n                            symbol.fname = SIN;\r\n                            symbol.multiplier.negate();\r\n                            break;\r\n                        case SIN:\r\n                            //sin -> cos\r\n                            symbol.fname = COS;\r\n                            break;\r\n                        case TAN:\r\n                            //tan -> sec^2\r\n                            symbol.fname = SEC;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SEC:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, TAN);\r\n                            break;\r\n                        case CSC:\r\n                            symbol = qdiff(symbol, '-cot');\r\n                            break;\r\n                        case COT:\r\n                            symbol.fname = CSC;\r\n                            symbol.multiplier.negate();\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case ASIN:\r\n                            symbol = _.parse('(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ACOS:\r\n                            symbol = _.parse('-(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ATAN:\r\n                            symbol = _.parse('(1+(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ABS:\r\n                            m = symbol.multiplier.clone();\r\n                            symbol.toUnitMultiplier();\r\n                            //depending on the complexity of the symbol it's easier to just parse it into a new symbol\r\n                            //this should really be readdressed soon\r\n                            b = symbol.args[0].clone();\r\n                            b.toUnitMultiplier();\r\n                            symbol = _.parse(inBrackets(text(symbol.args[0])) + '/abs' + inBrackets(text(b)));\r\n                            symbol.multiplier = m;\r\n                            break;\r\n                        case 'parens':\r\n                            //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\r\n                            //1*g'\r\n                            symbol = Symbol(1);\r\n                            break;\r\n                        case 'cosh':\r\n                            //cosh -> -sinh\r\n                            symbol.fname = 'sinh';\r\n                            break;\r\n                        case 'sinh':\r\n                            //sinh -> cosh\r\n                            symbol.fname = 'cosh';\r\n                            break;\r\n                        case TANH:\r\n                            //tanh -> sech^2\r\n                            symbol.fname = SECH;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SECH:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, '-tanh');\r\n                            break;\r\n                        case CSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-coth(' + arg + ')*csch(' + arg + ')');\r\n                            break;\r\n                        case COTH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-csch(' + arg + ')^2');\r\n                            break;\r\n                        case 'asinh':\r\n                            symbol = _.parse('(sqrt(1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'acosh':\r\n                            symbol = _.parse('(sqrt(-1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'atanh':\r\n                            symbol = _.parse('(1-(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ASECH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2-1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOTH:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2-1)');\r\n                            break;\r\n                        case ACSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2+1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ASEC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACSC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOT:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2+1)');\r\n                            break;\r\n                        case 'S':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('sin((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'C':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('cos((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'Si':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sin(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Shi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sinh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ci':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cos(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Chi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cosh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ei':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('e^(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Li':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('1/' + Settings.LOG + '(' + arg + ')');\r\n                            break;\r\n                        case 'erf':\r\n                            symbol = _.parse('(2*e^(-(' + symbol.args[0] + ')^2))/sqrt(pi)');\r\n                            break;\r\n                        case 'atan2':\r\n                            var x_ = String(symbol.args[0]),\r\n                                    y_ = String(symbol.args[1]);\r\n                            symbol = _.parse('(' + y_ + ')/((' + y_ + ')^2+(' + x_ + ')^2)');\r\n                            break;\r\n                        case 'sign':\r\n                            symbol = new Symbol(0);\r\n                            break;\r\n                        case 'sinc':\r\n                            symbol = _.parse(format('(({0})*cos({0})-sin({0}))*({0})^(-2)', symbol.args[0]));\r\n                            break;\r\n                        case Settings.LOG10:\r\n                            symbol = _.parse('1/((' + symbol.args[0] + ')*' + Settings.LOG + '(10))');\r\n                            break;\r\n                        default:\r\n                            symbol = _.symfunction('diff', [symbol, wrt]);\r\n                    }\r\n                }\r\n                else if(g === EX || g === FN && isSymbol(symbol.power)) {\r\n                    var value;\r\n                    if(g === EX) {\r\n                        value = symbol.value;\r\n                    }\r\n                    else if(g === FN && symbol.contains(d)) {\r\n                        value = symbol.fname + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    else {\r\n                        value = symbol.value + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    a = _.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone());\r\n                    b = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone()), d);\r\n                    symbol = _.multiply(symbol, b);\r\n                }\r\n                else if(g === FN && !symbol.power.equals(1)) {\r\n                    b = symbol.clone();\r\n                    b.toLinear();\r\n                    b.toUnitMultiplier();\r\n                    symbol = _.multiply(polydiff(symbol.clone()), derive(b));\r\n                }\r\n                else if(g === CP || g === PL) {\r\n                    // Note: Do not use `parse` since this puts back the sqrt and causes a bug as in #610. Use clone.\r\n                    var c = symbol.clone();\r\n                    var result = new Symbol(0);\r\n                    for(var x in symbol.symbols) {\r\n                        result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\r\n                    }\r\n                    symbol = _.multiply(polydiff(c), result);\r\n                }\r\n\r\n                symbol.updateHash();\r\n\r\n                return symbol;\r\n            }\r\n            ;\r\n\r\n            function qdiff(symbol, val, altVal) {\r\n                return _.multiply(symbol, _.parse(val + inBrackets(altVal || text(symbol.args[0]))));\r\n            }\r\n            ;\r\n\r\n            function product_rule(symbol) {\r\n                //grab all the symbols within the CB symbol\r\n                var symbols = symbol.collectSymbols(),\r\n                        result = new Symbol(0),\r\n                        l = symbols.length;\r\n                //loop over all the symbols\r\n                for(var i = 0; i < l; i++) {\r\n                    var df = __.diff(symbols[i].clone(), d);\r\n                    for(var j = 0; j < l; j++) {\r\n                        //skip the symbol of which we just pulled the derivative\r\n                        if(i !== j) {\r\n                            //multiply out the remaining symbols\r\n                            df = _.multiply(df, symbols[j].clone());\r\n                        }\r\n                    }\r\n                    //add the derivative to the result\r\n                    result = _.add(result, df);\r\n                }\r\n                return result; //done\r\n            }\r\n            ;\r\n        },\r\n        integration: {\r\n            u_substitution: function (symbols, dx) {\r\n                function try_combo(a, b, f) {\r\n                    var d = __.diff(b, dx);\r\n                    var q = f ? f(a, b) : _.divide(a.clone(), d);\r\n                    if(!q.contains(dx, true))\r\n                        return q;\r\n                    return null;\r\n                }\r\n                function do_fn_sub(fname, arg) {\r\n                    var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\r\n                    subbed = subbed.sub(new Symbol(u), arg);\r\n                    subbed.updateHash();\r\n                    return subbed;\r\n                }\r\n\r\n                var a = symbols[0].clone(),\r\n                        b = symbols[1].clone(),\r\n                        g1 = a.group,\r\n                        g2 = b.group,\r\n                        //may cause problems if person is using this already. Will need\r\n                        //to find algorithm for detecting conflict\r\n                        u = '__u__',\r\n                        Q;\r\n                if(g1 === FN && g2 !== FN) {\r\n                    //e.g. 2*x*cos(x^2)\r\n                    var arg = a.args[0];\r\n                    Q = try_combo(b, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(a.fname, arg));\r\n                    Q = try_combo(b, a);\r\n                    if(Q) {\r\n                        return __.integration.poly_integrate(a);\r\n                    }\r\n                }\r\n                else if(g2 === FN && g1 !== FN) {\r\n                    //e.g. 2*(x+1)*cos((x+1)^2\r\n                    var arg = b.args[0];\r\n                    Q = try_combo(a, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(b.fname, arg));\r\n                }\r\n                else if(g1 === FN && g2 === FN) {\r\n                    Q = try_combo(a.clone(), b.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(b.clone(), a.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                }\r\n                else if(g1 === EX && g2 !== EX) {\r\n                    var p = a.power;\r\n                    Q = try_combo(b, p.clone());\r\n                    if(!Q) {\r\n                        //one more try\r\n                        var dc = __.integration.decompose_arg(p.clone(), dx);\r\n                        //consider the possibility of a^x^(n-1)*x^n dx\r\n                        var xp = __.diff(dc[2].clone(), dx);\r\n                        var dc2 = __.integration.decompose_arg(xp.clone(), dx);\r\n                        //if their powers equal, so if dx*p == b\r\n                        if(_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\r\n                            var m = _.divide(dc[0].clone(), dc2[0].clone());\r\n\r\n                            var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\r\n                            new_val = _.multiply(new_val, new Symbol(u));\r\n                            return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\r\n                        }\r\n\r\n                    }\r\n                    var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\r\n                            retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n\r\n\r\n                    return retval;\r\n                }\r\n                else if(g2 === EX && g1 !== EX) {\r\n                    var p = b.power;\r\n                    Q = try_combo(a, p.clone());\r\n                    var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\r\n                    return _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                }\r\n                else if(a.isComposite() || b.isComposite()) {\r\n                    var f = function (a, b) {\r\n                        var d = __.diff(b, dx);\r\n                        var A = core.Algebra.Factor.factor(a),\r\n                                B = core.Algebra.Factor.factor(d);\r\n                        var q = _.divide(A, B);\r\n                        return q;\r\n                    };\r\n                    var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\r\n                            f2 = b.isComposite() ? b.clone().toLinear() : b.clone();\r\n                    Q = try_combo(f1.clone(), f2.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(f2.clone(), f1.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(a), Q);\r\n                }\r\n            },\r\n            //simple integration of a single polynomial x^(n+1)/(n+1)\r\n            poly_integrate: function (x) {\r\n                var p = x.power.toString(),\r\n                        m = x.multiplier.toDecimal(),\r\n                        s = x.toUnitMultiplier().toLinear();\r\n                if(Number(p) === -1) {\r\n                    return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\r\n                }\r\n                return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\r\n            },\r\n            //If we're just spinning wheels we want to stop. This is why we \r\n            //wrap integration in a try catch block and call this to stop.\r\n            stop: function (msg) {\r\n                msg = msg || 'Unable to compute integral!';\r\n                core.Utils.warn(msg);\r\n                throw new NoIntegralFound(msg);\r\n            },\r\n            partial_fraction: function (input, dx, depth, opt) {\r\n                //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\r\n                if(!isSymbol(dx))\r\n                    dx = _.parse(dx);\r\n\r\n                var result, partial_fractions;\r\n                result = new Symbol(0);\r\n                partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\r\n\r\n                if(partial_fractions.group === CB && partial_fractions.isLinear()) {\r\n                    //perform a quick check to make sure that all partial fractions are linear\r\n                    partial_fractions.each(function (x) {\r\n                        if(!x.isLinear())\r\n                            __.integration.stop();\r\n                    });\r\n                    partial_fractions.each(function (x) {\r\n                        result = _.add(result, __.integrate(x, dx, depth, opt));\r\n                    });\r\n                }\r\n                else {\r\n                    result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\r\n                }\r\n                return result;\r\n            },\r\n            get_udv: function (symbol) {\r\n                var parts = [[/*L*/], [/*I*/], [/*A*/], [/*T*/], [/*E*/]];\r\n                //first we sort them \r\n                var setSymbol = function (x) {\r\n                    var g = x.group;\r\n                    if(g === FN) {\r\n                        var fname = x.fname;\r\n                        if(core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))\r\n                            parts[3].push(x);\r\n                        else if(core.Utils.in_inverse_trig(fname))\r\n                            parts[1].push(x);\r\n                        else if(fname === LOG)\r\n                            parts[0].push(x);\r\n                        else {\r\n                            __.integration.stop();\r\n                        }\r\n                    }\r\n                    else if(g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\r\n                        parts[2].push(x);\r\n                    }\r\n                    else if(g === EX || x.isComposite() && !x.isLinear())\r\n                        parts[4].push(x);\r\n                    else\r\n                        __.integration.stop();\r\n                };\r\n\r\n                if(symbol.group === CB)\r\n                    symbol.each(function (x) {\r\n                        setSymbol(Symbol.unwrapSQRT(x, true));\r\n                    });\r\n                else\r\n                    setSymbol(symbol);\r\n                var u, dv = new Symbol(1);\r\n                //compile u and dv\r\n                for(var i = 0; i < 5; i++) {\r\n                    var part = parts[i], t,\r\n                            l = part.length;\r\n                    if(l > 0) {\r\n                        if(l > 1) {\r\n                            t = new Symbol(1);\r\n                            for(var j = 0; j < l; j++)\r\n                                t = _.multiply(t, part[j].clone());\r\n                        }\r\n                        else\r\n                            t = part[0].clone();\r\n\r\n                        if(!u) {\r\n                            u = t;//the first u encountered gets chosen\r\n                            u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\r\n                        }\r\n                        else\r\n                            dv = _.multiply(dv, t); //everything else belongs to dv\r\n                    }\r\n                }\r\n\r\n                return [u, dv];\r\n            },\r\n\r\n            trig_sub: function (symbol, dx, depth, opt, parts, symbols) {\r\n                parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\r\n                var b = parts[3],\r\n                        ax = parts[2],\r\n                        a = parts[0],\r\n                        x = parts[1];\r\n                if(x.power.equals(2) && a.greaterThan(0)) {\r\n                    //use tan(x)\r\n                    var t = core.Utils.getU(symbol), //get an appropriate u\r\n                            u = _.parse(TAN + inBrackets(t)), //u\r\n                            du = _.parse(SEC + inBrackets(t) + '^2'), //du\r\n                            f = _.multiply(symbol.sub(x, u), du);\r\n                    var integral = __.integrate(f, t, depth, opt).sub(u, x);\r\n                    core.Utils.clearU(u);\r\n                    return integral;\r\n                }\r\n            },\r\n\r\n            by_parts: function (symbol, dx, depth, o) {\r\n                o.previous = o.previous || [];\r\n                var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;\r\n                //first LIATE\r\n                udv = __.integration.get_udv(symbol);\r\n                u = udv[0];\r\n                dv = udv[1];\r\n                du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);\r\n                c = du.clone().stripVar(dx);\r\n                //strip any coefficients\r\n                du = _.divide(du, c.clone());\r\n                v = __.integrate(dv.clone(), dx, depth || 0);\r\n                vdu = _.multiply(v.clone(), du);\r\n                vdu_s = vdu.toString();\r\n                //currently only supports e^x*(some trig)\r\n                if(o.previous.indexOf(vdu_s) !== -1 && (core.Utils.in_trig(u.fname)) && dv.isE()) {\r\n                    //We're going to exploit the fact that vdu can never be constant\r\n                    //to work out way out of this cycle. We'll return the length of\r\n                    //the this.previous array until we're back at level one\r\n                    o.is_cyclic = true;\r\n                    //return the integral. \r\n                    return new Symbol(1);\r\n                }\r\n                else\r\n                    o.previous.push(vdu_s);\r\n\r\n                uv = _.multiply(u, v);\r\n                //clear the multiplier so we're dealing with a bare integral\r\n                m = vdu.multiplier.clone();\r\n                vdu.toUnitMultiplier();\r\n                integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);\r\n                integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\r\n                retval = _.subtract(uv, integral_vdu);\r\n                //we know that there cannot be constants so they're a holdover from a cyclic integral\r\n                if(o.is_cyclic) {\r\n                    //start popping the previous stack so we know how deep in we are\r\n                    o.previous.pop();\r\n                    if(o.previous.length === 0) {\r\n                        retval = _.expand(retval);\r\n                        var rem = new Symbol(0);\r\n                        retval.each(function (x) {\r\n                            if(!x.contains(dx))\r\n                                rem = _.add(rem, x.clone());\r\n                        });\r\n                        //get the actual uv\r\n                        retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            /*\r\n             * dependents: [Solve, integrate]\r\n             */\r\n            decompose_arg: core.Utils.decompose_fn\r\n        },\r\n        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\r\n        integrate: function (original_symbol, dt, depth, opt) {\r\n            //assume integration wrt independent variable if expression only has one variable\r\n            if(!dt) {\r\n                var vars = core.Utils.variables(original_symbol);\r\n                if(vars.length === 1)\r\n                    dt = vars[0];\r\n                //defaults to x\r\n                dt = dt || 'x';\r\n            }\r\n            //add support for integrating vectors\r\n            if(core.Utils.isVector(original_symbol)) {\r\n                var vector = new core.Vector([]);\r\n                original_symbol.each(function (x) {\r\n                    vector.elements.push(__.integrate(x, dt));\r\n                });\r\n                return vector;\r\n            }\r\n            if(!isNaN(dt))\r\n                _.error('variable expected but received ' + dt);\r\n            //get rid of constants right away\r\n            if(original_symbol.isConstant(true))\r\n                return _.multiply(original_symbol.clone(), _.parse(dt));\r\n\r\n            //configurations options for integral. This is needed for tracking extra options\r\n            //e.g. cyclic integrals or additional settings\r\n            opt = opt || {};\r\n            return core.Utils.block('PARSE2NUMBER', function () {\r\n                //make a note of the original symbol. Set only if undefined\r\n                depth = depth || 0;\r\n                var dx = isSymbol(dt) ? dt.toString() : dt,\r\n                        //we don't want the symbol in sqrt form. x^(1/2) is prefererred\r\n                        symbol = Symbol.unwrapSQRT(original_symbol.clone(), true),\r\n                        g = symbol.group,\r\n                        retval;\r\n\r\n                try {\r\n                    //We stop integration after x amount of recursive calls\r\n                    if(++depth > core.Settings.integration_depth)\r\n                        __.integration.stop('Maximum depth reached. Exiting!');\r\n\r\n                    //constants. We first eliminate anything that doesn't have dx. Everything after this has \r\n                    //to have dx or else it would have been taken care of below\r\n                    if(!symbol.contains(dx, true)) {\r\n                        retval = _.multiply(symbol.clone(), _.parse(dx));\r\n                    }\r\n                    //e.g. 2*x\r\n                    else if(g === S) {\r\n                        retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                    }\r\n                    else if(g === EX) {\r\n                        if(symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS))\r\n                            __.integration.stop();\r\n                        //check the base\r\n                        if(symbol.contains(dx) && symbol.previousGroup !== FN) {\r\n                            //if the symbol also contains dx then we stop since we currently \r\n                            //don't know what to do with it e.g. x^x\r\n                            if(symbol.power.contains(dx))\r\n                                __.integration.stop();\r\n                            else {\r\n                                var t = __.diff(symbol.clone().toLinear(), dx);\r\n                                if(t.contains(dx))\r\n                                    __.integration.stop();\r\n                                //since at this point it's the base only then we do standard single poly integration\r\n                                //e.g. x^y\r\n                                retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                            }\r\n                        }\r\n                        //e.g. a^x or 9^x\r\n                        else {\r\n                            var a = __.diff(symbol.power.clone(), dx);\r\n                            if(a.contains(dx)) {\r\n                                var aa = a.stripVar(dx),\r\n                                        x = _.divide(a.clone(), aa.clone());\r\n                                if(x.group === S && x.isLinear()) {\r\n                                    aa.multiplier = aa.multiplier.divide(new Frac(2));\r\n                                    return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            if(symbol.isE()) {\r\n                                if(a.isLinear())\r\n                                    retval = symbol;\r\n                                else {\r\n                                    if(a.isE() && a.power.group === S && a.power.power.equals(1))\r\n                                        retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\r\n                                retval = _.divide(symbol, d);\r\n                            }\r\n                            retval = _.divide(retval, a);\r\n                        }\r\n                    }\r\n                    else if(symbol.isComposite() && symbol.isLinear()) {\r\n                        var m = _.parse(symbol.multiplier);\r\n                        symbol.toUnitMultiplier();\r\n                        retval = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            retval = _.add(retval, __.integrate(x, dx, depth));\r\n                        });\r\n                        retval = _.multiply(m, retval);\r\n                    }\r\n                    else if(g === CP) {\r\n                        if(symbol.power.greaterThan(1))\r\n                            symbol = _.expand(symbol);\r\n                        if(symbol.power.equals(1)) {\r\n                            retval = new Symbol(0);\r\n                            symbol.each(function (x) {\r\n                                retval = _.add(retval, __.integrate(x, dx, depth));\r\n                            }, true);\r\n                        }\r\n                        else {\r\n                            var p = Number(symbol.power),\r\n                                    m = symbol.multiplier.clone();//temporarily remove the multiplier\r\n                            symbol.toUnitMultiplier();\r\n                            var //below we consider the form ax+b\r\n                                    fn = symbol.clone().toLinear(), //get just the pure function without the power\r\n                                    decomp = __.integration.decompose_arg(fn, dx),\r\n                                    //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\r\n                                    b = decomp[3],\r\n                                    ax = decomp[2],\r\n                                    a = decomp[0],\r\n                                    x = decomp[1];\r\n                            if(p === -1 && x.group !== PL && x.power.equals(2)) {\r\n                                var b_is_positive = isInt(b) ? b > 0 : true;\r\n                                //we can now check for atan\r\n                                if(x.group === S && x.power.equals(2) && b_is_positive) {\r\n                                    ////then we have atan\r\n                                    //abs is redundants since the sign appears in both denom and num.\r\n                                    var unwrapAbs = function (s) {\r\n                                        var result = new Symbol(1);\r\n                                        s.each(function (x) {\r\n                                            result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\r\n                                        });\r\n                                        return result;\r\n                                    };\r\n                                    var A = a.clone(),\r\n                                            B = b.clone();\r\n                                    A = _.pow(A, new Symbol(1 / 2));\r\n                                    B = _.pow(B, new Symbol(1 / 2));\r\n                                    //unwrap abs\r\n\r\n                                    var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\r\n                                            f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\r\n                                    retval = _.divide(f, d);\r\n                                }\r\n                                else if(x.group === S && x.isLinear()) {\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                }\r\n                                else {\r\n                                    //1/(x^4+1)\r\n                                    if(x.power.equals(4)) {\r\n                                        //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\r\n                                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\r\n                                        var br = inBrackets;\r\n                                        //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\r\n                                        //get quadratic factors\r\n                                        A = _.parse(SQRT + br(a) + '*' + dx + '^2');\r\n                                        B = _.parse(SQRT + br(2) + '*' + br(a) + '^' + br('1/4') + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        C = _.parse(SQRT + br(b));\r\n                                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\r\n                                        f2 = _.add(_.subtract(A, B), C);\r\n                                        //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\r\n                                        D = _.parse(SQRT + br(2) + '*' + br(b) + '^' + br('3/4'));\r\n                                        E = _.parse(SQRT + br(b) + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        //let F = 2b√2∜b\r\n                                        F = _.parse(2 + '*' + br(b) + '*' + SQRT + br(2) + '*' + br(b) + '^' + br('1/4'));\r\n                                        //calculate the factors\r\n                                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\r\n                                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\r\n                                        retval = _.add(\r\n                                                __.integrate(L1, dx, depth, opt),\r\n                                                __.integrate(L2, dx, depth, opt)\r\n                                                );\r\n                                    }\r\n                                    else\r\n                                        //let's try partial fractions\r\n                                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                }\r\n                            }\r\n                            else if(p === -1 / 2) {\r\n                                //detect asin and atan\r\n                                if(x.group === S && x.power.equals(2)) {\r\n                                    if(ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\r\n                                        a.negate();\r\n                                        //it's asin\r\n                                        if(b.isConstant() && a.isConstant()) {\r\n                                            var d = _.symfunction(SQRT, [a.clone()]),\r\n                                                    d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\r\n                                            retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\r\n                                        }\r\n                                        //I'm not sure about this one. I'm trusting Wolfram Alpha here\r\n                                        else {\r\n                                            var sqrt_a = _.symfunction(SQRT, [a]),\r\n                                                    sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\r\n                                            retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\r\n                                        __.integration.stop();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\r\n                                    __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                if(x.isLinear() && x.group !== PL)\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                else if(x.power.equals(2) && a.greaterThan(0)) {\r\n                                    var sqa, sqb, aob, bsqi, n, integral, u, v, uv;\r\n                                    //1/(a*x^2+b^2)^n\r\n                                    //strip the value of b so b = 1\r\n                                    sqa = _.parse(SQRT + inBrackets(a)); //strip a so b = 1\r\n                                    sqb = _.parse(SQRT + inBrackets(b));\r\n                                    aob = _.multiply(sqa.clone(), sqb.clone()).invert();\r\n                                    bsqi = _.pow(b, new Symbol(symbol.power));\r\n                                    uv = core.Utils.getU(symbol);\r\n                                    u = _.multiply(aob, x.clone().toLinear());\r\n                                    v = _.parse(ATAN + inBrackets(u));\r\n                                    //the conversion will be 1+tan(x)^2 -> sec(x)^2\r\n                                    //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \r\n                                    //then the remaining sec will be (n-1)*2;\r\n                                    var n = (Math.abs(symbol.power) - 1) * 2;\r\n                                    //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\r\n                                    var integral = __.integrate(_.parse(COS + inBrackets(uv) + '^' + n));\r\n                                    core.Utils.clearU(uv);\r\n                                    return _.multiply(integral.sub(uv, v), bsqi);\r\n                                }\r\n                                else {\r\n                                    if(symbol.group !== CB && !symbol.power.lessThan(0)) {\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n                                    else {\r\n                                        var f = symbol.clone().toLinear();\r\n                                        var factored = core.Algebra.Factor.factor(f);\r\n                                        var was_factored = factored.toString() !== f.toString();\r\n                                        if(core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {\r\n                                            try {\r\n                                                var f1, fx, u, sq;\r\n                                                sq = core.Algebra.sqComplete(f, dx);\r\n                                                u = core.Utils.getU(f);\r\n                                                f1 = sq.f.sub(sq.a, u);\r\n                                                fx = _.pow(f1, _.parse(symbol.power));\r\n                                                retval = __.integrate(fx, u).sub(u, sq.a);\r\n                                            }\r\n                                            catch(e) {\r\n                                                __.integration.stop();\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                    }\r\n                                }\r\n                            }\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === FN) {\r\n                        var arg = symbol.args[0],\r\n                                m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        var decomp = __.integration.decompose_arg(arg, dx);\r\n                        //easies way I can think of to get the coefficient and to make sure\r\n                        //that the symbol is linear wrt dx. I'm not actually trying to get the \r\n                        //derivative\r\n                        var a = decomp[0],\r\n                                x = decomp[1],\r\n                                fname = symbol.fname;\r\n                        //log is a special case that can be handled with integration by parts\r\n                        if(fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) {\r\n                            /*integration by parts */\r\n                            var p = symbol.power.toString();\r\n                            if(isInt(p))\r\n                                depth = depth - p; //it needs more room to find the integral\r\n\r\n                            if(!arg.isComposite())\r\n                                retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));\r\n                            else {\r\n                                //integral u du\r\n                                var u = core.Utils.getU(symbol);\r\n                                var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol(p));\r\n                                var du = __.diff(arg, dx);\r\n                                var u_du = _.multiply(f, du);\r\n                                var integral = __.integrate(u_du, u, depth, opt);\r\n                                retval = _.multiply(_.parse(m), integral.sub(u, arg));\r\n                            }\r\n\r\n                        }\r\n                        else if(fname === TAN && symbol.power.lessThan(0)) {\r\n                            //convert to cotangent\r\n                            var sym = symbol.clone();\r\n                            sym.power.negate();\r\n                            sym.fname = COT;\r\n                            return _.multiply(_.parse(m), __.integrate(sym, dx, depth));\r\n                        }\r\n                        else {\r\n                            if(!a.contains(dx, true) && symbol.isLinear()) { //perform a deep search for safety\r\n                                //first handle the special cases \r\n                                if(fname === ABS) {\r\n                                    //REVISIT **TODO**\r\n                                    var x = _.divide(arg.clone(), a.clone());\r\n                                    if(x.group === S && !x.power.lessThan(0)) {\r\n                                        if(core.Utils.even(x.power)) {\r\n                                            retval = __.integrate(arg, dx, depth);\r\n                                        }\r\n                                        else {\r\n                                            var integrated = __.integrate(x, dx, depth);\r\n                                            integrated.power = integrated.power.subtract(new Frac(1));\r\n                                            retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                                else {\r\n                                    var ag = symbol.args[0].group,\r\n                                            decomposed = __.integration.decompose_arg(arg, dx);\r\n\r\n                                    if(!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())\r\n                                        __.integration.stop();\r\n                                    /**TODO**/ //ASIN, ACOS, ATAN\r\n                                    switch(fname) {\r\n                                        case COS:\r\n                                            retval = _.symfunction(SIN, [arg]);\r\n                                            break;\r\n                                        case SIN:\r\n                                            retval = _.symfunction(COS, [arg]);\r\n                                            retval.negate();\r\n                                            break;\r\n                                        case TAN:\r\n                                            retval = _.parse(format(Settings.LOG + '(sec({0}))', arg));\r\n                                            break;\r\n                                        case SEC:\r\n                                            retval = _.parse(format(Settings.LOG + '(tan({0})+sec({0}))', arg));\r\n                                            break;\r\n                                        case CSC:\r\n                                            retval = _.parse(format('-' + Settings.LOG + '(csc({0})+cot({0}))', arg));\r\n                                            break;\r\n                                        case COT:\r\n                                            retval = _.parse(format(Settings.LOG + '(sin({0}))', arg));\r\n                                            break;\r\n                                        case SINH:\r\n                                            retval = _.symfunction(COSH, [arg]);\r\n                                            break;\r\n                                        case COSH:\r\n                                            retval = _.symfunction(SINH, [arg]);\r\n                                            break;\r\n                                        case TANH:\r\n                                            retval = _.parse(format(Settings.LOG + '(cosh({0}))', arg));\r\n                                            break;\r\n                                        case ASEC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOT:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //inverse htrig\r\n                                        case ASECH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSCH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOTH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //end inverse htrig\r\n                                            //htrigh\r\n                                        case SECH:\r\n                                            retval = _.parse(format('atan(sinh({0}))', arg));\r\n                                            break;\r\n                                        case CSCH:\r\n                                            retval = _.parse(format(Settings.LOG + '(tanh(({0})/2))', arg));\r\n                                            break;\r\n                                        case COTH:\r\n                                            retval = _.parse(format(Settings.LOG + '(sinh({0}))', arg));\r\n                                            break;\r\n                                            //end htrig\r\n                                        case EXP:\r\n                                            retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\r\n                                            break;\r\n                                        case 'S':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\r\n                                            break;\r\n                                        case 'C':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\r\n                                            break;\r\n                                        case 'erf':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\r\n                                            break;\r\n                                        case 'sign':\r\n                                            retval = _.multiply(symbol.clone(), arg.clone());\r\n                                            break;\r\n                                        default:\r\n                                            __.integration.stop();\r\n                                    }\r\n\r\n                                    retval = _.divide(retval, a);\r\n                                }\r\n                            }\r\n                            else if(x.isLinear()) {\r\n                                if(fname === COS || fname === SIN) {\r\n                                    var p = Number(symbol.power);\r\n                                    //check to see if it's negative and then just transform it to sec or csc\r\n                                    if(p < 0) {\r\n                                        symbol.fname = fname === SIN ? CSC : SEC;\r\n                                        symbol.invert().updateHash();\r\n                                        retval = __.integrate(symbol, dx, depth);\r\n                                    }\r\n                                    else {\r\n                                        var arg = symbol.args[0],\r\n                                                rd = symbol.clone(), //cos^(n-1)\r\n                                                rd2 = symbol.clone(), //cos^(n-2)\r\n                                                q = new Symbol((p - 1) / p), //\r\n                                                na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\r\n                                        rd.power = rd.power.subtract(new Frac(1));\r\n                                        rd2.power = rd2.power.subtract(new Frac(2));\r\n\r\n                                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\r\n                                        if(fname === SIN)\r\n                                            t.negate();\r\n                                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\r\n                                    }\r\n                                }\r\n                                //tan(x)^n or cot(x)^n\r\n                                else if(fname === TAN || fname === COT) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    if(symbol.args[0].isLinear(dx)) {\r\n                                        var n = symbol.power.subtract(new Frac(1)).toString(),\r\n                                                r = symbol.clone().toUnitMultiplier(),\r\n                                                w = _.parse(format((fname === COT ? '-' : '') + '1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\r\n                                        r.power = r.power.subtract(new Frac(2));\r\n                                        if(r.power.equals(0))\r\n                                            r = _.parse(r);\r\n                                        retval = _.subtract(w, __.integrate(r, dx, depth));\r\n                                    }\r\n                                }\r\n                                //sec(x)^n or csc(x)^n\r\n                                else if(fname === SEC || fname === CSC) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    var n1 = symbol.power.subtract(new Frac(1)).toString(),\r\n                                            n2 = symbol.power.subtract(new Frac(2)).toString(),\r\n                                            f2 = fname === SEC ? TAN : COT,\r\n                                            r = symbol.clone().toUnitMultiplier(),\r\n                                            parse_str = format((fname === CSC ? '-' : '') + '1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\r\n                                            w = _.parse(parse_str);\r\n                                    r.power = r.power.subtract(new Frac(2));\r\n                                    if(r.power.equals(0))\r\n                                        r = _.parse(r);\r\n                                    retval = _.add(w, _.multiply(new Symbol(n2 / n1), __.integrate(r, dx, depth)));\r\n                                }\r\n                                else if((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\r\n                                    retval = __.integrate(symbol.fnTransform(), dx, depth);\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            else\r\n                                __.integration.stop();\r\n\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === PL) {\r\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                    }\r\n                    else if(g === CB) {\r\n                        var den = symbol.getDenom();\r\n                        if(den.group === S)\r\n                            symbol = _.expand(symbol);\r\n\r\n                        //separate the coefficient since all we care about are symbols containing dx\r\n                        var coeff = symbol.stripVar(dx);\r\n                        //now get only those that apply\r\n                        var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\r\n                        //peform a correction for stripVar. This is a serious TODO!\r\n                        if(coeff.contains(dx)) {\r\n                            cfsymbol = _.multiply(cfsymbol, coeff);\r\n                            coeff = new Symbol(1);\r\n                        }\r\n\r\n                        //if we only have one symbol left then let's not waste time. Just pull the integral\r\n                        //and let the chips fall where they may\r\n                        if(cfsymbol.group !== CB) {\r\n                            if(cfsymbol.equals(1)) {\r\n                                return __.integrate(_.expand(symbol), dx, depth);\r\n                            }\r\n\r\n                            //only factor for multivariate which are polynomials\r\n                            if(cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\r\n                                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\r\n                            }\r\n\r\n                            retval = __.integrate(cfsymbol, dx, depth);\r\n                        }\r\n                        else {\r\n                            //we collect the symbols and sort them descending group, descending power, descending alpabethically\r\n                            var symbols = cfsymbol.collectSymbols().sort(function (a, b) {\r\n                                if(a.group === b.group) {\r\n                                    if(Number(a.power) === Number(b.power))\r\n                                        if(a < b)\r\n                                            return 1; //I want sin first\r\n                                        else\r\n                                            return -1;\r\n                                    return b.power - a.power; //descending power\r\n                                }\r\n                                return b.group - a.group; //descending groups\r\n                            }).map(function (x) {\r\n                                var unwrapped = Symbol.unwrapSQRT(x, true);\r\n                                if(unwrapped.fname === EXP) {\r\n                                    return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\r\n                                }\r\n                                return unwrapped;\r\n                            });\r\n                            var l = symbols.length;\r\n                            if(symbol.power < 0) {\r\n                                if(l === 2) {\r\n                                    return __.integrate(_.expand(symbol), dx, depth, opt);\r\n                                }\r\n                            }\r\n                            //otherwise the denominator is one lumped together symbol \r\n                            else {\r\n                                //generate an image for \r\n                                if(l === 2) {\r\n                                    //try u substitution\r\n                                    try {\r\n                                        retval = __.integration.u_substitution(symbols, dx);\r\n                                    }\r\n                                    catch(e) {/* failed :`(*/\r\n                                        ;\r\n                                    }\r\n\r\n                                    if(!retval) {\r\n                                        //no success with u substitution so let's try known combinations\r\n                                        //are they two functions\r\n                                        var g1 = symbols[0].group,\r\n                                                g2 = symbols[1].group,\r\n                                                sym1 = symbols[0],\r\n                                                sym2 = symbols[1],\r\n                                                fn1 = sym1.fname,\r\n                                                fn2 = sym2.fname;\r\n                                        //reset the symbol minus the coeff\r\n                                        symbol = _.multiply(sym1.clone(), sym2.clone());\r\n                                        if(g1 === FN && g2 === FN) {\r\n                                            if(fn1 === LOG || fn2 === LOG) {\r\n                                                retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\r\n                                            }\r\n                                            else {\r\n                                                symbols.sort(function (a, b) {\r\n                                                    return b.fname > a.fname;\r\n                                                });\r\n                                                var arg1 = sym1.args[0];\r\n                                                //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\r\n                                                if(!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))\r\n                                                    __.integration.stop();\r\n\r\n                                                var decomp = __.integration.decompose_arg(arg1, dx);\r\n                                                x = decomp[1],\r\n                                                        a = decomp[0];\r\n                                                if(!x.isLinear()) //again... linear arguments only wrt x\r\n                                                    __.integration.stop();\r\n\r\n                                                //they have to have the same arguments and then we have cleared all the check to \r\n                                                //make sure we can integrate FN & FN\r\n                                                var arg2 = sym2.args[0];\r\n                                                //make sure that their argument matches\r\n                                                if(arg1.equals(arg2)) {\r\n                                                    if(fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {\r\n                                                        if(sym1.power.lessThan(0))\r\n                                                            __.integration.stop();//we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\r\n                                                        //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\r\n                                                        if(fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {\r\n                                                            sym1.fname = TAN;\r\n                                                            sym1.updateHash();\r\n                                                            retval = __.integrate(sym1, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            if(even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\r\n                                                                //transform sin^(2*n) to (1-cos^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else if(even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\r\n                                                                //transform cos^(2*n) to (1-sin^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else {\r\n                                                                var p1_even = core.Utils.even(sym1.power),\r\n                                                                        p2_even = core.Utils.even(sym2.power);\r\n                                                                retval = new Symbol(0);\r\n                                                                if(!p1_even || !p2_even) {\r\n                                                                    var u, r, trans;\r\n                                                                    //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\r\n                                                                    //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\r\n                                                                    if(!p1_even) {\r\n                                                                        //u = sin(x)\r\n                                                                        u = sym2;\r\n                                                                        r = sym1;\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        u = sym1;\r\n                                                                        r = sym2;\r\n                                                                    }\r\n                                                                    //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\r\n                                                                    var sign = u.fname === COS ? -1 : 1,\r\n                                                                            n = r.power,\r\n                                                                            //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \r\n                                                                            //even powers afterwards which can be transformed\r\n                                                                            k = (n - 1) / 2,\r\n                                                                            //make the transformation cos(x)^2 = 1 - sin(x)^2\r\n                                                                            trans = _.parse('(1-' + u.fname + core.Utils.inBrackets(arg1) + '^2)^' + k),\r\n                                                                            sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans)));\r\n                                                                    //we can now just loop through and integrate each since it's now just a polynomial with functions\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integration.poly_integrate(x.clone()));\r\n                                                                    });\r\n                                                                }\r\n                                                                else {\r\n                                                                    //performs double angle transformation\r\n                                                                    var double_angle = function (symbol) {\r\n                                                                        var p = symbol.power,\r\n                                                                                k = p / 2, e;\r\n                                                                        if(symbol.fname === COS)\r\n                                                                            e = '((1/2)+(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n                                                                        else\r\n                                                                            e = '((1/2)-(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n\r\n                                                                        return _.parse(e);\r\n                                                                    };\r\n                                                                    //they're both even so transform both using double angle identities and we'll just\r\n                                                                    //be able to integrate by the sum of integrals\r\n                                                                    var a = double_angle(sym1),\r\n                                                                            b = double_angle(sym2),\r\n                                                                            t = _.multiply(a, b);\r\n                                                                    var sym = _.expand(t);\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                                    });\r\n                                                                    return _.multiply(retval, coeff);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    //tan(x)*sec(x)^n \r\n                                                    else if(fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {\r\n                                                        retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\r\n                                                    }\r\n                                                    else if(fn1 === TAN && fn2 === SEC && x.isLinear()) {\r\n                                                        //remaining: tan(x)^3*sec(x)^6\r\n                                                        if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                            retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\r\n                                                        }\r\n                                                        else if(even(sym1.power)) {\r\n                                                            var p = Number(sym1.power) / 2;\r\n                                                            //transform tangent\r\n                                                            var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\r\n                                                            retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\r\n                                                        }\r\n                                                        else\r\n                                                            __.integration.stop();\r\n                                                    }\r\n                                                    else if(fn1 === SEC && fn2 === COS) {\r\n                                                        sym1.fname = COS;\r\n                                                        sym1.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    else if(fn1 === SIN && fn2 === CSC) {\r\n                                                        sym2.fname = SIN;\r\n                                                        sym2.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    //tan/cos\r\n                                                    else if(fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2);\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                    else {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                }\r\n                                                //TODO: In progress\r\n                                                else if((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {\r\n\r\n                                                    if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                        //if in the form cos(a*x)*sin(b*x)\r\n                                                        if(sym1.args[0].isLinear() && sym2.args[0].isLinear()) {\r\n                                                            //use identity (sin(b*x+a*x)+sin(b*x-a*x))/2\r\n                                                            var ax, bx;\r\n                                                            if(fn2 === SIN) {\r\n                                                                ax = sym1.args[0];\r\n                                                                bx = sym2.args[0];\r\n                                                            }\r\n                                                            else {\r\n                                                                bx = sym1.args[0];\r\n                                                                ax = sym2.args[0];\r\n                                                            }\r\n\r\n                                                            //make the transformation\r\n                                                            f = _.parse(format('(sin(({1})+({0}))+sin(({1})-({0})))/2', ax.toString(), bx.toString()));\r\n\r\n                                                            //integrate it\r\n                                                            retval = __.integrate(f, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            var transformed = trigTransform(symbols);\r\n                                                            retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        var transformed = new Symbol(1);\r\n                                                        symbols.map(function (sym) {\r\n                                                            var s = sym.fnTransform();\r\n                                                            transformed = _.multiply(transformed, s);\r\n                                                        });\r\n                                                        var t = _.expand(transformed);\r\n\r\n                                                        retval = __.integrate(t, dx, depth);\r\n\r\n                                                        if(retval.hasIntegral()) {\r\n                                                            retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    __.integration.stop();\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === FN && g2 === S) {\r\n                                            var sym1_is_linear = sym1.isLinear();\r\n                                            if(sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Ci', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COS && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Chi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COSH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Si', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SIN && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Shi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SINH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === LOG && sym2.power.equals(-1)) {\r\n                                                //log(x)^n/x = log(x)^(n+1)/(n+1)\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === 'erf') {\r\n                                                if(sym2.power.equals(1)) {\r\n                                                    var dc = __.integration.decompose_arg(sym1.args[0], dx),\r\n                                                            a_ = dc[0],\r\n                                                            x_ = dc[1],\r\n                                                            arg = sym1.args[0].toString();\r\n                                                    retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg))\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                //since group S is guaranteed convergence we need not worry about tracking depth of integration\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === EX && g2 === S) {\r\n                                            var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\r\n                                            if(sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\r\n                                                retval = _.symfunction('Ei', [sym1.power.clone()]);\r\n                                            }\r\n                                            else if(fn1 === LOG && x.value === sym2.value) {\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                        else if(g1 === PL && g2 === S) {\r\n                                            //first try to reduce the top\r\n                                            if(sym2.value === sym1.value && sym1.power.equals(-1)) {\r\n                                                //find the lowest power in the denominator\r\n                                                var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));\r\n                                                //get the lowest common value between denominator and numerator\r\n                                                var pc = Math.min(pd, sym2.power);\r\n                                                //reduce both denominator and numerator by that factor\r\n                                                var factor = sym2.clone();\r\n                                                factor.power = new Frac(pc);\r\n                                                sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\r\n                                                var t = new Symbol(0);\r\n                                                sym1.each(function (x) {\r\n                                                    t = _.add(t, _.divide(x.clone(), factor.clone()));\r\n                                                });\r\n                                                t.multiplier = sym1.multiplier;\r\n                                                symbol = _.divide(sym2, t);\r\n                                            }\r\n                                            else {\r\n                                                symbol = _.expand(symbol);\r\n                                            }\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                        }\r\n                                        else if(g1 === CP && g2 === S) {\r\n                                            var f = sym1.clone().toLinear(),\r\n                                                    f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);\r\n                                            //handle cases x^(2*n)/sqrt(1-x^2)\r\n                                            if(sym1.power.equals(-1 / 2)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\r\n                                                var a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\r\n                                                    //if the substitution \r\n                                                    var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)),\r\n                                                            _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])),\r\n                                                            _.pow(a.clone(), new Symbol(2)));\r\n                                                    c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\r\n                                                    var dummy = _.parse('sin(u)');\r\n                                                    dummy.power = dummy.power.multiply(sym2.power);\r\n                                                    var integral = __.integrate(dummy, 'u', depth);\r\n                                                    var bksub = _.parse(ASIN + '(' + SQRT + '(' + a + '/' + b + ')*' + dx + ')');\r\n                                                    retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\r\n                                                }\r\n                                                else if(p1 === -1 / 2) {\r\n                                                    var u_transform = function (f, u) {\r\n                                                        var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\r\n                                                        if(!integral.hasIntegral())\r\n                                                            return integral;\r\n                                                    }\r\n                                                    if(p2 === -1) {\r\n                                                        retval = u_transform(\r\n                                                                _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                    else if(p2 === -2) {\r\n                                                        //apply transformation to see if it matches asin(x)\r\n                                                        retval = u_transform(\r\n                                                                _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else if(sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {\r\n                                                retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else if(!sym1.power.lessThan(0) && isInt(sym1.power)) {\r\n                                                //sum of integrals\r\n                                                var expanded = _.expand(sym1);\r\n                                                retval = new Symbol(0);\r\n                                                expanded.each(function (x) {\r\n                                                    if(x.group === PL) {\r\n                                                        x.each(function (y) {\r\n                                                            retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\r\n                                                        });\r\n                                                    }\r\n                                                    else\r\n                                                        retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\r\n                                                });\r\n                                            }\r\n                                            else if(sym1.power.lessThan(-2)) {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                            else if(sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                        a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        fn = sym1.clone().toLinear();\r\n\r\n                                                if(x.group !== PL && x.isLinear()) {\r\n                                                    var p = Number(sym2.power),\r\n                                                            du = '_u_',\r\n                                                            u = new Symbol(du),\r\n                                                            //pull the integral with the subsitution\r\n                                                            U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\r\n                                                            scope = {};\r\n\r\n                                                    //generate a scope for resubbing the symbol\r\n                                                    scope[du] = fn;\r\n                                                    var U2 = _.parse(U, scope);\r\n                                                    retval = __.integrate(U2, dx, 0);\r\n                                                }\r\n                                                else if(sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {\r\n\r\n                                                    //factor out coefficients\r\n                                                    var factors = new core.Algebra.Classes.Factors();\r\n                                                    sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\r\n                                                    var div = core.Algebra.divide(sym2, sym1);\r\n                                                    //it assumed that the result will be of group CB\r\n                                                    if(div.group !== CB) {\r\n                                                        retval = new Symbol(0);\r\n                                                        div.each(function (t) {\r\n                                                            retval = _.add(retval, __.integrate(t, dx, depth));\r\n                                                        });\r\n                                                        //put back the factors\r\n                                                        factors.each(function (factor) {\r\n                                                            retval = _.divide(retval, factor);\r\n                                                        });\r\n\r\n                                                        retval = _.expand(retval);\r\n                                                    }\r\n                                                    else {\r\n                                                        //try something else\r\n                                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else {\r\n                                                //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \r\n                                                if(sym1.power.den.equals(2)) {\r\n                                                    //assume the function is in the form (a^2-b*x^n)^(m/2)\r\n                                                    var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                            //using the above definition\r\n                                                            a = dc[3], x = dc[1], b = dc[0], bx = dc[2];\r\n                                                    if(x.power.equals(2) && b.lessThan(0)) { //if n is even && b is negative\r\n                                                        //make a equal 1 so we can do a trig sub\r\n                                                        if(!a.equals(1)) { //divide a out of everything\r\n                                                            //move a to the coeff\r\n                                                            coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\r\n                                                        }\r\n                                                        var u = dx;\r\n                                                        var c = _.divide(_.pow(b.clone().negate(), new Symbol(1 / 2)), _.pow(a, new Symbol(1 / 2))),\r\n                                                                du = _.symfunction(COS, [new Symbol(u)]),\r\n                                                                cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\r\n                                                                X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\r\n                                                                val = _.multiply(_.multiply(cosn, du), X),\r\n                                                                integral = __.integrate(val, u, depth);\r\n                                                        //but remember that u = asin(sqrt(b)*a*x)\r\n                                                        retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\r\n                                                    }\r\n                                                    else {\r\n                                                        retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else if(f_is_linear) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        else if(sym1.isComposite() && sym2.isComposite()) {\r\n                                            //sum of integrals\r\n                                            retval = new Symbol(0);\r\n                                            if(sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\r\n                                                //combine and pull the integral of each\r\n                                                var sym = _.expand(symbol);\r\n                                                sym.each(function (x) {\r\n                                                    retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                }, true);\r\n                                            }\r\n                                            else {\r\n                                                var p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(p1 < 0 && p2 > 0) {\r\n                                                    //swap\r\n                                                    var t = sym1;\r\n                                                    sym1 = sym2;\r\n                                                    sym2 = t;\r\n                                                }\r\n                                                if(p1 === -1 && p2 === -1) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx);\r\n                                                }\r\n                                                else {\r\n                                                    sym1.each(function (x) {\r\n                                                        var k = _.multiply(x, sym2.clone());\r\n                                                        var integral = __.integrate(k, dx, depth);\r\n                                                        retval = _.add(retval, integral);\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === CP && symbols[0].power.greaterThan(0)) {\r\n                                            sym1 = _.expand(sym1);\r\n                                            retval = new Symbol(0);\r\n                                            sym1.each(function (x) {\r\n                                                retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\r\n                                            }, true);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\r\n                                            sym1 = sym1.fnTransform();\r\n                                            retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\r\n                                            if(g2 === FN && g1 === CP) {\r\n                                                var t = sym1;\r\n                                                sym1 = sym2;\r\n                                                sym2 = t; //swap\r\n                                            }\r\n                                            var du, sym2_clone, p, q, sa, sb;\r\n                                            du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\r\n                                            sym2_clone = Symbol.unwrapSQRT(sym2, true);\r\n                                            if(du.power.equals(sym2_clone.power)) {\r\n                                                p = new Symbol(sym2.power);\r\n                                                sa = du.clone().toLinear();\r\n                                                sb = sym2.clone().toLinear();\r\n                                                q = core.Algebra.divide(sa.toLinear(), sb);\r\n                                                if(q.isConstant()) {\r\n                                                    var nq = _.pow(q, p.negate());\r\n                                                    retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            var syma = sym1.clone().toLinear();\r\n                                            var symb = sym2.clone().toLinear();\r\n                                            if(g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx)\r\n                                                    && !syma.contains(dx) && !symb.contains(dx)) {\r\n                                                retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))',\r\n                                                        syma.toString(),\r\n                                                        symb.toString(),\r\n                                                        sym1.power.multiplier.toString(),\r\n                                                        sym2.power.multiplier.toString(),\r\n                                                        dx\r\n                                                        ));\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {\r\n                                    var first = symbols[0];\r\n                                    if(first.group === CP) { //TODO {support higher powers of x in the future}\r\n                                        if(first.power.greaterThan(1))\r\n                                            first = _.expand(first);\r\n                                        var r = _.multiply(symbols[1], symbols[2]);\r\n                                        retval = new Symbol(0);\r\n                                        first.each(function (x) {\r\n                                            var t = _.multiply(x, r.clone());\r\n                                            var intg = __.integrate(t, dx, depth);\r\n                                            retval = _.add(retval, intg);\r\n                                        }, true);\r\n                                    }\r\n                                    else {\r\n                                        //try integration by parts although technically it will never work\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n\r\n                                }\r\n                                else if(all_functions(symbols)) {\r\n                                    var t = new Symbol(1);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        t = _.multiply(t, symbols[i].fnTransform());\r\n                                    }\r\n                                    t = _.expand(t);\r\n                                    retval = __.integrate(t, dx, depth);\r\n                                }\r\n                                else {\r\n                                    //one more go\r\n                                    var transformed = trigTransform(symbols);\r\n                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        retval = _.multiply(retval, coeff);\r\n                    }\r\n                    //if an integral was found then we return it\r\n                    if(retval)\r\n                        return retval;\r\n                }\r\n\r\n                catch(error) {\r\n                    //do nothing if it's a NoIntegralFound error otherwise let it bubble\r\n                    if(!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero))\r\n                        throw error;\r\n                }\r\n\r\n                //no symbol found so we return the integral again\r\n                return _.symfunction('integrate', [original_symbol, dt]);\r\n            }, false);\r\n        },\r\n        defint: function (symbol, from, to, dx) {\r\n            dx = dx || 'x'; //make x the default variable of integration\r\n            var get_value = function (integral, vars, point) {\r\n                try {\r\n                    return _.parse(integral, vars);\r\n                }\r\n                catch(e) {\r\n                    //it failed for some reason so return the limit\r\n                    var lim = __.Limit.limit(integral, dx, point);\r\n                    return lim;\r\n                }\r\n            };\r\n\r\n            var vars = core.Utils.variables(symbol),\r\n                    hasTrig = symbol.hasTrig();\r\n            var retval, integral;\r\n\r\n            // Fix #593 - Only assume the first variable if dx is not defined.\r\n            if(vars.length === 1 && !dx)\r\n                dx = vars[0];\r\n\r\n            if(!hasTrig) {\r\n                integral = __.integrate(symbol, dx);\r\n            }\r\n\r\n            if(!hasTrig && !integral.hasIntegral()) {\r\n                var upper = {},\r\n                        lower = {},\r\n                        a, b;\r\n                upper[dx] = to;\r\n                lower[dx] = from;\r\n\r\n                a = get_value(integral, upper, to, dx);\r\n                b = get_value(integral, lower, from, dx);\r\n                retval = _.subtract(a, b);\r\n            }\r\n            else if(vars.length === 1 && from.isConstant() && to.isConstant()) {\r\n\r\n                var f = core.Utils.build(symbol);\r\n                retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\r\n            }\r\n            else\r\n                retval = _.symfunction('defint', [symbol, from, to, dx]);\r\n            return retval;\r\n        },\r\n\r\n        Limit: {\r\n            interval: function (start, end) {\r\n                return _.parse(format('[{0}, {1}]', start, end));\r\n            },\r\n            diverges: function () {\r\n                return __.Limit.interval('-Infinity', 'Infinity');\r\n            },\r\n            divide: function (f, g, x, lim, depth) {\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                var fin = f.clone(), gin = g.clone();\r\n\r\n                //But first a little \"cheating\". x/|x| ends up in an infinite loop since the d/dx |x| -> x/|x|\r\n                //To break this loop we simply provide the answer. Keep in mind that currently limit only provides\r\n                //the two-sided limit.\r\n                //Known limit\r\n                if(g.fname === ABS) {\r\n                    var sign = f.sign();\r\n                    var lim_sign = lim.sign();\r\n\r\n                    if(lim.isInfinity)\r\n                        return _.multiply(new Symbol(sign), new Symbol(lim_sign));\r\n\r\n                    else if(lim.equals(0)) {\r\n                        var fm = _.parse(f.multiplier);\r\n                        var gm = _.parse(g.multiplier);\r\n                        return _.divide(_.multiply(fm, __.Limit.interval('-1', '1')), gm);\r\n                    }\r\n                    else {\r\n                        //TODO: Support more limits\r\n                        __.Limit.diverges();\r\n                    }\r\n                }\r\n\r\n                var isInfinity = function (L) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        for(var i = 0; i < L.elements.length; i++)\r\n                            if(!L.elements[i].isInfinity)\r\n                                return false;\r\n                        return true;\r\n                    }\r\n                    return L.isInfinity;\r\n                };\r\n\r\n                var equals = function (L, v) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        return false;\r\n                    }\r\n                    return L.equals(v);\r\n                };\r\n\r\n                var retval;\r\n                do {\r\n                    var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));\r\n                    var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth));\r\n\r\n                    //if it's in indeterminate form apply L'Hospital's rule\r\n                    var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);\r\n                    //pull the derivatives\r\n                    if(indeterminate) {\r\n                        var ft = __.diff(f.clone(), x);\r\n                        var gt = __.diff(g.clone(), x);\r\n\r\n                        var t_symbol = _.expand(_.divide(ft, gt));\r\n                        f = t_symbol.getNum();\r\n                        g = t_symbol.getDenom();\r\n\r\n                    }\r\n                }\r\n                while(indeterminate)\r\n\r\n                //REMEMBER: \r\n                //- 1/cos(x)\r\n                //n/0 is still possible since we only checked for 0/0\r\n                var den_is_zero = lim2.equals(0);\r\n                var p = Number(gin.power);\r\n\r\n                if(lim.isConstant(true) && den_is_zero) {\r\n                    retval = Symbol.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : undefined);\r\n                }\r\n                else if(den_is_zero) {\r\n                    retval = __.Limit.diverges();\r\n                }\r\n                else {\r\n                    retval = _.divide(lim1, lim2);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            rewriteToLog: function (symbol) {\r\n                var p = symbol.power.clone();\r\n                symbol.toLinear();\r\n                return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG + '', [symbol])));\r\n            },\r\n            getSubbed: function (f, x, lim) {\r\n                var retval;\r\n                //1. rewrite EX with base e\r\n                if(f.group === EX) {\r\n                    f = __.rewriteToLog(f);\r\n                }\r\n                //2. try simple substitution\r\n                try {\r\n                    retval = f.sub(x, lim);\r\n                }\r\n                catch(e) {\r\n                    //Nope. No go, so just return the unsubbed function so we can test the limit instead.\r\n                    retval = f;\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            isInterval: function (limit) {\r\n                return core.Utils.isVector(limit);\r\n            },\r\n            isConvergent: function (limit) {\r\n                //it's not convergent if it lies on the interval -Infinity to Infinity\r\n                if(\r\n                        //It lies on the interval -Infinity to Infinity\r\n                        __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity ||\r\n                        //We weren't able to calculate the limit\r\n                        limit.containsFunction('limit')\r\n                        ) {\r\n                    return false; //Then no\r\n                }\r\n                return true; //It is\r\n            },\r\n            limit: function (symbol, x, lim, depth) {\r\n                //Simplify the symbol\r\n                if(symbol.isLinear() && symbol.isComposite()) {\r\n\r\n                    //Apply sum of limits\r\n                    var limit = new Symbol(0);\r\n                    symbol.each(function (s) {\r\n                        limit = _.add(limit, __.Limit.limit(s, x, lim, depth));\r\n                    }, true);\r\n\r\n                    return limit;\r\n                }\r\n                ;\r\n\r\n                symbol = core.Algebra.Simplify.simplify(symbol);\r\n\r\n                depth = depth || 1;\r\n\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                //store the multiplier\r\n                var m = _.parse(symbol.multiplier);\r\n                //strip the multiplier\r\n                symbol.toUnitMultiplier();\r\n                try {\r\n                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                    var retval;\r\n                    //we try the simplest option first where c is some limit\r\n                    //lim a as x->c = a where c \r\n                    if(symbol.isConstant(true)) {\r\n                        retval = symbol;\r\n                    }\r\n                    else {\r\n                        var point = {};\r\n                        point[x] = lim;\r\n                        //lim x as x->c = c where c\r\n\r\n                        try {\r\n\r\n                            //evaluate the function at the given limit\r\n                            var t = _.parse(symbol.sub(x, lim), point);\r\n\r\n                            //a constant or infinity is known so we're done\r\n                            if(t.isConstant(true) || t.isInfinity)\r\n                                retval = t;\r\n\r\n                        }\r\n                        catch(e) { /*Nothing. Maybe we tried to divide by zero.*/\r\n                        }\r\n                        ;\r\n\r\n                        if(!retval) {\r\n                            //split the symbol in the numerator and the denominator\r\n                            var num = symbol.getNum();\r\n                            var den = symbol.getDenom();\r\n\r\n                            if(den.isConstant(true)) {\r\n                                //We still don't have a limit so we generate tests.\r\n                                if(symbol.group === EX) {\r\n                                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                                    //Speed boost for exponentials by detecting patterns\r\n                                    var f = symbol.clone().toLinear();\r\n                                    var p = symbol.power.clone();\r\n                                    var _num = f.getNum();\r\n                                    var _den = f.getDenom();\r\n                                    var fn = core.Utils.decompose_fn(_den, x, true);\r\n                                    //start detection of pattern (x/(x+1))^x\r\n                                    if(_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\r\n                                        retval = _.parse(format('(1/e^({0}))', fn.b));\r\n                                    }\r\n                                    else {\r\n                                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());\r\n                                        //get the base\r\n                                        var pow = symbol_.power.clone();\r\n                                        var base = symbol_.clone().toLinear();\r\n                                        var lim_base = __.Limit.limit(base, x, lim, depth);\r\n                                        var lim_pow = __.Limit.limit(pow, x, lim, depth);\r\n                                        retval = _.pow(lim_base, lim_pow);\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === FN && symbol.args.length === 1) {\r\n                                    var evaluates;\r\n                                    //Squeeze theorem lim f(g(x)) = lim f(lim g))\r\n                                    var arg = __.Limit.limit(symbol.args[0], x, lim, depth);\r\n                                    if(core.Utils.isVector(arg)) {\r\n                                        //get the limit over that interval\r\n                                        retval = arg.map(function (e) {\r\n                                            var clone = symbol.clone();\r\n                                            clone.args[0] = e;\r\n                                            return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);\r\n                                        });\r\n\r\n                                        return _.multiply(m, retval);\r\n                                    }\r\n                                    //if the argument is constant then we're done\r\n                                    else if(arg.isConstant(true)) {\r\n\r\n                                        //double check that it evaluates\r\n                                        var trial = _.symfunction(symbol.fname, [arg]);\r\n                                        //trial evaluation\r\n                                        try {\r\n                                            evaluate(trial);\r\n                                            evaluates = true;\r\n                                        }\r\n                                        catch(e) {\r\n\r\n                                            evaluates = false;\r\n                                        }\r\n                                    }\r\n                                    if(evaluates) {\r\n                                        retval = trial;\r\n                                    }\r\n                                    else {\r\n                                        //if the limit converges. We'll deal with non-convergent ones later\r\n                                        if(__.Limit.isConvergent(arg)) {\r\n                                            if(symbol.fname === LOG) {\r\n                                                switch(arg.toString()) {\r\n                                                    //lim -> 0\r\n                                                    case '0':\r\n                                                        retval = Symbol.infinity().negate();\r\n                                                        break;\r\n                                                    case 'Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                    case '-Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else if((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\r\n                                                retval = __.Limit.interval(-1, 1);\r\n                                            }\r\n                                            else if((symbol.fname === TAN)) {\r\n                                                var s_arg = symbol.args[0];\r\n                                                var n = s_arg.getNum();\r\n                                                var d = s_arg.getDenom();\r\n                                                var pi = n.toUnitMultiplier();\r\n                                                if(lim.isInfinity || pi.equals('pi') && d.equals(2)) {\r\n                                                    retval = divergent();\r\n                                                }\r\n                                            }\r\n                                            else if(symbol.fname === Settings.FACTORIAL) {\r\n                                                if(arg.isInfinity)\r\n                                                    return Symbol.infinity();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === S) {\r\n                                    if(symbol.power > 0)\r\n                                        //these functions always converge to the limit\r\n                                        return _.parse(symbol, point);\r\n                                    else {\r\n                                        //we're dealing with 1/x^n but remember that infinity has already been dealt\r\n                                        //with by substitution\r\n                                        if(core.Utils.even(symbol.power)) {\r\n                                            //even powers converge to infinity\r\n                                            retval = Symbol.infinity();\r\n                                        }\r\n                                        else {\r\n                                            //odd ones don't\r\n                                            retval = __.Limit.diverges();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === CB) {\r\n\r\n                                    var lim1, lim2;\r\n                                    //loop through all the symbols\r\n                                    //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\r\n                                    //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return a.group - b.group;\r\n                                    });\r\n\r\n                                    var f = symbols.pop();\r\n                                    //calculate the first limit so we can keep going down the list\r\n                                    lim1 = evaluate(__.Limit.limit(f, x, lim, depth));\r\n\r\n                                    //reduces all the limits one at a time\r\n                                    while(symbols.length) {\r\n                                        //get the second limit\r\n                                        var g = symbols.pop();\r\n                                        //get the limit of g\r\n                                        lim2 = evaluate(__.Limit.limit(g, x, lim, depth));\r\n\r\n                                        //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\r\n                                        if((lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2))) {\r\n                                            if(g.containsFunction(LOG)) {\r\n                                                //swap them\r\n                                                g = [f, f = g][0];\r\n                                            }\r\n                                            //invert the symbol\r\n                                            g.invert();\r\n\r\n                                            // Product of infinities\r\n                                            if(lim1.isInfinity && lim2.isInfinity) {\r\n                                                lim1 = Symbol.infinity()\r\n                                            }\r\n                                            else {\r\n                                                lim1 = __.Limit.divide(f, g, x, lim, depth);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            //lim f*g = (lim f)*(lim g)\r\n                                            lim1 = _.multiply(lim1, lim2);\r\n                                            //let f*g equal f and h equal g \r\n                                            f = _.multiply(f, g);\r\n                                        }\r\n                                    }\r\n\r\n                                    //Done, lim1 is the limit we're looking for     \r\n                                    retval = lim1;\r\n                                }\r\n                                else if(symbol.isComposite()) {\r\n                                    var _lim;\r\n                                    if(!symbol.isLinear())\r\n                                        symbol = _.expand(symbol);\r\n                                    //Apply lim f+g = (lim f)+(lim g)\r\n                                    retval = new Symbol(0);\r\n\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return b.group - a.group;\r\n                                    });\r\n\r\n                                    var _symbols = [];\r\n                                    //Analyze the functions first\r\n                                    var fns = new Symbol(0);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i].clone();\r\n                                        if(sym.group === FN || sym.group === CB && sym.hasFunc()) {\r\n                                            fns = _.add(fns, sym);\r\n                                        }\r\n                                        else\r\n                                            _symbols.push(sym);\r\n                                    }\r\n                                    _symbols.unshift(fns);\r\n\r\n                                    //make sure that we didn't just repackage the exact same symbol\r\n                                    if(_symbols.length !== 1) {\r\n                                        symbols = _symbols;\r\n                                    }\r\n\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i];\r\n                                        //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\r\n                                        try {\r\n                                            _lim = __.Limit.limit(sym, x, lim, depth);\r\n                                        }\r\n                                        catch(e) {\r\n                                            _lim = __.Limit.diverges();\r\n                                        }\r\n\r\n                                        try {\r\n                                            retval = _.add(retval, _lim);\r\n                                        }\r\n                                        catch(e) {\r\n                                            if(depth++ > Settings.max_lim_depth) {\r\n                                                return;\r\n                                            }\r\n                                            ;\r\n                                            retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                retval = __.Limit.divide(num, den, x, lim, depth);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //if we still don't have a solution\r\n                    if(!retval)\r\n                        //return it symbolically\r\n                        retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n                catch(e) {\r\n                    //if all else fails return the symbolic function\r\n                    retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n        },\r\n        Fresnel: {\r\n            S: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('S', arguments);\r\n            },\r\n            C: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('C', arguments);\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'diff',\r\n            visible: true,\r\n            numargs: [1, 3],\r\n            build: function () {\r\n                return __.diff;\r\n            }\r\n        },\r\n        {\r\n            name: 'sum',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.sum;\r\n            }\r\n        },\r\n        {\r\n            name: 'product',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.product;\r\n            }\r\n        },\r\n        {\r\n            name: 'integrate',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.integrate;\r\n            }\r\n        },\r\n        {\r\n            name: 'defint',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.defint;\r\n            }\r\n        },\r\n        {\r\n            name: 'S',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.S;\r\n            }\r\n        },\r\n        {\r\n            name: 'C',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.C;\r\n            }\r\n        },\r\n        {\r\n            name: 'limit',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.Limit.limit;\r\n            }\r\n        }\r\n    ]);\r\n    //link registered functions externally\r\n    nerdamer.api();\r\n\r\n})();\n\n//# sourceURL=webpack://graph-art-creator/./src/nerdamer/Calculus.js?");

/***/ }),

/***/ "./src/nerdamer/index.js":
/*!*******************************!*\
  !*** ./src/nerdamer/index.js ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;var nerdamer=function(e){\"use strict\";var d=new P,S=e.bigInt,k=e.bigDec;k.set({precision:250});var t={},o=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083],M={},F={callPeekers:!1,init_primes:1e3,exclude:[],suppress_errors:!1,PARSE2NUMBER:!1,SAFE:!1,IMAGINARY:\"i\",FUNCTION_MODULES:[Math],ALLOW_CHARS:[\"π\"],USE_MULTICHARACTER_VARS:!0,POWER_OPERATOR:\"^\",VALIDATION_REGEX:/^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,IMPLIED_MULTIPLICATION_REGEX:/([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,ALIASES:{\"π\":\"pi\",\"∞\":\"Infinity\"},POSITIVE_MULTIPLIERS:!1,CACHE:{},SILENCE_WARNINGS:!1,PRECISION:21,VECTOR:\"vector\",PARENTHESIS:\"parens\",SQRT:\"sqrt\",ABS:\"abs\",FACTORIAL:\"factorial\",DOUBLEFACTORIAL:\"dfactorial\",LONG_PI:\"3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196\",LONG_E:\"2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901\",PI:Math.PI,E:Math.E,LOG:\"log\",LOG10:\"log10\",LOG10_LATEX:\"log_{10}\",MAX_EXP:2e5,SCIENTIFIC_MAX_DECIMAL_PLACES:14,SCIENTIFIC_IGNORE_ZERO_EXPONENTS:!0};!function(){F.CACHE.roots={};for(var e=2;e<=40;e++)for(var t=2;t<=40;t++){var n=S(e).pow(t);F.CACHE.roots[n+\"-\"+t]=e}}();function n(t){function e(e){this.name=t,this.message=void 0!==e?e:\"\",(e=new Error(this.message)).name=this.name,this.stack=e.stack}return e.prototype=Object.create(Error.prototype),e}function r(e){return-1!==f.indexOf(e)}function i(e){return e instanceof O}function A(e){return(e=ne(e)?e.multiplier:e).lessThan(0)}function c(e){return Math.min.apply(void 0,e)}function s(e,t){if(ae(e))for(var n=e.length,r=0;r<n;r++)t.call(e,r);else for(var i in e)e.hasOwnProperty(i)&&t.call(e,i)}function a(e){for(var t=e.length,n=[],r=0;r<t;r++){var i=e[r];-1===n.indexOf(i)&&n.push(i)}return n}function u(e){for(var t=o[o.length-1]||2;t<e;t++)g(t)&&o.push(t)}var D=t.N=1,B=t.P=2,G=t.S=3,V=t.EX=4,H=t.FN=5,j=t.PL=6,Z=t.CB=7,X=t.CP=8,l=F.CONST_HASH=\"#\",$=F.PARENTHESIS,z=F.SQRT,Q=F.ABS,Y=F.FACTORIAL,W=F.DOUBLEFACTORIAL,p=[],J={},f=[],h=[],K=function(e,t){if(!F.suppress_errors)throw new(t||Error)(e)},w=function(e){for(var t=e[0],n=1,r=e.length;n<r;n++)if(!e[n].equals(t))return!1;return!0},ee=function(e){h.push(e),F.SHOW_WARNINGS&&console&&console.warn&&console.warn(e)},m=function(e,t){if((t=t||\"variable\",-1===F.ALLOW_CHARS.indexOf(e))&&!F.VALIDATION_REGEX.test(e))throw new U(e+\" is not a valid \"+t+\" name\")},y=function(e){var t,n,r,i=Math.sign(e);return e=Math.abs(e),/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(e)&&(r=(r=(n=String(e).toLowerCase().split(\"e\")).pop())/(t=Math.abs(r)),n=n[0].split(\".\"),e=-1==r?(t-=n[0].length)<0?n[0].slice(0,t)+\".\"+n[0].slice(t)+(2===n.length?n[1]:\"\"):\"0.\"+new Array(t+1).join(\"0\")+n.join(\"\"):((r=n[1])&&(t-=r.length),t<0?n[0]+r.slice(0,t)+\".\"+r.slice(t):n.join(\"\")+new Array(t+1).join(\"0\"))),i<0?\"-\"+e:e},g=function(e){for(var t=Math.floor(Math.sqrt(e)),n=2;n<=t;n++)if(e%n==0)return!1;return!0},te=function(e){return/^\\d+\\.?\\d*$/.test(e)},v=function(e){return ne(e)?v(e.multiplier.toDecimal()):e%1!=0},ne=function(e){return e instanceof De},b=function(e,t,n){if(n=n||{c:[],add:function(e){-1===this.c.indexOf(e)&&isNaN(e)&&this.c.push(e)}},ne(e)){var r=e.group,i=e.previousGroup;if(r===V&&b(e.power,t,n),r===X||r===Z||i===X||i===Z)for(var s in e.symbols)b(e.symbols[s],t,n);else if(r===G||i===G)\"e\"!==e.value&&\"pi\"!==e.value&&e.value!==F.IMAGINARY&&n.add(e.value);else if(r===j||i===j)b(pe(e.symbols),t,n);else if(r===V)isNaN(e.value)||n.add(e.value),b(e.power,t,n);else if(r===H&&!t)for(var o=0;o<e.args.length;o++)b(e.args[o],t,n)}return n.c.sort()},N=function(e,n){e=d.expand(e),n=n||{};function t(e,t){n[e]||(n[e]=new De(0)),n[e]=d.add(n[e],t.clone())}return e.each(function(e){if(e.isConstant(\"all\"))t(\"constants\",e);else if(e.group===G)t(e.value,e);else if(e.group!==H||e.fname!==Q&&\"\"!==e.fname){if(e.group===V||e.group===H)throw new Error(\"Unable to separate. Term cannot be a function!\");t(b(e).join(\" \"),e)}else N(e.args[0])}),n},re=function(e){return e instanceof Ve},ie=function(e){return e instanceof He},se=function(e){return e instanceof je},oe=function(e){return e.group===D||e.group===B},ae=function(e){return Array.isArray(e)},ue=function(e){return/^[-+]?\\d+e?\\+?\\d*$/gim.test(e.toString())},le=function(e){return e&&String(e)},E=function(e){return\"(\"+e+\")\"},ce=function(){var n=[].slice.call(arguments);return n.shift().replace(/{(\\d+)}/g,function(e,t){t=n[t];return\"function\"==typeof t?t():t})},q=Object.keys,pe=function(e,t,n){for(var r in e)break;return t?r:n?{key:r,obj:e[r]}:e[r]},fe=function(e,t,n){return m(e),r(e)?null:(t=t||b(d.parse(n)),d.functions[e]=[d.mapped_function,t.length,{name:e,params:t,body:n}],n)},he=function(e,t,n){var r,i;return t=String(t),e.group===X?(i=d.expand(e.clone()).stripVar(t),r=d.subtract(e.clone(),i.clone()),i=i):r=e.clone(),e=r.stripVar(t),t=d.divide(r.clone(),e.clone()),i=i||new De(0),n?{a:e,x:t,ax:r,b:i}:[e,t,r,i]},me=function(e,t){return ue(e)?e>=Number.MAX_VALUE?e.toString():Number(e):(t=void 0===t?14:t,Math.round(e*Math.pow(10,t))/Math.pow(10,t))},ge=function(e){return e%2==0},de=function(e){return 1/(e%1)%2==0},ve=function(e,t){var n=typeof t;\"function\"==n&&\"undefined\"!=n||(t=function(e,t){return e===t});for(var r=[];e.length;){var i=e[0];if(1===e.length){r.push(i);break}var s=[];r.push(i);for(var o=1;o<e.length;o++){var a=e[o];t(i,a)||s.push(a)}e=s}return r},x=function(e){function t(e){-1===f.indexOf(e)&&f.push(e)}\"string\"==typeof e?t(e):s(e,function(e){t(e)})},we=function(e,t){var n;return ae(e)?n=e.splice(t,1)[0]:(n=e[t],delete e[t]),n},ye=function(e,t,n,r){var i=F[e];F[e]=void 0===n||!!n;r=t.call(r);return F[e]=i,r},be=function(e){return[].slice.call(e)},Se=function(e,t){return ye(\"PARSE2NUMBER\",function(){return d.parse(e,t)},!0)},C=function(e){if(ae(e)){for(var t=new Ve([]),n=0;n<e.length;n++)t.elements.push(C(e[n]));return t}return ne(e)?e:d.parse(e)},Me=function(e){for(var t=0;t<e.length;t++)if(e[t].group!==D)return!1;return!0},Ne=function(e){for(var t=0;t<e.length;t++)if(!e[t].isPi()&&!e[t].isE()&&!e[t].isConstant(!0))return!1;return!0},Ee=function(e,n,r){(n.isComposite()&&!e.isComposite()||n.isLinear()&&!e.isLinear())&&([e,n]=[n,e]);var i=new De(0);return e.isLinear()?e.each(function(t){var e;n.isComposite()?n.isLinear()?n.each(function(e){e=d.multiply(d.parse(t),d.parse(e)),e=d.expand(d.parse(e),r);i=d.add(i,e)},!0):i=d.add(i,d.multiply(t,d.parse(n))):(e=d.multiply(d.parse(t),d.parse(n)),i=d.add(i,d.expand(e,r)))},!0):i=d.multiply(e,n),i},qe=n(\"DivisionByZero\"),xe=n(\"ParseError\"),Ae=n(\"UndefinedError\"),Ce=n(\"OutOfFunctionDomainError\"),L=n(\"MaximumIterationsReached\"),I=n(\"NerdamerTypeError\"),Le=n(\"ParityError\"),Ie=n(\"OperatorError\"),Ue=n(\"OutOfRangeError\"),_e=n(\"DimensionError\"),U=n(\"InvalidVariableNameError\"),_=n(\"ValueLimitExceededError\"),Re=n(\"NerdamerValueError\"),R=n(\"SolveError\"),e=n(\"InfiniteLoopError\"),Oe=n(\"UnexpectedTokenError\"),e={DivisionByZero:qe,ParseError:xe,OutOfFunctionDomainError:Ce,UndefinedError:Ae,MaximumIterationsReached:L,NerdamerTypeError:I,ParityError:Le,OperatorError:Ie,OutOfRangeError:Ue,DimensionError:_e,InvalidVariableNameError:U,ValueLimitExceededError:_,NerdamerValueError:Re,SolveError:R,InfiniteLoopError:e,UnexpectedTokenError:Oe},Te={csc:function(e){return 1/Math.sin(e)},sec:function(e){return 1/Math.cos(e)},cot:function(e){return 1/Math.tan(e)},acsc:function(e){return Math.asin(1/e)},asec:function(e){return Math.acos(1/e)},acot:function(e){return Math.PI/2-Math.atan(e)},erf:function(e){var t=1/(1+.5*Math.abs(e)),t=1-t*Math.exp(-e*e-1.26551223+t*(1.00002368+t*(.37409196+t*(.09678418+t*(t*(.27886807+t*(t*(1.48851587+t*(.17087277*t-.82215223))-1.13520398))-.18628806)))));return 0<=e?t:-t},diff:function(t){return function(e){return(t(e+.001)-t(e-.001))/.002}},median:function(...e){e.sort(function(e,t){return e-t});var t=Math.floor(e.length/2);return e.length%2?e[t]:(e[t-1]+e[t])/2},fromContinued:function(e){for(var t=e.fractions.slice(),n=1/t.pop(),r=0,i=t.length;r<i;r++)n=1/(t.pop()+n);return e.sign*(e.whole+n)},continuedFraction:function(e,t){t=t||20;for(var n=Math.sign(e),r=Math.abs(e),i=Math.floor(r),s=r-i,o=0,a=!1,u={whole:i,sign:n,fractions:[]};!a&&0!==s;){var l=1/s,c=Math.floor(l);if(1e7<c)if(Te.fromContinued(u)-e<=Number.EPSILON)break;u.fractions.push(c),((s=l-c)<=1e-14||t-1<=o)&&(a=!0),o++}n=u.fractions.length-1;return 1===u.fractions[n]&&(u.fractions.pop(),u.fractions[--n]++),u},bigpow:function(e,t){e instanceof Fe||(e=Fe.create(e)),t instanceof Fe||(t=Fe.create(t));var n,r=new Fe(0);return t.isInteger()?(r.num=e.num.pow(t.toString()),r.den=e.den.pow(t.toString())):(n=Fe.create(Math.pow(e.num,t.num)),e=Fe.create(Math.pow(e.den,t.num)),r.num=Te.nthroot(n,t.den.toString()),r.den=Te.nthroot(e,t.den)),r},gamma:function(e){var t=[.9999999999998099,676.5203681218851,-1259.1392167224028,771.3234287776531,-176.6150291621406,12.507343278686905,-.13857109526572012,9984369578019572e-21,1.5056327351493116e-7];if(e<.5)return Math.PI/(Math.sin(Math.PI*e)*Te.gamma(1-e));--e;for(var n=t[0],r=1;r<9;r++)n+=t[r]/(e+r);var i=e+7+.5;return Math.sqrt(2*Math.PI)*Math.pow(i,e+.5)*Math.exp(-i)*n},bigfactorial:function(e){for(var t=new S(1),n=2;n<=e;n++)t=t.times(n);return new Fe(t)},bigLog:function(e){var t=[\"-253631954333118718762629409109262279926288908775918712466601196032/39970093576053625963957478139049824030906352922262642968060706375\",\"0\",\"24553090145869607172412918483124184864289170814122579923404694986469653261608528681589949629750677407356463601998534945057511664951799678336/35422621391945757431676178435630229283255250779216421054188228659061954317501699707236864189383591478024245495110561124597124995986978302375\",\"369017335340917140706044240090243368728616279239227943871048759140274862131699550043150713059889196223917527172547/335894053932612728969975338549993764554481173661218585876475837409922537622385232776657791604345125227005476864000\",\"24606853025626737903121303930100462245506322607985779603220820323211395607931699126390918477501325805513849611930008427268176602460462988972957593458726734897129954728102144/17750092415977639787139561330326170936321452137635322313122938207611787444311735251389066106937796085669460151963285086542745859461943369606018450213014148175716400146484375\",\"399073568781976806715759409052286641738926636328983929439450824555613704676637191564699164303012247386095942144825603522401740680808466858044/247958349743620302021733249049411604982786755454514947379317600613433680222511897950658049325685140346169718465773927872179874971908848116625\",\"1468102989495846944084741146947295378041808701256909016224309866143294556551407470861354311593351276612463858816796714569499021375899793849136855085849133702029337910502448189055357182595424959360/819363879309286303497217527375463120404739098260200279520788950777458900438307356738082930586032462601215802636320993648007907724899611296693997216938989854861043298494990214825163523387600982777\",\"5896704855274661767824574093605344871722790278354431422729640950821239030785642943033153793245906863203822369276271050164634206965056233097479117980782641839669/3030306850569309344013726745100070601277982132543905537366562638553198167007159067544789592089960911065181606283478843359856123992707598685058297067179343872000\",\"76631772943534985713873427262830314617912556928476573358548256872141516989538374761909611879922349479420014771499018155447198112155515453671128814488139633810493264352294560043912066253026059140653027326566801398784/36852092933388988649396042883218509607503204211148493545892849595498822817623842579026942621098851631842754395231561679671400197056377380063233740202370686144673585955581403046886083948450136247134308381940165804875\",\"3159076083816399509754948610929467278257473888282947311280653574634802580912280940686954763313882823327077171624015737719617373932318151594325834524000275847475866299387913048/1437757485694188822758304467756419845842037623148461107362957994816554782989250555362514354661961482939226272309026092009962414616417412938087494467254146002233028411865234375\",\"22266067259907364984531611601870291368272674573653403965630628996687370994139884833897773468149149664829922302484782423514167405397665098388400450149078982462318781750661005833037235183394221496186539779712428265837926417581952/9670030144664428565128962309657100138096047028794689249320859276197340398920725569428532293373676415359965773460364494998334259893079003125373872108770534788283842907318071170285038777091588292539102269617376180390982915567375\",\"14604654564989239958569331443385369522850975185358647132770022716433280072271007767111036877803328768910274400515590151934676819262085211828028638417329558229123989556376108454497813055/6090614019162516693013973409650613208227889078878781039105047015752493519149314227721984436973374032279421344818329285207124280297611253861173835238379831004010748379874393292231671808\",\"1901241885407696031217292877862925220917660047127261026827869027159993239567933534052663335498281439239753018507182016153657409777749792228538380379703411298411623469292891476969894084838876001545818141543890273256985768690847587711270930688/765116019778838839812655402103512685695769161212360553099732689795578904762091216998790589926057819838537805856579109910198553330075924857419395160755642371550113347465300208422126945265887065434116781678702741657275181694851670325469434625\",\"139459806786604751793737926146840623607010208216289543036026206208962059593900745886202214788747453279179283344350478734275973878932538430194363355795823581315329311220701640235653288975569812161436/54371368534412517053056101353618694718215711767266376573138772968257303578467926450212293233332401067673270853953399269852376592855992724934941173346260129257754416412476202526978443681584633116375\",\"1045669091124493070709683241190022970908640501171378776604126771144008324358233819560649021940145166254659028524319517244711645162132513416238958170819347361185944945680269442845829390112062101255500836072082817820950448463314034677353723256969344/396228259004446234921310936915931611736815598535963504660076315228798989932959459406702091180060429080345146735173591749448509810270759531977278642135591672189002006272326131885315743181289970885337574780897529347356567086535505950450897216796875\",\"9912919238915437302006264477931031611447467070103973106567538528951878797932559935860738745374437522819124347510590800370471910492338584284092534264608801221235029062881964101996762011296996851893455828946521/3660537472668264151218961634689665210933936249986285290553357254224360417386515311493310199319523687171757653216994741150377508234317025158302057758196429623723072084157928224798322861732880034847243894784000\",\"9263710175433181746575186369318246002919895649622127410824041370079225200282403368319370743363303164313395723904510539050157032684710468364067204876434546848634842333436957245275217583248805993142227630297924119330553308466662488683624783307023014909360640/3341177182697517248552428837661919299725031035849865632511882688786226888137634168024976033652753689210700218163621739078534353578510364301481093730054725078138658805025014615651043313990684347632166030359086885561104034510990826655289288319840595753002771\",\"5116082230713622171832327542439052727465114322479570603905499496221224653983960598946033081212909066917137546065542953865612718836914393275681318667667521726785633638189373998191090501201427906618075889744489190209584/1805752553736060443820406101277706970767657006346276183748749630179442318063568286372320188433843729960294965366346522303898609655762491623098453269916163621089005711823488749297418113474056676109581110715068124438875\",\"246569125619713282434448566970352231845414317018379160824176638351574938993535464763890962336882760882398479702237564384291290459961036068916857265499633061660562532011248501476114401629839742058389195725393702000011860799793778295606988057303225493814005789533570432/85307063020836305797178273029353623060860009152114361453434032434699636078115114412588719432277441055049132559782203988387794711585368296817222565434951256788867244687081233632650953850383220864394261763844194948389861147622944651546912394593164406926489862036343375\",\"133672026303452911046163998480860917119290576658330909785707604886881155606725822685088929236266583416708668502760907677019598002175122453170574729028452721476464728566191464897928696630979863154661704374206171469014225143/45398130975270785045482567762871405072140548998125471025451666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"6041693953360002800224091673336562508913199995987479264605216252220579740134601435770085920869376641180763419907442721705887169884230643795126568815123647603047739799302562095542459344811429882053086550900803768964612193941424128649976704727183797495759082741166938351872/2016766992122395667828553277997478570503475626107286343497917705446132017125079612756035254750822860815515899557855166824523851779156336235294914777307802256439645525835223691751931866188957324792276149549076500784191791380803500156776088683900346065830066370370083309875\",\"705868391597244582764749229356331441978820024796066870551110486625729826111158236686696326058778874201639006234449557592353247542995871491078308187261304930042019640830629526023972693107193897009168955674240659026247094657679060/231848642748474339277532000336338632910990823562381469441716922006107433404523316252618490265927265734670539384485699132080062215196462178933963957679882342083893417545858074378754089719547920901917516016346211301054206383643383\",\"101832160604157943093944673541651013907278188571533075311673249923948856034633446617630054761681006062910980371900782781226979391765818325065031889334563981235894369036439929651260587335544056975715076598739977065390678221999918899003881778449092038750712969437519295878491018112/32944277910571666002449086492515464541550138004002141571670657643770713783329063548790202120805341989608877739811787937782240802963962520261844114327432160788193314874913687387269408387417806176202979244637915812905426565263196954203487934225589622864145960079736633434831996625\",\"10655703119271468913597640479490594180964700448340778168715956712130636958373270202484276402718566314881119559090842449610957974112230306343486091910217340665146602598568991520563987490686996746558858366002301982443029430290679385551/3398412687366638541233365137084722368200311117891192348532156645374786104142009695796409107380345795998400850838706661851176885183144928701608654514812261697598380070746520197171576610572921007069104300695592751543563472456384512000\",\"1903039332876763837419920240543738799531131775028971323439870868730321221615515008394327723508670975623498588291298064320786970626232668956372004004897872810230178526101184611242511193415796638694370503100219710864543168952682617801833318493436174387568067811938490953495819438108686336/598806534367503338307287246320963280558134937382149405305466709787179429317914803617527827862441615350396864359976273212272586892074799651088317544101755361439294687323233086696182687664637422796995789967075271448560870681210580691574924544896656175563265378514188341796398162841796875\",\"525573915563826130963525826191411949262846916750432019596028344808298471293378917508549164993368392834023782480702893643486699787870059946429810070222126260200026332874480239090370088123833491499400991181659445914352500247596757005142623368/163278727324937389095822405034435687776345799835442022795533783889356344755225815267819508608559076191292900367982490827396869405536484846115955581043091229202052407483776587687967125885665493681707461345895999542381476164157058393971431375\",\"9263815657177858787273494705338516861045771674838057329170239610953039987023429736752079544014780707408666628475997291124805562998227296677616204140605356257712022384368492575381355563976330347792504605666631512343447560301417325154003481040250148561839861837778597346623630046623751094400/2843321709948499955095590862256744532227698001408929142548057792217790532624003190447363578048562448168721539177458065482170148482375585867230123873178100117094533143052886527452665480614620123764036974180917207421482431983407742154634391264619615289225747664532332469783301704643254076601\",\"407959339726114455622180187758753007349209016396248763075759257357925636039752474207685682218422721827857994768023399625060206708378433960993946156803948655098667156937949174400873748557248801874735834957795040139401560494087476967548060208243867/123780218751812156744401121690996305978134694678934447237402511116731459214498784497436358160964198336874043702652746834763131444030185151143987331404604087778514863973633941401826334750268416015224906056576641018962863645043976537664227639296000\",\"2547676391598917379516698439971914695230548782904479778605691338364453606537643088857116141939170899135026552016969320061900926954008522781162186995856580955090548471448276736878300717869625651893741316530109438876067419826217901657017506157997588944233677467357220316084583383623602865379325184/764562034757392298786420374672266498815021229519853724850874576419885380830752931701831256959159800764672605004880389358601658343203513177084389490286723240185146570925957286083025676875197029662038213216541352875570101363668917766225709569356861275434470568767077844675593176178611021135573625\",\"186545352286463730559933346565311535598243666022232037054735807289501173444103692309735768703898330430135399033529355360391658728987379385732098960609744313878477967971557204207043802935782878745271859468248704012618254203101767841517569443555143252/55399179641621656233589820996143825959365789093262978988289445625153099592463372579496245442338653053662134699646413817866770218574795378644415019944304868289119443774932782235638737888469746745621382139263856603239588594078668393194675445556640625\",\"664884440164786473344854955309049113269357314957985265728106924238588705533437169796551912202931185746193155801905841712503407258166135075966280435780812714252670362202091663287095423712596462690753468682634261029392794173636943978404002804413009590005984736612421172979101972556772005594499779860608/195485517776407145286424460448995460754674039560651791192647586550615878988380153730602665795647187884543361218962125172808792176382956599256188706636727418572541254480798303566840010217729386905041217793614214518363859058348249961790104618910877813067510758225302884815410347238200133693756493703875\",\"2614957283934314904315471338485451166053664494383241929385424599389309215073267052860464009981063483440201193771607520572077231889699858482582363845275452280606276949653970992719332472370351170732899676316967244504534154616036371979031399425846100527685/761493664432749089312665480773496290658029971027686543404885407644062485746072719559288231362060149626237939029641098328278650939665665969011529293869562636656650999759724704272743235210867676873525147820749560155294022488994426729939894753293900972032\",\"124843380518493746761140367283007507854364503961156704095198010255465940085534099747297600085903814014415830785663764373057896014399822131175202342399536439284123918855893825207202244831315575594886675813256448846863723093240955901916229136393454605455444105444987028391748121054399538064686074523506176/36022228212051654395480210378626648518430280334458144892889271272122662467638331091863215146548048144675657239846337165813938424387499358852301016926312083940212100001220180762189978024821166744964908871443681332664798940660421469519997746775275873085770018269706847741064037876137315001228315806659875\",\"827992369063043155578730871896750570951766628472810506926098505028264552046829097082095665194000002802661600196840639204300804225352337632259980703832713031790922485730615305441309917696044954289187837653933158950774246017223571461858939407386087081525130831392/236805932823686534991153393869288530368011574665859226704279685567723830696754821658770176385138917722808377962346690757191122309876922069867472518117628639913077442806147910884267694879089753138429767401700283014143248445966474839193628309668702223994071394625\",\"17347276886878323736540051321582548724378497839789943634071026331001588645519865992773157565595886250230140452154269197770615097377486013097979087647774513500701793885978192218455687078883766086309728287172567466406449372659680040183273634701092561727514713494914793425407149186041796935055187281744386432/4919325621804683623339606849970832094714371903709195539440424738973575902329797546592497378000858196173718145883783709223158260700365224756081275272021856393735663399552166737690038832550853145831185979094979556715294990257315369124065787473707136464772247917156232366320267601622617803514003753662109375\",\"137984231830526866236186357461458917020538108058615632801298091031540729111527734872044790487396302545910108285921421417358113055522725197998483383380192391312304647004240060970929072498293210057120617332323445379424867965764749534125081131327565507524502163460761/38810445792642817561168950890315210470940006613819790543653745327778579787694809782601777514116858514049585074667085399925278459138508514838268321349069481334967221455722811414399738756151414906092225265355449011152267068726417045644222323488445626292574879744000\",\"746567120547823334914136339633766098626636643449144032626270358619125402826113269699709721071135471625588981126637674402048519990010499180844665151971356149292818375448504122545400227696621572263621729512461528550588108384619064912224884465737417596190735966915167530332762203074440688676123756162572829692160/208334337057923929636884170505570363171441147899816815785150954417598643614152856767186132467069365605496210036171429712485182162940460120834349006784956522600679357307849981862006710239311750261522832996877712350330290831638640913932265004107623954913155144975252743257846945609734368518424172846119306643431\",\"64649371728330695076928013661001819989330953381731372450140483779536126948957993261299287753791770622512248630224724990234903928056275080682537641377393210728546364176267034339221558641084730052304770498929958838997239635790469536857863963589118888238069738647239076/17903951498200212327802847425913723358452100686246224008745414214690047078122925247086521362329833307849817944645647750649290248110509395628305970523384831671737569872597295947593410067364379687588919135621621162007748635920864926867870502568935739725312687094047375\",\"2454918942158003099688922026016393688092399295166304634317616773083386087532869193458590448918958337530406410803840837646465522656670050113548208618655070231274778592766244282964463702354872753657766121825196898916725498553882689210280080206627916046484942827487726300822318764058084323314109595329304407466188383616/674880185931325925966586583820010578979699141814417326552629206140252348822939845006845669570885271576698771404162512001549922909048916000017837898649100825976232784446638776021483802989797501705685620612986771521390439936066527738682396560462899753657942715306792783283782238662155922082005591512296007820682995125\",\"74018558041066162916454010680594042518462756234254788158141115244349044958441521749277686851928706433556285971088455226217644009628399441967508838553345152310730562224910795446341601049647392069373970101491741830623078126344928804029524181578945586663110848142571149861/20204153620006780689923328634586091101021423979622170579036140596085566172775051595588438592742563923428900864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"2127032036758045513335690185608563023954009095206088224487365541995326714285119384743928987635752931664240752323937321097955456543854943206092931247498833001499955456190701695430459583885125382086777607021670447795321669948733328973350279846928613949120929250312666393359442423066212311060931469017737106028339882830848/576612418511902928757340062840968526862381326698309578771238715462180282212422302261044980131594522407066369222998903808960617461164985318633518680304995784614308979881735537678182134128319596636920719106506829571072447362052319438091347699720147003209417806230149598345068078717948025207635448205253184540936478445125\",\"35289653975561083576641954928762116897061274899517309102784750384002335187117263273488751066569234386120759866204372398611196356888479036949053282301027789530999737306501029700128744408015642211359442183943916106790666114870974212159410284751571905275610921784716184508440/9503006066880728386808143045924119024212377150217533250562188228062174064693375135306438120385877320162710918716613546077156389583384656340709638430674364232343609717735574035535102953482366914421205216675248471695111720986346092738728929878538430662191272737183832556131\",\"102633551023964794485575491065909467125458972250222581133681080524371507544152979467328048718122409841060527545925136196267751819689935599599321090571687632103850847605493223603751038996548520557330016046032671961857623066292962260173840972332108111505971231021442896036760967107060309991355545554631003681544611731245475968/27459658121882266328752886605529964804078316737648012166874496015808620265471203512606463219297059547428855195782384236337998738233668399173746663289852416697917397644234441300570212555870401420579737973722145663287124151049692290432756231390864184491891697469874600345958989433125942336757049639797225309327019275689074625\",\"10034393558388390065766795008210457368713365491566387292163814915435906649268119060550511145023450790393353937124495488860451123302412204483570913557762460385297770427946219119911920640306914453207097103853766023934602534502476962159682750262143380527529536498215384467975023/2667919902603322771586358077760621955455470781865624844984169443739075976572061827709528710108877015489050369589117491611045518221354793418884447632063538994046714401229510497599783726376490260140723032102883617341970952663947646017489439179953454964374887388652792446976000\",\"248528145263843375390386172800048509380966183384567983242213959113927668429802237067505890436957693495616107089384741585283620097982859345081736730899912519273262934785992235852866637878831878448348444611412764161078458068549719800733237024285525816723480868704742804077255242682077291713092790250511567621735004237450946304/65676865669148624809340872151906045781446981664561196686217551358486802274698228825404698950974939545099727242259547145392352658637333562345477931951890984276718673618736565926663528625796412420753961231404680876558659735251469326707567479071881966875336951133475135427640218972722939427821842173216282390058040618896484375\",\"7805448718805635696495809414501206964843262114470109146341305656318015059743127114324245035489577134938579856003956861881125856595981500593426840968087618241785931128978516340812066502964561231235073012672356530509663384739132686548934288703179479011016719045530855033205271548/2050525178024039744126592505352202216905491833360272553169520915020715464206141942151086176509423406413311520838568324134077402841030113427309725873344806030836314500267104070131451720947531994814710189000076651895520222646974590481497382830325485174899169093049299764813276375\",\"3355325071293197839434119105039673324264765809771192815982246040415580387729382404624613875653005261578877047405365032178619450963731719777167015959920645055600439987161800547901539269321100559393048973255388860193948274255340335876890491746900991668165565729269698196233805991206691196045182214641935483083662356666996922240/876402579119117579582569839757462461050855174353108858954282915644790659429341853404829661899850841645529640454766173209897510988090318303454542547519850473808789222552969933222203420847859171250332350076509996295844203965564448154484566493395403967626596213792922784509892086361572955175655987334882030766001799867659814117\",\"218871061991045868372866381545267589365410350294028138778572466235486397478028823720846191998825628156716190463263492304639890659254282445466806224943413446008645087186307985343574807361972238230520975439736199291019544576443791916302825193643774360055545186783819367378492631806297/56849560726416896431557940314760680962653658127458002233782028041537121216487790008085876994020812492987733987414743604239935223783349870516284048368761617736127892160849065895223288023531930411718807065209903593668117085505482007061969339237404945180379460053180570404846043136000\",\"5008685108365226931582937964451700746853986170633433728409171904803795018146152804690759530990140552460596075588463394200510044617816085275660078502126507209302951286606953039953843685800941558212440519542602092919776366067720586295390886070120828199562643208637974347390938772070049344991272621102622931576339988103674070876518912/1293888539680354282541277646947380627241979967611883341823378331667976045287311988103163380651334828012840330710760757271860219584371109472132211215957402251594055009937397184768184517621978947384029376766290498101728971145633139541827544539988344772578184316843734267915665730981857376872622787627370859411909330227080697966353375\",\"15388340113525711660227566446101909585796746979396093776960989868457211684028149502578116456785221720682202816140911944661051001675127262774824593420825587319436537346311831003212424497488485098543512314062112948777572038731823948224734505930748371522309451168088057190162878224801232/3954220582960831691377435160890656173654063611768428458807273708040518769541211737927975894584024448193835165167801976423275767590502552964407494549049777006346189436817215329891530811451811864579644894987864267389290848598289794977382504890216219362031324635609053075313568115234375\",\"5099039333987561374222193551155323470675617979816941646196895589439391685938046865391119484510329634015275893520725135141878751153360264368353595348921951280561029028912953500944814771064409611917475818956659775131751121312316084465321917769679881052144364834485866477379437705913911371481828140817759401117780199246301705600020671104/1303503600297679371136943454060319958680553228879031326679449263682048703103464872914972900105569835004878963701599765030590097739639045890060548760692125546754294514068052902543220382104483822438283040090444827980927544440984823535260277595466339403795403200720622852069244768910603820007632395190204569927612348189089161551951106625\",\"4902837141334073026145827027361937996261324349722726869116185158777439337041263482852376194988371853413467559557923410949898048139830183335197992754748294810838187068126867611615800383834975563313220497573778480109264178673389149671194149749735833378557143135481387904961537942569904075/1247045310545991266291285730016853118981099516935251861146038369985109288084420528171217942065832292739130145780833406014673689119563698528225048800794718789218267628507713621235056538202070171596177775095071513194885568843375526804796016261173388452184505503341132236719484809714335744\",\"38114743522716832107917466438257616720476488812538316101658139632867788464381862291240727309611460187159930652186486096300862388591521625093237019662273764387591494074792574929490381910446287947994150655077877204446864004067956087975012773988833339521775463977233068498404144221045837190392670308437391686081418318624745039402145439223552/9647001083383999453668111809775451078976046488746916070976218645431946648087171586252172936600115032316383427265217993193444199863138429602138841976586190525451324093772097241349417938578878934577091671046050326087898259692917931230974174799815198493279413438192301437068820185757869608523761456160341754512329264442115351926967120404125\",\"573695055225225727008803730767518906490704995929177617646275646884555707960986625481944101622708415415988844740028718027554452662358957933526173824325955904005404113684003841990198157072540659184995738719040024647370869010473254071681533880576462368600901824622431045529064651675640055917092/144509482511118816399089096021290587489594541280398871255876563615464628718527634679330291741479135415168539765887291789615790513527330600394937614433502341116068305347468133950204152174094704092402978083370792135432486240914953928188835819767755172666693219213868545854371103120604946200875\",\"23876960329653589647925126180903391687666378233201794403339630995420215267415575142266707357255726330536094448314199602616026935251126469221925945960901748679919435908556550271504767784553484434363646489174587463466333864577705745452492395785557425904735048180164697040313528831173448025400634629163795223739061661461986923675833880378496/5986312408594306954013526197465608559068621248896320652512228238115589875514604632230098997609482248000888567135685167138762172475788060284232459813998201719590208742091697294562538265829954186149162974972471533202880368317237508987477069872431064075005305838801862900501819963793062041081601844759452202282545840716920793056488037109375\",\"58168289917567723171226992383559866214094157894992327555495441698028867727845766488121900626912848698952863438654895252811583144479300382761129433911280049009362667380001406579175563745824368613319103673817094498117944856004415812877213722455299491145649879676787079744410765053845551958756701/14517067289347903655500020160671113450349743650636953726251191692074385521975132268313263723831804150872238173602847065423463131917373356798750100313145228608894881457107689499956903046984443545789053438946050974567665049237414588435796381674590098629779384355275820782532479708807512981504000\",\"728621890568281859295409481422447012528302594365693410763821707074444799793690738137592101239862736313347273167450056625929591960610208335290882047413011571781161008296084630072829079783328937418641417642857196346026366370059522990813537731394823630207433267854616768658990289454635793326766697884798538576055949457122067828153655416688640/181030730759516991863708593747964787874073354051675597050399087612142539517308720603687322924426591889179726492403913356461908748733972707460063017057809060190437917851790767968877215795679844983288935075688219234885360839984681619084834228226744165610073685719017596630302462070188937998558312507638434329299017584329479516410907786681093\",\"86855946923438322218622470067224691860808273886184997065663554841573982963995340977083049132518812923329423480393306918856650577072525633920456721265953575424233701929892019410099166322511413146891121248381648145391642571638857576890568882512129960291171866772665863159474602604647289052079991768/21485753507365901947528588896402264670781310878547726104482740647554738151100954835784115119035980523529677083504495839730499664052882400915208251594384038810917282207449860876251558307288700200910747338758723324686939379138206117634546981163355060740270734146780942696291669461182599512320099625\",\"2158989152301022938148680102142188531448821359505188055264665167313418619665693092337665573150374231484840948447637297247277576415460889296724813940128955070240137590073233263168835678714131062764247434144994737610229909964847568491446606012581370840699582055341626266533733744293929658949697805855362114229666626620766245630122333733703618176/531794915405164005613733454597931482878479882704956110685223892325074211694837836221759995948610212818642789132749082430059593652854659130217225506942675608692701447738732031302987802196501895840510235161825501235133794449421919927396142470196961877376701957829921152848178076410141813926924749057304222282687697297216661687583257901415465125\",\"139432548574396829074586704387656697097760057897628994548358619815052936481650396157428747411173567801047221928593253479330480454469358220685854351236980383914223693722868233819483137401339800304943891968050399345430243790898955416907228948287367356990263740207046902209563417267686591994743547621/34201151688775214071963206765436083445901621442002061707492082843232231754829227303539041286301398668437202547003300396162741375435703188500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"11008517174872833286150985180322584448162884832099344969609291070844193524816852920942383850580217443209402836100467940651581092350600329145627967515818684442171571156446321228596914355704205623857871497315955269266498229823278800717909321269179839084452384509142712677235552103459737790674103994445173074670347080506698168482564009465276165824768/2689223396936080856855299215659204161946704205931885125148201643087176556822542895325191478283706585400237901215485150928036895428721912118467760766508162631903585126377676412573187912443878232521444786090510891599171741773242011017926658231638022943018461086517502584854390836347781674626615709751386455292026775663545470794167629144456268750125\",\"16108638074211260588800537540680707641986073914251424878121255234668558067988171568946079848860335948991834525552515669040163026131919804987340113244760738846884911038097907756220945883750502673899084880578229601870882631165510396775126850307838505063922101682333806284668762825609556049426829531780/3919363961344261777100658318137884299575193089462944554282218278496298610828757650104922583359642384253066896538203596057302203635134833545580869871333892935330950583664400555463557735723364497947986885146043017010159347046389604172186788902608216894094289769850517098027486468084407618748895626853\",\"34420755849180279597302103726180110022640946692592540634353734157479505420320000324260530767186132260970572450489530034440214259559325114511265075416512316229177952140217732655405289808326341696986755141965043719344169685611217958619102774617224847284122901023774956887687026904767714958090256282893003000752947427857703259704682455375442735857024/8342030311716679826889917494957593165464748884572298173556257652389845294530325764837124998293398445804458613956489096007564811101361266196542129764287084823604897187311540561857741285793447174119667215803837719660675298308873496219385226998078648428368061868944322478384684509466965129972030932418920415308276430355882329457342937549162000252625\",\"345888075261020004071220843714060353763382280664960929903544964118831237876694384053904571498830068831026644303797377762345709976595360421502594656308937649239978525713471393570536680412814805076323426256584504251728507416368609420882442293831684681071553766603478479006495757222912500012444787804577811/83505703731469734628961395063481893801938371516752417759131774530720075262459158384433785006689548434701904106312038822969658455364219435022841597243178757423598248565463985786213156556523685666430799283870548238467817226915680747412191245046634279766450629886904716776719219698922088211154187845632000\",\"1061717830619177527082296723099890392273896386613997004874669053445943252046748251883532634529759169500795452576392700472771365240996842610207274128102329096619028487369622001737128463631016494371635687841733644339636164570819431573829173533941056258744442930643735587780907310433371453992062647737259587563398111688659657406089003293576961475848704/255359631537215747979895955806995352799574790340218399351168178555478073997876110889483456972687438702262017800167048243754141722496276537685853311434069991222324039005160057724073156957530106623908696241268268096879569794431919729620178375212905203484165745866913773304319069321426245521467122472046370356725530914587807274074293673038482666015625\",\"274122944106300296738399632684955400761495830361663966466225652918683099779465438024846903286816813856490888796372134557295699980528187779624865098445756013563535339056233912394908544185885547842235097677765325396255649207317018754967666450708249125316192200151505568416495274671679500594656671785202496/65687592621976546250581560102201535533608158256953087745856906437400149205693427285162333502528793675585022025602144243543064185647792948495372442630333800126269123531636800213405254045262127593759539706750242430153456891792533267948231185296091297979933562727112487057234422009426868531651634706262125\",\"7842680480716516803148821198697967237136721860017131244266974996267074742248599085253569637183007740566941125452215834642683053334607896723447140851344501084122965014242091312411884985569341166545074688756440728922408743841592658677792796881188604773469108807869960161395759837407978596679911066586626885830991556090978327508459276025943279064965688960/1872528612245648675720382138045071131304652050696842872529163720558126655075937845539792108048310219395746259570506175902206215101518698490144716531697689534559827422735649881381597761684154409796315455445459537515308174919488497154409643876490472215352056502193150125644288086294418253309947229151074464928874881827227706992859640236086417889990541889\",\"5300824422251242070074569186825929119848111723012841627275830216301188228660779008353049603527567784119877706984722171178137272986345560485784907345500893648715341273841147320288851034078863843374665850852481747000237834238703248634174397792745914847774297223176674917912406659831206869442510948965571661/1261140476013707338477604677428573831791396352814802149994640617701773078174882455512668089072441176857892331468691160991310474734143842336092636848492066592397892638052212250229129355009939118431643425836944282456647571558383755315238500832868535816144280088644939696339160092963629012001958205063168000\",\"2220223718762215584659309059880106334425515875615107369399767892051551634000614327272260081056973863669004224981561870246078120862256383581012183852291444462730018546753183156982897386563561418424093883164027305254176874653780425452987066512563140531367766900610414277825262239199580925879453806414860409441845631158680721091621460775043562065815179617536/526383206607841251253861841374779803798480623722760367843070466043030228662340154304405180907941079883976168609082254331465595267209149963786388600028701073430773581228212441424400748220833542964971495005714483235359479470452593264280645360131482713147116366500300066771223383007216182988263355451923333319170174755334598973202740108032097242475554128875\",\"521891797109626296684891455959263713257353500867652268541535940159815152120871142196535233326890353914761242025931373491906127275561002910157909306979093246574207104081108188995072105948138299097848175016082947174156278439986705241571619793059501724269644447572323501261424770743329858038040685313621446524/123310256826873923765604825413207481739886340225713108649758575106598510022338480189649787216845041382860899099250547657534972156328080736149239332330143771138115695598493059325064119176038137294863053148618656356436332991079150723235214278848602671333076219529535123842212129829931654967367649078369140625\",\"66086044538329677372986118727999622900471937619891337714357792768200341519193500393739322894033303245376225584865369486696276607060432449792893028061817203932068085863800494054274423512956136695211796751845295921015953538329385253280866669403169919614982155350899648626481405781514434761541281229159396787287553493046927448595964103589100429722948913403008/15562137339474350565671240515273666798063901504051979980452491653975250630723677279081058884163396938548780856293034775459223871281049026140999055923743471466471830572672766633086347312178711643724485955576579988182546105048041649947277672869613992334541438784737993706482731696809943027528882927942967419447250586964258807454003775693567366165507144866375\",\"335377615394100148751647837967017467711612297170079949298328061159559939969228226474615711044891085626519877634842694983669611974807129333052471799687426665556738316626171408219730853872410792831871526174987402129691897433888027072807302411474690613948951673562473758814664346259109886876538510453475290967835/78715592752271462306588358880337347638000605031000575876214116610339827495261512281635361568951675037834544811575026718101166562072917855004822606752296233435017284127594847656529606648345533195437635894948829857913798336356647286032372695130461573940500785137424365840081503133157308796505622439791698116608\",\"20090879701618729602554170716780970848925039917987945471322994867171660307998603515745066411687983450400412739285577269751603921163835619296822801840348319742203974023505186187060251544248644338412667631232247108675504629538319425769464277309915502144443973397371136256151336255138506001292355330875114245901820438821732843540725116728866301271466614762497024/4700223519410528857298732096729483544820841497820611795617923063440946097326817340637303431283005509904481323205480729806879570430868897342398783028649633951362398196137429076844504529051072393709154483678349272930361110568616112723747726853614661953537957117231900032044221535502745676310313569997665352252492568100075191900969170979460298189170486601502625\",\"2904778979985524171206573028445379872240558084236464200857594814631031581387804621371822074061289363372523364167184697785570324832815972970658633551879143187709707164796663015180877412717910872234647704536817108676736661804878068078543241390828229923424191204586313620612539678930999769543756218765870513049986792/677408099044823641581658869221044375312077929976719183424865834811543737800956896926637625166844372424044003929341361734886232742770909683021563822987505236295727478159938135467975522336774471915167606673489722102077041330652185811196423400701795791669780695158730756241178262962515917389382302757366325768069625\",\"31270155809329751863885224732454397292230969002004953832354065319735530624996254695453061851449600345977646455072512400760539747054003851289540339425848681804190284451253462663731135337775088379954403740058084949675460445909826322297817535400604180338201322667139062500269285493417563095365899631360901732684124930296643108551710704785906431324876072470231424/7269578038000504017073007978844992319987411732848567116655821196644382777088703228960020894756722675887473977480537577509061256138261063926845643360849217556370868752909531088361229374467207196928745673402380473721018157327193509586295879051411183657185176812738231456253321187419224704301236205478184115996135940848503487199394612616742961108684539794921875\",\"432538822079707760382094121020421735679118830363764570640789368235407853152380328891350816400541189148550353337874309885334920995713154225799660601389784410911658967499100610376065640785585342035058364676314084595283850213942576431310823836792440218271879354669291052589804956435743500204185107215929849054782893113/100246574739326291035824954677502591279343311051719151327066341370995390423713403739043396503785261917771859220535505691760472395306543276314938287868734009582906895763073519374099272340577921671298878837400921045252035507925021904954445172372479744465666760762909731237634082051855588025732494461939980856983552000\",\"1914333673689206389116942789116917579088664511118582610293383428712902211612554212779880638065888518488492298586641997844141510832940409501694726851666478650414191249534733087933879981733561565249818572204932715347752949087800778646065986244657260832234479202201129845117955957242616947361016603702640821256099895469088229339240402478576285854783063612307200/442333801076281757298117784528962837115323835962460661601905131618341609371649347131724700192551574625400701487125984359494804828935577124602622582550626336986871791407398609915208114339012374456785705161994343348351473385887949809051796407340988735853810174589261300681030826392672282630613354461927208579993042968520650313621522933214063366558703422757071\",\"5704691626402072213006354545292364761246893919997531024861408248746241619817955824682639582830486790618668221530365426203424888737658778881721063941495350237419723855000515747725926735319471480027293210991869255971365522170749568996651406002311020883635577590045650037569906001924971041810547543163363976464780729932/1314240362076792592671773873754757443276256223533339004339330559325754574023619698171225777585408160438834449576526997055649849875516310105297894855264038450585295422343454458568152668980131977005808840141079502436391909349182185596381509091427752151860204235071122788499996991078935216686010888734471173124487937875\",\"451219364084386208718456142329444023337343409261545444643031014769484085278440612677813682892926852469540118625738238137458321112005189595703619178533263706811689687213128887082197330137502064260105387500552856851972124172206996205919556553246133218441769325133725631665593372188755090094541462474970525820334385058333756591222492801647110594428922046641945259392/103648250172203340865458115839764297558925693061798169434516001775068769911768281084188883278842546791612199025413573394167639925287068809631958006622842716869211374513136766899877504136929177267362862319748507372147243911522667591375015611312165464514308451222180272935398828092646393830572838772085366567154646425598388620105539619174837489536378605144891769625\",\"1591076564577634575701791393842535460875733974464805197283632670013516183281542903377750304419996681222758401497321278555686661981435637461350320471258386388843198706277657208526372100698700615835733712519332548607115875288787602084336341594576426630670911478276101702119972195558314357975365863803265163991961173/364433108410193393847203348728981296285742202617988970384277162225847256295865554341611171460436362780497179090329831885853324392923449579538286804729856000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"5307507148709435807261229345132535134848030343901300324623409721698217134932866488937772986386501538026693956121121771089740095760486362654754229904633476234090792827930433598453200536551779789049352131005222659995845427680686677324963223653949277037520711609343166926627713758990384011274777087968799793410506391884872456420041494598273703914689586637995139580794368/1212244290381524115082005575105703496583315188540177702780216570265159923654197746388568151706509243638302707511238539845531608313334248788980188054651601536067740709977678222790481348003085034888244447626347312094586389347535167903408519024105748523384932942441843118813819781347089702286481924493361058339731949844620763272778960860509570622673048786968660129650125\",\"3046577098843580578619955603029073328361298436129791931304665777036152915858575282362742008136721284817899542475666054101957899858138590963789072530710775790433466847100422875906866496318804986202089528198912098377828580031852152997907433335176267300286466072997014023120087988748396598176622765923059385876855303940720/693911859077752895978833241338902695755528613729508555938416419864772385336777924892434701804078893822446727762077537955240605927550548046309823051841326355655848406646248595628715185413852040295631448250459076043816328082561248420925930431777502622148019371383254316636979070731427737764160145097293260938978413488819\",\"155310926743873343426312607182060072939030765297630534544899230213054714482456829198485999782086944271490229412707980997432528653509945301574794242118433868747172279224118534460563400440670015323324602117517342201640016853927923976796453577048995243600967202462466681112804476672348206491490513419336308575442086511015101999847896197546900512764233674747415844045184/35278162986589659300679088538176070649273991865663041616088851923111175518405117391134863644540911005782372831496121355954470744169969774540892096320978686548284501139861783292226140413769665461494668479430833892857992401391262903582109993838728281915806394747833588629467613308837196269424421131934859079260185052081536487462257809987002198437182539441349474426375\",\"46729591025621874782758519074451728476386657576036360734358719976400940301493939192083339293779149127132651616972817165172116269307276487158069293114860391502484125554406945249728802484128756924044633825692779783425628292959170597009935305429239702926898931975023598456207165067568919757902764815108751735753431153581849/10585868084079030838651390738371141142245086465033459640458366146849314274285871375459898014414833295804139979016362796357043372316321872357817727821559232353993714062535883074661734509440994664726425399880995133711038483607773782532430879196405793694658185175583691180757783597895616920432527125993118171361116684288000\",\"3736372348124144720852190769710129461145889011598636925228657393934132828633132357232883470466940330848177425542748100211498184494252714616379450272611850068867816250209867530921278645286769418080018709947826876461419654782341309127709703626401211996255743831998918894661053669189312375159058718767082163156988766821194002596331826150321864927832618126580509732359424/844176851007504003627016945212023239308348428094023437269532743221937069345682900884618378849283002998220513307273333096775669556093005637615012750733216460458689282791632437851364674879152695438589692227159038555722539345972833161146108367329370564838671791241431125003401861887477969954740544092178721327724620450947646209914621007186497081420384347438812255859375\",\"1258774755828991281578968023382624723772927642002016270484090409043454336040857926581316994594109169123354553321469500848146015719851609220423736153365139804086413284787598253618361769125996755159571523632747129480387254164008968993734442164892486441152227433281625391753702577143985047832519062595123255569172968685060844/283659859661671181526547833415653453506477950678651675193210969173130116121017723360258249430884213011988678011357458727603413521688184521573094783291496368005697481333739504490647194454695504722542014845706216224432373442438242355188461951883454664693262684873988061018976711201351382163527093784753398257094429403691625\",\"84932063355292829988908961192574710493098897148701473172754949846455626381329456661808566365329266898990829247446356970454502007127269708487563279536825277374133681167235811080298134899629580318813382668399644553111080625918213250223197440426147821225593304993621451053135332451997633132772608233430131400186571793929377129211228689703376067763625568623535588709576320/19089978133324852910950469658566458037096027722326716800113107848115231563787455584278193954518442601810776347091253561956877155673550458955562102935555510392954425196165785410319126098393353878286400877305164869548380670204577544630353859009177051698096136470072137579698473017257397949994722015089768745013713383769765609613514021200888647472804720456494757423299627\",\"802638881530832431828249604040579750916118423833791608589560402449036920165704012070349537114920882938466635598602387718300074733476150548724726460209016834416094317724261857969955414000155807312852092720310159572547644569797512233899495300028159721348599816083166712365215075728968005941610056018023633235372936903015771583/179951197386119079732438617407921535065140503043429174394605652913879982486051627760652197484142547447000508189455126493868229565647284332735552462525598465192073558793335913005459266977086104359621022691931002488052727597513413492393525660272900161375677499228252863529934576881596384036401784035248649026076581302370304000\",\"25208742399375362881099811032135575360109715964024747212026245529087599633280142314962581193303683759605084995818253124445773115574470717199218828756449187055537877478033129862600982068782249943150019637186466260707552416433010545437321814115233841687700051830170191107127799355485920046505591193770164750886037885397478191534797655616745528343172318318678405576430544896/5637713398995569614196397857525646325234056219513202928587580534159596897880731043336790273040813044077153051260989730372846713618900145444802234629922717464041261370803598799826604841654608724727320798324006129524610666235998113655193642594744544226880944882342204407750193512869672849910003246504052298022468012594459974209940607450480609190841893267203392880360823875\",\"732332637178584560220688900268566130246820235956768724845747830959547501950765063982943061181526237061809052444110437930100210105274824607344902764184151030827266142225894655531497849161692760385938786736436977268616029862577293984376170905024712952813234949508186306774257035535805330366742322777611063402455261391021097128/163377988152179636922409938163005948596822656868040662831003991395905185823836089887990201522673196719628247106777881741843786365701135555917263285268753605514812568258179391272113405920369587922702002732667842511108732068683407168090725712401954314293193572654347237716691784386690948494003094992876867763698101043701171875\",\"22391374854299462107923583267570593886002658786775211597896252879708753450794332301142909715845151746786016535157797023153041007263258732991465037648536702217273897876864351559736449481285518249846264600935543582562018874574655740660800634883403597181876364712521253650744197321080655028374602772696770227741610874399454362583980465225235674816785988164157351243193265401728/4983275997188967758382167867656806681565521964135131710678447245984239733544941881418957694612909599261843693554043504855207170782744518943778096768859337980470219783210191765678908537645270392500777411134164918803949155037581108678968701961544979451081836872425574123683574475790997414488641534074873248802450108535183413970057319247033379016606809226547805269752123746375\",\"21252344995592269775107236774689012760750850598567799560343535731251766780016530978663079386453430272698006977668063208502408607227544322945446079708000304179073184745623740466334127867464883762843346619853325415963062181018736410570113171387891518398846617197097407612852037905687899800932343156979591740310928257766081697645/4718515378484509142377558412184183991357747235892194234377932213613746008373918923611236346330189287336493794499188640380975364991548794341177060325509698404571318037298112293926833877103554546466055612498927474225619680186119313129604319096374924037870803554153458104225741255753314955115645304948564151765516183663634546688\",\"76703085666560609319365659209445044957052359500745196718269665234646121134787807938680787341023203786904308047981099228357850016602203539979246579454229078497537148799349353250167621935384193502383187510928609818011142642954550330069991570983902841318203794113898871515702445720207144863877026526025447819537396146822201819435536435835285098485990260677737192230985069824/16989892821104122916312992616665764943723222199277412857053896319814438961475117951904867066845412639236790762432996309717924037467863024360211163971190006272168845197000304328480920483651558672879967350982199768255256753110375467976246339260326422891913564151453729285191351273342206198366624882195135056176502724912849575385576554208844814085228696838834665339811027625\",\"40153831166521391225489894857551838468150576827129133168972859441122728710165233865309084872159583787083130713473702296122465319276461991457173085312407612757280915853584698420083436946976844240063731333638150599017886937783470942007376523947840104246927580254612991191040951001539641947153847776050138532219595746056076776809812/8873576113581065493273519627544307418139908640325227196912114520903505426722086265723900326735989771660987609604507503750212298754414472822477243293638486047313990878348820573874809636084574108909615044524663712495422565151340037564156235745628465172219286664653343193162657374410926171153516871765680561505768223660055617934625\",\"200736374277835272485186523480177159453030082779872429648449412313247640312479214261681899286513818912991945046297334418102711629933437654377760028476767482162031641781499114859553677502002901248124750539270235098492377826240319766677856465093871367817683734079621359186477306173620331748496369122143019303740252461824523590096923561928354020960176605008889579578495073283712/44259440065125442964014453739391594153290923937737136823355312892557975399035370631521014554980129291582486968083228888083079118116286312583989433037097397252506140224404130371160608365777625538148303917306340620019882928744151294738308047800711028158277500317134537540772759486365658024194428796846364486187105343266398338060080611643110071184992193593643605709075927734375\",\"488459049325494693259159444507437983381645757291858092983371672334043029615965882574409808932509285079401239403272414271652617474184321852388397021836909585659327974611273820676128650810907598106588433939541654215766888212287311943387232664417347883717203611092450971786083806323404432266197250919880225892099146722474124874256523/107455855466267410923480140898552598306699341366032095904938430084768624148829473848763761936703072253841751966906142283640379336131083461646777390874405323298406517250231389493084918065243079819898691146841695350589992171102939046740169198394671965069747042621265775948217054519855346617967866614303497258042439052681849864192000\",\"8430374068596413768975326329313648683222744787097373111477788794692418932056901235174019333392845529821722488982447683794746518712070635063397464904489452840169472596494433874412726723065560358405027764015273789053064830528919091414531400589850704395887250756457780868677553068164933299802944396576360356896758745030955907258232257358056931680617626606715393885378887657377280/1850480358582748412767893656294669486390769246349349706200869446679212812264400876685764762211659843658541567071977813110496329850010288179702589501255367345935389050373021591572539260951149696801665953123597521983257852207280970577287472932167362521740230973547070264273850381896786822127290397075758780174083415923482640313277341120938690594859118603017930500014640169211239\",\"58273615882491925540881784328370957720539797010816130007322211512070634295154626813477498607761260613353633996451797686143131893884559909668805628269959901044961666535533876340116728982072626875010391195372759135469446048394835148654407846242721443845351855234347422256700864370273092971804207514736924787577569355949601385705517152/12763172138328432984573837529764902730448666594097466544652830703737195804747682450548488162227364538052585484418491914323658215406327363805353540266048943197822838925184942600367647278764952826664684839953902567694832690683467635727409976388280092262839126779730168889686628630302519063225007497707028600865624133968363921915016625\",\"2685278694947152969468407055109959900160804835228466214479525891103128459065131221736713585038130737099067040196326815283171857977706979990467444622550497565521863441617001097354649972660183038850033950647594754644997436624623325003537308428828750008305464174443210079059253920383411910911594636045517662796811001285984447671371943267419151220518726940455756833040934506414133888/586864816044968996825907488721678304211296267371936463272955488077666796280028127333229453342355554450708284934221461946991556216095213627059047984199091625921432110913096253352065238765240063555347292393427726758010888546427415276046238297382474708612526770055488323003698641493939145624184943388159614111350839555141202024991876221874110644879676602924730506882384603409121625\",\"27700345710264347957758638741952394530538598225904772664391173119594616680996031886665218221392453628824570256438960349220263575741495285780845399187013582169907518462437966962923592601721119258663490655013419675469864809004562272799012227293974254329929404036071055528766397079743200179924243479370594973626764330855493789112414191/6040997839051213541001279276287478343874107660287651711609067205111574718442229224212245187655300348484144001298428958025052162253854676210451657425437588244676589965820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"80160269787574270953020489212619791839643207793889009503234879683494928396231769167082355143564723274576166638869430572977442020236299319718643894871736539109822173538266278165276591962215927816541165548699380129014840956895931285215480350321259054359835472320394089646764361802445068798451796525897304221529850133401768027469126408090577121172238802281079916258951770135485696/17444957084936455555074876721808241311651668802091828589911310253709517226715880722948267977560381436307152342821304525073651379763144281678911047276389231713860392794975453518107055568765009486973017341479560154792340888780337029481646046233967923289468141293699236815196553819373828280398488966665994092877680860643266914861837639322607761804740256920429518434353839878280875\",\"2352816897072623416220002134476921108405735955266703519252095150412419264317091785317803024028565851487861978477208755211589867803009700996828082850796103789009194767813611798769297617674631277847910238088040257037678126316866517601388289837575778165301828137259948173292658462765645645868094197736382683775415645307647043205988394700/510973411316690313485681833991645423802776865720580280058344111363363091616558230182669376841383375321912553771027107891991318313938505988903735114191313214327683449514676737796942389784957658395806951715454372568523597420866050825822028817422805046287798054682484158011143949412956697442991898914560191411624040490122951328364833797\",\"6403295584873165688372907494046202150046769667837790834896334486679541887567517050446119511695248926941383207478170182650927368177009669717288184903306689332746127845953193587519575304974203099873732502605739219028995266139383163062837007982999189114810534856227848568800302527760100163350814120545587074865568436789021082619398126713943637898657861949091545516403987546145915409024/1387794272010111535893205703999712437783041553900341112488641528986385462810448493444968969845352401058333929711237978223214186693177251566069419805757440174840170213159651962686467523533938145629444468366235554597245713128812532716616087753947246800626006504878203666972651384731498770435755225220796872155249202960801768048854869001310722927230237083418017482134588865244642658875\",\"82993247683514419570466529457059660634483860665557779709153549045427987672829778520201315148149878525274005978368939092115193636113741972236218502664881450367443614971109677363668874484696543982239492409231870942414193419634675024621942196087473557914167832058111113476295926250739099284241826553737074679953551191767148712684157318697/17950946423927357725787689855263532224005643859095168852729513034456208872420513601894508438640531171097082516559962755244698695622824386001219435651555513795509616906355363573638916895074349491513539093024980575852693293474288638209680085037286354050958859425647536735341886663074581909148323105020337857959651624760873736590065664000\",\"584891611376763781852144397260140844977346305541197362434227194779766612939978629636198589818106137319267243431810481928639442343946346034433828599323416877248326356345631611148749005937144684862502198147087702668524450709118588741606955966569427636630159793409544653944608958808602551061186799401212712216156799273254257486955348236914237644151956226336750212957092204830385441792/126256710861549838395499078249922986417488985866522660521294610280820007499099176190820291214370699289977888813109514854178180265382471972583921477022411657285850911270389720508719377071949050253246021921916685716353393018411683757067093259101151481189635423399611625009617884983318141463140199839724797412514785751549277231259345923662499623640886881048572831787168979644775390625\",\"4743054867460856425399742072925732465660626340183690464743217147109403130730445842673866624947360862438925194786600531200056131309608642363389833474026007798643235346104937733349791667694862514383520689594596660275306247615314272223660862212527346572811422915223417783887717426641317921972456913534338708745549252254865615725859881457906376/1021840037832289788284691535543138164288462770384961802287250236519983887262771944174557087207566030730743075334169628971336358708580124427857321953981475719503574867471090607795242192417162791762511940848493176847925838738242153177311649130718886794249673254183907621449520415060660496225939963471753122766421338241291756892571824984344625\",\"3784664074155769467702999785016514468281913375341134899878893061325465790589101335015569840325786070795267055386681356241209412947116340524588831510768864231937929260236754881829005065056310226407358204278658699999612596866156294195316867934035877283950841910726224355461522065773816109849107487214275801829843762482082803559183694631856772777313673086715631547326400170962722842240/813783281473223559981291694175087508812520505931454895884442580280342455516154674683217348039336712901850738745276445107477919518905155156380620466135946654952837573797479076027688866326359448543065305071605591497778941561986579230698384305536224430794233462949056326864499827444363206162251104552740175503996670997705423888382328014210171324376593090187604268086334796245552762333\",\"1946671258536842642381655747294621776070051525209940130115769153666368932042152311477746728678182920842238801763565726086459485050237860693394471644023999467670017470376746609892484192072297938254898880354014176373253875722410186683852253828299669530022166361304397631667133689128358365296701757782382475692465977794960109690362462330857/417774039698408581013003883929127512062321623871486379101498968145670269174833505080260389860863417408848209525427705249526516766731427603641806256289098209429110794311660844125377702016056984573671024035213045475132134896835814746425864304907974005950155657789157496389234919107772201305672421982198984613601511388413381215220924416000\",\"328578487723377153600821813410631465225159589727320893988991729306688663770697528156625398176929288628930496338036815910669579019719633124832162035588583242320537435554101841406566009219059042888412893352417446437227440076869427577701706713564212185163005644118869496869980925214424591264870388237079776503547314587137721633918824664946974571838634860386893404364499977966899068777016064/70382695927096628347637455030970644630942872888311870124896575877585692281624151103204551947776906510366521972834357031777287506848887607457751667816514216907338309372900327919413372044625602555866294337672022362865161523684052940126509854895320132828009551012639156341878073682501185688461720664801829933689280752623773789373199210473995823367199793407048741191786377993390965297664875\",\"2617201476921368517857942326432090876874414269689140439151907982631768946799200744678055980827789859579196832718849393046147656447672531861353456343821196812881882023188898815179947651274131166835133965629115749368441605680383605331300030886676081418867305170012032824011912531673468215561506423833911621270680104083533917562622600478548/559567121085534865189976875600841717161617153776904752351231210970240323460800785728739412474960421770806162360125774000625035522428160837855944215417821324758873127567654244465281354654299068546570789547691342609793050301258532586131013585959164719533123826201937801986942606844854123769532447570107525081084531848318874835968017578125\",\"636225736038986537559880265988431731529837451289737542395494683393492040808565905376235074534207026537145408562785279823547657299565440309510931336394031904920056464959974743525662459433889398003683078967642651812081450227654478095420306880762753401111260630654049389197602389949892636943971690212484981672010398108426002137114819838399222096538921225458913266993881960732663394566024064/135776510176793971074115131648637508758953050390591773574951317807919051619690313331192027871176160424663811116849856489187562728496099757910540362703888937768555824513740118941387831822900198029266206334350448626733139136083404404120210893986654422850183837974770675600952078956326317698998103770833069712616832650406225828969036781514645731022616236082175582937900731419575337473384125\",\"266695771933124633677367149389643417608461366874310588884377151539325854547826373711099517873721616543570605935954334944030816383858485296542260152894035979141266909050267414072982042090341712035518685997484257326212454742816979806460287972757626105526907510197321350895873473656215941034605746494172316089636216915825022339855304925515685/56811706665210352283362623728191218698295056176625217939528332247537278605113496147630185544004654583441448319260578659922931798845493756189402805173037491645434052737405379674607517658118427614090338938517963215812444779184193933749520313676564187507594274551791388039139409235056119788261689087831209441779870873305232021728002651979776\",\"3511806683161697708497547617957719390189982761002154386881580160856792742952365159764830433511949678304281539875366378131195670004345568047690216126001067194904446295336734931691743477531830892015690816210752795806120303198745685394015161323982229908105397857791180342330098240702332072396030780386362735967021055250450666535422528637737695053315137238368787607412459874094164027214953984/746741569878639983491390741637813989978804202898438708743258000150996080386381281307609038830698579358879333079215327202911977568726258527646560497079622703052765164031089590965199628534477381843079892123440214378949632707668935001371616475282883095939750704292616758568964786737752325652839226013335092148777788733453702438432279149298482004122593243860829060557386699231448957232420125\",\"499543951252504651717279461487337168721376180441322735807713499521878076780205427598086756686061009718016175215146305489885835839673419698751530207404115002383180054704927695269921072232395828258826213554806570423602966743337801741633869267620843626804016742412046844770601322513184123515405692795346790813502805238635003099976693786012816/106032986203682550514602969462803214831559442358811656484036951559991322084935692953211120289352600484987931812632505499612220494311324679562152078883141464406938524087376964935494245010636163705698220308243980789514815579319533341929989455211613890905485981353837321342730307819060825125980500975023479813757024395422041501208805339176375\",\"8540849722242122835873311629952985285477986765819584558233324868363310302206006773828897816547299245727087876984857726652932481899766510637403577175623031467933486823994040576431755172220921921877192006685053572215922347418846423419683723609799729359551828522978186208983138345476801247634773975311405913274552616037005854836040162212761099347518242200807692224460514057530656658616850816/1809694575992816440924165741094996511361288430727981159314194000585536832192004274726651828760263522962868944612215633976203596150606503849595633388319338251977160257979846235995654357082321611719654136058257458753105122024859078420173515189641515736029725847315662215778251370398007468665986604529263071981040014321717598469319370651877296085250322599247141397427185438573360443115234375\",\"51377057693118720457387330519321684810411289582445982078756989158447711080414032055843805733348558621949380554029375294451303430269197115810494758213980833379214402452992657502777067850631862453239349835215260705131864911194740832694498014048717871429797341104227759557199716944554347879767916801106279081864127192611546757627038037780244683/10867246748205139797826516105458406878398263495890048637741584969144406206902037615496936724683237700974333817527350121106320991054058406504571347680049945745432432384570515723033245430148177097144850158758462968940525568041926860856763884474605057056550146491001458649244094211354153171337463406192651150028767064600270112838159624568832000\",\"2517199821548153657910904242290029026229621935918771922146425373057248090467388430999870036608278542449661971830076845113363443421757278612394167195431759807908413353743377586893872930828548256216510734912027450642648789925142482023713336937258932978503310551945630359646777080073329099268529064437120002567758664419443374110941824106727218341795100740316967386497091058915066147604481280/531524260324016969370728057738851340792702640911631807178654723224511108065633433027773388768889035083734041289308124943130099580765995149865288328550751289346866467755881013217287175392101334538392596956248952430438673292186779006015549928829953979591250274457658042926539541422697852390294886719770034058916886894408015624288115732154492554105512936468520265305162358665491880968652687\",\"937159485027553069020805864547349554547661693803137696125140510201297417077233061462068930061915381468160677500445535971818609631674361074587732183297775728389124966713749450996643183965795829780345678634356741756033039293590264355732129789110416943789326482663579413229893878422643110852069225671783017610387570935863228248464396615988222968188/197552642195166614912991396771845374656891854357948006221100585931656016640982345159207601253599235265353060942313995345483862152489766993442419668492877390774016299878943454249209917002169480134131612530977452579520564400124908392339263545911443803619972765231094502745980083350567509014991735227390978850048088378721210219321877150756855372125\",\"5119346675109082499980756672052066247676641510661024682574296075659671743397880591881419516307292610449161239233139088348510165442597278965718490070997173182184417648987611422446347235659085092530927312760229499083348217392125906851921500360553758600756698605047197529446594606336369425040236883171542367713951500007600355406492128741649090501989105696576697387613035366083536629358444229248/1077349190930018641197987339365056771667455373500846354778079878558146320193384166982231171317419356136237346389570422332278447217033773023556383420372685049620361481309067017697564760747047839930422553324681218253359586320952896352245366885171583221864112040038531116947187482413031483309534553461613717398523132176948321964066833901215878133594739833910960843185464241840039390204295097875\",\"58469980853327028628854378052548435225264353747414624620847476036979290604604988637469977624105451959796142112200285366199247075503424204044884512269071061176877225315884188402954249683107639777479663275428465242905314418930053869461904934138752031124685541853599407727446896558064252696813370692668496452783003306386669962110734257851955001481/12284458784412533668960387046583440199646081362484321078872891438551639470826582933879934711861551014258493898870867541349962531447724393381011633785884743889445407749238183080941846528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"632694338036291086868292541736272151517212971647680989553388199374739841494700315711180961760384484042159533979873604395621016272772109619401112452105475906812313548587880899058905419220497456502543971131226430775692744506047039958551641270070996110661036371362526401525207493270590999387476275629412687473362310414634469788979236895300129227082421021999210841384596617452097273320509348159488/132710874087075221626157136110978536488168313127228703025408943153782802265472978945703742152954881438058373686972477195846162708986982742647038014147903817539418442869011995988024638278746664230046452545499722614320284478925059527086663455478374200352375121910000967044366831275681254530914306064535110528723482282501358749001657608122307686482720926189537227492041135055090784059994118192625\",\"2022422468242151190347511883185841333968390991430363660248687284021524206079162212007263606819387821055183192871951076644707111802972354128011904720586729919826758651167984507804867954970064938022106484656560866447290934136610214175516487579122328055482392137619829739560923807880779865442016530712986750711199998190148885726144596663143651240/423528009127070458603837580844559347493775236970253513203186912091140251858605354218715508091394564000304400858761758838182654201653901408046974668599216804223721114331085507752600832390227068985693006017591304916519540245902645712532993889000048992026931475754508248265356181099817467608863068068953756055334213584649136541490530849577363647\",\"150542201776735231618709653388506394887777837646651406023174643241783006776019388336318216053045300417086929061565868663031237502137150880313922488106751241006715449458736723129545400133450376339156062387859536289694727635468338235084533552501618659272047966040838509286942825414463511175531001410923014751124732748099355476332649458471135027773371541572374016038525336728276024676601778299264/31475618522527975728853391146702172347290819252268551219771201846701658848754300838383637247014705706066050673096278897933831272607774110183488615338021656923433335661890414740664480671162459271850877855521869741833030384682549648626038314686632195158507693321505500888988183270276134667071014075017317692121986144742473139078857816578133693776368882596780120407949076129685719314703426278875\",\"162664351499283182546788129866259011542529017155637405328005084357078048074065548349602626724265307733005745244338982661090506394708170105916177679714664432754153795772811389612700051002336719842784098507498286260450939289109123759859710248621544296008356071415713931721102824434964336667980062728653562369697289761913925215639430496443820411811651/33956433298509232632327667206936379248172049619640091186698677954874297837764235300806836350019565970550533206216590639008637925266405524715041372407701947953283803854153876844320283735281209725651036513491246238622967031979233265136280687995181375582844780830517825595245506321879177965868747546127685256867456319112247572348416655367667187712000\",\"27228583713734183629451808889147559240254570554044667607519238865891084165382075658707675405673276615039702916443152954157535195508033284355580742761569101934821088036084480297442018005972653124248838420021440899368869744141698556359295489470499243402799483082406238128875386939389123336303631993557844565927960009744780823166462314116039469622216263221278402673028225214534859076857413557466368/5675134787340359276387085910732530678163604187009567576895331134521132071092293139167824957253050637085885426100206370974479279292804959049999647539684766632278449357893560561608633329561385765035738071726214510832066885156767060324427330401967034889966727638276371320401053302413136551142103678412692111973028587922399670456670380189570979581674699102934733563330382821732200682163238525390625\",\"1340937726818688387636018677960518622106989311577445614347061615417831160296369500704524022869612973331444242000788110133157689786976834913297544087249593601420972111789552905846168933014570399562460789075871112224533723259660967481288525220689577290386781169316008987012566216235876842757183233207943071523447855623001920854571597886491163165150556/279054368814522483241446594911968519760869180429079780837994812436395792594449929617293503975169489945136244602350941695478861584261665582123038340824700224583170270427163469762789603657025958695551448477050958557681299495041994050951692916032501884523150972841782658389836059236040091605838583126400660344344601879969354053137568588338096589095875\",\"8910951660339249479517731530773509037034977353457185453617569046885132434552771722727442649095007828468878374139001808825741829728375370140505088133244952288239619141544661695065318568074863317054989982620944602245967155400712702259180443238473885690297281525960618905625084639870407113029712510345262279507055197024677292523214467306898573956604928730377318210588837126450942086527893437954864000/1851573255256476362977604759655284263358595254392797078730401113550522214182030016660458780180636930591149034499142464357511158868625309442843792189394292787657774627425816694628839987456477799348874853555586931850788645677998004186437300173080088839930384424797706381282430208961565555953254145002318893188197561315855286173276564036402546798318351229978103276843822345004757661005876638005274037\",\"84997663352987536417038496128111159210386455419431137931308301989414462311135708114322046234708053448098538629166672456703651524480738219822858469100454933583774404032968304328859365484249897913676382909050450855222567147661842184538302991526635974158862033287154321908483007506326807469239745851379559259262425675035790574846229470041596801343087041/17634687575122715507915388096857069366146981156897230620371714518707518105157483283253374797127075689236298114335734874553183291806268149747826050838089931351158483980735336772879045027213982661634865556129548356487722537193914986994283729746578044621115589195066212043187229606921062007047940293972381121200723292297716621231320254309060321476608000\",\"1648849257486312935416274009474520589799750757877252390543329851029437452988499485179026845292068377957697884739052491455807688429630524210823560524122596610276957537756142278585091315141096146341773982302888007751632401090642472506538817998043326415693840862261701364114923327286462650797963969289743571514890723145251583881752876340628073395708716735192690808352188867334842743895738955762067968/341580411902962140529547622267381834425264893226447658723654120920549166416114849731588552578626041597847002946105459812230979900480135423787717825697955152193526724029890829615845314765605770060975538542976523177976182401820926854406945392167140347444433885786340415437006775075196031433365827874254477351374236932624514469241634422312990555534789607377023339236417434574755566856489013828206625\",\"4899626659231633406569362199187192352933567344960498139854460545644210119722856870634652562532083546344965166340063297647520613455037240144734014575196764021102614748218834054157165781057405100578668000290493431869797883155764963238760612333048336953434663867580862692267574574465371615023999531030446250351305046572267686566999209229202587258144318592/1013522377571209303732207048597964555261512342860326827024786500686692475697570284120359840724596444209277948648863014479460188496587721578075151793081823795161404110811480269106846359964436993190293615381593756076515012514100289406862487971220020752628653845345780766244842386136740768474703009091552043945843632199999007070800871588289737701416015625\",\"362903847358088423032098939589019598036593525722040887883164115981767777873860799955715587436566233010543937498922435963385091400670303956612881974450548904906949032005878241638546734597308786514086678561900713741746905742866635779432216761799371793260025549698865319760786921444505323758235164807966277024031605673481480590193724980659448692487108892154809490199414370023696404259691299614147712/74959603173756091922435708504751461448318819548943586676159545028063979695880930926805574951275602951047845904770828900645717477098988124553474616764040938121171776556999069351772286262529729056288451037717198273521810585868307402693261479298923209587143468206907278220909447483738730657438961435587752873879244136801168836767273934997417156543866722171766794171623224855358640156858606843576125\",\"8521348154958613550574095745596657249924328336262127244827955886474742319277424381360677655239017583606851483318951440691757875270001283229585075137091617073509041644097526047127618954293881264113694362598157456878784814696577083997902588926421675843291157049153701100218784481406086810264243143337016042301806376864424632290226377881206765051896745/1757584673254145109614914862134217345456065873908262753169404848658913774363650863904627183104777337461445063704655164325930891269843669860409763569362863600932267319335889540453302785099532688264425988677082044905948179153286276609910158854349711054144968131934713419772852663860893241364433872853338630216232313607969790083448433666334742108176384\",\"1802461420562646993856730082999823508145602238125054717836501201545920604020389361370931345491160549787411668288359013059160331370751496329806488246135100776263777863399096485894306306621852596694700845918608199329091852956315870664531614358379176680326508877329862713333336188556181470928613423972314983964578645688876556351433429494008513812136152576866650152623510296911708111085518974142728903424/371238439252064016214448115231139360835481920731625321084601566992497057371416121407293286027832357816257507287295719261141426130159269433199862002841433235955835172774430690352481806933860390015899973299268361513643524088242973968537595085600335021120523852420135081643310663869327371821064862449426404044951571585406092523478861879148545678639697679215289523234342337347529225543852787599016265125\",\"88795280670112240977945082069219541902481768504536167808816453021962616596410396813316064685579412429940019071114917828928080181638058444302439626425155946562362550070187433083541414569447612195370911498321149367969974762244140788494955146280201020345849385865084095189982291190135293114489407801749533448443222584092575861096946605418438181411489276/18262596223069549313969288693970246663726147886364354584825624311486557881239003216971630599389642752648815377795018130449384513824927138566203714891090017787258920529990523519479383032564209629983810866231367438270859421572641494420831435563580050954867101292568399107965982704216434467243223964964535464624988344342084084237484262612100980519602625\",\"752911409358158070688133336918078236438086521781731735123294741731669530734909563155732092406099003582749182967246236657021875488130304108082404134004381196925042617909108654109138702993903561036987511410396567636331465803949049946947888490287210013788802287247422993384874670368649616782837096233384279817294778916419067404863458318451722971117669642134894906235066332205740872938406767767019265664/154635332883086377656813458754577288834216641577439356891585125701020579768315520324293435008561626926046988056302745604248220408154454267643222328696606367409715369481567213640103076112146615938180089303294709009813772509602954514391675152597458428326644988225555987883250642389550531163153338541870029415077982539614784206119074702022117790679351778993541426110436276530890609137713909149169921875\",\"15286089077439918584953144558775765002061832952090847117286473868694909713791678395221438112006475047633028543501632631679316850512797978594476229228325228403849089079675681042224057234415951253954044235099139983386056610384489202589484570852048157272551098909455253037561994944665563291526597323199530997923272894119350512727802414680772513760081360291/3135161418037836259442831302977219750614726139657718770206960776514822107155928800694375522572523712277389679035632531727155957120566617736817225541673148354829212969778664144907503411589126111888917929495106029890532891919001138770210977012708107496187227751496980000137223047079127096028939624830654227758737339725345681745847598157538483308068864000\",\"17723482381737693269787076798246423310802126092500438681864673375704464394105734049099094818738115345706100191580982712146882034618103161268453808819471603805345990162762722549964406042295355916458624836894291267553138041035528315839108252422478610879301656207772491548742981990469454529537049123948604931661837539943536878260665617524824604291547373872716194154198824107266275716083848262625068958720/3630091565725887087605600771358216927099748013831912080380983545872077197366172619225751217619097657405660172801849926220948413919823038425519006413005998509677472226729295278652284861834178791332630676772284971762683579047508016687969040658592436230062049051143001484384767836353233324570686249824980508520186643477313941054900197268584495128610811273834192099099592687485176400539748616360799518357\",\"39160514032490258389003214587901781721548011632821053230881239001436341012396166857515197251499460842954863342641015306304854226194551189224721257664420778416733889030680295206179109679627522113592373938602737416822981698362363553492610842201005420727750505681358595340127099855823746410663750133019743170700888375554918213182862789028531284364877435896/8009919337434786244380818390213546866794958389603666737562053423775386173149395943310276429895991903753441584557917565343673605019989336264748588735390182130334278887642569515202100870042209261561001627386525182096090194076839370589780431326097965428311786635366819094633651297179987340498215947144870164066409654464551017761658775207392803825996394875\",\"18188388167811476762477659006849121912679763597132233588170406666718758511478154418948855160838212151370453213943784067796172102916618102024199200086478021533171984254799008541948973652219533819511807681148179806051835318645591102296256347927018942348574774821478499092054497390790734798143983945096982240517058861467440217558586822663985584775920517755909444876443211404222400335500608733284461685888/3715278241795087610941547133490827711133909145414878217965273061493740719983191775105550559905283733134189195190321643965858771461560130864714477448011225816210219450040558581571206711791272284197614810026220745160693898421068168630870850392739817340370146186703867097982858560347971281142766235850971837330222970900661653800041795020382847588362774677568059355238174402415384788280852059532958121625\",\"46353430636874284402376008361176880938798775506236714098123916668545331718677407145199311191108199195405139575147933283523305343027297808443653460575141799729554209181454676876263582758919969948546918471128299522715691694855904535448703118221685887195383025133924852224568922999317583667985459047407473419196367812949579858081181660610155317911318937349/9455890179897829052705408931064120820559254220394152447502395298827357144081378513080398823188243663943177539817982481713456798757563952162598464929784370305696420245648035222083207596797327498500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"13607414211126412689435920170832779523235279308039712294681570127241403406455725064605210473923965685858012114332021572088551127762628892611459785625407107300355287623761046438724706918300976102581928643740596336865698485838431972050267114940079353996100620311097561405192365496385584164725035842307146351211183443267583872067352881387294766804298681841402861626441205037637282007810811602289501477350144/2772205947240095684743358245950494400934136973845543049938212403703005150954425087866758842625041409060217562878157900197951382737615822655863548356735553650755342108183641353142157728364469706919993519071329069805875834057743793434164720370026073143626055293058601124362130539040404491770346043977106988100969901297669523170508321703496903672333781306743488573086901583022550356345156457496396749797875\",\"23264350093315690507131500726914401771633259602904894387312742275462601574788485574913195967854009886824436237740789910851843045306673524324611130536719802717912615609109285261163220007241492964833933975789257681755002054890453747803418465119567389315754801791950553304034666399677630030683759466627797123971742061866928213780452325847848901682792886840980/4733430508316851445525799359992627142007028326865116523033957869609125212251136452396410236930025876982265915963089597825393317909648054808274488356887197933393799241941120691826916741647173843634076299630884655997401370400734954098249519111198509015387869462198674657171808841005212058822254513429836457539629035675822719720295352508916898476137111981397\",\"538960934807826161927564251064896730663918579817797131801326848839524373936888402762331254883505157846659830555799909822861853145306547699817986010353774500545305596630924815657016569444824389893996399550343022444937690798126189162954188680257730893424775303801562327757655350002001080811866451425665301674688928515041429654624970707803336800125648742168380676815769457467038849213225206824671025803392/109517448833211208909213522579666376007937648875042608355810687327424621469323788799169718267715808580775296460944943658428295481347915131091297305260674731651980547668762317138753250458639043477453950774629862540017034566407286963562574188172753764978963685535201028286359818524519980885827473904574840285411260037264057197155527809916623487144493019982419606308144576939532055057697567269576800542875\",\"24451481554350251656598350124163983489544445991992661049829014268366250968046589127810466483349378560701491445658725080497078590986743512397927747885285095846398852574219367580068049729894667374214861939897557930527646930793431512683750733092448862551580494245486308114129295467976874843852138144539250235632985676953662288536669286915983261820949386845806781/4962240683851186225340479316959605207278948397833849899236383273145853045488131674290332609876751222112917095096150531825255611911377071887145019702433883343849119017643117746273523770961304609989779231048095665388209125939879595509516490230961558353074751312876252070889983946768175488341370453053495319823381943793679003096504200440997908071027962806272000\",\"166591964685609920525429719961758335887941461052357297159523350448241484106515158310298216150030768812873781356326923214637847449893575074813991141092681107583183275003570804134461187213143832123628701876041315736048451374824101256980832991214945762266748755723551899001458245164317581617731332466039757786839492869211248064662857987111284518155462148044812626055842061283907063784492325693994911811072/33765943466859756347231737285768516240749714264564410814839966011490233598006227246396923594069488496368994857718734549787000213944990695920130591750377483911116845697231074543526982580529937081378303555262933800375576494067959129682770065443667091668104132884375840812635624862495548888467575848428463895756394050252457592540570490061561616914443009224917652440212112452400106121785938739776611328125\",\"142464729519206642943985715465196065680101634264787375740459792619754842396453535646509170066091478069799080172299369994438836484938378991283020978342879057271045033903518255546705211647900945143546293360496661466657600494787228476009216508124736254967761901224547269496682078470378676865981855568197705507111970901389105723589666709580851611656838285777566736/28839643075889294346635430272525349651555039807615358795334663734940126053968249608601725991946342449660829847322517564370606746964714098508298705743689729306507554363954348780144675937510900983622836770223945538844314468550644543502501484521561567788992156632892028591678742014134130878101553633195551605796158103033794695984958987367799607407626319024034625\",\"380457154857422076784416625436182734840012277442496600178664323821064977485271288502806124740204295811759917468598315932331219906040253463960961995849761235911145436552991677050565022181516596464968316292789048809559129516930574340710998611088996508613850407294743457197519091160170604426002924022923388338999324182261954685794522778833029950214443271526469607532589775916381786492089432407550224137344640/76922142291839859196033215395526448408989799722090330866256930898223012427332209054699494033511478050536463051459450844520020426942553107946282832072826069342120835351421637970462054707566481086202287686453371483126873188020538661871147778312986131920021929455276187425940666580158173676284545586944833678819622895550345083175685846944633982680908505900099388037050135210936852210263717185637166725605577\",\"79999800708369666670693340813609265988600461251844239982904928629083975986385235816587497657678297663151298709076884516168798694292862559083730259839524968813932151813233366175091317046758260934357096757322369138747731224414176608247605314668045838769433811781490030635374856042786947109101585097035794969502111354126773165391577217071956928171336060247633607/16154850265413610119312596299635391433380319311682208755390341659152160578366244774029302281068833963848811596545791104919556346810193385001196395489740571188884873246131813864782581356887110499639544662322008824704830818136660544673293865921754569356583698951612797219776290835161780326945625621758204931298948625885081325268123344406261740843197232316416000\",\"26517014004241498798848003208133111307300592620947908933072661812816683085261359696887064436611747292468717739609776825664344064024535028242737616786238200200498291226984541942836459188328346609549239724653950302145388877472274074665166631509490297630344351573245265440164082334092997307729007429218385933622623935704482371360985836659823269511115937443161532987660855490906546130131716829909388620539153152/5348257529530073524280989257577050878033239486885664777340947102417077875628238501791711336803418503616042922880218860266611595594400020206192599559925169589023339295256084579966533260861249529670141854632965231468533448709363477120437277477668173149958267956654411822360053335695956270719680086524322530514249891157439878407417971839744392044064720476417844056346174795601710447583861127956455406902139625\",\"71197348290771978405602732839537012310626009318133570890482364371056186523989330157966045289127980687764218363064941391483781008265266963537623770685390148810455244349859354857421474277963009857011653865476081389968122418691934354122230780300833008753686234433642072919923583176333668289998661499146617277981691372057042930131717336250309680764289256080895092/14342680993892886303954853579883363225921109635079605392320944523109187641283117181461662846411912306480691901515655220490850586434947504504317080144378185989596578890875561336496479576651516902048606328604696610314441229321219627021610788398730173161473456954861916116391687748151443335513249810808309201830214153565966339609616397865465842187404632568359375\",\"342401018754023891059352629509715357053454506037284788725127073168445189422181540408896452651232759821766616850264122591225331120588918865882061344322996688880669665450231982002597398732201789017495427566260651180470635467002453249479483900268320570004293679361696197905823690145326531180324429318916092471863347575533714871355651558610515931373080997536792242278529575700808878786732127630024064418468916608/68894647682461956089382461406499759613691148650738957016015844830333168307020284281532026442272618372290646283794122772122665531108484704223311663270836645399554940741928358317884620420886609705267248656765357348477857852684140561714900614303731786621656041881975328169543884661780531057279582784036689401206706069028229798913082362331334839997133771880514515972024899408556517159759907883793675672065360125\",\"190286571838805495686895463752492174798162827967490343625540320679760700551286395956241059969689020885714190883323266375067607282890063444652926151862650426323339187596278760962390404656342309737428214493422028545912504503974763216230927196187743439226243880933947417760147785405444976177822143722569696182520826218120595298059020305548681823408268556482981325/38242608291912408815838081993045123864617058390583394828737640036167893859507494091864963383596867701436244007905770284939991912884465101575490548813894148831966132970730263562113961685364216989999844961688441914455435934703797359360780356482629495214859917249465567846934284121032247250332634283689409883499295469118485912489058982596725212975311140618764288\",\"15345379701153714436938289567639102307887273898834051456693981514956329731572600026866162286097662958712922836383881840211072389867463987895894067288699955858337488812343674818565432780224654423872618380928462939482247900055572079914753652915184313685270722583926261499687728814560680092231526501970431280783177357735398580700300402036873780385926225005561766822479878280891130232036389707452005183370152749056/3080426623087819678602049171756961824196425548529619576972793653585089380165862889092832375934535464160425580449193072125955685099151500755278763306599307218302635233595329082702148677300945556130106197481236122437978375963261172524503625593066102601042060541617791008722569799735202779005407381267021641545644264334109052258081225159748043792288699674153722046659880085850980843460715080965607434114275256125\",\"36443601662144279337033484452272105547257065463167427418525882851507989449375452076227652634440476502702584889057376829320548464677623038648843251719168810701744338735202853412651160681259533015293997501525430222870696235141468274274064390273214484922080219643095978640300874086585386991338440415203863901714217818222666715642467237183267303214471854472286478344/7307237990148312451155090506264642657872224684879860008436735430879314349554023096366846856470375025555139219961666754780864835035902856314981482268319886395881809659368275720375576152008289949085453326722156553603358879420820012964006978808113307340321824660484441618487292138631579616351777191144073820686595597986548374588839763719082323114663844043046087375\",\"1575294930860663922843149113097927168024893739962464327016763741314068438447271326302129681931564068796631337571133444163024224071270063174829664848259482066723104251718808936762938249028582992557822551950212098797718627418782376027133576209718376784834456568694813577764300716139817031545408608110880973380162736536313173329973171844528083756524804574267826691156368696436273087171467254161930265910972517504/315498546654512047637461608750018349421492986465373840347519942494904200733840189483934245529561231604050629653992944140351106887747105945984325466452136415067807666316202346895657914393512001212656936450425268507235863153258769360296536050028695266363553141327896064944506216017933135251875087069031098099192325817395958019524956320840925176589616439477134480262100237057953933117460110224783420562744140625\",\"7692057599553133417225997786980128299372439542315125030077404519679450372805989755158000864378924877036225189784045171045139667691524763609840822628706422918926410377185494048355128046783294954373197082851501927410350313585640237550107070936498164597231431242858771457898152684298047446530220873884022213114819556822050178579707210264243087257050468000092842761/1538814487241112760739561704846381585063002784795057066438330325566843108114787083741788078680861495340026117682606689156065008672344707615420501964123121620401073675430690541617930520947170306763541251152854304975131871537939618684186766168376514664494488691311397307418298556185724993104760692216619178358268934740746932420562664234738576394742559349407744000\",\"15190836470550557926140012263310230378455340797095100474720776113765300081463960235506950799869073894127884189857505951314428810423734978025409205413789025720642609035117121385453856877706229778165533034683130064865256448444765902482146676668197546098809055341050873494446231793312407516463576380102073171090898973046611572020564659042146465345334273595086941562425006763960197801018796906114925005810069684480/3035556598829526968124942916297025416522606357010637652635799096498208643970273828496655227572100159414352020909846298817521082538898702393916708804775798552206401718323929157863173504795127180177622667376867235806208021329981136637175570409791442328468473111768140746895005561471574356889047981458002257872092408771959478275534098789982899056118498417649167444480913552548249005268380838457505944462494874581\",\"2923754549090941424546974281011770689534961442264350984393235983189168024079617848190236639328676436485460311093391982825027512234467853098757486086492333410753919927528867817406389678461354257841007722472106464785557179844602277350411593959136520732862935740433163383885526249897183805981219416420390137516812715245569037561966929572448247077578419534651990827044/583599691615378545100950777601104007812792435102945248411439102112424251478512952087517463400054567832353967731887062349496616445419782499817548928078665212077449420216892583997505908858360011413290038645573504472422610780073975450391707084016931661068694024023083417126286468909117254531307085545768412513447197205482285022417611018126886491416133665625891075125\",\"441922815213568908489589193556560586318864326425397702047965372289295962228254658331201274291697626694859414786292266008476137667843874780506886929181835469302142365772763129838217316953835831059616268288399119642314758261677639945004547833810080700127847214666763863338091523753898362699222880772298183760217731228628442782431573977490761665091005756534420789258276075174436091798475838370152192077494553263232/88113527373573049332749294663402406454524640221866407165839162576979477138694653404281889227416977618913249275712917582743426231744980461918772793673202077716234026090308791893409200158969108910565467273725064769890443408324386897017825489615600787634985397885230455168591240328585041836771921929567914891379235573982442311269392541694564675053636078990836491104116280492254795616055818375774141667319774630875\",\"91197133767962483852278456285591810579974783077874307589555559715577599604626819245000672929518645004771085106770784762994476973842713035791487204122653245797126906189270204029735872508462106527240320932458036231707311992868347221176460407003487373754014365881209649632547685657666691589606571865740595829983849941049450471212387808617247938941417000965198123059467/18163679611214677813643455199979098261849405189805364986036911945012016248297645596270602508015864371788974684317239728239847888960155365342460843559658233069613218442910226128113196984801126248862273503232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"733396724434554481470656964167233690851279923085197144879644750437402627936723531635898542414136943003236478432848965516925891956615111678444586384493883113385335463639674699443808084827715994137410743992130712903997815471369201406683862985677774155704267039224546352414417632475628136460919900347977754644214725932476856018335195927604771408949980634142255497812566866795799230501026066145434755838336990365184/145912495644159810313026420025053989609942265686388630266226856650796088768164358961644113076809511566125145395699271530802891523741636707532676065833327082092521989958971154798465784847092870457944857590623097781956884297103961713362268264159015928554707158239398721416218953003215109202771651993622244788505649098445109438104466256408060944298437033058380804126574878377874459371251056800895394904459469832875\",\"167606423853658713615749101123336326908381619586838606922565378505211386185130407423587264776519589295420758009764678759213587906216543160801059029133457062067529468464636376639307690657945597847080706144898920305379653754920571797771178341550808041652360635584401789901525709166172283390177673009483341826911179861584213314395893323035527116283758445038413646757280/33310364848744488727470761889861069993071965180756187311178124887286133554324042422503263994717993129539448310743598138364172889305532401505890384806078790034557049074169245078416704866867380089103064821732673967120808611636618526737138435792818828990403374766228037003927569643972203993263329403469747342204808360947840103843317533210523853631711601450617095736473\",\"22466735478643771803624909352181817912387732117378538284107485621001246177152644141853604633676939694208131243081227668237716194316732125445041260568403752325416203858329469477774720998849334961751541191761521224644520742691981372782009394826739249604257098248751626957528543558542443122470657230835176462612530464044652140581367666271771882198747182114685116336512604038833327707163107207664705120728068987996560512/4460342260599110071819142535903990817893424192972341872394014748315090430999224107274777695306032783105944721337053156074851240201179902835353097683269298594190456286888326067932777720561181760369783486872666974623910515795208353605697065447942804414120030678603538761538385793829787734830129764152263691296719726909633580318897787729004972323599773548689272008712427926734258913271101899780538635213826239542884125\",\"1972862002066252798837977155272535342727415329632252213508267781390870646909686724955861608046325765650407340102472833428905279473185818898693854344138403744757857928883601637909604082588338869612221777263582365745419719805587946558326048087138197694016224613118304623864709183681172362693106460535117459192992832969130895829916210933710820035479169562970982784580861/391262854245936198649509275719624152305206807261382621390946060636032376057385723427601113233050260359684153963520782285097664628279596618521963444574543409076428660874564026651742234728997339844161514273669735686516761239076529088145208958938384732800586298943281728435207452253170935715239392534815683367114290676180839217919539381651841151674859715992309727232000\",\"25408691426286653276004556426513401767718328640048945917745783225459709487487356095164164652218100925888847689099153320777389381851598236046402124684511968385325107497047025485302333503075085562533472482645023963717347867696861885363417595298751490212495932766872748125111115039311507374363000062513977436921772096443948159289707996749061007112458126301618769295162649600673247799961118662602756889448152517364992/5033870770817104909025512331238419776407331281944565644457345507262881100618908405924951559853352841154730802006750688581603270849880756026262217651685813584900300357685874044482329601894134443542753690048962260914642678445058891387041919581376195543193199307524572671344323361282633828144708683536721118910549933336800461248338059209853766305058943888965279863852107507075916981165164543199352920055389404296875\",\"616565940481577765011174617619124841631603944267256178093555235591208387588894068005162766513720546626399308168923904625210748051788652328072241494243040185611373035059619136712559505023703153194815611268503291295059648269772663939137446253437248541496631852986499688052678961495116210133458596866684413931188348798244969797973846568160999564540652111599082181871436/122025682149627484528651507368051367620578469392233875493556828623437869650284356703295836998178256875766319508797903923638967073687991229708051285605187358616531926112736402511567721889845693991963610192161413692928378708223712791930113386840109729368772998347036090902364801014045328348830748307179590755723160142468563977011700764517880467116766150322736003147125\",\"979882056834583241477188686550561625289337025747787132773853690143359657519481397575561812727394470125172272246774578404543257210124412718725081536309818383310896102958167337333430555168671327992395916735022711297435263157670501117734412587691271084981140167017421900852550822579410636184333142944411060788723653596377015359036101170054828623669169047118551010102258802465554033173968468183492058271365801755986560/193732066620504775981759812703028757608600125742477178751189607602983198559778039141192492589734277739017909889924488699372940787977794555519474807920198944109549023547259912324279741006975129518191081373554817584214941629021088206977532599055014150433581544599721903881284581257812850697423350805715586436114842183295730680490110793225514602133304729484547181740290534056445482186430729398701311563285494964645419\",\"1138059441890428903336718712159907364975959482163004276901676063186939296217569849990951930955270849692775077813359573394435924934540269310629731801376134549169322946310756738187834128956671195358413024062230774111935109203207768898525882417078119314003162592087920755572050993355843681931139257303484526223461840939880759908449181135029327442039666513325916729112853/224777393704985303260433439401503507705148576727364388720387174977154204629336985298082893443205223017966145098064861566754244624732671470935725326043491911142467178027013112527668183783450932992534517827863293825061296257420183669383719043873666284378647952385401303733274771042385666436214517205678674213118374889121542369996042313879258622144464565403138392064000\",\"614262617634904509410555695398092190166323289787703954329113412647342230855826568873946233136303566178604275296873234926652080462259552775254755109931312516616838091852915397846984381183732773411263828600108443070778861986849272794442105107285234729077818614332155890946804257724112143631642663084660012362691100872465148864413343598067567142977134846266425075195546265101720326272502009234689388355365794889444257557504/121200854655310345878069155190734381476914416893031941761756379148622591310152793328910334357724762079139509813381997287954319983165971628429295803162563856219211627796200599196263868781937234015821367575512548522790158101892507996780675863234181700253545912643548466256938936835469646114659598727592390628209362096738343417775009361678599075671154405137663077798419897932404104579113056038271753988669813988076515476125\",\"106893445531995430131837569895703697604978445859412739331042151546083234373443601923983714252801103551874986033841637079479794895452077803182698291822629713500021995241940133037200268381793282318691568234728329378829301282121562652452936297422136961147432559766896143081059518238234777055931999714973999553456547746825617168005650221542417216291412324174772893635832/21070287546583154895102927029203125577385528350171457634203261197137238923923245382493868134869009844094435068284335909266152042903157700510534904847257436666980671067329084409346149729385625108233234542133838924281113454526471855573271066865534480974484196644173270141056470857666632902827625475719738076524047736123182255306429677688129231682978570461273193359375\",\"1112742798776748551928744983308584493817112400536084744850969025063360679785378789764875076529575583792571198510306186417773101346425704969671256564494135750783642910394213727189639661184379341961737135764570942961692159177189753139209638929302928699705042832922774012622017270172331722295881412111812933593370743210214549038212395941675257558442878012136484052827439007483777859391215222647499741572327725689840850048/219121905514652575155579185322367175400669386131891843382447432851122462422992147756333729893028362013318264155489537138133372703295804002840920402482110260590055749843170064921843460498824128274420925357547023876488939786863662801268798987685503391058250902634999352652063668663245829496836853509616873246554292796823779397317819134891873583857621623143253788854530146303641400986028503534408870194989478421253057625\",\"983995170259637497940121707857673268620603982844439610076334749792119502557380361624096960070148627663305171311646851566811683351232268240169848810658089698606409195744471343416197434926513684882439596141368794175162315633192028977211909698595778839497844847281262559899914504080092844816319298286511436690429175757804604673752838786852277255064434365401871903307643705/193579499709739777577893639665643417521924510242119561765932078835121983190401762561436208758210519231103767232899529457440602166918701550386152070813526760823513884391055054076485295945972185402977095815609448651316824455250005505410192101148149284756928250258632031981439345164037318129987999546683113483700660879431801728391911161900686707231543216283304182063038464\",\"30691013076836380319652884848585431917439358375118437035944950498156836885409110087616602043242747413728866747975631727566613593257623099549583001362246649928075859944695060947434885707102684568632559339383409378997568182445019183928058902445738702610436187907199482604867148445903921474846103586253320950728989228898324829144701782792767763794895137313050381112872972806712570559942583906619373159053654481250809168128/6031936190594376585238407905469035598668211679521553144958053099463931217856780171872253258738635531385711702176347575597387389685526098889278278029314982721284691198967204664771178761416891317672705719303088746953644978471289001577698554025410820041497108311270431130911021653860874238212040640737171103823631718483572464361276703378587106311153455557896527384426327053165214814954154328483257657424873929502112904625\",\"33633002641218571027682690377239300567277297301791434890431645909447040830457253186262970747405514897340315490970846553666201190386457221846694126637998462873786334837901001833771510353365825087187582807843940479192544772559118293851131234910638705258664901225494129023244916125545283621607920983287799648992632814461828998517949449887522866259724675318233522060729654796/6603800575190864815125307817934327053530311915572323544225173935830559756077637251538096164499112411672913910767032482188570876526606118068929913515497400397562722669603861813453418621246538114872330536044519242663538662076583511078523573320035084744399535581216815034837553165853576616422592790103728141443697362408727056813977234078214386771115586436985105038873998875\",\"9090550743395453237608373761422705922989356346696677314277463900103283296889488490217663400349361962695279888433677856471792856853109469433355422802663947305503479561493033851081993247556828544308258821557994512133708656174864544457143793106703578476914924328960109390350040954158797845288786321215010324565010420734044059968931558099077932776525974187717655105951506223649947806568984848883258144616897526257038550656/1783219994432430133950472014582130883873515063182143523712063859964133099770763874744121895885645346884371273930727450069430704145915261127061538288702855011220545530326588799412076879985026006593893648911637986337776174555198865379578424838210466703683642106934154603710587408512357351455891557594977191641529451749437270208258072920514602243985184744955476557012910446023911358037761232253615162335336208343505859375\",\"396226087129511787616470716244996965529391571019620342657409150252952330537366537352182763477820160355931003174946109480036915624974500187179367618457008802667089004678925595775249725629495848146669773574395699032785024522882892752987825063933573399691764866816284097232869198405981830106568826923407996367321353003569052419999880089180418759265274331299787468134974811/77651132902382550540201641628906752945078964002822585000619340261128555048628863996784740469908853602590877726845475670110127527874088625214912598995012971630852593597027649154487264595100300180591016581254965295280089902497540043916128232871685159131211213497239568483141031137909208031392464815187505714066235868748950184065923236670418822911614780061752905170944000\",\"1288523130900767412477856952035690867153496584747510253984686336382980221603917538996138294311274357713893956725672062832264871415025750136690143411884111580335458539824573239771267043414225271729141508235839982033182605445173050590151912297720800168687369852280323356691345317649445843078291369394324862039143247087442309135074453265658730028145500871559458519282433012494054724678302957276371418936282902434203225600/252284450515080370603949213084529993395050575951188044032908270470514999880554862449223347761507020354321422785760279154913310488296485989979706208254206974075438570521939826124860483842758137231373182496438568202110337751291106165654945352183167578675508602832478752400011567482434301614269579368882858973850914513870297071866544875650189106576672289734326492492059816669288907018095832842249738081022227281715919357\",\"559506782175368748187145067236900803925823792088293851453005882621173124590368101213652371965740365119375069053747415415684193092607523211636912074219215053809881814859129515591479780669511533619258835199715146655774919418434080807837587396115955105126806762961292429904380132116986984435528307613054828929294602185927322238461491059740342387266084431988727321711184308176/109446188216864405154936682374609448082436347600301765944233278303643744736544109262794383069197271409398615846380701459882784547857821831816863216080069944818453908760476475874319791512782445408136169878207358663250499628002971644430164185578966399908622640732411885568638054229180673755690889471388585521113862492432946110902070139679164884208988489955874131206343597375\",\"365842109776085256207829452385781129402656684569922320812625438296958174120084800064669048017227033185969596458778213306152397766619692644694641677223213185977626940193107608138827771259334379895020377700759789774994800008933137569543592829220611543060189849601828342989023692876182148818363689293009174358168826340010491728715549904988196347316703985894355217235339548078187164176255405596310602921647203428200269666176/71497266937783826306774367225149833789788300609530680399994804704196212252148324552193149332755057982662844988588678159610516634667597707204818296457616315484973288944637139939912166034691155272078609876888919170894915224022982785138928008133003473320018151370486895637936102520353951511525996197267572355782608352075229547764732602557133494648237258900273354364050662921889937355682486287799239363976556848320046933875\",\"59378684894605773397070783936113244261297966863668546282887298999811950599772732377979382620766180662159460666220894896896564357533604962977968843474062092083279165837424210591042655271577974272394203253875965589611493384384257117088518521598379301169916060951350650621757237206805037261878212424267780312614942173870651684587166691539909068452932891649554575072205080763/11593916877920131260484148322810317629326850763057953025674154928920977965095141485536566217873796019006709247938019404840440511433467040918770165456925609124166970862430104329357419669175323763143377917913760028500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"440706629842402075137926797732405268015915199334341565218443748798479563505125605478061664327658137598204192554352688830679475840386882350034150077506804799859586772904929402683276898098601814091430598259347980573084686932949502809068565420937301632494387691284902026088950093888426872222813857928092871267130505744095697172494119689779474840037266295586359244899477781345249657455186847452249040895151288114085352974933708544/85971876318334010542313048056773419567285701852816309711738644074302467763075671531248793080425349570584102078764464196653843973936119037322000695949209283327606280423406302517302874806092835694196353778161663338667091195199032831587897410329509487165187753418615356836636352319310103639079123698118997500068644500893282438137614420288839230827096109835206605385673197123994357393257304049093683934224826006704198171592304125\",\"13220371178312284248107863849287558696210741535280184003301555188086761767176560823174196915070378763091889333203635784037294769747641959860810039816533609140662043493962707445564057197150603226797446933532133956054671103942520142568674339411250001585991743608723150284270101326419464088290151483823061613403673956918458456165552482913079283537536214967294211244361353060/2576683013797055224377707713704899315377379548630511095136568220145808780162671473907260623503552385384482723173913562423316997528913651044277418227616447815609873991028073011738113927961824632868956802271260292075825561646156680740323686126811928372672670917332613490241615850953660246271541592056143611581223295045062157404996958100136358649109693659623847024011265147\",\"1538372578072246705266078247950089219881197139399081643650271348770110178217959856819170325400476655944115553238940541695152110949081675985299189913515975242840473616169775880272489805123124548256666658584129873597192213080038937409046114908719298170078476325423466734429870048697383304265342125425087105698152643145531760853127801123272389134514333752173173161562273487752064850461823726948588221913540799816489566883798912/299566102446745552813544808169323270315327122249327394279467999308669285416179486075255023523726449428151807672528368606071047812907935426406886253284580296349349558797128593446316786243666290649442956134448480598303527795996222703837663605600624271807461605295956674925277658331760000117761013381199880905748188151556184620779667670278558839116983636972680749836497346863752662521197700717702790359162307617024566689271625\",\"281696937222363685333688097915539146272117417024070728031063821781398985795813333650547982965341298894634762289669256129805545549280355643122501181852136332529515756074502902204877664395456278205770206019663082511098956468724829475220996427130295010430751942126263620206886404244432409164651524408198286831329682605959881993845189585640874220032515465014097345759490750307207/54806274927935495596891312029173862473687610099325998583092091915101265393157631244775387832621032230434007486602816972765210205596482942091518459849775458089575743699797096697542306049628939919466378189656065461708686421130956996965004776108499273871055615413566043083634090083096967567965373203683231171594922347812966905149873265654962896456451681332216735396249206784000\",\"228506238533410805238253122961471637501498406104430046727793420497895852412513560203475440156216063574654372726194215013407325207763369075250819386897086702757125418327084312933061738392406321003231853349865003322697360659712771167066453430309997639548320673279964210730701373707765051246595806673865646607841876463608039111252607452843372970797479959213447237540830563469297144446069689149549515457318899981763489792/44418759813188470246596822974281932219088697005123285598909329328419879212164564561558656547678211265529803086702843380128457744445765859393426675396393053094588240457569380155526179040891009717323059641035189017918495485630657360525410506453554255734005459614858972904374739673834145083512160883402151636664208253116362089211658645312778404886460203600762546810897889629330022309705583438699250109493732452392578125\",\"2396110297187570506257836426251930521245117960980667897194680897478996322590925380310917400763581787981992131769075961259393685331523600287377841990678117113566991100720996059187144934569703045966210306282348527729533806882408323961336166190162075154579344185244957673138372347997134388801085788353482276257401005734929059700346687783400772331280644647089520646562669857652648/465370154262863030800729180763091967573522779260407615567563274096037297593764955820626213827962697601334935773802201919483657310282236100250543992334865461800976838791035335861420892967699843608855185710753433852279737724446294443337363478679601049432404435672469098850676302728116369979460222148206944323730586138087862719386327396334468302608499235112520318322763857676375\",\"1188272888075247520453568790651819187486389546755745961952033150576243575862120569399808467067800830890874391487822723879717525264875722720416173276963170672622214121308038530968291758445510982186014289745026439477197148445087614813262170975056866881909056450023324743409114115141145340480846088869807540798073417035168139476153897066325127540609756310068558610112731607522096096821938163134080426356894899245575410494080/230586762395914863625709048789913840511134004337945700368117795195769576856434588144361459740833007125516905017415184787078710001969815416281381427387949263792200577791644278234661952852149216540491852757174842146376788280677956350901082838474705227642420261641783722891948710833898248566893322144435457967452449965772543077421407816225704952270697016152452032506898311260979594550143344971416786595888053149375287120733\",\"1072184299258468249004114536023934869518152618369895613271618698908405514630154819453979477077738526673716264830106745031385951736108376866253955319711026042389282009348594845497252059906901748860111986811345742998968284077119165082435598381810306691078037018432766116865792677955520465319184311529667642995217214507658693259694586107847099911341219913576038605872218680562047/207882129535607118520818565811162643811811563516006836924341123976848022970024793004700710992938987476728640943834012473687892481059618823520721737479364352887178017866425027953255856440099446112508663603319745066750522936408781591578321031173620445865113295407603090322283539974563690157418931060565698315406021569491751612761888641141446406531645379264720684248398299136000\",\"158094023904374464057702010126993231151433474361820266584020400101533651587072432728050776506672527718975042616651177034635188178967462982926261516748842073587981953038445977514446838733557926696939591069712397947055261777416704028506441173540338327591514650398349069348381309688677335132100441905603664282735310299686268721634369502296867409514777359935022301425165750780988231639828675424239931533849896744198012747670272/30626384366513923671063955469537776291182594080083494737341604579575446319190916924682809546024369330706012653799783122328775875399363759308193432327358837772825609356553955350401725689682838701996446404559005896479618311357573203081153855961484398360670837599853294627153740224543175497655414585918231215639906924313779933211774291565425360415684556655021031131349317390382320286092667852173815259422737956767922154798375\",\"12216278924286401897470540169822542417611356797676160128176706721343511598951866107858729405615631246003458062949723290192242594609994613705183460814797527214549142043573863947658832694800184691222426521703728394203722420336773310908687071670107794543022567943478843065246011544888390757810534211554666736239506503613750756246364621509359804902243487113673014588325806249988332/2364584127734680580481708368927921125934330000162935118371174269642831409084634375654239735054363928748162229294829526339927907778510530444646754603322373712788147193691037688552857183116332292048731726305451516954679277320777955342295564000586923227775208580772868590742136150431152495718132142742153643081187691849828217592954519485869135930755646768375299870967864990234375\",\"578939195017447864385837341975558679292903716580114421030538728778491606282153588930983966100514147976321305616196463174070345884292672842497715966933722088536619333912687108737657068701352918582656105418491672377271304970407730786932913490869797471081081431072836814581099271832696990064828717287258860166842791984158634684078346453202928137987930328826212011774670396356151265781053547412633310327737900786639842674288716416/111966291649651600701875186827360807558960817589719096407887999108024557254221008849510152469119211567152616745769256123968832250104006560061907741567034087109512483357851919402017950812795426393415409198268246337542639470834168040295134130657073201020340432236723824670803498949071870597039309004562024033656488150406105175401372709011082725359382691270659245312133919518760328422827067578306005644825927050994860723405473375\",\"8041514821545833865350873212853873042112343327573364523948780030849543753072688526717886590013028227714585965095216381829914996539132359247488639692828639170075726301411777307168737667077730792892326979446426349813642680537699905651125068091362135055902152994216233622733424128982011248923051410141033146604688083721413402395290842738021365861670415833356403364696759583009635/1553937833499559104910551811592138833189892464446761247731330672284191313590708439680460540329836344767557599746234213006493842842879398684745864919973051635127080738612248150108793397855113122368507483429209127035263504194847798809612278864438287815470711036548695032421148125849669175729331459149833945183228413961985381338162155596008680906676498435954178226973272371625984\",\"12059659399309169167301353842123191409306995788633965680414620302285606896146667751472818541537183787935352700725982053536032930866708413010971856856768384974849695774437178790890015242323873769697407411558706626105140596160049735605389301414460825674631122462760014451298494875244754354054447697502521388381253293175367558014453865905104467382184997528879171136492277222127399012368677604910497789360212571238146627048080568400384/2328494054002703067219004484782931471919751585969487160602269605916676223315055450845942763690581877771159615428854802721943114463834992106300185328876910271612375509166975628540839858771078495267566008071532876816826751069408153323840515037497664871689085370699991860738368371510578076683395101062439493831773194498579620513073693022191702398601471237166387045790480861932005012807234071429628725981935147069738988682858417182625\",\"683009426705008850682549700382901603742691705123356866338951397347368059105140826655486518416578697931244347554322654428162554903861783227680935341690740579867651545205562690172425016836559678937794312287639193745517811234257062356826622207475918293015140472942579713388671782202262396642735640315948612572908444501108579457520714632371056288874351015666995549139003946314085696/131769214246522869780429817236150406548549044658474416909806179734873399109656411633488099249198882165279745627038984487365589625562901914030850178330133080409420340227179447548044572594184601425691821617928130423410997853384425373999967759499571890326740433081063424903098252502791477854302204200941376983295622430177445507316706609802292121282957519571162158620971952084486375\",\"1418116259749091420309271913909337143756589314597557128553117870573928055109322864794169592355058370891251425125187770724828108988587888087023982451205475980371440423992838481547236638456717520835668859093413956339261802305597694403381021863258753441889536361061407579332570493634254542013337999844407181346815549594836374497512447969751514466481466717590255369810506813543577735080228718660747940956248427356785784199073569408/273368882980516556922532339653303822104510203916024760371844491705599093435133738774975538364241630079468712981056336655766117378160822393876348755370711942273876284944422610974149712212944211513462921649872232656449940987552227525504529710373144228818606127541937831103642415534318303187393593236209298242574677293352798419428712873685798636474667204083938875672934235816396371477146089168375198141802684403955936431884765625\",\"546411077581845999248238069684194831621691193366466972898628141511422317954477211865167402284211971296286346492698354214043840080181702652132835681239302798339667835439189275457116051279366194551632712819028177402221815140045210690908631767786711675029194359998826252332434573121740830827417293557234891406021102083555472155479148332697839972702631641910213821827820374586459319/105246945889799140338072754365901705544530661781295362563214285953881890233987516230568663143342952799036341701952267011236663118111226623815975847494372076420199418712941018288738590264475520229651370015377608638075866459684692488079223686296541020897904588347083045723167762682959422858996673894180805702299907478685374065593161226849447131100462022089783265346597553176576000\",\"2398330640958841474772606439916070050977544535580605737383995160447105736276950196885906408317628083110923322157113892928963237845914017845444295040924101784423382681801754191301860383927129006953354739240926643562987838836997453985855576402628166875869041032631651591871962852884189548538272285387092843044669499688035134181859376665409767886188304314888753894905317929877238322615838524354191263502347881033855441181420399360/461588070868590122892265681879734295007029130965626060552783760068897000195207878227714842617470320231527222074701444349530952699708435668339712860464533455345665068841333232359698449088497137068713309811942968433868609329301082001752617420002377892756821532220676085014874112083615054550278903960627185675459015343606391094523511117705747842645927349130302549554534056269331809016770715819934970200483161548527932617036185253\",\"6041015879424725383006424536130409209607854044642113747266098198777011981328765528361630516108680392500990580908509403483891763219659726090675140672989657743882183951954294745396417829943469201306594018454995862321821016087416840247422350906412007336103086620396467456181771583200365740253389107968122850063607085957109965406634738740996318415514360956028575560979203447735121436/1161752799109428422288020947061281540989708937450568100764830251908850596717606701047413407636907934320789870175907792017513896999208892282137299070761467096211814586909598705615312819596495636017728313513520193786266452836805291464826226833593878504804389728477191170027729963773716267868284479768397603444919008915279522376004326398403851684761808785381609370767169521034383625\",\"13240077436443988749179508462267267187169441948722358165090554769250505713747934643200804819418670147225695324432684266924694524337920816452346599774452681831320005286326986675907899608537972384924882996757503264622991355949039882526389342174307168805166215838138277557052303430492669193939212362638263582899713198716541723383138016564027766560215944409353427176135895982596327685665844815618402881202645610620284792793420780517248/2544223084468158291883698813309541801455311468982232546872485444308211415529998472787377800559884210837213042932180479090277285630234238711851480232520137856848809986631784843528381778520727465146661792797924458540957133423665746229799675650290296217658444899605236550972043549278128087645211909479009099766619355677984218929672461506691980442071860591767266913041147587815452007726513853820116629482732060593116624596368806566625\",\"1953999166296955830935495158735359200362904181792947794529339487489730042568305997099959302322956898299616194932283060554261566410988618045107398092345476532371402134206635235570281738377188438407703089325315446371127042537576093536896282955524842632708645655481028161471313608974238110718242273935956977555610147714316158486553633871312187084618154014921190595222799283957140353/375191165084882521037046014569185165885459082629136124177286500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"];if(t[e])return Fe.quick.apply(null,t[e].split(\"/\"));e=new Fe(e);for(var n=new Fe(0),r=e.subtract(new Fe(1)),i=e.add(new Fe(1)),s=0;s<80;s++)var o=new Fe(2*s+1),a=Te.bigpow(r.divide(i),o),a=o.clone().invert().multiply(a),n=n.add(a);return n.multiply(new Fe(2))},factorial:function(e){var t=e%1==0;if(t&&e<0)return NaN;if(!t)return Te.gamma(e+1);for(var n=1,r=2;r<=e;r++)n*=r;return n},dfactorial:function(e){if(ue(e)){var t=e%2==0,n=t?e/2:(e+1)/2,r=new Fe(1);if(t)for(var i=1;i<=n;i++)r=r.multiply(new Fe(2).multiply(new Fe(i)));else for(i=1;i<=n;i++)r=r.multiply(new Fe(2).multiply(new Fe(i)).subtract(new Fe(1)))}else r=Math.pow(2,(1+2*e-Math.cos(Math.PI*e))/4)*Math.pow(Math.PI,(Math.cos(Math.PI*e)-1)/4)*Te.gamma(1+e/2);return r},GCD:function(){for(var e=a([].slice.call(arguments).map(function(e){return Math.abs(e)})).sort(),t=Math.abs(e.shift()),n=e.length;0<n--;)for(var r=Math.abs(e.shift());;){if(0===(t%=r)){t=r;break}if(0===(r%=t))break}return t},QGCD:function(){for(var e=[].slice.call(arguments),t=e[0],n=1;n<e.length;n++){var r=e[n],i=t.isNegative()&&r.isNegative()?-1:1,t=r.gcd(t);i<0&&t.negate()}return t},LCM:function(e,t){return e*t/Te.GCD(e,t)},pow:function(e,t){return e<0&&Math.abs(t)<1?1/t%2==0?NaN:-Math.pow(Math.abs(e),t):Math.pow(e,t)},factor:function(e){e=Number(e);var t=Math.sign(e);e=Math.abs(e);var n,r=Te.ifactor(e),i=new De;for(n in i.symbols={},i.group=Z,r){var s=new De(1);s.group=B,s.value=n,s.power=new De(r[n]),i.symbols[n]=s}return i.updateHash(),1===e&&(i=new De(e)),t<0&&i.negate(),i},sfactor:function(e,t){t=t||{};var n=Math.floor(Math.sqrt(e));o[o.length-1]<n&&e<1e6&&u(n);for(var r=o.length,i=0;i<r;i++)for(var s=o[i];e%s==0;)e/=s,t[s]=(t[s]||0)+1;return 1<e&&(t[e]=1),t},ifactor:function(a){var t=new S(a);if(\"0\"===(a=String(a)))return{0:1};var e=(a=new S(a)).sign?-1:1;a=a.abs();var n={};if(a.lt(\"65536\"))n=Te.sfactor(a,n);else{var r=function(e){e.isPrime()?n[e]=(n[e]||0)+1:n=Te.sfactor(e,n)};try{for(var u=1e3,l=0;!a.abs().equals(1);){if(a.isPrime()){r(a);break}var i=function e(t){for(var n=new S(t),r=2,i=new S(t),s=new S(1);s.equals(1);){for(var o=0;o<=r&&s.equals(1);o++){if(l++>u)throw new Error(\"stopping\");i=i.pow(2).add(1).mod(a),s=S.gcd(i.minus(n).abs(),a)}r*=2,n=i}return s.equals(a)?e(t+1):s}(2);r(i),a=a.divide(i)}}catch(e){n={},r(t)}}return-1==e&&(e=c(q(n)),n[\"-\"+e]=n[e],delete n[e]),n},boxfactor:function(e,t){t=t||200;for(var n,r,i=Math.floor(5/12*e),s=0,o=!1;n=Math.floor(e/i),0!=(r=e%i);){if(o)return[e,1];i=Math.max(r,i-r),o=t<++s}return[n,i,s]},fib:function(e){var t=Math.sign(e);e=Math.abs(e);for(var t=ge(e)?t:Math.abs(t),n=0,r=1,i=1,s=2;s<=e;s++)i=n+r,n=r,r=i;return i*t},mod:function(e,t){return e%t},integer_part:function(e){return Math.sign(e)*Math.floor(Math.abs(e))},simpson:function(e,t,n,r){function i(e,t,n){var r=e(t);return r=isNaN(r)?e(1===n?t+1e-12:t-1e-12):r}r=r||1e-4;var s=Math.abs(Math.floor((n-t)/r));s%2!=0&&s++;for(var o=(n-t)/s,a=i(e,t,1),u=!1,l=t+o,c=1;c<s;c++)a+=(u?2:4)*i(e,l,1),u=!u,l+=o;return(a+i(e,l,2))*(o/3)},num_integrate:function(t,n,r,e,i){if(i<0)throw new Error(\"max depth cannot be negative\");function s(e,t,n,r,i){var s={maxDepthCount:0,nanEncountered:!1};void 0===r&&(r=1e-9),void 0===i&&(i=45);var o=e(t),a=e(.5*(t+n)),u=e(n),r=function e(t,n,r,i,s,o,a,u,l,c,p){if(p.nanEncountered)return NaN;var f,h,m,g=r-n,d=t(n+.25*g),v=t(r-.25*g);if(isNaN(d))p.nanEncountered=!0;else if(isNaN(v))p.nanEncountered=!0;else if(a=((h=(m=g*(i+4*d+s)/12)+(f=g*(s+4*v+o)/12))-a)/15,!(p.maxDepthCount>1e3*l))return l<c?(p.maxDepthCount++,h+a):Math.abs(a)<u?h+a:(m=e(t,n,g=n+.5*g,i,d,s,m,.5*u,l,c+1,p),isNaN(m)?(p.nanEncountered=!0,NaN):(c=e(t,g,r,s,v,o,f,.5*u,l,c+1,p),isNaN(c)?(p.nanEncountered=!0,NaN):m+c))}(e,t,n,o,a,u,(o+4*a+u)*(n-t)/6,r,i,1,s);if(0<s.maxDepthCount&&ee(\"integrate-adaptive-simpson: Warning: maximum recursion depth (\"+i+\") reached \"+s.maxDepthCount+\" times\"),s.nanEncountered)throw new Error(\"Function does not converge over interval!\");return r}var o;try{o=s(t,n,r,e,i)}catch(e){return Te.simpson(t,n,r)}return me(o,12)},Ci:function(e){for(var t=0,n=1;n<20;n++){var r=2*n;t+=Math.pow(-1,n)*Math.pow(e,r)/(r*Te.factorial(r))}return Math.log(e)+.5772156649015329+t},Si:function(e){for(var t=0,n=0;n<20;n++){var r=2*n;t+=Math.pow(-1,n)*Math.pow(e,1+r)/((1+r)*Te.factorial(1+r))}return t},Ei:function(e){if(0===Number(e))return-1/0;for(var t=0,n=1;n<30;n++)t+=Math.pow(e,n)/(n*Te.factorial(n));return.5772156649015329+Math.abs(Math.log(e))+t},Shi:function(e){for(var t,n,r=0,i=0;i<30;i++)n=1+(t=2*i),r+=Math.pow(e,n)/(n*n*Te.factorial(t));return r},Chi:function(e){var t=function(e){return(Math.cosh(e)-1)/e};return Math.log(e)+.5772156649015329+Te.num_integrate(t,.002,e,.001)},Li:function(e){return Te.Ei(Te.bigLog(e))},gamma_incomplete:function(e,t){for(var n=e-1,r=0,t=t||0,i=0;i<n;i++)r+=Math.pow(t,i)/Te.factorial(i);return Te.factorial(n)*Math.exp(-t)*r},step:function(e){return 0<e?1:e<0?0:.5},rect:function(e){return.5===(e=Math.abs(e))?e:.5<e?0:1},sinc:function(e){return e.equals(0)?1:Math.sin(e)/e},tri:function(e){return 1<=(e=Math.abs(e))?0:1-e},nthroot:function(e,t){if(e instanceof Fe||(e=new Fe(e.toString())),(t=!(t instanceof Fe)?new Fe(t.toString()):t).equals(1))return e;var n=e.divide(new Fe(2)),r=new Fe(1e-15),i=t.clone().invert(),s=t.subtract(new Fe(1));do{var o=Te.bigpow(n,s),a=i.multiply(e.divide(o).subtract(n)).toDecimal(25),o=Fe.create(a);if(u)break;var n=n.add(o),a=o.toDecimal(),u=!!l&&l===a,l=a}while(o.abs().gte(r));return n},sqrt:function(e){var t,n,r;e instanceof Fe||(e=new Fe(e));var i=0,s=!1,o=new Fe(1e-20),a=e.divide(new Fe(2));do{if(1e3<i)throw new Error(\"Unable to calculate square root for \"+e)}while(a=a.add(e.divide(a)).divide(new Fe(2)),a=new Fe(a.decimal(30)),t=e.subtract(a.multiply(a)),r=!!n&&n.equals(t),(t.clone().abs().lessThan(o)||r)&&(s=!0),n=t,i++,!s);return a}};function Pe(e,m,t,n){var r=\"hash\"===m,g=void 0,i=r?void 0:m,s=\"decimal\"===i||\"decimals\"===i;function o(e){switch(m){case\"decimals\":case\"decimal\":return g=g||function(e){return!1},e.valueOf();case\"recurring\":g=g||function(e){return-1!==e.indexOf(\"'\")};var t=e.toString();if(0===(f=/^-?\\d+(?:\\/\\d+)?$/.exec(t)).length)return t;var n=f[0].split(\"/\"),r=!1,i=Number(n[0]);i<0&&(i=-i,r=!0);var s=(s=Number(n[1]))||1,o=10*(i-(h=Math.floor(i/s))*s);for(h=h.toString()+\".\";o&&o<s;)o*=10,h+=\"0\";for(var a=\"\",u=[],l=0;;){if(void 0!==u[o])return(r?\"-\":\"\")+(h+a.slice(0,u[o])+\"'\"+a.slice(u[o])+\"'\").replace(\"'0'\",\"\").replace(/\\.$/,\"\");var c=Math.floor(o/s),p=o-c*s;u[o]=l,a+=c.toString(),l+=1,o=10*p}case\"mixed\":g=g||function(e){return-1!==e.indexOf(\"/\")};t=e.toString();if(0===(f=/^-?\\d+(?:\\/\\d+)?$/.exec(t)).length)return t;var n=f[0].split(\"/\"),t=new S(n[0]),f=new S(n[1]);f.equals(0)&&(f=new S(1));var t=t.divmod(f),h=t.quotient,f=t.remainder,t=\"-\"===n[0][0]||h.equals(0)||f.equals(0)?\"\":\"+\";return(h.equals(0)?\"\":h.toString())+t+(f.equals(0)?\"\":f.toString()+\"/\"+n[1]);case\"scientific\":return g=g||function(e){return!1},new T(e.valueOf()).toString(F.SCIENTIFIC_MAX_DECIMAL_PLACES);default:return g=g||function(e){return-1!==e.indexOf(\"/\")},e.toString()}}if(s&&void 0===n&&(n=16),ne(e)){var a,u,l=\"\",c=\"\",p=\"\",f=e.group||t,h=e.value;switch(r||(\"-1\"==(a=o(e.multiplier))&&\"-1\"===String(e.multiplier)&&(p=\"-\",a=\"1\"),\"1\"!=a&&(l=a),\"1\"!=(u=e.power?o(e.power):\"\")&&(c=ne(u)?Pe(u,i):u)),f){case D:var l=\"\",d=n&&s?e.multiplier.toDecimal(n):o(e.multiplier),h=\"-1\"==String(e.multiplier)?\"1\":d,c=\"\";break;case j:h=e.collectSymbols().map(function(e){e=Pe(e,i,t,n);return e=\"0\"==e?\"\":e}).sort().join(\"+\").replace(/\\+\\-/g,\"-\");break;case X:h=e.collectSymbols().map(function(e){e=Pe(e,i,t,n);return e=\"0\"==e?\"\":e}).sort().join(\"+\").replace(/\\+\\-/g,\"-\");break;case Z:h=e.collectSymbols(function(e){var t=e.group;return(t===j||t===X)&&e.power.equals(1)&&e.multiplier.equals(1)?E(Pe(e,i)):Pe(e,i)}).join(\"*\");break;case V:var v=e.previousGroup,d=e.power.group;v===j&&(h=e.collectSymbols(Pe,i).join(\"+\").replace(\"+-\",\"-\")),v===D||v===G||v===H||r||(h=E(h)),d!==X&&d!==Z&&d!==j&&\"1\"==e.power.multiplier.toString()||!c||(c=E(c))}f===H&&(h=e.fname+E(e.args.map(function(e){return Pe(e,i)}).join(\",\"))),f===H&&e.fname in M&&(a=Pe(e.args[0]),u=Pe(e.args[1]),e.args[0].isComposite()&&(a=E(a)),e.args[1].isComposite()&&(u=E(u)),h=a+M[e.fname]+u),c&&f!==V&&g(c)&&(c=E(c)),((f===X||f===j)&&(l&&\"1\"!=l||\"-\"===p)||(f===Z||f===X||f===j)&&c&&\"1\"!=c||!r&&f===B&&-1==h||e.fname===$)&&(h=E(h));var w=p+(l=n&&(\"decimal\"===m||\"decimals\"===m&&l)?me(l,n):l);if(l&&g(l)&&(w=E(w)),l&&(w+=\"*\"),c=c<0?E(c):c){if(\"e\"===h&&F.E_TO_EXP)return w+\"exp\"+E(c);c=F.POWER_OPERATOR+c}f=w+(h=f===V&&\"-\"===h.charAt(0)?E(h):h);return(f=e.parens?E(f):f)+c}if(re(e)){for(var y=e.elements.length,w=[],b=0;b<y;b++)w.push(e.elements[b].text(m));return\"[\"+w.join(\",\")+\"]\"}try{return e.toString()}catch(e){return\"\"}}function ke(e){if(g(e))return[e];for(var t=e,n=1,r=[];n<t;){var i=e/n,s=Math.floor(i);if(i-s<=2220446049250313e-31&&1<n){if(g(n)&&(-1===o.indexOf(n)&&o.push(n),r.push(n)),g(s)){r.push(s);break}t=s}n++}return r.sort(function(e,t){return e-t})}function O(e){this.symbol=e}function T(e){return this instanceof T?((e=String(void 0===e?0:e)).startsWith(\"-\")?(this.sign=-1,e=e.substr(1,e.length)):this.sign=1,T.isScientific(e)?this.fromScientific(e):this.convert(e),this):new T(e)}function T(e){return this instanceof T?((e=String(void 0===e?0:e)).startsWith(\"-\")?(this.sign=-1,e=e.substr(1,e.length)):this.sign=1,T.isScientific(e)?this.fromScientific(e):this.convert(e),this):new T(e)}function Fe(t){if(t instanceof Fe)return t;if(void 0===t)return this;try{if(ue(t))try{this.num=S(t),this.den=S(1)}catch(e){return Fe.simple(t)}else{var e=t instanceof k?Be.quickConversion(t):Be.convert(t);this.num=new S(e[0]),this.den=new S(e[1])}}catch(e){return Fe.simple(t)}}function De(e){var t=\"Infinity\"===e;return this instanceof De?(e instanceof k&&(e=e.toString()),/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(e)||e instanceof k?(this.group=D,this.value=l,this.multiplier=new Fe(e)):(this.group=G,m(e),this.value=e,this.multiplier=new Fe(1),this.imaginary=e===F.IMAGINARY,this.isInfinity=t),this.power=new Fe(1),this):new De(e)}function P(){var C=this,n={},o={names:[],actions:[]};function x(e,t){this.start=e,this.end=t}function L(){this.elements=[]}function A(e,t,n){if(this.type=t,this.value=e,void 0!==n&&(this.column=n+1),t===A.OPERATOR){var r,i=E[e];for(r in i)this[r]=i[r]}else t===A.FUNCTION&&(this.precedence=A.MAX_PRECEDENCE,this.leftAssoc=!1)}x.prototype.isConstant=function(){return this.start.isConstant()&&this.end.isConstant()},x.prototype.text=function(){return Pe(this.start)+\":\"+Pe(this.end)},L.prototype.append=function(e){this.elements.push(e)},L.prototype.getItems=function(){return this.elements},L.prototype.toString=function(){return C.pretty_print(this.elements)},L.create=function(e){var t=new L;return e&&t.append(e),t},A.prototype.toString=function(){return this.value},A.prototype.toString=function(){return this.is_prefix?\"`\"+this.value:this.value},A.OPERATOR=\"OPERATOR\",A.VARIABLE_OR_LITERAL=\"VARIABLE_OR_LITERAL\",A.FUNCTION=\"FUNCTION\",A.UNIT=\"UNIT\",A.KEYWORD=\"KEYWORD\",A.MAX_PRECEDENCE=999,this.classes={Collection:L,Slice:x,Token:A};var b={prec:void 0,cos:function(e,t){var n=C.parse(Math.cos(e)*Math.cosh(t)),t=C.parse(Math.sin(e)*Math.sinh(t));return C.subtract(n,C.multiply(t,De.imaginary()))},sin:function(e,t){var n=C.parse(Math.sin(e)*Math.cosh(t)),t=C.parse(Math.cos(e)*Math.sinh(t));return C.subtract(n,C.multiply(t,De.imaginary()))},tan:function(e,t){var n=C.parse(Math.sin(2*e)/(Math.cos(2*e)+Math.cosh(2*t))),t=C.parse(Math.sinh(2*t)/(Math.cos(2*e)+Math.cosh(2*t)));return C.add(n,C.multiply(t,De.imaginary()))},sec:function(e,t){t=this.removeDen(this.cos(e,t));return C.subtract(t[0],C.multiply(t[1],De.imaginary()))},csc:function(e,t){t=this.removeDen(this.sin(e,t));return C.add(t[0],C.multiply(t[1],De.imaginary()))},cot:function(e,t){t=this.removeDen(this.tan(e,t));return C.subtract(t[0],C.multiply(t[1],De.imaginary()))},acos:function(e,t){var e=this.fromArray([e,t]),t=C.pow(e.clone(),new De(2)),t=C.expand(t),t=C.multiply(R(C.subtract(new De(1),t)),De.imaginary()),t=O(C.expand(C.add(e.clone(),t)));return C.expand(C.multiply(De.imaginary().negate(),t))},asin:function(e,t){return C.subtract(C.parse(\"pi/2\"),this.acos(e,t))},atan:function(e,t){if(e.equals(0)&&(t.equals(1)||t.equals(-1)))return C.parse(`${De.infinity()}*${F.IMAGINARY}*${t}`);var e=b.fromArray([e,t]),t=C.expand(C.multiply(De.imaginary(),e.clone())),e=O(C.expand(C.subtract(new De(1),t.clone()))),t=O(C.expand(C.add(new De(1),t.clone())));return C.expand(C.multiply(C.divide(De.imaginary(),new De(2)),C.subtract(e,t)))},asec:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.acos.apply(this,t)},acsc:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.asin.apply(this,t)},acot:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.atan.apply(this,t)},cosh:function(e,t){var n=C.parse(Math.cosh(e)*Math.cos(t)),t=C.parse(Math.sinh(e)*Math.sin(t));return C.add(n,C.multiply(t,De.imaginary()))},sinh:function(e,t){var n=C.parse(Math.sinh(e)*Math.cos(t)),t=C.parse(Math.cosh(e)*Math.sin(t));return C.add(n,C.multiply(t,De.imaginary()))},tanh:function(e,t){var n=C.parse(Math.sinh(2*e)/(Math.cos(2*t)+Math.cosh(2*e))),e=C.parse(Math.sin(2*t)/(Math.cos(2*t)+Math.cosh(2*e)));return C.subtract(n,C.multiply(e,De.imaginary()))},sech:function(e,t){t=this.removeDen(this.cosh(e,t));return C.subtract(t[0],C.multiply(t[1],De.imaginary()))},csch:function(e,t){t=this.removeDen(this.sinh(e,t));return C.subtract(t[0],C.multiply(t[1],De.imaginary()))},coth:function(e,t){t=this.removeDen(this.tanh(e,t));return C.add(t[0],C.multiply(t[1],De.imaginary()))},acosh:function(e,t){var n=this.fromArray([e,t]),e=R(C.add(n.clone(),new De(1))),t=R(C.subtract(n.clone(),new De(1)));return C.expand(O(C.add(n,C.expand(C.multiply(e,t)))))},asinh:function(e,t){e=this.fromArray([e,t]),t=R(C.add(new De(1),C.expand(C.pow(e.clone(),new De(2)))));return C.expand(O(C.add(e,t)))},atanh:function(e,t){var e=this.fromArray([e,t]),t=O(C.add(e.clone(),new De(1))),e=O(C.subtract(new De(1),e));return C.expand(C.divide(C.subtract(t,e),new De(2)))},asech:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.acosh.apply(this,t)},acsch:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.asinh.apply(this,t)},acoth:function(e,t){t=this.removeDen([e,t]);return t[1].negate(),this.atanh.apply(this,t)},sqrt:function(e){var t=e.realpart(),n=e.imagpart(),e=De.hyp(t,n),t=C.add(t.clone(),e),e=R(C.multiply(new De(2),t.clone()));return C.add(C.divide(t.clone(),e.clone()),C.multiply(C.divide(n,e),De.imaginary()))},log:function(e,t){var n=O(De.hyp(e,t)),e=F.USE_BIG?De(k.atan2(t.multiplier.toDecimal(),e.multiplier.toDecimal())):Math.atan2(t,e),e=C.parse(e);return C.add(n,C.multiply(De.imaginary(),e))},erf(e,t){return C.symfunction(\"erf\",[e])},removeDen:function(e){var t,n=ae(e)?(t=e[0],e[1]):(t=e.realpart(),e.imagpart()),e=Math.pow(t,2)+Math.pow(n,2);return[C.parse(t/e),C.parse(n/e)]},fromArray:function(e){return C.add(e[0],C.multiply(De.imaginary(),e[1]))},evaluate:function(e,t){var n,r,i=e.power.sign();return e.power=e.power.abs(),e.power.greaterThan(1)&&(e=C.expand(e)),r=i<0?(n=(r=this.removeDen(e))[0],r[1]):(n=e.realpart(),e.imagpart()),n.isConstant(\"all\")&&r.isConstant(\"all\")?this[t].call(this,n,r):C.symfunction(t,[e])}},I=this.trig={cos:function(e){if(e.equals(\"pi\")&&e.multiplier.den.equals(2))return new De(0);if(F.PARSE2NUMBER){if(e.equals(new De(F.PI/2)))return new De(0);if(e.isConstant())return F.USE_BIG?new De(k.cos(e.multiplier.toDecimal())):new De(Math.cos(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"cos\")}if(e.equals(0))return new De(1);var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier.abs();return e.multiplier=i,e.isPi()&&e.isLinear()&&(ue(i)?t=new De(ge(i)?1:-1):(Number(i.num),2===(i=Number(i.den))?t=new De(0):3===i?(t=C.parse(\"1/2\"),n=!0):4===i?(t=C.parse(\"1/sqrt(2)\"),n=!0):6===i?(t=C.parse(\"sqrt(3)/2\"),n=!0):t=C.symfunction(\"cos\",[e]))),!n||2!==r&&3!==r||t.negate(),t=t||C.symfunction(\"cos\",[e])},sin:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return e%Math.PI==0?new De(0):F.USE_BIG?new De(k.sin(e.multiplier.toDecimal())):new De(Math.sin(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"sin\")}if(e.equals(0))return new De(0);var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier.sign(),s=e.multiplier.abs();return e.multiplier=s,e.equals(\"pi\")?t=new De(0):e.isPi()&&e.isLinear()&&(ue(s)?t=new De(0):(s.num,2==(s=s.den)?(t=new De(1),n=!0):3==s?(t=C.parse(\"sqrt(3)/2\"),n=!0):4==s?(t=C.parse(\"1/sqrt(2)\"),n=!0):6==s?(t=C.parse(\"1/2\"),n=!0):t=C.multiply(new De(i),C.symfunction(\"sin\",[e])))),t=t||C.multiply(new De(i),C.symfunction(\"sin\",[e])),!n||3!==r&&4!==r||t.negate(),t},tan:function(e){if(F.PARSE2NUMBER){if(e%Math.PI==0&&e.isLinear())return new De(0);if(e.isConstant())return F.USE_BIG?new De(k.tan(e.multiplier.toDecimal())):new De(Math.tan(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"tan\")}var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier;if(e.multiplier=i,e.isPi()&&e.isLinear())if(ue(i))t=new De(0);else{i.num;i=i.den;if(2==i)throw new Ae(\"tan is undefined for \"+e.toString());3==i?(t=C.parse(\"sqrt(3)\"),n=!0):4==i?(t=new De(1),n=!0):6==i?(t=C.parse(\"1/sqrt(3)\"),n=!0):t=C.symfunction(\"tan\",[e])}return t=t||C.symfunction(\"tan\",[e]),!n||2!==r&&4!==r||t.negate(),t},sec:function(e){if(F.PARSE2NUMBER)return e.isConstant()?F.USE_BIG?new De(new k(1).dividedBy(k.cos(e.multiplier.toDecimal()))):new De(Te.sec(e.valueOf())):e.isImaginary()?b.evaluate(e,\"sec\"):C.parse(ce(\"1/cos({0})\",e));var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier.abs();if(e.multiplier=i,e.isPi()&&e.isLinear())if(ue(i))t=new De(ge(i)?1:-1);else{i.num;i=i.den;if(2==i)throw new Ae(\"sec is undefined for \"+e.toString());3==i?(t=new De(2),n=!0):4==i?(t=C.parse(\"sqrt(2)\"),n=!0):6==i?(t=C.parse(\"2/sqrt(3)\"),n=!0):t=C.symfunction(\"sec\",[e])}return!n||2!==r&&3!==r||t.negate(),t=t||C.symfunction(\"sec\",[e])},csc:function(e){if(F.PARSE2NUMBER)return e.isConstant()?F.USE_BIG?new De(new k(1).dividedBy(k.sin(e.multiplier.toDecimal()))):new De(Te.csc(e.valueOf())):e.isImaginary()?b.evaluate(e,\"csc\"):C.parse(ce(\"1/sin({0})\",e));var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier.sign(),s=e.multiplier.abs();if(e.multiplier=s,e.isPi()&&e.isLinear()){if(ue(s))throw new Ae(\"csc is undefined for \"+e.toString());s.num;s=s.den;2==s?(t=new De(1),n=!0):3==s?(t=C.parse(\"2/sqrt(3)\"),n=!0):4==s?(t=C.parse(\"sqrt(2)\"),n=!0):6==s?(t=new De(2),n=!0):t=C.multiply(new De(i),C.symfunction(\"csc\",[e]))}return t=t||C.multiply(new De(i),C.symfunction(\"csc\",[e])),!n||3!==r&&4!==r||t.negate(),t},cot:function(e){if(F.PARSE2NUMBER)return e%(Math.PI/2)==0?new De(0):e.isConstant()?F.USE_BIG?new De(new k(1).dividedBy(k.tan(e.multiplier.toDecimal()))):new De(Te.cot(e.valueOf())):e.isImaginary()?b.evaluate(e,\"cot\"):C.parse(ce(\"1/tan({0})\",e));var t,n=!1,r=g(e.multiplier.toDecimal()),i=e.multiplier;if(e.multiplier=i,e.isPi()&&e.isLinear()){if(ue(i))throw new Ae(\"cot is undefined for \"+e.toString());i.num;i=i.den;2==i?t=new De(0):3==i?(t=C.parse(\"1/sqrt(3)\"),n=!0):4==i?(t=new De(1),n=!0):6==i?(t=C.parse(\"sqrt(3)\"),n=!0):t=C.symfunction(\"cot\",[e])}return t=t||C.symfunction(\"cot\",[e]),!n||2!==r&&4!==r||t.negate(),t},acos:function(e){if(F.PARSE2NUMBER){if(e.isConstant()){if(e.gt(1)||e.lt(-1)){var t=e.toString();return T(Se(`pi/2-asin(${t})`))}return F.USE_BIG?new De(k.acos(e.multiplier.toDecimal())):new De(Math.acos(e.valueOf()))}if(e.isImaginary())return b.evaluate(e,\"acos\")}return C.symfunction(\"acos\",arguments)},asin:function(e){if(F.PARSE2NUMBER){if(e.isConstant()){if(e.gt(1)||e.lt(-1)){var t=F.IMAGINARY,n=e.multiplier.toDecimal();return T(Se(`${t}*log(sqrt(1-${n}^2)-${t}*${n})`))}return F.USE_BIG?new De(k.asin(e.multiplier.toDecimal())):new De(Math.asin(e.valueOf()))}if(e.isImaginary())return b.evaluate(e,\"asin\")}return C.symfunction(\"asin\",arguments)},atan:function(e){var t;if(e.equals(0))t=new De(0);else{if(F.PARSE2NUMBER)return e.isConstant()?F.USE_BIG?new De(k.atan(e.multiplier.toDecimal())):new De(Math.atan(e.valueOf())):e.isImaginary()?b.evaluate(e,\"atan\"):C.symfunction(\"atan\",arguments);t=e.equals(-1)?C.parse(\"-pi/4\"):C.symfunction(\"atan\",arguments)}return t},asec:function(e){if(F.PARSE2NUMBER){if(e.equals(0))throw new Ce(\"Input is out of the domain of sec!\");if(e.isConstant())return I.acos(e.invert());if(e.isImaginary())return b.evaluate(e,\"asec\")}return C.symfunction(\"asec\",arguments)},acsc:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return I.asin(e.invert());if(e.isImaginary())return b.evaluate(e,\"acsc\")}return C.symfunction(\"acsc\",arguments)},acot:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return new C.add(C.parse(\"pi/2\"),I.atan(e).negate());if(e.isImaginary())return b.evaluate(e,\"acot\")}return C.symfunction(\"acot\",arguments)},atan2:function(e,t){if(e.equals(0)&&t.equals(0))throw new Ae(\"atan2 is undefined for 0, 0\");return F.PARSE2NUMBER&&e.isConstant()&&t.isConstant()?new De(Math.atan2(e,t)):C.symfunction(\"atan2\",arguments)}},e=this.trigh={cosh:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return new De(Math.cosh(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"cosh\")}return C.symfunction(\"cosh\",arguments)},sinh:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return new De(Math.sinh(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"sinh\")}return C.symfunction(\"sinh\",arguments)},tanh:function(e){if(F.PARSE2NUMBER){if(e.isConstant())return new De(Math.tanh(e.valueOf()));if(e.isImaginary())return b.evaluate(e,\"tanh\")}return C.symfunction(\"tanh\",arguments)},sech:function(e){return F.PARSE2NUMBER?e.isConstant()?new De(Math.sech(e.valueOf())):e.isImaginary()?b.evaluate(e,\"sech\"):C.parse(ce(\"1/cosh({0})\",e)):C.symfunction(\"sech\",arguments)},csch:function(e){return F.PARSE2NUMBER?e.isConstant()?new De(Math.csch(e.valueOf())):e.isImaginary()?b.evaluate(e,\"csch\"):C.parse(ce(\"1/sinh({0})\",e)):C.symfunction(\"csch\",arguments)},coth:function(e){return F.PARSE2NUMBER?e.isConstant()?new De(Math.coth(e.valueOf())):e.isImaginary()?b.evaluate(e,\"coth\"):C.parse(ce(\"1/tanh({0})\",e)):C.symfunction(\"coth\",arguments)},acosh:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"acosh\"):F.PARSE2NUMBER?Se(C.parse(ce(F.LOG+\"(({0})+sqrt(({0})^2-1))\",e.toString()))):C.symfunction(\"acosh\",arguments);return e},asinh:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"asinh\"):F.PARSE2NUMBER?Se(C.parse(ce(F.LOG+\"(({0})+sqrt(({0})^2+1))\",e.toString()))):C.symfunction(\"asinh\",arguments);return e},atanh:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"atanh\"):F.PARSE2NUMBER?Se(C.parse(ce(\"(1/2)*\"+F.LOG+\"((1+({0}))/(1-({0})))\",e.toString()))):C.symfunction(\"atanh\",arguments);return e},asech:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"asech\"):F.PARSE2NUMBER?Se(O(C.add(e.clone().invert(),R(C.subtract(C.pow(e,new De(-2)),new De(1)))))):C.symfunction(\"asech\",arguments);return e},acsch:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"acsch\"):F.PARSE2NUMBER?Se(C.parse(ce(F.LOG+\"((1+sqrt(1+({0})^2))/({0}))\",e.toString()))):C.symfunction(\"acsch\",arguments);return e},acoth:function(e){e=F.PARSE2NUMBER&&e.isImaginary()?b.evaluate(e,\"acoth\"):F.PARSE2NUMBER?e.equals(1)?De.infinity():Se(C.divide(O(C.divide(C.add(e.clone(),new De(1)),C.subtract(e.clone(),new De(1)))),new De(2))):C.symfunction(\"acoth\",arguments);return e}},E={\"\\\\\":{precedence:8,operator:\"\\\\\",action:\"slash\",prefix:!0,postfix:!(this.units={}),leftAssoc:!0,operation:function(e){return e}},\"!!\":{precedence:7,operator:\"!!\",action:\"dfactorial\",prefix:!1,postfix:!0,leftAssoc:!0,operation:function(e){return C.symfunction(F.DOUBLEFACTORIAL,[e])}},\"!\":{precedence:7,operator:\"!\",action:\"factorial\",prefix:!1,postfix:!0,leftAssoc:!0,operation:u},\"^\":{precedence:6,operator:\"^\",action:\"pow\",prefix:!1,postfix:!1,leftAssoc:!0},\"**\":{precedence:6,operator:\"**\",action:\"pow\",prefix:!1,postfix:!1,leftAssoc:!0},\"%\":{precedence:4,operator:\"%\",action:\"percent\",prefix:!1,postfix:!0,leftAssoc:!0,overloaded:!0,overloadAction:\"mod\",overloadLeftAssoc:!1,operation:function(e){return C.divide(e,new De(100))}},\"*\":{precedence:4,operator:\"*\",action:\"multiply\",prefix:!1,postfix:!1,leftAssoc:!1},\"/\":{precedence:4,operator:\"/\",action:\"divide\",prefix:!1,postfix:!1,leftAssoc:!1},\"+\":{precedence:3,operator:\"+\",action:\"add\",prefix:!0,postfix:!1,leftAssoc:!1,operation:function(e){return e}},plus:{precedence:3,operator:\"plus\",action:\"add\",prefix:!0,postfix:!1,leftAssoc:!1,operation:function(e){return e}},\"-\":{precedence:3,operator:\"-\",action:\"subtract\",prefix:!0,postfix:!1,leftAssoc:!1,operation:function(e){return e.negate()}},\"=\":{precedence:2,operator:\"=\",action:\"equals\",prefix:!1,postfix:!1,leftAssoc:!1},\"==\":{precedence:1,operator:\"==\",action:\"eq\",prefix:!1,postfix:!1,leftAssoc:!1},\"<\":{precedence:1,operator:\"<\",action:\"lt\",prefix:!1,postfix:!1,leftAssoc:!1},\"<=\":{precedence:1,operator:\"<=\",action:\"lte\",prefix:!1,postfix:!1,leftAssoc:!1},\">\":{precedence:1,operator:\">\",action:\"gt\",prefix:!1,postfix:!1,leftAssoc:!1},\"=>\":{precedence:1,operator:\"=>\",action:\"gte\",prefix:!1,postfix:!1,leftAssoc:!1},\",\":{precedence:0,operator:\",\",action:\"comma\",prefix:!1,postfix:!1,leftAssoc:!1},\":\":{precedence:0,operator:\",\",action:\"assign\",prefix:!1,postfix:!1,leftAssoc:!1,vectorFn:\"slice\"},\":=\":{precedence:0,operator:\",\",action:\"function_assign\",prefix:!1,postfix:!1,leftAssoc:!0}},q={\"(\":{type:\"round\",id:1,is_open:!0,is_close:!1},\")\":{type:\"round\",id:2,is_open:!1,is_close:!0},\"[\":{type:\"square\",id:3,is_open:!0,is_close:!1,maps_to:\"vector\"},\"]\":{type:\"square\",id:4,is_open:!1,is_close:!0},\"{\":{type:\"curly\",id:5,is_open:!0,is_close:!1,maps_to:\"Set\"},\"}\":{type:\"curly\",id:6,is_open:!1,is_close:!0}},U=this.functions={cos:[I.cos,1],sin:[I.sin,1],tan:[I.tan,1],sec:[I.sec,1],csc:[I.csc,1],cot:[I.cot,1],acos:[I.acos,1],asin:[I.asin,1],atan:[I.atan,1],arccos:[I.acos,1],arcsin:[I.asin,1],arctan:[I.atan,1],asec:[I.asec,1],acsc:[I.acsc,1],acot:[I.acot,1],atan2:[I.atan2,2],acoth:[e.acoth,1],asech:[e.asech,1],acsch:[e.acsch,1],sinh:[e.sinh,1],cosh:[e.cosh,1],tanh:[e.tanh,1],asinh:[e.asinh,1],sech:[e.sech,1],csch:[e.csch,1],coth:[e.coth,1],acosh:[e.acosh,1],atanh:[e.atanh,1],log10:[,1],exp:[function(e){if(e.fname===F.LOG&&e.isLinear())return C.pow(e.args[0],De.create(e.multiplier));return C.parse(ce(\"e^({0})\",e))},1],radians:[function(e){return C.parse(ce(\"({0})*pi/180\",e))},1],degrees:[function(e){return C.parse(ce(\"({0})*180/pi\",e))},1],min:[function(){var e=[].slice.call(arguments);return w(e)?e[0]:Me(e)?new De(Math.min.apply(null,e)):F.SYMBOLIC_MIN_MAX&&Ne(e)?h(\"min\",e):C.symfunction(\"min\",e)},-1],max:[function(){var e=[].slice.call(arguments);return w(e)?e[0]:Me(e)?new De(Math.max.apply(null,e)):F.SYMBOLIC_MIN_MAX&&Ne(e)?h(\"max\",e):C.symfunction(\"max\",e)},-1],erf:[,1],floor:[,1],ceil:[,1],trunc:[,1],Si:[,1],step:[,1],rect:[,1],sinc:[function(e){if(F.PARSE2NUMBER)return e.isConstant()?new De(Te.sinc(e)):C.parse(ce(\"sin({0})/({0})\",e));return C.symfunction(\"sinc\",[e])},1],tri:[,1],sign:[function(e){return e.isConstant(!0)?new De(Math.sign(Se(e))):C.symfunction(\"sign\",arguments)},1],Ci:[,1],Ei:[,1],Shi:[,1],Chi:[,1],Li:[,1],fib:[,1],fact:[u,1],factorial:[u,1],continued_fraction:[function(e,t){e=Se(e);if(e.isConstant()){e=Te.continuedFraction(e,t),t=Ve.fromArray(e.fractions.map(function(e){return new De(e)}));return Ve.fromArray([new De(e.sign),new De(e.whole),t])}return C.symfunction(\"continued_fraction\",arguments)},[1,2]],dfactorial:[,1],gamma_incomplete:[,[1,2]],round:[m,[1,2]],scientific:[function(e,t){return e.scientific=t||10,e},[1,2]],mod:[t,2],pfactor:[N,1],vector:[function(){return new Ve([].slice.call(arguments))},-1],matrix:[function(){return He.fromArray(arguments)},-1],Set:[function(){return je.fromArray(arguments)},-1],imatrix:[function(e){return He.identity(e)},-1],parens:[function(e){if(F.PARSE2NUMBER)return e;return C.symfunction(\"parens\",[e])},-1],sqrt:[R,1],cbrt:[i,1],nthroot:[s,2],log:[O,[1,2]],expand:[function(e,t){return T(e,t=t||{expand_denominator:!0,expand_functions:!0})},1],abs:[_,1],invert:[function(e){if(ie(e))return e.invert();K(\"invert expects a matrix\")},1],determinant:[function(e){if(ie(e))return e.determinant();return e},1],size:[function(e){var t;ie(e)?t=[new De(e.cols()),new De(e.rows())]:re(e)||se(e)?t=new De(e.elements.length):K(\"size expects a matrix or a vector\");return t},1],transpose:[function(e){if(ie(e))return e.transpose();K(\"function transpose expects a matrix\")},1],dot:[function(e,t){if(re(e)&&re(t))return e.dot(t);K(\"function dot expects 2 vectors\")},2],cross:[function(e,t){if(re(e)&&re(t))return e.cross(t);K(\"function cross expects 2 vectors\")},2],vecget:[function(e,t){return t.isConstant()&&ue(t)?e.elements[t]:C.symfunction(\"vecget\",arguments)},2],vecset:[function(e,t,n){return t.isConstant?(e.elements[t]=n,e):C.symfunction(\"vecset\",arguments)},3],vectrim:[function(e,n){return n=void 0===n?1e-14:n,e=e.clone(),n=Number(n),e.elements.sort(function(e,t){return t.group-e.group}),e.elements=ve(e.elements,function(e,t){return Number(C.subtract(Se(e),Se(t)).abs())<=n}),e},[1,2]],matget:[function(e,t,n){return t.isConstant()&&n.isConstant()?e.elements[t][n]:C.symfunction(\"matget\",arguments)},3],matset:[function(e,t,n,r){return e.elements[t][n]=r,e},4],matgetrow:[function(e,t){return t.isConstant()?new He(e.elements[t]):C.symfunction(\"matgetrow\",arguments)},2],matsetrow:[function(e,t,n){if(!t.isConstant())return C.symfunction(\"matsetrow\",arguments);if(e.elements[t].length!==n.elements.length)throw new _e(\"Matrix row must match row dimensions!\");e=e.clone();return e.elements[t]=n.clone().elements,e},3],matgetcol:[function(e,r){if(!r.isConstant())return C.symfunction(\"matgetcol\",arguments);r=Number(r);var i=He.fromArray([]);return e.each(function(e,t,n){n===r&&i.elements.push([e.clone()])}),i},2],matsetcol:[function(n,r,e){if(!r.isConstant())return C.symfunction(\"matsetcol\",arguments);if(r=Number(r),n.rows()!==e.elements.length)throw new _e(\"Matrix columns must match number of columns!\");return e.each(function(e,t){n.set(t-1,r,e.elements[0].clone())}),n},3],rationalize:[r,1],IF:[function(e,t,n){\"boolean\"!=typeof e&&oe(e)&&(e=!!Number(e));return e?t:n},3],is_in:[function(e,t){if(ie(e)){for(var n=0,r=e.rows();n<r;n++)for(var i=0,s=e.cols();i<s;i++)if(e.elements[n][i].equals(t))return new De(1)}else if(e.elements)for(n=0,r=e.elements.length;n<r;n++)if(e.elements[n].equals(t))return new De(1);return new De(0)},2],realpart:[l,1],imagpart:[c,1],conjugate:[p,1],arg:[f,1],polarform:[function(e){var t;return t=De.toPolarFormArray(e),e=t[1],t=t[0],e=C.parse(ce(\"e^({0}*({1}))\",F.IMAGINARY,e)),C.multiply(t,e)},1],rectform:[function(e){var t,n,r,i,s,o=e.clone();try{return t=he(e,\"e\",!0),n=C.divide(t.x.power,De.imaginary()),r=Se(I.tan(n)),C.pow(t.a,new De(2)),i=r.getDenom(!0),s=r.getNum(),De.hyp(s,i).equals(t.a)?C.add(i,C.multiply(De.imaginary(),s)):o}catch(e){return o}},1],sort:[function(e,n){n=n?n.toString():\"asc\";var r=function(e){return e.group===D?e.multiplier:e.group===H?\"\"===e.fname?r(e.args[0]):e.fname:e.group===G?e.power:e.value};return new Ve((re(e)?e.elements:e.collectSymbols()).sort(function(e,t){e=r(e),t=r(t);return\"desc\"===n?t-e:e-t}))},[1,2]],integer_part:[,1],union:[function(e,t){return e.union(t)},2],contains:[function(e,t){return e.contains(t)},2],intersection:[function(e,t){return e.intersection(t)},2],difference:[function(e,t){return e.difference(t)},2],intersects:[function(e,t){return new De(Number(e.intersects(t)))},2],is_subset:[function(e,t){return new De(Number(e.is_subset(t)))},2],print:[function(){be(arguments).map(function(e){console.log(e.toString())})},-1]};this.error=K;this.override=function(e,t){n[e]||(n[e]=[]),n[e].push(this[e]),this[e]=t},this.restore=function(e){this[e]&&(this[e]=n[e].pop())},this.extend=function(e,n,r){var i,s=this;\"function\"==typeof this[e]&&\"function\"==typeof n&&(i=this[e],this[e]=function(e,t){return ne(e)&&ne(t)&&!r?i.call(s,e,t):n.call(s,e,t,i)})},this.symfunction=function(e,t){var n=new De(e);return n.group=H,\"object\"==typeof t&&(t=[].slice.call(t)),n.args=t,n.fname=e===$?\"\":e,n.updateHash(),n},this.callfunction=function(e,t,n){var r=U[e];r||K(\"Nerdamer currently does not support the function \"+e);var i,s=r[1]||n,o=r[0];t instanceof Array||(t=void 0!==t?[t]:[]),-1!==s&&(i=(a=ae(s))?s[0]:s,n=a?s[1]:s,s=e+\" requires a {0} of {1} arguments. {2} provided!\",(a=t.length)<i&&K(ce(s,\"minimum\",i,a)),n<a&&K(ce(s,\"maximum\",n,a)));var a=Me(t);return o?o.apply(r[2],t):(o=function(e){for(var t=F.FUNCTION_MODULES,n=t.length,r=0;r<n;r++){var i=t[r];if(e in i)return i[e]}K(\"The function \"+e+\" is undefined!\")}(e),F.PARSE2NUMBER&&a?d(o.apply(o,t)):C.symfunction(e,t))},this.operator_filter_regex=(e=\"^\\\\\"+Object.keys(E).filter(function(e){if(1===e.length)return e}).join(\"\\\\\"),new RegExp(\"([\"+e+\"])\\\\s+([\"+e+\"])\")),this.setOperator=function(e,t,n){var r=e.operator;if(E[r]=e,t&&(this[e.action]=t),C[r]=e.operation,e.action||e.prefix||e.postif||(e.action=r),\"over\"===n||\"under\"===n){var i,s=e.precedence;for(i in E){var o=E[i];(\"over\"===n?o.precedence>=s:o.precedence>s)&&o.precedence++}}},this.getOperator=function(e){return E[e]},this.aliasOperator=function(e,t){var n,r={},i=E[e];for(n in i)r[n]=i[n];r.operator=t,this.setOperator(r)},this.getOperators=function(){return E},this.getBrackets=function(){return q};function a(e){this.type=e.type,this.value=e.value,this.left=e.left,this.right=e.right}this.initConstants=function(){this.CONSTANTS={E:new De(F.E),PI:new De(F.PI)}},this.pretty_print=function(e){if(Array.isArray(e)){var t=e.map(e=>C.pretty_print(e)).join(\", \");return\"vector\"===e.type?\"vector<\"+t+\">\":\"(\"+t+\")\"}return e.toString()},this.peekers={pre_operator:[],post_operator:[],pre_function:[],post_function:[]},this.callPeekers=function(e){if(F.callPeekers)for(var t=this.peekers[e],n=be(arguments).slice(1).map(le),r=0;r<t.length;r++)t[r].apply(null,n)},this.tokenize=function(n){for(var e in n=(n=String(n)).trim().replace(/\\s+/g,\" \"),q){var t=new RegExp(q[e].is_close?\"\\\\s+\\\\\"+e:\"\\\\\"+e+\"\\\\s+\",\"g\");n=n.replace(t,e)}for(var u=0,r=n.length,i=0,s=[],o=[s],a=o[0],l=0,c=[],p=!1,f=function(e,t){var n=[];void 0!==e&&(n.type=e),n.column=t,o.push(n),a.push(n),a=n,l++},h=function(){o.pop(),a=o[--l]},m=function(e,t){(t=void 0===t?n.substring(i,e):t)in C.units?a.push(new A(t,A.UNIT,i)):\"\"!==t&&a.push(new A(t,A.VARIABLE_OR_LITERAL,i))},g=function(e){a.push(new A(e,A.FUNCTION,i))},d=function(e){i=e+1};u<r;u++){var v=n.charAt(u);if(v in E){m(u);var w=a[0]&&te(a[0]);p&&i<u&&\",\"!==v&&!(w&&\"*\"===v)&&(p=!1,h()),d(u+1);var y=function(e){for(var t=(e=void 0!==e?e:u)+1;n.charAt(t++)in E;);return n.substring(e,t-1)}(u),u=(i=i+y.length-2)-1;a.push.apply(a,function(e){for(var t=u-e.length,n=[],r=e.charAt(0),i=1,s=e.length;i<s;i++)var o=e.charAt(i),a=r+o,r=(a in E?a:(n.push(new A(r,A.OPERATOR,t+i)),o));return n.push(new A(r,A.OPERATOR,t+i)),n}(y))}else if(v in q){var b,S=q[v];if(S.is_open)c.push([S,i]),(b=n.substring(i,u))in U?g(b):\"\"!==b&&a.push(new A(b,A.VARIABLE_OR_LITERAL,i)),f(S.maps_to,u);else if(S.is_close){var M=c.pop();if(!M)throw new Le(\"Missing open bracket for bracket at: \"+(u+1));if(M[0].id!==S.id-1)throw new Le(\"Parity error\");m(u),h()}d(u)}else\" \"===v&&(M=n.substring(i,u),S=n.charAt(u+1),p?(M in E?a.push(new A(M,A.OPERATOR,u)):(m(void 0,M),h(),((v=S in E)&&\"-\"===E[S].value||!v)&&a.push(new A(\"*\",A.OPERATOR,u))),p=!1):(b=n.substring(i,u))in U?(p=!0,g(b),f()):b in E?a.push(new A(b,A.OPERATOR,u)):(m(void 0,b),S=n.charAt(u+1),\"\"===M||\"\"===S||M in E||S in E||a.push(new A(\"*\",A.OPERATOR,u))),d(u))}if(c.length){var N=c.pop();throw new Le(\"Missing closed bracket for bracket at \"+(N[1]+1))}return m(u),s},this.toRPN=function(e){for(var t=e.type,n=e.length,r=[],i=[],s=[],o=function(e,t){for(;e.length;)t.push(e.pop())},a=0;a<n;a++){var u=e[a];if(u.type!==A.OPERATOR)break;if(!u.prefix)throw new Ie(\"Not a prefix operator\");u.is_prefix=!0,i.push(u)}for(;a<n;a++){var l=e[a];if(l.type===A.OPERATOR){var c=l;for(c.overloaded&&(h=e[a+1])&&h.type===A.VARIABLE_OR_LITERAL&&(c.postfix=!1,c.action=c.overloadAction,c.leftAssoc=c.overloadLeftAssoc);i.length;){var p=i[i.length-1];if(!(p.precedence>c.precedence||!c.leftAssoc&&p.precedence===c.precedence))break;r.push(i.pop())}if((\"vector\"===t||\"set\"===t)&&\"vectorFn\"in c&&(c.action=c.vectorFn),c.postfix){var f=e[a-1];if(!f)throw new Ie(\"Unexpected prefix operator '\"+l.value+\"'! at \"+l.column);if(f.type===A.OPERATOR&&!f.postfix)throw new Ie(\"Unexpected prefix operator '\"+f.value+\"'! at \"+f.column)}else do{var h,m=!!(h=e[a+1])&&h.type===A.OPERATOR;if(m){if(!h.prefix)throw new Ie(\"A prefix operator was expected at \"+h.column);h.is_prefix=!0,s.push(h),a++}}while(m);for((c.is_prefix?s:i).push(c);s.length&&(c.leftAssoc||!c.leftAssoc&&s[s.length-1].precedence>=c.precedence);)i.push(s.pop())}else l.type===A.VARIABLE_OR_LITERAL?(0===r.length&&o(s,i),r.push(l),(f=i[i.length-1])&&f.leftAssoc||o(s,r)):l.type===A.FUNCTION?i.push(l):l.type===A.UNIT&&r.push(l);Array.isArray(l)&&(r.push(this.toRPN(l)),l.type&&r.push(new A(l.type,A.FUNCTION,l.column)))}return o(i,r),o(s,r),r},this.parseRPN=function(e,t){try{for(var n in t=t||{})t[n]=C.parse(t[n],{});F.PARSE2NUMBER&&(\"e\"in t||(t.e=new De(F.E)),\"pi\"in t||(t.pi=new De(F.PI)));for(var r=[],i=0,s=e.length;i<s;i++){var o=e[i];if(o=Array.isArray(o)?this.parseRPN(o,t):o)if(o.type===A.OPERATOR)if(o.is_prefix||o.postfix)r.push(o.operation(r.pop()));else{var a=r.pop(),u=r.pop();if(void 0===u)throw new Ie(o+\" is not a valid postfix operator at \"+o.column);var l=\"comma\"===o.action;u instanceof je&&!l&&(u=Ve.fromSet(u)),a instanceof je&&!l&&(a=Ve.fromSet(a)),this.callPeekers(\"pre_operator\",u,a,o);var c=C[o.action](u,a);this.callPeekers(\"post_operator\",c,u,a,o),r.push(c)}else if(o.type===A.FUNCTION){var p=r.pop(),f=p.parent;p instanceof L||(p=L.create(p));var h=o.value,m=p.getItems();this.callPeekers(\"pre_function\",h,m);var g=C.callfunction(h,m);this.callPeekers(\"post_function\",g,h,m);var d=r[r.length-1],v=e[i+1];if(!(v&&v.type===A.OPERATOR&&\",\"===v.value)&&g instanceof Ve&&d&&d.elements&&!(d instanceof L)){var w=r.pop(),y=g.elements[0];if(y.isConstant())if(y instanceof x)r.push(Ve.fromArray(w.elements.slice(y.start,y.end)));else{var b=Number(y),S=w.elements.length;if((b=b<0?S+b:b)<0||S<=b)throw new Ue(\"Index out of range \"+(o.column+1));var M=w.elements[b];w.getter=b,M.parent=w,r.push(M)}else w.getter=y,r.push(w),r.push(g)}else f&&(g.parent=f),r.push(g)}else{var N,E=o.value;E in F.ALIASES?o=C.parse(F.ALIASES[o]):o.type===A.VARIABLE_OR_LITERAL?o=new De(E):o.type===A.UNIT&&((o=new De(E)).isUnit=!0),E in C.CONSTANTS?(N=o,o=new De(C.CONSTANTS[E])):E in t&&E!==t[E].toString()?(N=o,o=t[E].clone()):E in J&&(N=o,o=J[E].clone()),N&&(o.subbed=N),r.push(o)}}var q=r[0];if(-1!==[\"undefined\",\"string\",\"number\"].indexOf(typeof q))throw new Oe(\"Unexpected token!\");return q}catch(t){throw[Ce].forEach(function(e){if(t instanceof e)throw new e(t.message+\": \"+o.column)}),new xe(t.message+\": \"+o.column)}},a.prototype.toString=function(){var e=this.left?this.left.toString()+\"---\":\"\",t=this.right?\"---\"+this.right.toString():\"\";return e+\"(\"+this.value+\")\"+t},a.prototype.toHTML=function(e,t){e=e||0,t=void 0===t?4:t;function n(e){return\" \".repeat(t*e)}var r=\"\",i=this.left?n(e+1)+\"<li>\\n\"+this.left.toHTML(e+2,t)+n(e+1)+\"</li> \\n\":\"\",s=this.right?n(e+1)+\"<li>\\n\"+this.right.toHTML(e+2,t)+n(e+1)+\"</li>\\n\":\"\",r=n(e)+'<div class=\"'+this.type.toLowerCase()+'\"><span>'+this.value+\"</span></div>\"+n(e)+\"\\n\";return(i||s)&&(r+=n(e)+\"<ul>\\n\"+i+s+n(e)+\"</ul>\\n\"),r+=\"\"},this.tree=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];if(Array.isArray(r))r=this.tree(r),t.push(r);else if(r.type===A.OPERATOR)r.is_prefix||r.postfix?(s=r.is_prefix?\"left\":\"right\",i=t.pop(),(r=new a(r))[s]=i):((r=new a(r)).right=t.pop(),r.left=t.pop()),t.push(r);else if(r.type===A.FUNCTION){r=new a(r);var i,s=t.pop();if(r.right=s,\"object\"===r.value)if(i=t[t.length-1]){for(;i.right;)i=i.right;i.right=r;continue}t.push(r)}else t.push(new a(r))}return t[0]},this.parse=function(e,t){e=function(e){e=String(e);for(var t=0;t<o.actions.length;t++)e=o.actions[t].call(this,e);for(e=e.replace(/\\s+/g,\" \"),e=(e=/e/gi.test(e)?e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi,function(e){return y(e)}):e).replace(F.IMPLIED_MULTIPLICATION_REGEX,function(){var e=arguments[4],t=arguments[1],n=arguments[2],r=arguments[3],i=\"\",s=\"*\";return t+(s=(i=!e.charAt(r).match(/[\\+\\-\\/\\*]/)?e.charAt(r-1):i).match(/[a-z]/i)?\"\":s)+n}).replace(/([a-z0-9_]+)/gi,function(e,t){return!(!1!==F.USE_MULTICHARACTER_VARS||t in U)&&isNaN(t)?t.split(\"\").join(\"*\"):t}).replace(/\\)\\(/g,\")*(\")||\"0\";;)if(e===(e=e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi,function(e,t,n,r,i){r=t||r,i=n||i;return r in U?r+i:r+\"*\"+i})))break;return e}(e),t=t||{};e=this.tokenize(e),e=this.toRPN(e);return this.parseRPN(e,t)},this.toObject=function(e){var a=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var i,s=e[n],o=s.value;s.type===A.VARIABLE_OR_LITERAL?t.push(new De(o)):s.type===A.FUNCTION?(n++,(i=C.symfunction(o,a(e[n]))).isConversion=!0,t.push(i)):s.type===A.OPERATOR?t.push(o):t.push(a(s))}return t};return a(C.tokenize(e))};function S(e){for(var t=0,n=[[]],r=0,i=e.length;r<i;r++)\",\"===e[r]?n[++t]=[]:n[t].push(e[r]);return n}function M(e){return e.replace(/^\\\\left\\((.+)\\\\right\\)$/g,function(e,t){return t||e})}function _(e){if(e.isInfinity)return De.infinity();if(e.multiplier.lessThan(0)&&e.multiplier.negate(),e.isImaginary()){var t=e.realpart(),n=e.imagpart();if(t.isConstant()&&n.isConstant())return R(C.add(C.pow(t,new De(2)),C.pow(n,new De(2))))}else if(oe(e)||ge(e.power))return e;var r;e.isComposite()&&(r=[],e.each(function(e){r.push(e.multiplier)}),Te.QGCD.apply(null,r).lessThan(0)&&(e.multiplier=e.multiplier.multiply(new Fe(-1)),e.distributeMultiplier()));n=C.parse(e.multiplier);return e.toUnitMultiplier(),C.multiply(n,C.symfunction(Q,[e]))}function u(e){if(re(e)){var n=new Ve;return e.each(function(e,t){n.set(t-1,u(e))}),n}if(ie(e)){var r=new He;return e.each(function(e,t,n){r.set(t,n,u(e))}),r}if(F.PARSE2NUMBER&&e.isConstant())return d(ue(e)?Te.bigfactorial(e):Te.gamma(e.multiplier.add(new Fe(1)).toDecimal()));if(e.isConstant()&&e.getDenom().equals(2)){var t,i=e.getNum(),s=e.multiplier.isNegative()?(s=C.subtract(i.negate(),new De(1)).multiplier.divide(new Fe(2)),t=C.pow(new De(-4),new De(s)).multiplier.multiply(Te.bigfactorial(s)),Te.bigfactorial(new Fe(2).multiply(s))):(s=C.add(i,new De(1)).multiplier.divide(new Fe(2)),t=Te.bigfactorial(new Fe(2).multiply(s)),C.pow(new De(4),new De(s)).multiplier.multiply(Te.bigfactorial(s))),s=t.divide(s);return C.multiply(C.parse(\"sqrt(pi)\"),new De(s))}return C.symfunction(Y,[e])}function t(e,t){if(e.isConstant()&&t.isConstant()){var n=new De(1);return n.multiplier=n.multiplier.multiply(e.multiplier.mod(t.multiplier)),n}n=C.divide(e.clone(),t.clone());return ue(n)?new De(0):C.symfunction(\"mod\",[e,t])}function r(e){if(e.isComposite()){var t,n,r,i,s=new De(0);return e.each(function(e){r=e.getNum(),i=e.getDenom(),n=s.getNum(),t=s.getDenom(),n=C.multiply(i,n),r=C.multiply(r,t),r=C.expand(C.add(n,r)),i=C.multiply(t,i),s=C.divide(r,i)},!0),s}return e}function R(e){if((e=!ne(e)?C.parse(e):e).group===V)return C.symfunction(z,[e]);var t=(e=\"\"===e.fname&&e.power.equals(1)?e.args[0]:e).multiplier.sign()<0;if(F.PARSE2NUMBER){if(e.isConstant()&&!t)return new De(k.sqrt(e.multiplier.toDecimal()));if(e.isImaginary())return b.sqrt(e);if(e.group===G)return C.symfunction(\"sqrt\",[e])}var n,r=e.isConstant();if(e.group===Z&&e.isLinear()){var i=R(De(e.multiplier));for(o in e.symbols){var s=e.symbols[o];i=C.multiply(i,R(s))}l=i}else if(e.fname===z){var o=e.args[0],a=e.multiplier;o.setPower(e.power.multiply(new Fe(.25))),l=o,a.equals(1)||(l=C.multiply(R(C.parse(a)),l))}else if(e.power.isInteger())if(e.multiplier<0&&e.group===G)var u=C.parse(e.multiplier).negate(),a=C.parse(e).toUnitMultiplier().negate(),l=C.multiply(C.symfunction(F.SQRT,[a]),R(u));else{u=e.power.sign();e.power=e.power.abs(),r&&e.multiplier.lessThan(0)&&(n=De.imaginary(),e.multiplier=e.multiplier.abs());var c=e.multiplier.toDecimal(),r=Math.abs(c),r=Math.sqrt(r);if(ue(r))i=new De(r);else if(ue(c)){var p=Te.ifactor(c),f=1;for(s in p){var h,m=(g=p[s])-g%2;m&&(h=Math.pow(s,m),f*=Math.pow(s,m/2),c/=h)}i=C.multiply(C.symfunction(z,[new De(c)]),new De(f))}else{for(var g,d=[new De(e.multiplier.num),new De(e.multiplier.den)],v=[new De(1),new De(1)],w=[new De(1),new De(1)],y=0;y<2;y++)N(g=d[y]).each(function(e){var t=(e=De.unwrapPARENS(e)).clone().toLinear(),n=Number(e.power),e=n%2;v[y]=C.multiply(v[y],C.pow(t,new De((n-e)/2))),w[y]=C.multiply(w[y],R(C.pow(t,new De(e))))});i=C.divide(C.multiply(v[0],w[0]),C.multiply(v[1],w[1]))}l=(e=e.toUnitMultiplier(!0)).isOne()?e:ge(e.power.toString())?C.pow(e.clone(),new De(.5)):C.symfunction(z,[e]),u<0&&l.power.negate(),i&&(l=C.multiply(i,l)),n&&(l=C.multiply(n,l))}else e.setPower(e.power.multiply(new Fe(.5))),l=e;return t&&F.PARSE2NUMBER?C.parse(l):l}function i(e){if(e.isConstant(!0))return s(e,new De(3));var t,n=e.power/3,r=C.pow(C.parse(e.multiplier),new De(1/3)),e=e.toUnitMultiplier();return ue(n)?t=C.pow(e.toLinear(),C.parse(n)):e.group===Z?(t=new De(1),e.each(function(e){t=C.multiply(t,i(e))})):t=C.symfunction(\"cbrt\",[e]),C.multiply(r,t)}function s(e,t,n,r){if((t=Se(C.parse(t))).equals(0))throw new Ae(\"Unable to calculate nthroots of zero\");if(e<0&&ge(t))throw new Error(\"Cannot calculate nthroot of negative number for even powers\");if(!e.isConstant(!0))return C.symfunction(\"nthroot\",arguments);void 0===r&&(r=!0),n=n||25;var i=(e=e.group!==D?Se(e):e).sign();if(i<0&&(e=_(e)),ue(e)&&t.isConstant()){var s,t=e<0x10000000000000000?Fe.create(Math.pow(e,1/t)):Te.nthroot(e,t);return r&&(s=new De(t)),s=new De(t.toDecimal(n)),C.multiply(new De(i),s)}}function N(e){if(e.greaterThan(9999999999998891e26)||e.equals(-1))return e;if(e.equals(Math.PI))return new De(Math.PI);if((e=Se(e.clone())).isConstant()){var t=new De(1),n=e.toString();if(ue(n)){var r,i=Te.ifactor(n);for(r in i)var s=i[r],t=C.multiply(t,C.symfunction(\"parens\",[new De(r).setPower(new Fe(s))]))}else{n=N(new De(e.multiplier.num)),e=N(new De(e.multiplier.den));t=C.multiply(C.symfunction(\"parens\",[n]),C.symfunction(\"parens\",[e]).invert())}}else t=C.symfunction(\"pfactor\",arguments);return t}function l(e){return e.realpart()}function c(e){return e.imagpart()}function p(e){var t=e.realpart(),e=e.imagpart();return C.add(t,C.multiply(e.negate(),De.imaginary()))}function f(e){var t=e.realpart(),e=e.imagpart();return t.isConstant()&&e.isConstant()?new De(Math.atan2(e,t)):C.symfunction(\"atan2\",[e,t])}function f(e){var t=e.realpart(),e=e.imagpart();return t.isConstant()&&e.isConstant()?e.equals(0)&&t.equals(-1)?C.parse(\"pi\"):e.equals(1)&&t.equals(0)?C.parse(\"pi/2\"):e.equals(1)&&t.equals(1)?C.parse(\"pi/4\"):new De(Math.atan2(e,t)):C.symfunction(\"atan2\",[e,t])}function h(e,t){var n,r;for(t.map(function(e){e.numVal=Se(e).multiplier});;){if((r=t.length)<2)return t[0];n=t.pop(),r=t[r-2],(\"min\"===e?n.numVal<r.numVal:n.numVal>r.numVal)&&(t.pop(),t.push(n))}}function O(e,t){if(e.equals(1))return new De(0);var n,r,i;if(e.fname===z&&e.multiplier.equals(1))return n=C.divide(O(e.args[0]),new De(2)),e.power.sign()<0&&n.negate(),n;if(e.equals(0))throw new Ae(F.LOG+\"(0) is undefined!\");return e.isImaginary()?b.evaluate(e,F.LOG):(e.isConstant()&&void 0!==t&&t.isConstant()?n=new De(Math.log(e)/Math.log(t)):e.group===V&&e.power.multiplier.lessThan(0)||\"-1\"===e.power.toString()?(e.power.negate(),n=O(e).negate()):\"e\"===e.value&&e.multiplier.equals(1)?(t=e.power,n=ne(t)?t:new De(t)):e.group===H&&\"exp\"===e.fname?(i=e.args[0],n=e.multiplier.equals(1)?C.multiply(i,new De(e.power)):C.symfunction(F.LOG,[e])):F.PARSE2NUMBER&&oe(e)?((e=C.parse(e)).multiplier.lessThan(0)&&(e.negate(),r=C.multiply(new De(Math.PI),new De(\"i\"))),n=new De(Math.log(e.multiplier.toDecimal())),r&&(n=C.add(n,r))):(e.power.equals(1)||e.contains(\"e\")||(i=e.group===V?e.power:new De(e.power),e.toLinear()),n=1<arguments.length&&w(arguments)?new De(1):C.symfunction(F.LOG,arguments),i&&(n=C.multiply(i,n))),n)}function m(e,t){var n=t&&t.isConstant()||void 0===t;if(e.isConstant()&&n){var r,n=e;return t&&t.lessThan(0)&&(t=_(t),n=(r=Number(e).toExponential().toString().split(\"e\"))[0],r=r[1]),t=new De(me(n,Number(t||0))),C.multiply(t,C.pow(new De(10),new De(r||0)))}return C.symfunction(\"round\",arguments)}function g(e){e%=2;return 0<=(e=e<0?2+e:e)&&e<=.5?1:.5<e&&e<=1?2:1<e&&e<=1.5?3:4}function d(t){if(!isFinite(t)){var e=Math.sign(t),n=new De(String(Math.abs(t)));return n.multiplier=n.multiplier.multiply(new Fe(e)),n}if(ne(t))return t;if(\"number\"==typeof t)try{t=Fe.simple(t)}catch(e){t=new Fe(t)}n=new De(0);return n.multiplier=t,n}function T(e,t){if(Array.isArray(e))return e.map(function(e){return T(e,t)});if(t=t||{},e.group===H&&\"\"===e.fname){var n=T(e.args[0],t),r=T(C.pow(n,C.parse(e.power)),t);return C.multiply(C.parse(e.multiplier),r).distributeMultiplier()}if(-1!==[D,B,G].indexOf(e.group))return e;r=e.clone();try{var i,s,o,a=e.multiplier.toString(),u=Number(e.power),l=e;if(e.isComposite()&&ue(e.power)&&0<e.power){var c=u-1,n=new De(0);e.each(function(e){n=C.add(n,T(C.parse(e),t))});for(var p=C.parse(n),f=0;f<c;f++)p=Ee(p,n,t);l=C.multiply(C.parse(a),p).distributeMultiplier()}else e.group===H&&!0===t.expand_functions?(i=[],e.args.forEach(function(e){i.push(T(e,t))}),l=C.pow(C.symfunction(e.fname,i),C.parse(e.power)),l=C.multiply(l,C.parse(e.multiplier))):e.isComposite()&&ue(e.power)&&e.power<0&&!0===t.expand_denominator?(e=e.invert(),(l=T(e,t)).invert()):e.group===Z?(s=function(e){switch(e.group){case X:return 0;case j:return 1;case Z:return 2;case H:return 3;default:return 4}},o=e.collectSymbols().sort(function(e,t){return s(t)-s(e)}).map(function(e){return T(C.pow(e,C.parse(u)),t)}),n=o.pop(),(l=n.isComposite()&&n.isLinear()?(o.forEach(function(e){n=Ee(n,e,t)}),n.isComposite()?(1<n.power&&(n=T(C.pow(n,C.parse(n.power)),t)),C.multiply(C.parse(a),n).distributeMultiplier()):n):(l=n,o.forEach(function(e){l=C.multiply(l,e)}),C.multiply(l,C.parse(a)).distributeMultiplier())).group===Z&&(l=C.parse(l))):l=e;return l}catch(e){return r}return r}function P(e){if(ne(e.power)||!e.power.absEquals(.5))return e;var t=e.power.sign(),e=R(e.group===B?new De(e.value):e.toLinear());return t<0&&e.invert(),e}this.toTeX=function(e,t){var n=!0===(t=t||{}).decimals?\"decimals\":void 0,r=\"string\"==typeof e?this.toObject(e):e,i=[],s=void 0===t.cdot?\"\\\\cdot\":t.cdot,r=function(e){for(var t=[];e.length;){var n,r,i=e.shift(),s=e[0],o=ae(s),a=\"-\"===s;\"^\"===i&&(\"+\"===s?e.shift():o&&\"+\"===s[0]&&s.shift(),o&&1===s.length&&e.unshift(e.shift()[0])),\"^\"===i&&(o&&\"-\"===s[0]||a)?(n=t.pop(),r=\"1\",\"*\"===(a=t[t.length-1])?(t.pop(),r=t.pop()):ae(a)&&(r=t.pop()),t.push(r,\"/\",n,i),(o?s:e).shift(),o&&1===s.length&&t.push(e.shift()[0])):t.push(i)}return t}(r);if(ae(r)){for(var o,a,u=[],l=0;l<r.length;l++)o=r[l],\"^\"===r[l+1]?(a=r[l+2],u.push(Ge.braces(this.toTeX([o]))+\"^\"+Ge.braces(this.toTeX([a]))),l+=2):u.push(o);r=u}for(var l=0,c=r.length;l<c;l++){var p=r[l];if(ne(p=\"*\"===p?s:p))if(p.group===H){var f,h=p.fname;if(h===z)g=\"\\\\sqrt\"+Ge.braces(this.toTeX(p.args));else if(h===Q)g=Ge.brackets(this.toTeX(p.args),\"abs\");else if(h===$)g=Ge.brackets(this.toTeX(p.args),\"parens\");else if(h===F.LOG10)g=\"\\\\\"+F.LOG10_LATEX+\"\\\\left( \"+this.toTeX(p.args)+\"\\\\right)\";else if(\"integrate\"===h)var m=S(p.args),g=\"\\\\int \"+(d=Ge.braces(this.toTeX(m[0])))+\"\\\\, d\"+(v=this.toTeX(m[1]));else if(\"defint\"===h){var m=S(p.args),d=Ge.braces(this.toTeX(m[0])),v=this.toTeX(m[3]);g=\"\\\\int\\\\limits_{\"+this.toTeX(m[1])+\"}^{\"+this.toTeX(m[2])+\"} \"+d+\"\\\\, d\"+v}else if(\"diff\"===h){m=S(p.args),v=\"\",d=Ge.braces(this.toTeX(m[0]));if(1===m.length){for(var w=[],y=0;y<m[0].length;y++)3===m[0][y].group&&w.push(m[0][y].value);w.sort(),v=0<w.length?\"\\\\frac{d}{d \"+w[0]+\"}\":\"\\\\frac{d}{d x}\"}else v=2===m.length?\"\\\\frac{d}{d \"+m[1]+\"}\":\"\\\\frac{d^{\"+m[2]+\"}}{d \"+this.toTeX(m[1])+\"^{\"+m[2]+\"}}\";g=v+\"\\\\left(\"+d+\"\\\\right)\"}else if(\"sum\"===h||\"product\"===h){var b=[[],[],[],[]],y=0;for(l=0;l<p.args.length;l++)\",\"!==p.args[l]?b[y].push(p.args[l]):y++;g=(\"sum\"===h?\"\\\\sum_\":\"\\\\prod_\")+Ge.braces(this.toTeX(b[1])+\" = \"+this.toTeX(b[2])),g+=\"^\"+Ge.braces(this.toTeX(b[3]))+Ge.braces(this.toTeX(b[0]))}else g=\"limit\"===h?(f=S(p.args).map(function(e){return Array.isArray(e)?C.toTeX(e.join(\"\")):C.toTeX(String(e))}),\"\\\\lim_\"+Ge.braces(f[1]+\"\\\\to \"+f[2])+\" \"+Ge.braces(f[0])):h===Y||h===W?this.toTeX(p.args)+(h===Y?\"!\":\"!!\"):Ge.latex(p,n);i.push(g)}else i.push(Ge.latex(p,n));else ae(p)?i.push(Ge.brackets(this.toTeX(p))):\"/\"===p?i.push(Ge.frac(M(i.pop()),M(this.toTeX([r[++l]])))):i.push(p)}return i.join(\" \")},this.expand=T,this.round=m,this.clean=function t(e){var n,r,i,s,o,a,u,l=e.group;return l===X?(r=e.getNum(),i=e.getDenom()||new De(1),s=Number(e.power),o=new De(1),1===Math.abs(s)&&(i.each(function(e){e.group===Z?o=C.multiply(o,t(e.getDenom())):e.power.lessThan(0)&&(o=C.multiply(o,t(e.clone().toUnitMultiplier())))}),a=new De(0),i.each(function(e){a=C.add(C.divide(e,o.clone()),a)}),o.invert(),r.isComposite()?(u=new De(0),r.each(function(e){u=C.add(C.multiply(t(e),o.clone()),u)})):u=C.multiply(o,r),n=C.divide(u,a))):l===Z?(n=new De(1),e.each(function(e){n=C.multiply(n,C.clean(e))})):l===H&&1===e.args.length&&e.args[0].isConstant()&&(n=ye(\"PARSE2NUMBER\",function(){return C.parse(e)},!0)),n=n||e},this.sqrt=R,this.cbrt=i,this.abs=_,this.log=O,this.rationalize=r,this.nthroot=s,this.arg=f,this.conjugate=p,this.imagpart=c,this.realpart=l,this.getFunction=function(e){return U[e][0]},this.addPreprocessor=function(e,t,n,r){var i=o.names,s=o.actions;if(\"function\"!=typeof t)throw new PreprocessorError(\"Incorrect parameters. Function expected!\");n?r?(i.splice(n,0,e),s.splice(n,0,t)):(i[n]=e,s[n]=t):(i.push(e),s.push(t))},this.getPreprocessors=function(){for(var e={},t=0,n=e.names.length;t<n;t++)e[e.names[t]]={order:t,action:e.actions[t]};return e},this.removePreprocessor=function(e,t){e=o.names.indexOf(e);t?(we(o.names,e),we(o.actions,e)):(o.names[e]=void 0,o.actions[e]=void 0)},this.mapped_function=function(){for(var e={},t=this.params,n=0;n<t.length;n++)e[t[n]]=String(arguments[n]);return C.parse(this.body,e)},this.add=function(i,n){var e=ne(i),t=ne(n);if(e&&t){if(i.unit||n.unit)return C.Unit.add(i,n);if(i.isInfinity||n.isInfinity){var r=i.multiplier.lessThan(0),s=n.multiplier.lessThan(0);if(i.isInfinity&&n.isInfinity&&r!==s)throw new Ae(\"(\"+i+\")+(\"+n+\") is not defined!\");var o=De.infinity();return s&&o.negate(),o}if(i.isComposite()&&i.isLinear()&&n.isComposite()&&n.isLinear()&&(i.distributeMultiplier(),n.distributeMultiplier(),n.length>i.length&&i.group===n.group&&([i,n]=[n,i])),i.multiplier.equals(0))return n;if(n.multiplier.equals(0))return i;if(i.isConstant()&&n.isConstant()&&F.PARSE2NUMBER)return h=new De(i.multiplier.add(n.multiplier).toDecimal(F.PRECISION));var a=i.group,u=n.group,l=i.power.toString(),c=n.power.toString();if(a<u||a===u&&c<l&&0<c)return this.add(n,i);a===Z&&u===j&&i.value===n.value&&(w=i,a=(i=n).group,u=(n=w).group,l=i.power.toString(),c=n.power.toString());var p,f,h,m=l===c,r=i.value,s=n.value,o=i.isComposite(),l=n.isComposite();if(o&&(p=Pe(i,\"hash\")),l&&(f=Pe(n,\"hash\")),a===X&&u===X&&n.isLinear()&&!i.isLinear()&&p!==f)return this.add(n,i);a===j&&u===j&&(r=p,s=f);var g,c=a===B&&u===D,l=i.value===n.multiplier.toString(),l=r===s||p===f&&void 0!==p||c&&l;if(l&&m&&a===u)if(c&&(n=n.convert(B)),a!==j||u!==G&&u!==B)if((h=i).multiplier.isOne()&&n.multiplier.isOne()&&a===X&&i.isLinear()&&n.isLinear())for(var d in n.symbols){var v=n.symbols[d];h.attach(v)}else h.multiplier=h.multiplier.add(n.multiplier);else i.distributeMultiplier(),h=i.attach(n);else if(l&&a!==j)a===X&&u===j?(n.insert(i,\"add\"),h=n):(h=De.shell(j).attach([i,n])).value=a===j?p:r;else if(o&&i.isLinear()){r=a===u,o=a===j&&u===j;if(o&&(r=i.value===n.value),i.distributeMultiplier(),n.isComposite()&&n.isLinear()&&r){for(var d in n.distributeMultiplier(),n.symbols){v=n.symbols[d];i.attach(v)}h=i}else o&&i.value!==f||a===j&&!l?(h=De.shell(X).attach([i,n])).updateHash():h=i.attach(n)}else a===H&&i.fname===z&&u!==V&&n.power.equals(.5)&&(g=n.multiplier.clone(),(n=R(n.toUnitMultiplier().toLinear())).multiplier=g),2===i.length&&2===n.length&&ge(i.power)&&ge(n.power)?h=C.add(T(i),T(n)):(h=De.shell(X).attach([i,n])).updateHash();return 1===(h=h.multiplier.equals(0)?new De(0):h).length&&(g=h.multiplier,(h=pe(h.symbols)).multiplier=h.multiplier.multiply(g)),h}t&&!e&&(w=i,i=n,n=w,w=t,t=e,e=w);var w=ie(n);if(e&&w){var y=new He;n.eachElement(function(e,t,n){y.set(t,n,C.add(i.clone(),e))}),n=y}else if(ie(i)&&w)n=i.add(n);else if(e&&re(n))n.each(function(e,t){n.elements[--t]=C.add(i.clone(),n.elements[t])});else if(re(i)&&re(n))n.each(function(e,t){n.elements[--t]=C.add(i.elements[t],n.elements[t])});else{if(re(i)&&ie(n))return C.add(n,i);if(ie(i)&&re(n)){if(n.elements.length===i.rows()){var y=new He,b=i.cols();return n.each(function(e,t){for(var n=[],r=0;r<b;r++)n.push(C.add(i.elements[t-1][r].clone(),e.clone()));y.elements.push(n)}),y}K(\"Dimensions must match!\")}}return n},this.subtract=function(i,r){var e=ne(i),t=ne(r);if(e&&t)return i.unit||r.unit?C.Unit.subtract(i,r):this.add(i,r.negate());if(t&&re(i))r=i.map(function(e){return C.subtract(e,r.clone())});else if(e&&re(r))r=r.map(function(e){return C.subtract(i.clone(),e)});else if(re(i)&&re(r))i.dimensions()===r.dimensions()?r=i.subtract(r):C.error(\"Unable to subtract vectors. Dimensions do not match.\");else if(ie(i)&&re(r)){if(r.elements.length===i.rows()){var s=new He,o=i.cols();return r.each(function(e,t){for(var n=[],r=0;r<o;r++)n.push(C.subtract(i.elements[t-1][r].clone(),e.clone()));s.elements.push(n)}),s}K(\"Dimensions must match!\")}else{if(re(i)&&ie(r)){var s=r.clone().negate();return C.add(s,i)}ie(i)&&ie(r)?r=i.subtract(r):ie(i)&&t?(s=new He,i.each(function(e,t,n){s.set(t,n,C.subtract(e,r.clone()))}),r=s):e&&ie(r)&&(s=new He,r.each(function(e,t,n){s.set(t,n,C.subtract(i.clone(),e))}),r=s)}return r},this.multiply=function(i,n){var e=ne(i),t=ne(n);if(e&&n instanceof L)return n.elements.push(i),n;if(e&&t){if(n.isUnit){var r=i.clone();return i.unit=n,r}if(i.unit||n.unit)return C.Unit.multiply(i,n);if(i.isInfinity||n.isInfinity){if(i.equals(0)||n.equals(0))throw new Ae(i+\"*\"+n+\" is undefined!\");if(n.power.lessThan(0)){if(i.isInfinity)throw new Ae(\"Infinity/Infinity is not defined!\");return new De(0)}var s=i.multiplier.multiply(n.multiplier).sign(),o=De.infinity();if(i.isConstant()||n.isConstant()||i.isInfinity&&n.isInfinity)return s<0&&o.negate(),o}if(i.isConstant()&&n.isConstant()&&F.PARSE2NUMBER)return new De(p=new k(i.multiplier.toDecimal()).times(new k(n.multiplier.toDecimal())).toFixed());if(i.isOne())return n.clone();if(n.isOne())return i.clone();if(i.multiplier.equals(0)||n.multiplier.equals(0))return new De(0);if(n.group>i.group&&n.group!==X)return this.multiply(n,i);i.group===Z&&n.group===j&&i.value===n.value&&(p=i,i=n,n=p);var a=i.group,u=n.group,l=n.multiplier.num,c=n.multiplier.den;a!==H||i.fname!==z||n.isConstant()||i.args[0].value!==n.value||i.args[0].multiplier.lessThan(0)?a===H&&i.fname===z&&i.multiplier.equals(1)&&i.power.equals(-1)&&n.isConstant()&&i.args[0].equals(n)&&(i=C.symfunction(z,[n.clone()]),n=new De(1)):(m=i.power,h=C.parse(i.multiplier),(i=C.multiply(h,i.args[0].clone())).setPower(new Fe(.5).multiply(m)),a=i.group);var p,f=i.value,o=n.value,s=new Fe(i.sign()),h=a===B&&u===D&&n.multiplier.equals(i.value),m=(h?new Fe(1).multiply(i.multiplier):i.multiplier.multiply(n.multiplier)).abs(),r=i.clone().toUnitMultiplier();if(n=n.clone().toUnitMultiplier(!0),a===H&&u===H){var g=i.args[0].clone(),d=n.args[0].clone();if(i.fname===z&&n.fname===z&&i.isLinear()&&n.isLinear()){var v=C.divide(g,d).invert();v.gt(1)&&ue(v)&&(r=C.multiply(i.args[0].clone(),R(v.clone())),n=new De(1))}else if(i.fname===Y&&n.fname===Y&&!g.isConstant()&&!d.isConstant()&&n.power<0){v=C.subtract(g.clone(),d.clone());if(v.isConstant())if(p=new De(1),v<0){for(var w=0,y=Math.abs(v);w<=y;w++){var b=C.add(g.clone(),new De(w));p=C.multiply(p,b)}r=C.multiply(C.pow(g,new De(i.power)),C.pow(p,new De(n.power))),n=new De(1)}else{for(w=0,y=Math.abs(v);w<=y;w++){b=C.add(d.clone(),new De(w));p=C.multiply(p,b)}r=C.multiply(C.pow(p,new De(i.power)),C.pow(d,new De(n.power))),n=new De(1)}}}if(f===o&&a===j&&a===u&&(f=i.text(\"hash\"),o=n.text(\"hash\")),(f=u===V&&n.previousGroup===j&&a===j?Pe(i,\"hash\",V):f)!==o&&!h||a===j&&(u===G||u===B||u===H)||a===j&&u===Z)if(a===Z&&i.isLinear())if(u===Z&&n.distributeExponent(),u===Z&&n.isLinear()){for(var b in n.symbols){var S=n.symbols[b];r=r.combine(S)}r.multiplier=r.multiplier.multiply(n.multiplier)}else r.combine(n);else a!==D?a===Z?(r.distributeExponent(),r.combine(n)):n.isOne()||(E=n.multiplier.clone(),n.toUnitMultiplier(),(r=De.shell(Z).combine([r,n])).multiplier=r.multiplier.multiply(E)):r=n.clone().toUnitMultiplier();else{var M=i.power,N=n.power,E=ne(M),q=ne(N),q=E||q;a===j&&u!==j&&n.previousGroup!==j&&M.equals(1)?(r=new De(0),i.each(function(e){r=C.add(r,C.multiply(e,n.clone()))},!0)):(r.power=q?C.add(ne(M)?M:new De(M),ne(N)?N:new De(N)):a===D?M:M.add(N),r.power.equals(0)&&(r=r.convert(D)),q&&r.convert(V),i.imaginary&&n.imaginary&&ge(r.power%2)&&(r=new De(1),m.negate()),r.group!==V&&r.previousGroup&&(r.previousGroup=void 0),r.multiplier=r.multiplier.multiply(n.multiplier))}r.group===B&&(a=Math.log(r.value),M=Math.log(l)/a,N=Math.log(c)/a,q=m.num/l,a=m.den/c,0!=M&&ue(M)&&ue(q)&&(r.power=r.power.add(new Fe(M)),m.num/=l),0!=N&&ue(N)&&ue(a)&&(r.power=r.power.subtract(new Fe(N)),m.den/=c)),1===r.length&&(p=r.multiplier,(r=pe(r.symbols)).multiplier=r.multiplier.multiply(p));c=r.power.toString();return ge(c)&&r.fname===z?(s*=r.sign(),c=r.power,r=r.args[0],r=C.multiply(new De(m),C.pow(r,new De(c.divide(new Fe(2))))),s<0&&r.negate()):(r.multiplier=r.multiplier.multiply(m).multiply(s),r.group===X&&r.isImaginary()&&r.distributeMultiplier()),r=r.group===B&&ue(r.power.toDecimal())?r.convert(D):r}t&&!e&&(p=i,i=n,n=p,p=t,t=e,e=p);s=ie(n),t=ie(i);if(e&&s){var x=new He;n.eachElement(function(e,t,n){x.set(t,n,C.multiply(i.clone(),e))}),n=x}else if(t&&s)n=i.multiply(n);else if(e&&re(n))n.each(function(e,t){n.elements[--t]=C.multiply(i.clone(),n.elements[t])});else if(re(i)&&re(n))n.each(function(e,t){n.elements[--t]=C.multiply(i.elements[t],n.elements[t])});else{if(re(i)&&ie(n))return this.multiply(n,i);if(ie(i)&&re(n)){if(n.elements.length===i.rows()){var x=new He,A=i.cols();return n.each(function(e,t){for(var n=[],r=0;r<A;r++)n.push(C.multiply(i.elements[t-1][r].clone(),e.clone()));x.elements.push(n)}),x}K(\"Dimensions must match!\")}}return n},this.divide=function(r,i){var e=ne(r),t=ne(i);if(e&&t){if(r.unit||i.unit)return C.Unit.divide(r,i);if(i.equals(0))throw new qe(\"Division by zero not allowed!\");return r.isConstant()&&i.isConstant()?(n=r.clone()).multiplier=n.multiplier.divide(i.multiplier):(i.invert(),n=C.multiply(r,i)),n}var n,s,o=re(r),a=re(i);return e&&a?i=i.map(function(e){return C.divide(r.clone(),e)}):o&&t?i=r.map(function(e){return C.divide(e,i.clone())}):o&&a?r.dimensions()===i.dimensions()?i=i.map(function(e,t){return C.divide(r.elements[--t],e)}):C.error(\"Cannot divide vectors. Dimensions do not match!\"):(n=ie(r),o=ie(i),n&&t?(s=new He,r.eachElement(function(e,t,n){s.set(t,n,C.divide(e,i.clone()))}),i=s):e&&o?(s=new He,i.eachElement(function(e,t,n){s.set(t,n,C.divide(r.clone(),e))}),i=s):n&&o?(s=new He,r.rows()===i.rows()&&r.cols()===i.cols()?(r.eachElement(function(e,t,n){s.set(t,n,C.divide(e,i.elements[t][n]))}),i=s):C.error(\"Dimensions do not match!\")):n&&a&&(r.cols()===i.dimensions()?(s=new He,r.eachElement(function(e,t,n){s.set(t,n,C.divide(e,i.elements[t].clone()))}),i=s):C.error(\"Unable to divide matrix by vector.\"))),i},this.pow=function(r,i){var s,e=ne(r),t=ne(i);if(e&&t){if(r.unit||i.unit)return C.Unit.pow(r,i);if(r.group===H&&r.fname===Q&&ge(i)){var n=r.multiplier.clone(),o=C.pow(r.args[0],i);return o.multiplier=n,o}if(r.isInfinity||i.isInfinity){if(r.isInfinity&&i.isInfinity)throw new Ae(\"(\"+r+\")^(\"+i+\") is undefined!\");if(r.isConstant()&&i.isInfinity){if(r.equals(0)){if(i.lessThan(0))throw new Ae(\"0^Infinity is undefined!\");return new De(0)}if(r.equals(1))throw new Ae(\"1^\"+i.toString()+\" is undefined!\");if(i.lessThan(0))return new De(0);if(!r.lessThan(0))return De.infinity()}if(r.isInfinity&&i.isConstant()){if(i.equals(0))throw new Ae(r+\"^0 is undefined!\");return i.lessThan(0)?new De(0):C.multiply(De.infinity(),C.pow(new De(r.sign()),i.clone()))}}var a=r.equals(0),u=i.equals(0);if(a&&u)throw new Ae(\"0^0 is undefined!\");if(a&&i.isConstant()&&i.multiplier.greaterThan(0))return new De(0);if(u)return new De(1);var l,c=i.isConstant(),p=r.isConstant(),o=i.isInteger(),n=r.multiplier,a=r.clone();if(p&&c&&r.equals(0)&&i.lessThan(0))throw new Ae(\"Division by zero is not allowed!\");if(F.PARSE2NUMBER&&p&&c&&r.sign()<0&&de(i)){var f=Math.PI*i;return b=new De(Math.cos(f)),v=C.multiply(De.imaginary(),new De(Math.sin(f))),C.add(b,v)}if(F.PARSE2NUMBER&&r.isImaginary()&&c&&ue(i)&&!i.lessThan(0))if(b=r.realpart(),v=r.imagpart(),b.isConstant(\"all\")&&v.isConstant(\"all\"))return u=F.USE_BIG?De(k.atan2(d.multiplier.toDecimal(),y.multiplier.toDecimal()).times(i.toString())):Math.atan2(v,b)*i,l=new De(u),y=C.pow(De.hyp(b,v),i),f=C.multiply(y.clone(),C.trig.cos(l.clone())),u=C.multiply(y,C.trig.sin(l)),C.add(f,C.multiply(De.imaginary(),u));if(a.toUnitMultiplier(),a.group!==H||a.fname!==z||c?(A=n.sign(),de(i)&&A<0&&(a.negate(),(a=C.symfunction($,[a])).negate()),a.multiplyPower(i)):((N=a.args[0]).multiplyPower(new De(.5)),N.multiplier.multiply(a.multiplier),N.multiplyPower(i),a=N),p&&c&&F.PARSE2NUMBER)A<0&&(r.negate(),m=i.multiplier.den.equals(2)?new De(F.IMAGINARY):ue(i.multiplier)?ge(i.multiplier)?new De(1):new De(-1):ge(i.multiplier.den)?C.pow(C.symfunction($,[new De(A)]),i.clone()):new De(Math.pow(A,i.multiplier.num))),a=new De(Math.pow(r.multiplier.toDecimal(),i.multiplier.toDecimal())),m&&(a=C.multiply(a,m));else if(o&&!n.equals(1)){if(i.abs().gt(F.MAX_EXP))return i.sign()<0?new De(0):De.infinity();var h=i.multiplier.toDecimal(),m=Math.sign(h);h=Math.abs(h);var g=new Fe(1);g.num=n.num.pow(h),g.den=n.den.pow(h),m<0&&g.invert(),a.multiplier=a.multiplier.multiply(g)}else{var d,v,w,y,b,S,M,N,E,q,x,A=r.sign();i.isConstant()&&r.isConstant()&&!i.multiplier.den.equals(1)&&A<0?a=i.multiplier.den.equals(2)?(d=new De(F.IMAGINARY),r.negate(),i.lessThan(0)&&(d.negate(),i.negate()),C.multiply(C.pow(r,i),d)):((w=r.clone()).multiplier.negate(),a=C.pow(C.symfunction($,[new De(A)]),i.clone()),g=C.pow(new De(w.multiplier.num),i.clone()),d=C.pow(new De(w.multiplier.den),i.clone()),y=C.divide(g,d),C.multiply(a,y)):F.PARSE2NUMBER&&i.isImaginary()?(b=i.realpart(),v=i.imagpart(),w=r.clone().toLinear(),y=C.pow(w.clone(),b),E=O(w.clone()),b=I.cos(C.multiply(v.clone(),E)),E=C.multiply(I.sin(C.multiply(v,O(w))),De.imaginary()),a=C.multiply(y,C.add(b,E)),a=C.expand(C.parse(a))):(S=P(new De((E=r.group===D&&A<0)?n.num:Math.abs(n.num)).setPower(i.clone())),M=P(new De(n.den).setPower(i.clone()).invert()),r.imaginary&&(o?(N=Math.sign(i),h=_(i),a=new De(ge(q=h%4)?-1:F.IMAGINARY),(0===q||N<0&&1===q||0<N&&3===q)&&a.negate()):(o=i.multiplier.multiply(Fe.quick(1,2)),N=Math.pow(-1,o.num),a=ge(o.den)?new De(-1).setPower(o,!0):new De(N))),A<0&&!E&&a.negate(),c&&r.group!==V&&(A=ge(i.multiplier.den),E=ge(r.power),q=a.power.toDecimal(),c=ge(q),A&&E&&!c&&(a=1===q?C.symfunction(Q,[a]):ue(q)?C.multiply(C.symfunction(Q,[a.clone().toLinear()]),a.clone().setPower(new Fe(q-1))):(h=a.power,C.symfunction(Q,[a.toLinear()]).setPower(h)),F.POSITIVE_MULTIPLIERS&&a.fname===Q&&(a=a.args[0]))),i.equals(2)&&a.group===Z&&(x=new De(1),a.each(function(e){x=C.multiply(x,C.pow(e,i))}),a=x))}return a=P(a),(a=S&&M?C.multiply(a,function(e){if(e.group===B){var t=e.value,n=ke(t)[0];if(!n)return ee(\"Unable to compute prime factors. This should not happen. Please review and report.\"),e;t=new Fe(Math.log(t)/Math.log(n)).multiply(e.power);if(t.den>e.power.den)return e;e=ue(t)?De(Math.pow(n,t)):new De(n).setPower(t)}return e}(C.multiply(S,M))):a).fname===z?(M=((S=a.group===V)?a.power.multiplier:a.power).toString(),ge(M)&&(S=S?C.divide(a.power,new De(2)):new De(a.power.divide(new Fe(2))),n=a.multiplier,(a=C.pow(a.args[0],S)).multiplier=a.multiplier.multiply(n))):!F.IGNORE_E&&a.isE()&&a.group===V&&a.power.contains(\"pi\")&&a.power.contains(F.IMAGINARY)&&i.group===Z&&(l=i.stripVar(F.IMAGINARY),a=C.add(I.cos(l),C.multiply(De.imaginary(),I.sin(l)))),a}return re(r)&&t?r=r.map(function(e){return C.pow(e,i.clone())}):ie(r)&&t?(s=new He,r.eachElement(function(e,t,n){s.set(t,n,C.pow(e,i.clone()))}),r=s):e&&ie(i)&&(s=new He,i.eachElement(function(e,t,n){s.set(t,n,C.pow(r.clone(),e))}),r=s),r},this.comma=function(e,t){return(e=!(e instanceof L)?L.create(e):e).append(t),e},this.mod=t,this.slice=function(e,t){return new x(e,t)},this.equals=function(e,t){return e.group===G||e.isLinear()||K(\"Cannot set equality for \"+e.toString()),J[e.value]=t.clone(),t},this.percent=function(e){return C.divide(e,new De(100))},this.assign=function(e,n){if(e instanceof L&&n instanceof L)return e.elements.map(function(e,t){return C.assign(e,n.elements[t])}),Ve.fromArray(n.elements);if(e.parent){var t=e.parent;return t.elements[t.getter]=n,delete t.getter,t}if(e.group!==G)throw new Re(\"Cannot complete operation. Incorrect LH value for \"+e);return J[e.value]=n},this.function_assign=function(e,t){var n=e.elements.pop();return fe(n,e.elements,t)};function v(e){return new De(!0===e?1:0)}this.eq=function(e,t){return v(e.equals(t))},this.gt=function(e,t){return v(e.gt(t))},this.gte=function(e,t){return v(e.gte(t))},this.lt=function(e,t){return v(e.lt(t))},this.lte=function(e,t){return v(e.lte(t))},this.factorial=function(e){return this.symfunction(Y,[e])},this.dfactorial=function(e){return this.symfunction(W,[e])}}F.FUNCTION_MODULES.push(Te),x(Te),Math.sign=Math.sign||function(e){return 0===(e=+e)||isNaN(e)?e:0<e?1:-1},Math.cosh=Math.cosh||function(e){e=Math.exp(e);return(e+1/e)/2},Math.sech=Math.sech||function(e){return 1/Math.cosh(e)},Math.csch=Math.csch||function(e){return 1/Math.sinh(e)},Math.coth=Math.coth||function(e){return 1/Math.tanh(e)},Math.sinh=Math.sinh||function(e){e=Math.exp(e);return(e-1/e)/2},Math.tanh=Math.tanh||function(e){if(e===1/0)return 1;if(e===-1/0)return-1;e=Math.exp(2*e);return(e-1)/(e+1)},Math.asinh=Math.asinh||function(e){return e===-1/0?e:Math.log(e+Math.sqrt(e*e+1))},Math.acosh=Math.acosh||function(e){return Math.log(e+Math.sqrt(e*e-1))},Math.atanh=Math.atanh||function(e){return Math.log((1+e)/(1-e))/2},Math.log10=Math.log10||function(e){return Math.log(e)*Math.LOG10E},Math.trunc=Math.trunc||function(e){return isNaN(e)?NaN:0<e?Math.floor(e):Math.ceil(e)},ke(314146179365),O.getExpression=function(e,t){\"last\"!==e&&e||(e=p.length);e=p[(e=\"first\"===e?1:e)-1];return e&&new O(e)},(O.prototype={text:function(e,t){return t=t||19,e=e||\"decimals\",this.symbol.text_?this.symbol.text_(e):Pe(this.symbol,e,void 0,t)},latex:function(e){return this.symbol.latex?this.symbol.latex(e):Ge.latex(this.symbol,e)},valueOf:function(){return this.symbol.valueOf()},evaluate:function(){if(re(this.symbol)&&0===this.symbol.dimensions())return this;var e,t=arguments[0],n=1;\"string\"==typeof t?e=\"%\"===t.charAt(0)?O.getExpression(t.substr(1)).text():t:t instanceof O||ne(t)?e=t.text():(e=this.symbol.text(),n--);var r=arguments[n]||{};return new O(ye(\"PARSE2NUMBER\",function(){return d.parse(e,r)},!0))},buildFunction:function(e){return Ze.build(this.symbol,e)},isNumber:function(){return oe(this.symbol)},isInfinity:function(){return Math.abs(this.symbol.multiplier)===1/0},isImaginary:function(){return Se(d.parse(this.symbol)).isImaginary()},variables:function(){return b(this.symbol)},toString:function(){try{return ae(this.symbol)?\"[\"+this.symbol.toString()+\"]\":this.symbol.toString()}catch(e){return\"\"}},toDecimal:function(e){F.precision=e;e=Pe(this.symbol,\"decimals\");return F.precision=void 0,e},isFraction:function(){return v(this.symbol)},isPolynomial:function(){return this.symbol.isPoly()},sub:function(e,t){return new O(this.symbol.sub(d.parse(e),d.parse(t)))},operation:function(e,t){return i(t)?t=t.symbol:ne(t)||(t=d.parse(t)),new O(d[e](this.symbol.clone(),t.clone()))},add:function(e){return this.operation(\"add\",e)},subtract:function(e){return this.operation(\"subtract\",e)},multiply:function(e){return this.operation(\"multiply\",e)},divide:function(e){return this.operation(\"divide\",e)},pow:function(e){return this.operation(\"pow\",e)},expand:function(){return new O(d.expand(this.symbol))},each:function(e,t){if(this.symbol.each)this.symbol.each(e,t);else if(ae(this.symbol))for(t=0;t<this.symbol.length;t++)e.call(this.symbol,this.symbol[t],t);else e.call(this.symbol)},eq:function(e){ne(e)||(e=d.parse(e));try{return d.subtract(this.symbol.clone(),e).equals(0)}catch(e){return!1}},lt:function(e){ne(e)||(e=d.parse(e));try{return Se(d.subtract(this.symbol.clone(),e)).lessThan(0)}catch(e){return!1}},gt:function(e){ne(e)||(e=d.parse(e));try{return Se(d.subtract(this.symbol.clone(),e)).greaterThan(0)}catch(e){return!1}},gte:function(e){return this.gt(e)||this.eq(e)},lte:function(e){return this.lt(e)||this.eq(e)},numerator:function(){return new O(this.symbol.getNum())},denominator:function(){return new O(this.symbol.getDenom())},hasFunction:function(e){return this.symbol.containsFunction(e)},contains:function(e){return this.symbol.contains(e)}}).toTeX=O.prototype.latex,T.prototype={fromScientific:function(e){e=String(e).toLowerCase().split(\"e\");return this.coeff=e[0],this.exponent=e[1],this},convert:function(e){var t=e.split(\".\"),n=t[0]||\"\",e=t[1]||\"\",n=T.removeLeadingZeroes(n),e=T.removeTrailingZeroes(e),t=n.length,n=n+e,e=T.leadingZeroes(n).length;this.exponent=t-(e+1);n=T.removeLeadingZeroes(n);return this.coeff=n.charAt(0)+\".\"+(n.substr(1,n.length)||\"0\"),this},round:function(e){var t,n,r=this.copy();return 0===(e=Number(e))?r.coeff=r.coeff.charAt(0):(t=this.coeff.substring(0,e+1),e=(n=this.coeff.substring(e+1,e+3)).charAt(0),4<n.charAt(1)&&e++,r.coeff=t+e),r},copy:function(){var e=new T(0);return e.coeff=this.coeff,e.exponent=this.exponent,e.sign=this.sign,e},toString:function(e){e=void 0===e?this.coeff:T.round(this.coeff,e),e=0===this.exponent&&F.SCIENTIFIC_IGNORE_INTS?this.coeff:e+\"e\"+this.exponent;return(-1===this.sign?\"-\":\"\")+e}},T.isScientific=function(e){return/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(e)},T.leadingZeroes=function(e){e=e.match(/^(0*).*$/);return e?e[1]:\"\"},T.removeLeadingZeroes=function(e){e=e.match(/^0*(.*)$/);return e?e[1]:\"\"},T.removeTrailingZeroes=function(e){var t=e.match(/0*$/);return t?e.substring(0,e.length-t[0].length):\"\"},T.round=function(e,t){e=me(e,t),t-=String(e).split(\".\").pop().length;return 0<t&&(e+=new Array(1+t).join(0)),e},T.prototype={fromScientific:function(e){e=String(e).toLowerCase().split(\"e\");return this.coeff=e[0],this.exponent=e[1],this},convert:function(e){var t=e.split(\".\"),n=t[0]||\"\",r=t[1]||\"\",n=T.removeLeadingZeroes(n),r=T.removeTrailingZeroes(r),i=n.length,e=n+r,t=T.leadingZeroes(e).length;this.exponent=i-(t+1);e=T.removeLeadingZeroes(e);this.coeff=e.charAt(0)+\".\"+(e.substr(1,e.length)||\"0\");e=this.coeff.split(\".\")[1]||\"\";return this.decp=\"0\"===e?0:e.length,this.dec=r,this.wholes=n,this},round:function(e){var t,n,r=this.copy();return 0===(e=Number(e))?r.coeff=r.coeff.charAt(0):(t=this.coeff.substring(0,e+1),e=(n=this.coeff.substring(e+1,e+3)).charAt(0),4<n.charAt(1)&&e++,r.coeff=t+e),r},copy:function(){var e=new T(0);return e.coeff=this.coeff,e.exponent=this.exponent,e.sign=this.sign,e},toString:function(e){var t;return t=F.SCIENTIFIC_IGNORE_ZERO_EXPONENTS&&0===this.exponent&&this.decp<e?0===this.decp?this.wholes:this.coeff:(t=void 0===e?this.coeff:T.round(this.coeff,Math.min(e,this.decp||1)),0===this.exponent?t:t+\"e\"+this.exponent),(-1===this.sign?\"-\":\"\")+t}},T.isScientific=function(e){return/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(e)},T.leadingZeroes=function(e){e=e.match(/^(0*).*$/);return e?e[1]:\"\"},T.removeLeadingZeroes=function(e){e=e.match(/^0*(.*)$/);return e?e[1]:\"\"},T.removeTrailingZeroes=function(e){var t=e.match(/0*$/);return t?e.substring(0,e.length-t[0].length):\"\"},Fe.create=function(e){if(e instanceof Fe)return e;var t=\"-\"===(e=e.toString()).charAt(0),e=new Fe(e=t?e.substr(1,e.length-1):e);return t&&e.negate(),e},Fe.isFrac=function(e){return e instanceof Fe},Fe.quick=function(e,t){var n=new Fe;return n.num=new S(e),n.den=new S(t),n},Fe.simple=function(e){for(var t=String(y(e)).split(\".\"),e=t.join(\"\"),n=1,r=(t[1]||\"\").length,i=0;i<r;i++)n+=\"0\";return Fe.quick(e,n).simplify()},Fe.prototype={multiply:function(e){if(this.isOne())return e.clone();if(e.isOne())return this.clone();var t=this.clone();return t.num=t.num.multiply(e.num),t.den=t.den.multiply(e.den),t.simplify()},divide:function(e){if(e.equals(0))throw new qe(\"Division by zero not allowed!\");return this.clone().multiply(e.clone().invert()).simplify()},subtract:function(e){return this.clone().add(e.clone().neg())},neg:function(){return this.num=this.num.multiply(-1),this},add:function(e){var t=this.den,n=e.den,r=this.clone(),i=r.num,e=e.num;return t.equals(n)?r.num=i.add(e):(r.num=i.multiply(n).add(e.multiply(t)),r.den=t.multiply(n)),r.simplify()},mod:function(e){var t=this.clone(),e=e.clone();return t.num=t.num.multiply(e.den),t.den=t.den.multiply(e.den),e.num=e.num.multiply(this.den),e.den=e.den.multiply(this.den),t.num=t.num.mod(e.num),t.simplify()},simplify:function(){var e=S.gcd(this.num,this.den);return this.num=this.num.divide(e),this.den=this.den.divide(e),this},clone:function(){var e=new Fe;return e.num=new S(this.num),e.den=new S(this.den),e},decimal:function(e){var t=this.num.isNegative()?\"-\":\"\";if(this.num.equals(this.den))return\"1\";e=e||F.PRECISION,e++;for(var n=[],r=this.num.abs(),i=this.den,s=0;s<e;s++){var o=r.divide(i),a=r.subtract(o.multiply(i));if(n.push(o),a.equals(0))break;r=a.times(10)}var u=n.shift();if(0===n.length)return t+u.toString();if(s===e){for(var l=[],s=0;s<2;s++)l.unshift(n.pop());n.push(Math.round(l.join(\".\")))}return t+(u.toString()+\".\"+n.join(\"\"))},toDecimal:function(e){return(e=e||F.PRECISION)?this.decimal(e):this.num/this.den},qcompare:function(e){return[this.num.multiply(e.den),e.num.multiply(this.den)]},equals:function(e){isNaN(e)||(e=new Fe(e));e=this.qcompare(e);return e[0].equals(e[1])},absEquals:function(e){isNaN(e)||(e=new Fe(e));e=this.qcompare(e);return e[0].abs().equals(e[1])},greaterThan:function(e){isNaN(e)||(e=new Fe(e));e=this.qcompare(e);return e[0].gt(e[1])},gte:function(e){return this.greaterThan(e)||this.equals(e)},lte:function(e){return this.lessThan(e)||this.equals(e)},lessThan:function(e){isNaN(e)||(e=new Fe(e));e=this.qcompare(e);return e[0].lt(e[1])},isInteger:function(){return this.den.equals(1)},negate:function(){return this.num=this.num.multiply(-1),this},invert:function(){var e,t=this.den;return this.num.equals(0)||(e=this.num.isNegative(),this.den=this.num.abs(),this.num=t,e&&(this.num=this.num.multiply(-1))),this},isOne:function(){return this.num.equals(1)&&this.den.equals(1)},sign:function(){return this.num.isNegative()?-1:1},abs:function(){return this.num=this.num.abs(),this},gcd:function(e){return Fe.quick(S.gcd(e.num,this.num),S.lcm(e.den,this.den))},toString:function(){return this.den.equals(1)?this.num.toString():this.num.toString()+\"/\"+this.den.toString()},valueOf:function(){return F.USE_BIG?new k(this.num.toString()).div(new k(this.den.toString())):this.num/this.den},isNegative:function(){return this.toDecimal()<0}},De.imaginary=function(){var e=new De(F.IMAGINARY);return e.imaginary=!0,e},De.infinity=function(e){var t=new De(\"Infinity\");return-1===e&&t.negate(),t},De.shell=function(e,t){t=new De(t);return t.group=e,t.symbols={},t.length=0,t},De.unwrapSQRT=function(e,t){var n,r=e.power;return e.fname===z&&(e.isLinear()||t)&&((n=e.args[0].clone()).power=n.power.multiply(new Fe(.5)),n.multiplier=n.multiplier.multiply(e.multiplier),e=n,t&&(e.power=r.multiply(new Fe(.5)))),e},De.hyp=function(e,t){return e=e||new De(0),t=t||new De(0),d.sqrt(d.add(d.pow(e.clone(),new De(2)),d.pow(t.clone(),new De(2))))},De.toPolarFormArray=function(e){var t=e.realpart(),e=e.imagpart();return[De.hyp(t,e),t.equals(0)?d.parse(\"pi/2\"):d.trig.atan(d.divide(e,t))]},De.unwrapPARENS=function(e){if(\"\"!==e.fname)return e;var t=e.args[0];return t.power=t.power.multiply(e.power),t.multiplier=t.multiplier.multiply(e.multiplier),\"\"===e.fname?De.unwrapPARENS(t):t},De.create=function(e,t){return d.parse(\"(\"+e+\")^(\"+(t=void 0===t?1:t)+\")\")},De.prototype={getNth:function(e){var t=Se(d.pow(d.parse(this.multiplier),d.parse(e).invert())),n=d.parse(me(t));return Se(d.pow(n,d.parse(e))).equals(d.parse(this.multiplier))?n:t},isToNth:function(t){var n,e=this.getNth(t),e=ue(e);return this.group===Z?(n=!0,this.each(function(e){e.isToNth(t)||(n=!1)})):n=this.group===D||ue(d.divide(d.parse(this.power),d.parse(t))),e&&n},isSquare:function(){return this.isToNth(2)},isCube:function(){return this.isToNth(3)},isSimple:function(){return this.power.equals(1)&&this.multiplier.equals(1)},powSimp:function(){if(this.group!==Z)return this.clone();var t=[],e=this.multiplier.sign();this.each(function(e){e=e.power;if(ne(e)||e.equals(1))return this.clone();t.push(e)});var n,r=new Fe(c(t)),e=this.multiplier.sign(),i=this.multiplier.clone().abs(),s=Te.ifactor(i),o=new Fe(1),a=new Fe(1);for(n in s){var u=new Fe(s[n]);u.lessThan(r)||(u=u.divide(r).subtract(new Fe(1)),a=a.multiply(new Fe(n))),o=o.multiply(d.parse(E(n)+\"^\"+E(u)).multiplier)}var l=new De(a);this.each(function(e){(e=e.clone()).power=e.power.divide(r),l=d.multiply(l,e)});i=d.symfunction($,[l]);return i.power=r,i.multiplier=e<0?o.negate():o,i},equals:function(e){return ne(e)||(e=new De(e)),this.value===e.value&&this.power.equals(e.power)&&this.multiplier.equals(e.multiplier)&&this.group===e.group},abs:function(){var e=this.clone();return e.multiplier.abs(),e},gt:function(e){return ne(e)||(e=new De(e)),this.isConstant()&&e.isConstant()&&this.multiplier.greaterThan(e.multiplier)},gte:function(e){return ne(e)||(e=new De(e)),this.equals(e)||this.isConstant()&&e.isConstant()&&this.multiplier.greaterThan(e.multiplier)},lt:function(e){return ne(e)||(e=new De(e)),this.isConstant()&&e.isConstant()&&this.multiplier.lessThan(e.multiplier)},lte:function(e){return ne(e)||(e=new De(e)),this.equals(e)||this.isConstant()&&e.isConstant()&&this.multiplier.lessThan(e.multiplier)},isPoly:function(e){var t=this.group,n=this.power;if(!ue(n)||n<0)return!1;if(t===D||t===G||this.isConstant(!0))return!0;n=b(this);if(t===Z&&1===n.length){var r=n[0];if(!r)return!0;for(s in this.symbols){var i=this.symbols[s];if(i.group===H&&!i.args[0].isConstant())return!1;if(!i.contains(r)&&!i.isConstant(!0))return!1}return!0}if(this.isComposite()||t===Z&&e){if(!e&&1<n.length)return!1;for(var s in this.symbols)if(!this.symbols[s].isPoly(e))return!1;return!0}return!1},stripVar:function(t,e){var n;return this.group!==j&&this.group!==G||this.value!==t?this.group===Z&&this.isLinear()?(n=new De(1),this.each(function(e){e.contains(t,!0)||(n=d.multiply(n,e.clone()))}),n.multiplier=n.multiplier.multiply(this.multiplier)):this.group!==X||this.isLinear()?this.group===X&&this.isLinear()?(n=new De(0),this.each(function(e){e.contains(t)||((e=e.clone()).multiplier=e.multiplier.multiply(this.multiplier),n=d.add(n,e))}),n.equals(0)&&(n=new De(this.multiplier))):n=this.group===V&&this.power.contains(t,!0)||this.group===H&&this.contains(t)?new De(this.multiplier):this.clone():n=new De(this.multiplier):n=new De(e?0:this.multiplier),n},toArray:function(n,r){r=r||{arr:[],add:function(e,t){var n=this.arr[t];this.arr[t]=n?d.add(n,e):e}};var e=this.group;if(e===G&&this.contains(n))r.add(new De(this.multiplier),this.power);else if(e===Z){var t=this.stripVar(n),i=d.divide(this.clone(),t.clone()),i=i.isConstant()?0:i.power;r.add(t,i)}else if(e===j&&this.value===n)this.each(function(e,t){r.add(e.stripVar(n),t)});else if(e===X)this.each(function(e){e.toArray(n,r)});else{if(this.contains(n))throw new I(\"Cannot convert to array! Exiting\");r.add(this.clone(),0)}r=r.arr;for(var s=0;s<r.length;s++)r[s]||(r[s]=new De(0));return r},hasFunc:function(e){var t=this.group===H||this.group===V;if(t&&!e||t&&this.contains(e))return!0;if(this.symbols)for(var n in this.symbols)if(this.symbols[n].hasFunc(e))return!0;return!1},sub:function(t,n){t=ne(t)?t.clone():d.parse(t),n=ne(n)?n.clone():d.parse(n),t.group!==D&&t.group!==B||K(\"Cannot substitute a number. Must be a variable\");var r,e=!1,i=t.multiplier.equals(1),s=this.multiplier.clone();if(this.value===t.value&&(this.group!==j&&t.group!==j||this.group===j&&t.group===j))(i||t.multiplier.equals(this.multiplier))&&(t.isLinear()?r=n:t.power.equals(this.power)&&(r=n,e=!0),t.multiplier.equals(this.multiplier)&&(s=new Fe(1)));else if(this.group===Z||this.previousGroup===Z)r=new De(1),this.each(function(e){e=d.parse(e.sub(t,n));r=d.multiply(r,e)});else if(this.isComposite()){var o=this.clone();if(t.isComposite()&&o.isComposite()&&o.isLinear()&&t.isLinear()){var a,u=function(e,t){for(var n in e.symbols){n=e.symbols[n];if(n.isComposite()&&u(n,t)||n.equals(t))return!0}return!1};for(a in t.symbols)if(!u(o,t.symbols[a]))return o.clone();r=d.add(d.subtract(o.clone(),t),n)}else r=new De(0),o.each(function(e){r=d.add(r,e.sub(t,n))})}else if(this.group===V)r=d.parse(this.value).sub(t,n);else if(this.group===H){for(var l=[],c=0;c<this.args.length;c++){var p=this.args[c];ne(p)||(p=d.parse(p)),l.push(p.sub(t,n))}r=d.symfunction(this.fname,l)}return r?(e||(e=this.group===V?this.power.sub(t,n):d.parse(this.power),r=d.pow(r,e)),r.multiplier=r.multiplier.multiply(s),r):this.clone()},isMonomial:function(){if(this.group===G)return!0;if(this.group!==Z)return!1;for(var e in this.symbols)if(this.symbols[e].group!==G)return!1;return!0},isPi:function(){return this.group===G&&\"pi\"===this.value},sign:function(){return this.multiplier.sign()},isE:function(){return\"e\"===this.value},isSQRT:function(){return this.fname===z},isConstant:function(t,n){if(n&&this.group===Z)for(var e in this.symbols)if(this.symbols[e].isConstant(!0))return!0;if(\"functions\"===t&&this.isComposite()){var r=!0;return this.each(function(e){e.isConstant(t,n)||(r=!1)},!0),r}if(\"all\"===t&&(this.isPi()||this.isE()))return!0;if(t&&this.group===H){for(var i=0;i<this.args.length;i++)if(!this.args[i].isConstant(t))return!1;return!0}return t?oe(this):this.value===l},isImaginary:function(){if(this.imaginary)return!0;if(this.symbols)for(var e in this.symbols)if(this.symbols[e].isImaginary())return!0;return!1},realpart:function(){if(this.isConstant())return this.clone();if(this.imaginary)return new De(0);if(this.isComposite()){var t=new De(0);return this.each(function(e){t=d.add(t,e.realpart())}),t}return this.isImaginary()?new De(0):this.clone()},imagpart:function(){if(this.group===G&&this.isImaginary())return new De(this.multiplier);if(this.isComposite()){var t=new De(0);return this.each(function(e){t=d.add(t,e.imagpart())}),t}return this.group===Z?this.stripVar(F.IMAGINARY):new De(0)},isInteger:function(){return this.isConstant()&&this.multiplier.isInteger()},isLinear:function(e){if(e){if(this.isConstant())return!0;if(this.group===G)return this.value!==e||this.power.equals(1);if(this.isComposite()&&this.power.equals(1)){for(var t in this.symbols)if(!this.symbols[t].isLinear(e))return!1;return!0}return this.group===Z&&this.symbols[e]?this.symbols[e].isLinear(e):!1}return this.power.equals(1)},containsFunction:function(e){if(\"string\"==typeof e&&(e=[e]),this.group===H&&-1!==e.indexOf(this.fname))return!0;if(this.symbols)for(var t in this.symbols)if(this.symbols[t].containsFunction(e))return!0;return!1},multiplyPower:function(e){if(this.group===D&&this.multiplier.equals(1))return this;var t,n=this.power;return this.group!==V&&e.group===D?(t=e.multiplier,this.group!==D||t.isInteger()||this.convert(B),this.power=n.equals(1)?t.clone():n.multiply(t),this.group===B&&ue(this.power)&&(this.value=Math.pow(this.value,this.power),this.toLinear(),this.convert(D))):(this.group!==V&&(n=new De(n),this.convert(V)),this.power=d.multiply(n,e)),this},setPower:function(e,t){return this.group===D&&this.multiplier.equals(1)||(this.group!==V||ne(e)?(n=!1,ne(e)&&(e.group===D?e=e.multiplier:n=!0),n=n?V:B,this.power=e,this.group===D&&n&&this.convert(n,t)):(this.group=this.previousGroup,delete this.previousGroup,this.group===D?(this.multiplier=new Fe(this.value),this.value=l):this.power=e)),this;var n},isInverse:function(){return this.group===V?this.power.multiplier.lessThan(0):this.power<0},clone:function(e){var t,n=e||new De(0),r=[\"value\",\"group\",\"length\",\"previousGroup\",\"imaginary\",\"fname\",\"args\",\"isInfinity\",\"scientific\"],i=r.length;if(this.symbols)for(var s in n.symbols={},this.symbols)n.symbols[s]=this.symbols[s].clone();for(t=0;t<i;t++)void 0!==this[r[t]]&&(n[r[t]]=this[r[t]]);return n.power=this.power.clone(),n.multiplier=this.multiplier.clone(),this.isConversion&&(n.isConversion=this.isConversion),this.isUnit&&(n.isUnit=this.isUnit),n},toUnitMultiplier:function(e){return this.multiplier.num=new S(this.multiplier.num.isNegative()&&e?-1:1),this.multiplier.den=new S(1),this},toLinear:function(){return this.power.equals(1)||this.setPower(new Fe(1)),this},each:function(e,t){if(this.symbols)for(var n in this.symbols){var r=this.symbols[n];if(r.group===j&&t)for(var i in r.symbols)e.call(n,r.symbols[i],i);else e.call(this,r,n)}else e.call(this,this,this.value)},valueOf:function(){return this.group===D?this.multiplier.valueOf():0===this.power?1:0===this.multiplier?0:Pe(this,\"decimals\")},contains:function(e,t){e=String(e);var n=this.group;if(this.value===e)return!0;if(this.symbols)for(var r in this.symbols)if(this.symbols[r].contains(e,t))return!0;if(n===H||this.previousGroup===H)for(var i=0;i<this.args.length;i++)if(this.args[i].contains(e,t))return!0;if(n===V){if(t&&this.power.contains(e,t))return!0;if(this.value===e)return!0}return this.value===e},negate:function(){return this.multiplier.negate(),this.group!==X&&this.group!==j||this.distributeMultiplier(),this},invert:function(e,t){return e||(this.multiplier=this.multiplier.invert()),ne(this.power)?this.power.negate():this.group===Z&&t?this.each(function(e){return e.invert()}):this.power&&this.group!==D&&this.power.negate(),this},distributeMultiplier:function(e){e=e?this.power.absEquals(1):this.power.equals(1);if(this.symbols&&e&&this.group!==Z&&!this.multiplier.equals(1)){for(var t in this.symbols){t=this.symbols[t];t.multiplier=t.multiplier.multiply(this.multiplier),t.distributeMultiplier()}this.toUnitMultiplier()}return this},distributeExponent:function(){if(!this.power.equals(1)){var e,t=this.power;for(e in this.symbols){var n=this.symbols[e];n.group===V?n.power=d.multiply(n.power,new De(t)):this.symbols[e].power=this.symbols[e].power.multiply(t)}this.toLinear()}return this},convert:function(e,t){var n;return H<e?(n=this.clone(),this.symbols={},(e===Z?n:this).toUnitMultiplier(),this.group===H&&(n.args=this.args,delete this.args,delete this.fname),this.isImgSymbol&&delete this.isImgSymbol,this.toLinear(),this.symbols[n.keyForGroup(e)]=n,this.group=e,this.length=1):e===V?this.group===D&&this.multiplier.equals(1)||(this.group!==V&&(this.previousGroup=this.group),this.group===D?(this.value=this.multiplier.num.toString(),this.toUnitMultiplier()):this.value=Pe(this,\"hash\"),this.group=V):e===D?(n=this.multiplier.toDecimal(),this.symbols&&(this.symbols=void 0),new De(this.group===B?n*Math.pow(this.value,this.power):n).clone(this)):e===B&&this.group===D&&(this.value=t?this.multiplier.num.toString():Math.abs(this.multiplier.num.toString()),this.toUnitMultiplier(!t),this.group=B),this},insert:function(e,t){var n,r;return ne(e)||K(\"Object \"+e+\" is not of type Symbol!\"),this.symbols&&(r=this.group,H<r&&(r=(n=e.keyForGroup(r))in this.symbols&&this.symbols[n],\"add\"===t?(t=n,r?(this.symbols[t]=d.add(r,e),this.symbols[t].multiplier.equals(0)&&(delete this.symbols[t],this.length--,0===this.length&&(this.convert(D),this.multiplier=new Fe(0)))):(this.symbols[n]=e,this.length++)):(e.group===B&&ue(e.power)&&e.convert(D),e.group!==V?(this.multiplier=this.multiplier.multiply(e.multiplier),e.toUnitMultiplier()):(e.parens=e.multiplier.lessThan(0),this.multiplier=this.multiplier.multiply(e.multiplier.clone().abs()),e.toUnitMultiplier(!0)),r&&((e=d.multiply(we(this.symbols,n),e)).isConstant()&&(this.multiplier=this.multiplier.multiply(e.multiplier),e=new De(1)),this.length--),e.isOne(!0)?e.multiplier.lessThan(0)&&this.negate():(this.symbols[n]=e,this.length++)),0===this.length&&this.convert(D),this.group!==X&&this.group!==Z||this.updateHash())),this},attach:function(e){if(ae(e)){for(var t=0;t<e.length;t++)this.insert(e[t],\"add\");return this}return this.insert(e,\"add\")},combine:function(e){if(ae(e)){for(var t=0;t<e.length;t++)this.insert(e[t],\"multiply\");return this}return this.insert(e,\"multiply\")},updateHash:function(){if(this.group!==D)if(this.group===H){for(var e=\"\",t=this.args,n=this.fname===$,r=0;r<t.length;r++)e+=(0===r?\"\":\",\")+Pe(t[r]);var i=n?\"\":this.fname;this.value=i+(n?e:E(e))}else this.group!==G&&this.group!==j&&(this.value=Pe(this,\"hash\"))},keyForGroup:function(e){var t,n=this.group;if(n===D)t=this.value;else if(n===G||n===B)t=e===j?this.power.toDecimal():this.value;else if(n===H)t=e===j?this.power.toDecimal():Pe(this,\"hash\");else{if(n===j)return t=e===Z?Pe(this,\"hash\"):e===X?this.power.equals(1)?this.value:E(Pe(this,\"hash\"))+F.POWER_OPERATOR+this.power.toDecimal():e===j?this.power.toString():this.value;n===X?(e===X&&(t=Pe(this,\"hash\")),t=e===j?this.power.toDecimal():this.value):n===Z?t=e===j?this.power.toDecimal():Pe(this,\"hash\"):n===V&&(t=e===j?Pe(this.power):Pe(this,\"hash\"))}return t},collectSymbols:function(e,t,n,r){var i=[];if(this.symbols)for(var s in this.symbols){s=this.symbols[s];!r||s.group!==j&&s.group!==X?i.push(e?e(s,t):s):i=i.concat(s.collectSymbols())}else i.push(this);return i.sort(n=null===n?void 0:n)},latex:function(e){return Ge.latex(this,e)},text:function(e){return Pe(this,e)},isOne:function(e){return this.group===D?this.multiplier[e?\"absEquals\":\"equals\"](1):this.power.equals(0)},isComposite:function(){var e=this.group,t=this.previousGroup;return e===X||e===j||t===j||t===X},isCombination:function(){var e=this.group,t=this.previousGroup;return e===Z||t===Z},lessThan:function(e){return this.multiplier.lessThan(e)},greaterThan:function(e){return ne(e)||(e=new De(e)),!(!this.isConstant(!0)||!e.isConstant(!0))&&this.multiplier.greaterThan(e.multiplier)},getDenom:function(){var e=this.clone();if((e=this.group===Z&&this.power.lessThan(0)?d.expand(e):e).power.lessThan(0)){var t,n=d.parse(e.multiplier.den);(t=e.toUnitMultiplier()).power.negate(),t=d.multiply(n,t)}else if(e.group===Z)for(var r in t=d.parse(e.multiplier.den),e.symbols)e.symbols[r].power<0&&(t=d.multiply(t,e.symbols[r].clone().invert()));else t=d.parse(e.multiplier.den);return t},getNum:function(){var t,e=this.clone();return(e=e.group===Z&&e.power.lessThan(0)?d.expand(e):e).power.greaterThan(0)&&e.group!==Z?t=d.multiply(d.parse(e.multiplier.num),e.toUnitMultiplier()):e.group===Z?(t=d.parse(e.multiplier.num),e.each(function(e){(0<e.power||e.group===V&&0<e.power.multiplier)&&(t=d.multiply(t,e.clone()))})):t=d.parse(e.multiplier.num),t},toString:function(){return this.text()}};var Be={convert:function(e,t){var n,r,i,s;return 0===e?s=[0,1]:e<1e-6||1e20<e?(n=this.quickConversion(Number(e)))[1]<=1e20?(i=e/(r=Math.abs(e)),(s=this.fullConversion(r.toFixed((n[1]+\"\").length-1)))[0]=s[0]*i):s=n:s=this.fullConversion(e),s},quickConversion:function(e){return function(e){T.isScientific(e)&&(e=y(e));var t=1===(n=(e=(n=\"\",\"-\"===(e=(t=\"string\"!=typeof(t=e)?t.toString():t).charAt(0))?(t=t.substr(1,t.length),n=\"-\"):\"+\"===e&&(t=t.substr(1,t.length)),{sign:n,value:t})).value.split(\".\")).length?n[0]:n[0]+n[1],n=n[1]?n[1].length:0,n=`1${\"0\".repeat(n)}`;return\"0\"!==t&&(t=t.replace(/^0+/,\"\")),[e.sign+t,n]}(e)},fullConversion:function(e){for(var t=!1,n=0,r=1,i=1,s=0,o=0,a=e;!t;){1e4<++o&&(t=!0);var u=Math.floor(a),l=n+u*i,c=r+u*s,u=a-u;u<1e-16&&(t=!0),a=1/u,n=i,r=s,i=l,s=c,(Math.abs(l/c-e)<1e-16||30<o)&&(t=!0)}return[l,c]}},Ge={parser:function(){var e,t=[\"classes\",\"setOperator\",\"getOperators\",\"getBrackets\",\"tokenize\",\"toRPN\",\"tree\",\"units\"],n=new P;for(e in n)-1===t.indexOf(e)&&delete n[e];return n.setOperator({precedence:8,operator:\"\\\\\",action:\"slash\",prefix:!0,postfix:!1,leftAssoc:!0,operation:function(e){return e}}),n.setOperator({precedence:8,operator:\"\\\\,\",action:\"slash_comma\",prefix:!0,postfix:!1,leftAssoc:!0,operation:function(e){return e}}),n.getBrackets()[\"{\"].maps_to=void 0,n}(),space:\"~\",dot:\" \\\\cdot \",latex:function(e,t){if((e=e.clone?e.clone():e)instanceof d.classes.Collection&&(e=e.elements),ae(e)){for(var n=[],r=0;r<e.length;r++){var i=e[r];ne(i)||(i=d.parse(i)),n.push(this.latex(i,t))}return this.brackets(n.join(\", \"),\"square\")}if(ie(e)){for(var s=\"\\\\begin{pmatrix}\\n\",r=0;r<e.elements.length;r++){for(var o=[],a=e.elements[r],u=0;u<a.length;u++)o.push(this.latex(a[u],t));s+=o.join(\" & \"),r<e.elements.length-1&&(s+=\"\\\\\\\\\\n\")}return s+=\"\\\\end{pmatrix}\"}if(re(e)){for(s=\"\\\\left[\",r=0;r<e.elements.length;r++)s+=this.latex(e.elements[r],t)+\" \"+(r!==e.elements.length-1?\",\\\\,\":\"\");return s+=\"\\\\right]\"}if(se(e)){for(s=\"\\\\{\",r=0;r<e.elements.length;r++)s+=this.latex(e.elements[r],t)+\" \"+(r!==e.elements.length-1?\",\\\\,\":\"\");return s+=\"\\\\}\"}var l,c=\"decimal\"===t||\"decimals\"===t,p=(e=e.clone()).power,f=A(p),h=e.multiplier.lessThan(0);if(e.group===B&&c)return String(e.multiplier.toDecimal()*Math.pow(e.value,e.power.toDecimal()));e.multiplier=e.multiplier.abs(),l=c?[String(e.multiplier.toDecimal()),\"\"]:[e.multiplier.num,e.multiplier.den];var m,g=this.value(e,f,t,h);f&&p.negate(),c?(m=ne(p)?Ge.latex(p,t):String(p.toDecimal()),\"1\"===String(m)&&(m=\"\")):m=ne(p)?this.latex(p,t):this.formatFrac(p,!0);p=[\"\",\"\"];return p[f?1:0]=m,((h?\"-\":\"\")+this.set(l,g,p,e.group===Z)).replace(/\\+\\-/gi,\"-\")},greek:{alpha:\"\\\\alpha\",beta:\"\\\\beta\",gamma:\"\\\\gamma\",delta:\"\\\\delta\",epsilon:\"\\\\epsilon\",zeta:\"\\\\zeta\",eta:\"\\\\eta\",theta:\"\\\\theta\",iota:\"\\\\iota\",kappa:\"\\\\kappa\",lambda:\"\\\\lambda\",mu:\"\\\\mu\",nu:\"\\\\nu\",xi:\"\\\\xi\",omnikron:\"\\\\omnikron\",pi:\"\\\\pi\",rho:\"\\\\rho\",sigma:\"\\\\sigma\",tau:\"\\\\tau\",upsilon:\"\\\\upsilon\",phi:\"\\\\phi\",chi:\"\\\\chi\",psi:\"\\\\psi\",omega:\"\\\\omega\",Gamma:\"\\\\Gamma\",Delta:\"\\\\Delta\",Epsilon:\"\\\\Epsilon\",Theta:\"\\\\Theta\",Lambda:\"\\\\Lambda\",Xi:\"\\\\Xi\",Pi:\"\\\\Pi\",Sigma:\"\\\\Sigma\",Phi:\"\\\\Phi\",Psi:\"\\\\Psi\",Omega:\"\\\\Omega\"},symbols:{arccos:\"\\\\arccos\",cos:\"\\\\cos\",csc:\"\\\\csc\",exp:\"\\\\exp\",ker:\"\\\\ker\",limsup:\"\\\\limsup\",min:\"\\\\min\",sinh:\"\\\\sinh\",arcsin:\"\\\\arcsin\",cosh:\"\\\\cosh\",deg:\"\\\\deg\",gcd:\"\\\\gcd\",lg:\"\\\\lg\",ln:\"\\\\ln\",Pr:\"\\\\Pr\",sqrt:\"\\\\sqrt\",sup:\"\\\\sup\",arctan:\"\\\\arctan\",cot:\"\\\\cot\",det:\"\\\\det\",hom:\"\\\\hom\",lim:\"\\\\lim\",log:\"\\\\log\",LN:\"\\\\LN\",sec:\"\\\\sec\",tan:\"\\\\tan\",arg:\"\\\\arg\",coth:\"\\\\coth\",dim:\"\\\\dim\",inf:\"\\\\inf\",liminf:\"\\\\liminf\",max:\"\\\\max\",sin:\"\\\\sin\",tanh:\"\\\\tanh\"},value:function(n,e,r,t){var i,s,o,a,u,l,c=n.group,p=n.previousGroup,f=[\"\",\"\"],h=e?1:0;if(n.isInfinity)f[h]=\"\\\\infty\";else if(c===G||c===B||p===G||p===B||p===D){(x=this.formatSubscripts(n.value)).replace&&(x=x.replace(/(.+)_$/,\"$1\\\\_\"));var m=String(x).split(\"_\"),e=this.greek[m[0]];e&&(m[0]=e,x=m.join(\"_\")),(n=this.symbols[m[0]])&&(m[0]=n,x=m.join(\"_\")),f[h]=x}else if(c===H||p===H){for(var g,d,v,w,y=[],m=n.fname,b=0;b<n.args.length;b++){var S,M=\"string\"==typeof(S=n.args[b])?S:this.latex(S,r);y.push(M)}m===z?f[h]=\"\\\\sqrt\"+this.braces(y.join(\",\")):m===Q?f[h]=this.brackets(y.join(\",\"),\"abs\"):m===$?f[h]=this.brackets(y.join(\",\"),\"parens\"):\"limit\"===m?f[h]=\" \\\\lim\\\\limits_{\"+y[1]+\" \\\\to \"+y[2]+\"} \"+y[0]:\"integrate\"===m?f[h]=\"\\\\int\"+this.braces(y[0])+this.braces(\"d\"+y[1]):\"defint\"===m?f[h]=\"\\\\int\\\\limits_\"+this.braces(y[1])+\"^\"+this.braces(y[2])+\" \"+y[0]+\" d\"+y[3]:m===Y||m===W?((S=n.args[0]).power.equals(1)&&(S.isComposite()||S.isCombination())&&(y[0]=this.brackets(y[0])),f[h]=y[0]+(m===Y?\"!\":\"!!\")):\"floor\"===m?f[h]=\"\\\\left \\\\lfloor\"+this.braces(y[0])+\"\\\\right \\\\rfloor\":\"ceil\"===m?f[h]=\"\\\\left \\\\lceil\"+this.braces(y[0])+\"\\\\right \\\\rceil\":m===F.LOG&&1<y.length?f[h]=\"\\\\mathrm\"+this.braces(F.LOG)+\"_\"+this.braces(y[1])+this.brackets(y[0]):m===F.LOG10?f[h]=\"\\\\mathrm\"+this.braces(F.LOG)+\"_\"+this.braces(10)+this.brackets(y[0]):\"sum\"===m?(g=y[0],d=y[1],v=y[2],w=y[3],f[h]=\"\\\\sum\\\\limits_{\"+this.braces(d)+\"=\"+this.braces(v)+\"}^\"+this.braces(w)+\" \"+this.braces(g)):\"product\"===m?(g=y[0],d=y[1],v=y[2],w=y[3],f[h]=\"\\\\prod\\\\limits_{\"+this.braces(d)+\"=\"+this.braces(v)+\"}^\"+this.braces(w)+\" \"+this.braces(g)):\"nthroot\"===m?f[h]=\"\\\\sqrt[\"+y[1]+\"]\"+this.braces(y[0]):\"mod\"===m?f[h]=y[0]+\" \\\\bmod \"+y[1]:\"realpart\"===m?f[h]=\"\\\\operatorname{Re}\"+this.brackets(y[0]):\"imagpart\"===m?f[h]=\"\\\\operatorname{Im}\"+this.brackets(y[0]):(m=\"\"!==m?\"\\\\mathrm\"+this.braces(m.replace(/_/g,\"\\\\_\")):\"\",n.isConversion?f[h]=m+this.brackets(y.join(\"\"),\"parens\"):f[h]=m+this.brackets(y.join(\",\"),\"parens\"))}else if(n.isComposite()){for(var N=n.collectSymbols().sort(c===X||p===X?function(e,t){return t.group-e.group}:function(e,t){e=ne(e.power)?-1:e.power;return(ne(t.power)?-1:t.power)-e}),E=[],q=N.length,b=0;b<q;b++)E.push(Ge.latex(N[b],r));var x=E.join(\"+\");f[h]=n.isLinear()&&n.multiplier.equals(1)&&!t?x:this.brackets(x,\"parens\")}else c!==Z&&p!==V&&p!==Z||(c===Z&&n.distributeExponent(),i=[],s=[],o=[],a=[],l=u=0,c=function(e,t,n){if(1<n&&0<t.length)for(var r=t.length,i=0;i<r;i++){var s=t[i],o=e[s];/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(o)||/^\\\\left\\(.+\\\\right\\)$/g.test(o)||(e[s]=Ge.brackets(o,\"parens\"))}return e},n.each(function(e){var t;A(e.power)?(t=Ge.latex(e.invert(),r),l++,e.isComposite()&&(1!=n.multiplier.den&&1==Math.abs(e.power)&&(t=Ge.brackets(t,\"parens\")),o.push(i.length)),i.push(t)):(t=Ge.latex(e,r),u++,e.isComposite()&&(1!=n.multiplier.num&&1==Math.abs(e.power)&&(t=Ge.brackets(t,\"parens\")),a.push(s.length)),s.push(t))}),c(s,a,u),f[0]=s.join(this.dot),c(i,o,l),f[1]=i.join(this.dot));return f},set:function(e,t,n,r){function i(e){return/^\\\\left\\(.+\\\\right\\)$/.test(e)}var s;n=n&&this.formatP(n),r&&(s=n[0],n[0]=\"\"),t=this.merge(t,n);var o=e[0],n=e[1],e=t[0],t=t[1];e&&1===Number(o)&&(o=\"\"),1===Number(n)&&(n=\"\");e=this.join(o,e,i(e)?\"\":this.dot),t=this.join(n,t,i(t)?\"\":this.dot);if(e&&t){t=this.frac(e,t);return t=r&&s?this.brackets(t)+s:t}return e},merge:function(e,t){for(var n=[],r=0;r<2;r++)n[r]=e[r]+t[r];return n},join:function(e,t,n){return e||t?e&&!t?e:t&&!e?t:e+n+t:\"\"},formatSubscripts:function(e){for(var t=e.toString().split(\"_\"),n=\"\";1<t.length;)0<t.length&&(n=\"_\"+this.braces(t.pop()+n));return t[0]+n},formatP:function(e){for(var t=0;t<2;t++){var n=e[t];n&&(e[t]=\"^\"+this.braces(n))}return e},formatFrac:function(e,t){var n=e.num.toString(),e=e.den.toString();return t&&\"1\"===n&&\"1\"===e?\"\":\"1\"===e?n:this.frac(n,e)},frac:function(e,t){return\"\\\\frac\"+this.braces(e)+this.braces(t)},braces:function(e){return\"{\"+e+\"}\"},brackets:function(e,t){t={parens:[\"(\",\")\"],square:[\"[\",\"]\"],brace:[\"{\",\"}\"],abs:[\"|\",\"|\"],angle:[\"\\\\langle\",\"\\\\rangle\"]}[t=t||\"parens\"];return\"\\\\left\"+t[0]+e+\"\\\\right\"+t[1]},filterTokens:function(e){var t=[];ae(e)&&(t.type=e.type);for(var n=[\"\\\\\",\"left\",\"right\",\"big\",\"Big\",\"large\",\"Large\"],r=0,i=e.length;r<i;r++){var s=e[r],o=e[r+1];\"\\\\\"===s.value&&\"\\\\\"===o.value?t.push(s):ae(s)?t.push(Ge.filterTokens(s)):-1===n.indexOf(s.value)&&t.push(s)}return t},parse:function(e){function t(e){return s[void 0===e?++a:a+=e]}function n(){return Ge.parse(t())}function r(e){return e in o?o[e]:\"*\"===e&&\"&\"===s[a+1].value?(t(2),\",\"):\"&\"===e?(t(),\",\"):\"\\\\\"===e?\"],[\":e}var i=\"\",s=this.filterTokens(e),o={cdot:\"\",times:\"\",infty:\"Infinity\"},a=0;for(u=s.length;a<u;a++){var u,l,c,p,f,h,m,g=s[a];\"frac\"===g.value?i+=n()+\"/\"+n():g.value in Ge.symbols?g.value===z&&\"vector\"===s[a+1].type&&\"Set\"===s[a+2].type?(f=n(),i+=n()+\"^\"+E(\"1/\"+f)):i+=g.value+n():\"int\"===g.value?(h=n(),a++,c=r((c=t().value).substring(1,c.length)),i+=\"integrate\"+E(h+\",\"+c)):\"int_\"===g.value?(u=n(),a++,void 0===(l=t().value)&&(a--,l=n()),h=n(),\"differentialD\"===(c=\",\"===(c=t().value)?t().value:c)&&(a++,c=t().value),\"mathrm\"===c&&(a++,c=t().value),i+=\"defint\"+E(h+\",\"+u+\",\"+l+\",\"+c)):g.value&&g.value.startsWith(\"int_\")?(u=g.value.replace(\"int_\",\"\"),console.log(\"uppernow\"),a++,void 0===(l=t().value)&&(a--,l=n()),h=n(),\"differentialD\"===(c=\",\"===(c=t().value)?t().value:c)&&(a++,c=t().value),\"mathrm\"===c&&(a++,c=t().value),i+=\"defint\"+E(h+\",\"+u+\",\"+l+\",\"+c)):\"mathrm\"===g.value?i+=(h=s[++a][0].value)+n():\"sum_\"===g.value||\"prod_\"===g.value?(p=\"sum_\"===g.value?\"sum\":\"product\",m=t(),a++,f=n(),h=n(),i+=p+E([h,r(m[0]),r(m[2]),r(f)].join(\",\"))):\"lim_\"===g.value?(m=t(),i+=\"limit\"+E([n(),r(m[0]),r(m[2])].join(\",\"))):\"begin\"===g.value?(m=t(),Array.isArray(m)&&\"matrix\"===m[0].value&&(i+=\"matrix([\")):\"end\"===g.value?(m=t(),Array.isArray(m)&&\"matrix\"===m[0].value&&(i+=\"])\")):Array.isArray(g)?i+=r(Ge.parse(g)):i+=r(g.value.toString())}return E(i)}};function Ve(e){re(e)?this.elements=e.items.slice(0):ae(e)?this.elements=e.slice(0):this.elements=[].slice.call(arguments)}function He(){var e=arguments,t=e.length,n=[];if(ie(e))for(o=0;o<t;o++)n.push(e[o].slice(0));else for(var r,i,s,o=0;o<t;o++)r=e[o],re(r)&&(r=r.elements),s=(r=!ae(r)?[r]:r).length,i&&i!==s&&K(\"Unable to create Matrix. Row dimensions do not match!\"),n.push(r),i=s;this.elements=n}function je(e){if(this.elements=[],e=!re(e)?Ve.fromArray(arguments):e)for(var t=e.elements,n=0,r=t.length;n<r;n++)this.add(t[n])}Ve.arrayPrefill=function(e,t){var n=[];t=t||0;for(var r=0;r<e;r++)n[r]=t;return n},Ve.fromArray=function(e){var t=new Ve;return t.elements=e,t},Ve.fromSet=function(e){return Ve.fromArray(e.elements)},Ve.prototype={custom:!0,e:function(e){return e<1||e>this.elements.length?null:this.elements[e-1]},set:function(e,t){ne(t)||(t=new De(t)),this.elements[e]=t},dimensions:function(){return this.elements.length},modulus:function(){return ye(\"SAFE\",function(){return d.pow(this.dot(this.clone()),new De(.5))},void 0,this)},eql:function(e){var t=this.elements.length,n=e.elements||e;if(t!==n.length)return!1;do{if(Math.abs(d.subtract(this.elements[t-1],n[t-1]).valueOf())>PRECISION)return!1}while(--t);return!0},clone:function(){for(var e=new Ve,t=this.elements.length,n=0;n<t;n++)e.elements.push(this.elements[n].clone());return this.getter&&(e.getter=this.getter.clone()),e},map:function(n){var r=[];return this.each(function(e,t){r.push(n(e,t))}),new Ve(r)},each:function(e){for(var t,n=this.elements.length,r=n;e(this.elements[t=r-n],1+t),--n;);},toUnitVector:function(){return ye(\"SAFE\",function(){var t=this.modulus();return 0===t.valueOf()?this.clone():this.map(function(e){return d.divide(e,t)})},void 0,this)},angleFrom:function(o){return ye(\"SAFE\",function(){var n=o.elements||o;if(this.elements.length!==n.length)return null;var r=new De(0),i=new De(0),s=new De(0);this.each(function(e,t){r=d.add(r,d.multiply(e,n[t-1])),i=d.add(i,d.multiply(e,e)),s=d.add(s,d.multiply(n[t-1],n[t-1]))});var i=d.pow(i,new De(.5)),s=d.pow(s,new De(.5)),e=d.multiply(i,s);if(0===e.valueOf())return null;var t=d.divide(r,e),e=t.valueOf();return e<-1&&(t=-1),1<e&&(t=1),new De(Math.acos(t))},void 0,this)},isParallelTo:function(e){e=this.angleFrom(e).valueOf();return null===e?null:e<=PRECISION},isAntiparallelTo:function(e){e=this.angleFrom(e).valueOf();return null===e?null:Math.abs(e-Math.PI)<=PRECISION},isPerpendicularTo:function(e){e=this.dot(e);return null===e?null:Math.abs(e)<=PRECISION},add:function(e){return ye(\"SAFE\",function(){var n=e.elements||e;return this.elements.length!==n.length?null:this.map(function(e,t){return d.add(e,n[t-1])})},void 0,this)},subtract:function(e){return ye(\"SAFE\",function(){var n=e.elements||e;return this.elements.length!==n.length?null:this.map(function(e,t){return d.subtract(e,n[t-1])})},void 0,this)},multiply:function(t){return this.map(function(e){return e.clone()*t.clone()})},x:function(e){return this.multiply(e)},dot:function(r){return ye(\"SAFE\",function(){var e=r.elements||r,t=new De(0),n=this.elements.length;if(n!==e.length)return null;for(;t=d.add(t,d.multiply(this.elements[n-1],e[n-1])),--n;);return t},void 0,this)},cross:function(e){var t=e.elements||e;if(3!==this.elements.length||3!==t.length)return null;var n=this.elements;return ye(\"SAFE\",function(){return new Ve([d.subtract(d.multiply(n[1],t[2]),d.multiply(n[2],t[1])),d.subtract(d.multiply(n[2],t[0]),d.multiply(n[0],t[2])),d.subtract(d.multiply(n[0],t[1]),d.multiply(n[1],t[0]))])},void 0,this)},max:function(){for(var e,t=0,n=this.elements.length,r=n;e=r-n,Math.abs(this.elements[e].valueOf())>Math.abs(t.valueOf())&&(t=this.elements[e]),--n;);return t},magnitude:function(){var t=new De(0);return this.each(function(e){t=d.add(t,d.pow(e,new De(2)))}),d.sqrt(t)},indexOf:function(e){for(var t,n=null,r=this.elements.length,i=r;t=i-r,null===n&&this.elements[t].valueOf()===e.valueOf()&&(n=1+t),--r;);return n},text:function(e){return Pe(this)},toString:function(){return this.text()},latex:function(e){for(var t=[],n=0;n<this.elements.length;n++)t.push(Ge.latex.call(Ge,this.elements[n],e));return\"[\"+t.join(\", \")+\"]\"}},He.identity=function(e){for(var t=new He,n=0;n<e;n++){t.elements.push([]);for(var r=0;r<e;r++)t.set(n,r,new De(n===r?1:0))}return t},He.fromArray=function(e){function t(e){return He.apply(this,e)}return t.prototype=He.prototype,new t(e)},He.zeroMatrix=function(e,t){for(var n=new He,r=0;r<e;r++)n.elements.push(Ve.arrayPrefill(t,new De(0)));return n},(He.prototype={custom:!0,get:function(e,t){if(this.elements[e])return this.elements[e][t]},map:function(r,i){var s=new He;return this.each(function(e,t,n){s.set(t,n,r.call(s,e),i)}),s},set:function(e,t,n,r){this.elements[e]||(this.elements[e]=[]),this.elements[e][t]=r||ne(n)?n:new De(n)},cols:function(){return this.elements[0].length},rows:function(){return this.elements.length},row:function(e){return!e||e>this.cols()?[]:this.elements[e-1]},col:function(e){var t=this.rows(),n=[];if(e>this.cols()||!e)return n;for(var r=0;r<t;r++)n.push(this.elements[r][e-1]);return n},eachElement:function(e){for(var t,n=this.rows(),r=this.cols(),i=0;i<n;i++)for(t=0;t<r;t++)e.call(this,this.elements[i][t],i,t)},determinant:function(){if(!this.isSquare())return null;for(var e,t=this.toRightTriangular(),n=t.elements[0][0],r=t.elements.length-1,i=r;n=d.multiply(n,t.elements[e=i-r+1][e]),--r;);return n},isSquare:function(){return this.elements.length===this.elements[0].length},isSingular:function(){return this.isSquare()&&0===this.determinant()},augment:function(e){var t=this.rows();t!==e.rows()&&K(\"Cannot augment matrix. Rows don't match.\");for(var n=0;n<t;n++)this.elements[n]=this.elements[n].concat(e.elements[n]);return this},clone:function(){for(var e=this.rows(),t=this.cols(),n=new He,r=0;r<e;r++){n.elements[r]=[];for(var i=0;i<t;i++){var s=this.elements[r][i];n.elements[r][i]=ne(s)?s.clone():s}}return n},invert:function(){return this.isSquare()||K(\"Matrix is not square!\"),ye(\"SAFE\",function(){var e,t,n,r,i,s,o,a=this.elements.length,u=a,l=He.identity(a),c=this.augment(l).toRightTriangular(),p=c.elements[0].length,f=[];do{for(i=[],n=p,f[e=a-1]=[],s=c.elements[e][e];o=d.divide(c.elements[e][r=p-n],s.clone()),i.push(o),u<=r&&f[e].push(o),--n;);for(c.elements[e]=i,t=0;t<e;t++){for(i=[],n=p;i.push(d.subtract(c.elements[t][r=p-n].clone(),d.multiply(c.elements[e][r].clone(),c.elements[t][e].clone()))),--n;);c.elements[t]=i}}while(--a);return He.fromArray(f)},void 0,this)},toRightTriangular:function(){return ye(\"SAFE\",function(){var e,t,n,r=this.clone(),i=this.elements.length,s=i,o=this.elements[0].length;do{if(0===r.elements[t=s-i][t].valueOf())for(var a=1+t;a<s;a++)if((e=r.elements[a][t])&&0!==e.valueOf()){for(l=[],c=o;l.push(d.add(r.elements[t][n=o-c].clone(),r.elements[a][n].clone())),--c;);r.elements[t]=l;break}if(0!==r.elements[t][t].valueOf())for(a=1+t;a<s;a++){for(var u=d.divide(r.elements[a][t].clone(),r.elements[t][t].clone()),l=[],c=o;l.push((n=o-c)<=t?new De(0):d.subtract(r.elements[a][n].clone(),d.multiply(r.elements[t][n].clone(),u.clone()))),--c;);r.elements[a]=l}}while(--i);return r},void 0,this)},transpose:function(){var e,t,n,r=this.elements.length,i=this.elements[0].length,s=new He,o=i;do{for(s.elements[e=i-o]=[],t=r;s.elements[e][n=r-t]=this.elements[n][e].clone(),--t;);}while(--o);return s},canMultiplyFromLeft:function(e){e=(ie(e)?e.elements:e).length;return this.elements[0].length===e},sameSize:function(e){return this.rows()===e.rows()&&this.cols()===e.cols()},multiply:function(g){return ye(\"SAFE\",function(){var e=g.elements||g;if(!this.canMultiplyFromLeft(e)){if(this.sameSize(g)){for(var t=new He,n=this.rows(),r=0;r<n;r++){var i=d.multiply(new Ve(this.elements[r]),new Ve(g.elements[r]));t.elements[r]=i.elements}return t}return null}var s,o,a,u,l,c=this.elements.length,p=c,f=e[0].length,h=this.elements[0].length,m=[];do{m[r=p-c]=[],s=f;do{for(o=f-s,a=new De(0),u=h;a=d.add(a,d.multiply(this.elements[r][l=h-u],e[l][o])),--u;);}while(m[r][o]=a,--s)}while(--c);return He.fromArray(m)},void 0,this)},add:function(i,s){var o=new He;return this.sameSize(i)&&this.eachElement(function(e,t,n){var r=d.add(e.clone(),i.elements[t][n].clone());s&&(r=s.call(o,r,e,i.elements[t][n])),o.set(t,n,r)}),o},subtract:function(i,s){var o=new He;return this.sameSize(i)&&this.eachElement(function(e,t,n){var r=d.subtract(e.clone(),i.elements[t][n].clone());s&&(r=s.call(o,r,e,i.elements[t][n])),o.set(t,n,r)}),o},negate:function(){return this.each(function(e){return e.negate()}),this},toVector:function(){if(1!==this.rows()&&1!==this.cols())return this;var e=new Ve;return e.elements=this.elements,e},toString:function(e,n){var t=this.rows(),r=[];for(var i=0;i<t;i++)r.push(\"[\"+this.elements[i].map(function(e){var t=n?e.multiplier.toDecimal():e.toString();return void 0!==e?t:\"\"}).join(\",\")+\"]\");return\"matrix\"+E(r.join(\",\"))},text:function(){return\"matrix(\"+this.elements.toString(\"\")+\")\"},latex:function(i){var s=this.cols(),o=this.elements;return ce(\"\\\\begin{vmatrix}{0}\\\\end{vmatrix}\",function(){var e,t=[];for(e in o){for(var n=[],r=0;r<s;r++)n.push(Ge.latex.call(Ge,o[e][r],i));t.push(n.join(\" & \"))}return t.join(\" \\\\cr \")})}}).each=He.prototype.eachElement,je.fromArray=function(e){function t(e){return je.apply(this,e)}return t.prototype=je.prototype,new t(e)},je.prototype={add:function(e){this.contains(e)||this.elements.push(e.clone())},contains:function(e){for(var t=0;t<this.elements.length;t++){var n=this.elements[t];if(e.equals(n))return!0}return!1},each:function(e){for(var t=this.elements,n=new je,r=0,i=t.length;r<i;r++){var s=t[r];e.call(this,s,n,r)}return n},clone:function(){var t=new je;return this.each(function(e){t.add(e.clone())}),t},union:function(e){var t=this.clone();return e.each(function(e){t.add(e)}),t},difference:function(e){var t=this.clone();return e.each(function(e){t.remove(e)}),t},remove:function(e){for(var t=0,n=this.elements.length;t<n;t++)if(this.elements[t].equals(e))return we(this.elements,t),!0;return!1},intersection:function(e){var t=new je,n=this;return e.each(function(e){n.contains(e)&&t.add(e)}),t},intersects:function(e){return 0<this.intersection(e).elements.length},is_subset:function(e){for(var t=e.elements,n=0,r=t.length;n<r;n++)if(!this.contains(t[n]))return!1;return!0},toString:function(){return\"{\"+this.elements.join(\",\")+\"}\"}};var Ze={dependencies:{_rename:{\"Math2.factorial\":\"factorial\"},factorial:{\"Math2.gamma\":Te.gamma},gamma_incomplete:{\"Math2.factorial\":Te.factorial},Li:{\"Math2.Ei\":Te.Ei,\"Math2.bigLog\":Te.bigLog,Frac:Fe},Ci:{\"Math2.factorial\":Te.factorial},Ei:{\"Math2.factorial\":Te.factorial},Si:{\"Math2.factorial\":Te.factorial},Shi:{\"Math2.factorial\":Te.factorial},Chi:{isInt:ue,nround:me,\"Math2.num_integrate\":Te.num_integrate},factor:{\"Math2.ifactor\":Te.ifactor,Symbol:De},num_integrate:{\"Math2.simpson\":Te.simpson,nround:me},fib:{even:ge}},reformat:{diff:function(e,t){var n=e.args[1].toString(),e=\"var f = \"+Ze.build(e.args[0].toString(),[n])+\";\";return t[1]+=\"var diff = \"+Te.diff.toString()+\";\",t[1]+=e,[\"diff(f)(\"+n+\")\",t]}},getProperName:function(e){return{continued_fraction:\"continuedFraction\"}[e]||e},compileDependencies:function(e,t){var n,r,i=Ze.dependencies[e],s=t&&t[1]?t[1]:\"\",o=t&&t[0]?t[0]:{};for(n in i)\"object\"!=typeof i[n]&&(s+=\"var \"+(1<(r=n.split(\".\")).length?r[1]:r[0])+\"=\"+i[n]+\";\",o[n]=r.pop());return[o,s]},getArgsDeps:function(e,t){for(var n=e.args,r=0;r<n.length;r++)e.args[r].each(function(e){e.group===H&&(t=Ze.compileDependencies(e.fname,t))});return t},build:function(e,t){e=ye(\"PARSE2NUMBER\",function(){return d.parse(e)},!0);var n=b(e),l=[],c=[],p=function(s,o){\"\"===s.fname&&(s=De.unwrapPARENS(s)),o=o||[];function e(e){return e=e in Math?\"Math.\"+e:(e=Ze.getProperName(e),-1===l.indexOf(e)&&(o.push(\"var \"+e+\" = \"+Te[e].toString()+\"; \"),l.push(e)),e),e+=E(s.args.map(function(e){return p(e,o)[0]}).join(\",\"))}var t,n,r=[],i=s.group,a=\"\",u=function(e){var t,e=e===Z?\"*\":\"+\",n=[];for(t in s.symbols){var r=s.symbols[t],i=p(r,o)[0];r.isComposite()&&(i=E(i)),n.push(i)}e=n.join(e);return e=e&&!s.multiplier.equals(1)?E(e):e};return i===D?r.push(s.multiplier.toDecimal()):s.multiplier.equals(-1)?a=\"-\":s.multiplier.equals(1)||r.push(s.multiplier.toDecimal()),i===G||i===B?t=s.value:i===H?(c=Ze.compileDependencies(s.fname,c),c=Ze.getArgsDeps(s,c),t=Ze.reformat[s.fname]?(n=Ze.reformat[s.fname](s,c),c=n[1],n[0]):e(s.fname)):i===V?(i=s.previousGroup)===D||i===G?t=s.value:i===H?(t=e(s.fname),c=Ze.compileDependencies(s.fname,c),c=Ze.getArgsDeps(s,c)):t=u(s.previousGroup):t=u(s.group),s.group===D||s.power.equals(1)||(u=p(d.parse(s.power)),o.push(u[1]),t=\"Math.pow\"+E(t+\",\"+u[0])),t&&r.push(a+t),[r.join(\"*\"),o.join(\"\").replace(/\\n+\\s+/g,\" \")]};t&&(n=t);var r,i=p(e);for(r in c[0]){var s=c[0][r];i[1]=i[1].replace(r,s),c[1]=c[1].replace(r,s)}return new Function(n,(c[1]||\"\")+i[1]+\" return \"+i[0]+\";\")}};x(d.CONSTANTS),x(d.functions),d.initConstants(),d.error||(d.error=K),F.LOG_FNS={log:d.functions.log,log10:d.functions.log10};function Xe(n,e,r,t){var i=!1,s=/^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(n);return s?nerdamer.setFunction(s[1],s[2].split(\",\"),s[3]):(n instanceof O&&(n=n.toString()),(r=!ae(r)?void 0===r?[]:[r]:r).forEach(function(e){var t;\"numer\"!==e?(t=d.functions[r])&&1===t[1]&&(n=`${e}(${n})`):i=!0}),s=ye(\"PARSE2NUMBER\",function(){return d.parse(n,e)},i||F.PARSE2NUMBER),t?p[t-1]=s:p.push(s),new O(s))}var x={allSame:w,allNumeric:function(e){for(var t=0;t<e.length;t++)if(!te(e[t]))return!1;return!0},arguments2Array:be,arrayAddSlices:function(e,t){t=t||20;var n=[];n.push(e[0]);for(var r=0;r<e.length-1;r++)for(var i=e[r],s=(e[r+1]-i)/t,o=0;o<t;o++)n.push(i+=s);return n},arrayClone:function(e){for(var t=[],n=e.length,r=0;r<n;r++)t[r]=e[r].clone();return t},arrayMax:function(e){return Math.max.apply(void 0,e)},arrayMin:c,arrayEqual:function(e,t){if(e.sort(),t.sort(),e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0},arrayUnique:a,arrayGetVariables:function(e){for(var t=b(e[0],null,null,!0),n=1,r=e.length;n<r;n++)t=t.concat(b(e[n]));return t=a(t).sort()},arraySum:function(e,t){for(var n=new De(0),r=0;r<e.length;r++)var i=e[r],n=d.add(n,ne(i)?i:d.parse(i));return t?Number(n):n},block:ye,build:Ze.build,clearU:function(e){e=f.indexOf(e);-1!==e&&(f[e]=void 0)},comboSort:function(e,t){for(var n=e.length,r=[],i=0;i<e.length;i++)r.push([e[i],t[i]]);r.sort(function(e,t){return e[0]-t[0]});for(var s=[],o=[],i=0;i<n;i++)s.push(r[i][0]),o.push(r[i][1]);return[s,o]},compare:function(e,t,n){for(var r,i={},s=0;s<n.length;s++)i[n[s]]=new De(Math.floor(5*Math.random())+1);return ye(\"PARSE2NUMBER\",function(){r=d.parse(e,i).equals(d.parse(t,i))}),r},convertToVector:C,customError:n,customType:function(e){return void 0!==e&&e.custom},decompose_fn:he,each:s,evaluate:Se,even:ge,evenFraction:de,fillHoles:function(e,t){t=t||e.length;for(var n=0;n<t;n++)e[n]||(e[n]=new De(0));return e},firstObject:pe,format:ce,generatePrimes:u,getCoeffs:function(e,r,t){var i=[];e.each(function(e){var t,n=e.contains(r)?(t=e.stripVar(r),d.divide(e.clone(),t.clone()).power.toDecimal()):(t=e,0),e=i[n];i[n]=e?d.add(e,t):t},!0);for(var n=0;n<i.length;n++)i[n]||(i[n]=new De(0));return i},getU:function(e){for(var t=\"u\",n=0,r=b(e);-1!==f.indexOf(t)||-1!==r.indexOf(t);)t=\"u\"+n++;for(var i=0,s=f.length;i<=s;i++)if(!f[i]){f[i]=t;break}return t},importFunctions:function(){var e,t={};for(e in d.functions)t[e]=d.functions[e][0];return t},inBrackets:E,isArray:ae,isExpression:i,isFraction:v,isInt:ue,isMatrix:ie,isNegative:A,isNumericSymbol:oe,isPrime:g,isReserved:r,isSymbol:ne,isVariableSymbol:function(e){return e.group===G&&e.multiplier.equals(1)&&e.power.equals(1)},isVector:re,keys:q,knownVariable:function(e,t){var n={};return n[e]=t,n},nroots:function(e){var t,n;if(e.group===H&&\"\"===e.fname?(t=De.unwrapPARENS(d.parse(e).toLinear()),n=d.parse(e.power)):e.group===B&&(t=d.parse(e.value),n=d.parse(e.power)),t&&n&&t.group===D&&n.group===D&&t.multiplier.isNegative()){for(var r=[],i=De.toPolarFormArray(Se(e))[0],s=d.arg(t),o=n.multiplier.den.toString(),a=n.multiplier.num.toString(),u=0;u<o;u++){var l=Se(d.parse(ce(\"(({0})+2*pi*({1}))/({2})\",s,u,o))).multiplier.toDecimal();r.push(Se(d.parse(ce(\"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\",i,o,F.IMAGINARY,l,a))))}return Ve.fromArray(r)}return e.isConstant(!0,!0)?(t=e.sign(),s=Se(e.abs()),r=[(n=d.sqrt(s)).clone(),n.negate()],t<0&&(r=r.map(function(e){return d.multiply(e,De.imaginary())}))):r=[d.parse(e)],Ve.fromArray(r)},remove:we,reserveNames:x,range:function(e,t,n){var r=[];n=n||1;for(var i=e;i<=t;i++)r.push(i*n);return r},round:me,sameSign:function(e,t){return e<0==t<0},scientificToDecimal:y,separate:N,stringReplace:function(e,t,n,r){return e.substr(0,t)+r+e.substr(n,e.length)},text:Pe,validateName:m,variables:b,warn:ee},$e={groups:t,Symbol:De,Expression:O,Frac:Fe,Vector:Ve,Matrix:He,Parser:P,Scientific:T,Fraction:Be,Math2:Te,LaTeX:Ge,Utils:x,PARSER:d,PARENTHESIS:$,Settings:F,err:K,bigInt:S,bigDec:k,exceptions:e};return Xe.rpn=function(e){return d.tokenize(d.toRPN(e))},Xe.convertToLaTeX=function(e,t){return d.toTeX(e,t)},Xe.convertFromLaTeX=function(e){e=Ge.parse(d.tokenize(e));return new O(d.parse(e))},Xe.version=function(t){if(t)try{return $e[t].version}catch(e){return\"No module named \"+t+\" found!\"}return\"1.1.12\"},Xe.getWarnings=function(){return h},Xe.setConstant=function(e,t){if(m(e),!r(e))if(\"delete\"===t||\"\"===t)delete d.CONSTANTS[e];else{if(isNaN(t))throw new I(\"Constant must be a number!\");d.CONSTANTS[e]=t}return this},Xe.getConstant=function(e){return String(d.constant[e])},Xe.setFunction=fe,Xe.getCore=function(){return $e},Xe.getExpression=Xe.getEquation=O.getExpression,Xe.reserved=function(e){return e?f:f.join(\", \")},Xe.clear=function(e,t){return\"all\"===e?p=[]:\"last\"===e?p.pop():\"first\"===e?p.shift():(e=e?e-1:p.length,!0===t?p[e]=void 0:we(p,e)),this},Xe.flush=function(){return this.clear(\"all\"),this},Xe.expressions=function(e,t,n){for(var r=e?{}:[],i=0;i<p.length;i++){var s=t?Ge.latex(p[i],n):Pe(p[i],n);e?r[i+1]=s:r.push(s)}return r},Xe.register=function(e){var t=this.getCore();if(ae(e))for(var n=0;n<e.length;n++)e&&this.register(e[n]);else if(e&&-1===F.exclude.indexOf(e.name)){if(e.dependencies)for(n=0;n<e.dependencies.length;n++)if(!t[e.dependencies[n]])throw new Error(ce(\"{0} requires {1} to be loaded!\",e.name,e.dependencies[n]));var r=e.parent,i=e.build.call(t);r&&(t[r]||(t[e.parent]={}),(\"nerdamer\"===r?this:t[r])[e.name]=i),e.visible&&(d.functions[e.name]=[i,e.numargs])}},Xe.validateName=m,Xe.validVarName=function(e){try{return m(e),-1===f.indexOf(e)}catch(e){return!1}},Xe.supported=function(){return q(d.functions)},Xe.numEquations=Xe.numExpressions=function(){return p.length},Xe.setVar=function(e,t){return m(e),e in d.CONSTANTS&&K(\"Cannot set value for constant \"+e),\"delete\"===t||\"\"===t?delete J[e]:J[e]=ne(t)?t:d.parse(t),this},Xe.getVar=function(e){return J[e]},Xe.clearVars=function(){return J={},this},Xe.load=function(e){return e.call(this),this},Xe.getVars=function(e,t){var n={};if(\"object\"===(e=e||\"text\"))n=J;else for(var r in J)\"latex\"===e?n[r]=J[r].latex(t):\"text\"===e&&(n[r]=J[r].text(t));return n},Xe.set=function(e,t){if(\"object\"==typeof e)for(var n in e)Xe.set(n,e[n]);-1!==[\"SAFE\"].indexOf(e)&&K(\"Cannot modify setting: \"+e),\"PRECISION\"===e?(k.set({precision:t}),21<(F.PRECISION=t)&&this.set(\"USE_BIG\",!0)):\"USE_LN\"===e&&!0===t?(F.LOG=\"LN\",F.LOG10=\"log\",d.functions.log=F.LOG_FNS.log10,d.functions.log[0]=function(e){return e.isConstant()?new De(Math.log10(e)):d.symfunction(F.LOG10,[e])},d.functions.LN=F.LOG_FNS.log,delete d.functions.log10):F[e]=t},Xe.get=function(e){return F[e]},Xe.api=function(e){for(var t in d.functions)t in Xe&&!e||(Xe[t]=function(n){return function(){for(var e=[].slice.call(arguments),t=0;t<e.length;t++)e[t]=d.parse(e[t]);return new O(ye(\"PARSE2NUMBER\",function(){return d.callfunction(n,e)}))}}(t))},Xe.replaceFunction=function(e,t,n){var r=d.functions[e],n=void 0===n?r[1]:n;d.functions[e]=[t.call(void 0,r[0],$e),n]},Xe.setOperator=function(e,t){d.setOperator(e,t)},Xe.getOperator=function(e){return d.getOperator(e)},Xe.aliasOperator=function(e,t){d.aliasOperator(e,t)},Xe.tree=function(e){return d.tree(d.toRPN(d.tokenize(e)))},Xe.htmlTree=function(e,t){return'<div class=\"tree\">\\n    <ul>\\n        <li>\\n'+this.tree(e).toHTML(3,t)+\"\\n        </li>\\n    </ul>\\n</div>\"},Xe.addPeeker=function(e,t){d.peekers[e]&&d.peekers[e].push(t)},Xe.removePeeker=function(e,t){we(d.peekers[e],t)},Xe.parse=function(e){return String(e).split(\";\").map(function(e){return d.parse(e)})},Xe.api(),Xe}({bigInt:function(){var Q=function(o){\"use strict\";var v=1e7,l=7,t=9007199254740992,n=m(t),c=Math.log(t);function u(e,t){return void 0===e?u[0]:void 0===t||10==+t?z(e):V(e,t)}function p(e,t){this.value=e,this.sign=t,this.isSmall=!1}function f(e){this.value=e,this.sign=e<0,this.isSmall=!0}function h(e){return-t<e&&e<t}function m(e){return e<1e7?[e]:e<1e14?[e%1e7,Math.floor(e/1e7)]:[e%1e7,Math.floor(e/1e7)%1e7,Math.floor(e/1e14)]}function w(e){g(e);var t=e.length;if(t<4&&C(e,n)<0)switch(t){case 0:return 0;case 1:return e[0];case 2:return e[0]+e[1]*v;default:return e[0]+(e[1]+e[2]*v)*v}return e}function g(e){for(var t=e.length;0===e[--t];);e.length=t+1}function y(e){for(var t=new Array(e),n=-1;++n<e;)t[n]=0;return t}function d(e){return 0<e?Math.floor(e):Math.ceil(e)}function r(e,t){for(var n,r=e.length,i=t.length,s=new Array(r),o=0,a=v,u=0;u<i;u++)n=e[u]+t[u]+o,s[u]=n-(o=a<=n?1:0)*a;for(;u<r;)n=e[u]+o,s[u++]=n-(o=n===a?1:0)*a;return 0<o&&s.push(o),s}function b(e,t){return e.length>=t.length?r(e,t):r(t,e)}function i(e,t){for(var n,r=e.length,i=new Array(r),s=v,o=0;o<r;o++)n=e[o]-s+t,t=Math.floor(n/s),i[o]=n-t*s,t+=1;for(;0<t;)i[o++]=t%s,t=Math.floor(t/s);return i}function S(e,t){for(var n,r=e.length,i=t.length,s=new Array(r),o=0,a=v,u=0;u<i;u++)o=(n=e[u]-o-t[u])<0?(n+=a,1):0,s[u]=n;for(u=i;u<r;u++){if(!((n=e[u]-o)<0)){s[u++]=n;break}n+=a,s[u]=n}for(;u<r;u++)s[u]=e[u];return g(s),s}function s(e,t,n){for(var r,i=e.length,s=new Array(i),o=-t,a=v,u=0;u<i;u++)r=e[u]+o,o=Math.floor(r/a),s[u]=(r%=a)<0?r+a:r;return\"number\"==typeof(s=w(s))?new f(s=n?-s:s):new p(s,n)}function M(e,t){for(var n,r,i=e.length,s=t.length,o=y(i+s),a=v,u=0;u<i;++u)for(var l=e[u],c=0;c<s;++c)n=l*t[c]+o[u+c],r=Math.floor(n/a),o[u+c]=n-r*a,o[u+c+1]+=r;return g(o),o}function N(e,t){for(var n,r=e.length,i=new Array(r),s=v,o=0,a=0;a<r;a++)n=e[a]*t+o,o=Math.floor(n/s),i[a]=n-o*s;for(;0<o;)i[a++]=o%s,o=Math.floor(o/s);return i}function E(e,t){for(var n=[];0<t--;)n.push(0);return n.concat(e)}function a(e,t,n){return new p(e<v?N(t,e):M(t,m(e)),n)}function q(e){for(var t,n=e.length,r=y(n+n),i=v,s=0;s<n;s++){for(var o,a=0-(o=e[s])*o,u=s;u<n;u++)t=o*e[u]*2+r[s+u]+a,a=Math.floor(t/i),r[s+u]=t-a*i;r[s+n]=a}return g(r),r}function x(e,t){for(var n,r=e.length,i=y(r),s=v,o=0,a=r-1;0<=a;--a)o=(n=o*s+e[a])-(n=d(n/t))*t,i[a]=0|n;return[i,0|o]}function A(e,t){var n=z(t),r=e.value,i=n.value;if(0===i)throw new Error(\"Cannot divide by zero\");if(e.isSmall)return n.isSmall?[new f(d(r/i)),new f(r%i)]:[u[0],e];if(n.isSmall){if(1===i)return[e,u[0]];if(-1==i)return[e.negate(),u[0]];var s=Math.abs(i);if(s<v){var o=w((a=x(r,s))[0]),t=a[1];return e.sign&&(t=-t),\"number\"==typeof o?[new f(o=e.sign!==n.sign?-o:o),new f(t)]:[new p(o,e.sign!==n.sign),new f(t)]}i=m(s)}s=C(r,i);if(-1===s)return[u[0],e];if(0===s)return[u[e.sign===n.sign?1:-1],u[0]];o=(a=(r.length+i.length<=200?function(e,t){var n,r,i,s,o,a,u,l=e.length,c=t.length,p=v,f=y(t.length),h=t[c-1],m=Math.ceil(p/(2*h)),g=N(e,m),d=N(t,m);for(g.length<=l&&g.push(0),d.push(0),h=d[c-1],r=l-c;0<=r;r--){for(n=p-1,g[r+c]!==h&&(n=Math.floor((g[r+c]*p+g[r+c-1])/h)),a=d.length,o=s=i=0;o<a;o++)i+=n*d[o],u=Math.floor(i/p),s+=g[r+o]-(i-u*p),i=u,s=s<0?(g[r+o]=s+p,-1):(g[r+o]=s,0);for(;0!==s;){for(--n,o=i=0;o<a;o++)i=(i+=g[r+o]-p+d[o])<0?(g[r+o]=i+p,0):(g[r+o]=i,1);s+=i}f[r]=n}return g=x(g,m)[0],[w(f),w(g)]}:function(e,t){for(var n,r,i,s,o,a=e.length,u=t.length,l=[],c=[],p=v;a;)if(c.unshift(e[--a]),g(c),C(c,t)<0)l.push(0);else{for(i=c[(r=c.length)-1]*p+c[r-2],s=t[u-1]*p+t[u-2],u<r&&(i=(i+1)*p),n=Math.ceil(i/s);!(C(o=N(t,n),c)<=0)&&--n;);l.push(n),c=S(c,o)}return l.reverse(),[w(l),w(c)]})(r,i))[0];var n=e.sign!==n.sign,a=a[1],e=e.sign;return[o=\"number\"==typeof o?new f(o=n?-o:o):new p(o,n),a=\"number\"==typeof a?new f(a=e?-a:a):new p(a,e)]}function C(e,t){if(e.length!==t.length)return e.length>t.length?1:-1;for(var n=e.length-1;0<=n;n--)if(e[n]!==t[n])return e[n]>t[n]?1:-1;return 0}function L(e){e=e.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function I(e,t){for(var n,r,i,s=e.prev(),o=s,a=0;o.isEven();)o=o.divide(2),a++;e:for(r=0;r<t.length;r++)if(!e.lesser(t[r])&&!(i=Q(t[r]).modPow(o,e)).equals(u[1])&&!i.equals(s)){for(n=a-1;0!=n;n--){if((i=i.square().mod(e)).isUnit())return!1;if(i.equals(s))continue e}return!1}return!0}p.prototype=Object.create(u.prototype),f.prototype=Object.create(u.prototype),p.prototype.plus=p.prototype.add=function(e){var t=z(e);if(this.sign!==t.sign)return this.subtract(t.negate());var n=this.value,e=t.value;return t.isSmall?new p(i(n,Math.abs(e)),this.sign):new p(b(n,e),this.sign)},f.prototype.plus=f.prototype.add=function(e){var t=z(e),n=this.value;if(n<0!==t.sign)return this.subtract(t.negate());e=t.value;if(t.isSmall){if(h(n+e))return new f(n+e);e=m(Math.abs(e))}return new p(i(e,Math.abs(n)),n<0)},p.prototype.minus=p.prototype.subtract=function(e){var t=z(e);if(this.sign!==t.sign)return this.add(t.negate());var n,r=this.value,e=t.value;return t.isSmall?s(r,Math.abs(e),this.sign):(t=r,r=e,e=this.sign,0<=C(t,r)?n=S(t,r):(n=S(r,t),e=!e),\"number\"==typeof(n=w(n))?new f(n=e?-n:n):new p(n,e))},f.prototype.minus=f.prototype.subtract=function(e){var t=z(e),n=this.value;if(n<0!==t.sign)return this.add(t.negate());e=t.value;return t.isSmall?new f(n-e):s(e,Math.abs(n),0<=n)},p.prototype.negate=function(){return new p(this.value,!this.sign)},f.prototype.negate=function(){var e=this.sign,t=new f(-this.value);return t.sign=!e,t},p.prototype.abs=function(){return new p(this.value,!1)},f.prototype.abs=function(){return new f(Math.abs(this.value))},p.prototype.times=p.prototype.multiply=function(e){var t,n=z(e),r=this.value,i=n.value,e=this.sign!==n.sign;if(n.isSmall){if(0===i)return u[0];if(1===i)return this;if(-1===i)return this.negate();if((t=Math.abs(i))<v)return new p(N(r,t),e);i=m(t)}return n=r.length,t=i.length,new p((0<-.012*n-.012*t+15e-6*n*t?function e(t,n){if((r=Math.max(t.length,n.length))<=30)return M(t,n);var r=Math.ceil(r/2),i=t.slice(r),s=t.slice(0,r),o=n.slice(r),a=n.slice(0,r),t=e(s,a),n=e(i,o),o=e(b(s,i),b(a,o)),r=b(b(t,E(S(S(o,t),n),r)),E(n,2*r));return g(r),r}:M)(r,i),e)},f.prototype._multiplyBySmall=function(e){return h(e.value*this.value)?new f(e.value*this.value):a(Math.abs(e.value),m(Math.abs(this.value)),this.sign!==e.sign)},p.prototype._multiplyBySmall=function(e){return 0===e.value?u[0]:1===e.value?this:-1===e.value?this.negate():a(Math.abs(e.value),this.value,this.sign!==e.sign)},f.prototype.times=f.prototype.multiply=function(e){return z(e)._multiplyBySmall(this)},p.prototype.square=function(){return new p(q(this.value),!1)},f.prototype.square=function(){var e=this.value*this.value;return h(e)?new f(e):new p(q(m(Math.abs(this.value))),!1)},f.prototype.divmod=p.prototype.divmod=function(e){e=A(this,e);return{quotient:e[0],remainder:e[1]}},f.prototype.over=f.prototype.divide=p.prototype.over=p.prototype.divide=function(e){return A(this,e)[0]},f.prototype.remainder=f.prototype.mod=p.prototype.remainder=p.prototype.mod=function(e){return A(this,e)[1]},p.prototype.pow=function(e){var t,n,r,i=z(e),e=this.value,s=i.value;if(0===s)return u[1];if(0===e)return u[0];if(1===e)return u[1];if(-1===e)return i.isEven()?u[1]:u[-1];if(i.sign)return u[0];if(!i.isSmall)throw new Error(\"The exponent \"+i.toString()+\" is too large.\");if(this.isSmall&&h(t=Math.pow(e,s)))return new f(d(t));for(n=this,r=u[1];!0&s&&(r=r.times(n),--s),0!==s;)s/=2,n=n.square();return r},f.prototype.pow=p.prototype.pow,f.prototype.modPow=p.prototype.modPow=function(e,t){if(e=z(e),(t=z(t)).isZero())throw new Error(\"Cannot take modPow with modulus 0\");for(var n=u[1],r=this.mod(t);e.isPositive();){if(r.isZero())return u[0];e.isOdd()&&(n=n.multiply(r).mod(t)),e=e.divide(2),r=r.square().mod(t)}return n},p.prototype.compareAbs=function(e){var t=z(e),n=this.value,e=t.value;return t.isSmall?1:C(n,e)},f.prototype.compareAbs=function(e){var t=z(e),n=Math.abs(this.value),e=t.value;return t.isSmall?n===(e=Math.abs(e))?0:e<n?1:-1:-1},p.prototype.compareTo=p.prototype.compare=function(e){if(e===1/0)return-1;if(e===-1/0)return 1;var t=z(e),n=this.value,e=t.value;return this.sign!==t.sign?t.sign?1:-1:t.isSmall?this.sign?-1:1:C(n,e)*(this.sign?-1:1)},f.prototype.compareTo=f.prototype.compare=function(e){if(e===1/0)return-1;if(e===-1/0)return 1;var t=z(e),n=this.value,e=t.value;return t.isSmall?n==e?0:e<n?1:-1:n<0!==t.sign?n<0?-1:1:n<0?1:-1},f.prototype.eq=f.prototype.equals=p.prototype.eq=p.prototype.equals=function(e){return 0===this.compare(e)},f.prototype.neq=f.prototype.notEquals=p.prototype.neq=p.prototype.notEquals=function(e){return 0!==this.compare(e)},f.prototype.gt=f.prototype.greater=p.prototype.gt=p.prototype.greater=function(e){return 0<this.compare(e)},f.prototype.lt=f.prototype.lesser=p.prototype.lt=p.prototype.lesser=function(e){return this.compare(e)<0},f.prototype.geq=f.prototype.greaterOrEquals=p.prototype.geq=p.prototype.greaterOrEquals=function(e){return 0<=this.compare(e)},f.prototype.leq=f.prototype.lesserOrEquals=p.prototype.leq=p.prototype.lesserOrEquals=function(e){return this.compare(e)<=0},p.prototype.isEven=function(){return 0==(1&this.value[0])},f.prototype.isEven=function(){return 0==(1&this.value)},p.prototype.isOdd=function(){return 1==(1&this.value[0])},f.prototype.isOdd=function(){return 1==(1&this.value)},p.prototype.isPositive=function(){return!this.sign},f.prototype.isPositive=function(){return 0<this.value},p.prototype.isNegative=function(){return this.sign},f.prototype.isNegative=function(){return this.value<0},p.prototype.isUnit=function(){return!1},f.prototype.isUnit=function(){return 1===Math.abs(this.value)},p.prototype.isZero=function(){return!1},f.prototype.isZero=function(){return 0===this.value},f.prototype.isDivisibleBy=p.prototype.isDivisibleBy=function(e){var t=z(e),e=t.value;return 0!==e&&(1===e||(2===e?this.isEven():this.mod(t).equals(u[0])))},f.prototype.isPrime=p.prototype.isPrime=function(e){var t=L(this);if(t!==o)return t;var n=this.abs(),t=n.bitLength();if(t<=64)return I(n,[2,325,9375,28178,450775,9780504,1795265022]);for(var t=Math.log(2)*t,r=Math.ceil(!0===e?2*Math.pow(t,2):t),i=[],s=0;s<r;s++)i.push(Q(s+2));return I(n,i)},f.prototype.isProbablePrime=p.prototype.isProbablePrime=function(e){var t=L(this);if(t!==o)return t;for(var n=this.abs(),r=e===o?5:e,i=[],s=0;s<r;s++)i.push(Q.randBetween(2,n.minus(2)));return I(n,i)},f.prototype.modInv=p.prototype.modInv=function(e){for(var t,n,r=Q.zero,i=Q.one,s=z(e),o=this.abs();!o.equals(Q.zero);)t=s.divide(o),n=s,s=o,i=r.subtract(t.multiply(r=i)),o=n.subtract(t.multiply(o));if(!s.equals(1))throw new Error(this.toString()+\" and \"+e.toString()+\" are not co-prime\");return-1===r.compare(0)&&(r=r.add(e)),this.isNegative()?r.negate():r},p.prototype.next=function(){var e=this.value;return this.sign?s(e,1,this.sign):new p(i(e,1),this.sign)},f.prototype.next=function(){var e=this.value;return e+1<t?new f(e+1):new p(n,!1)},p.prototype.prev=function(){var e=this.value;return this.sign?new p(i(e,1),!0):s(e,1,this.sign)},f.prototype.prev=function(){var e=this.value;return-t<e-1?new f(e-1):new p(n,!0)};for(var U=[1];2*U[U.length-1]<=v;)U.push(2*U[U.length-1]);var _=U.length,R=U[_-1];function O(e){return(\"number\"==typeof e||\"string\"==typeof e)&&+Math.abs(e)<=v||e instanceof p&&e.value.length<=1}function T(e,t,n){t=z(t);for(var r=e.isNegative(),i=t.isNegative(),s=r?e.not():e,o=i?t.not():t,a=0,u=0,l=null,c=null,p=[];!s.isZero()||!o.isZero();)a=(l=A(s,R))[1].toJSNumber(),r&&(a=R-1-a),u=(c=A(o,R))[1].toJSNumber(),s=l[0],o=c[0],p.push(n(a,u=i?R-1-u:u));for(var f=0!==n(r?1:0,i?1:0)?Q(-1):Q(0),h=p.length-1;0<=h;--h)f=f.multiply(R).add(Q(p[h]));return f}f.prototype.shiftLeft=p.prototype.shiftLeft=function(e){if(!O(e))throw new Error(String(e)+\" is too large for shifting.\");if((e=+e)<0)return this.shiftRight(-e);var t=this;if(t.isZero())return t;for(;_<=e;)t=t.multiply(R),e-=_-1;return t.multiply(U[e])},f.prototype.shiftRight=p.prototype.shiftRight=function(e){var t;if(!O(e))throw new Error(String(e)+\" is too large for shifting.\");if((e=+e)<0)return this.shiftLeft(-e);for(var n=this;_<=e;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(t=A(n,R))[1].isNegative()?t[0].prev():t[0],e-=_-1}return(t=A(n,U[e]))[1].isNegative()?t[0].prev():t[0]},f.prototype.not=p.prototype.not=function(){return this.negate().prev()},f.prototype.and=p.prototype.and=function(e){return T(this,e,function(e,t){return e&t})},f.prototype.or=p.prototype.or=function(e){return T(this,e,function(e,t){return e|t})},f.prototype.xor=p.prototype.xor=function(e){return T(this,e,function(e,t){return e^t})};var P=1<<30,k=(v&-v)*(v&-v)|P;function F(e){e=e.value,e=\"number\"==typeof e?e|P:e[0]+e[1]*v|k;return e&-e}function D(e,t){return e=z(e),t=z(t),e.greater(t)?e:t}function B(e,t){return e=z(e),t=z(t),e.lesser(t)?e:t}function G(e,t){if(e=z(e).abs(),t=z(t).abs(),e.equals(t))return e;if(e.isZero())return t;if(t.isZero())return e;for(var n,r,i=u[1];e.isEven()&&t.isEven();)n=Math.min(F(e),F(t)),e=e.divide(n),t=t.divide(n),i=i.multiply(n);for(;e.isEven();)e=e.divide(F(e));do{for(;t.isEven();)t=t.divide(F(t))}while(e.greater(t)&&(r=t,t=e,e=r),!(t=t.subtract(e)).isZero());return i.isUnit()?e:e.multiply(i)}f.prototype.bitLength=p.prototype.bitLength=function(){var e=this;return 0===(e=e.compareTo(Q(0))<0?e.negate().subtract(Q(1)):e).compareTo(Q(0))?Q(0):Q(function e(t,n){if(n.compareTo(t)<=0){var r=e(t,n.square(n)),i=r.p,r=r.e,n=i.multiply(n);return n.compareTo(t)<=0?{p:n,e:2*r+1}:{p:i,e:2*r}}return{p:Q(1),e:0}}(e,Q(2)).e).add(Q(1))};var V=function(e,t){for(var n=e.length,r=Math.abs(t),i=0;i<n;i++){var s=e[i].toLowerCase();if(\"-\"!==s&&/[a-z0-9]/.test(s))if(/[0-9]/.test(s)&&r<=+s){if(\"1\"!==s||1!==r)throw new Error(s+\" is not a valid digit in base \"+t+\".\")}else if(s.charCodeAt(0)-87>=r)throw new Error(s+\" is not a valid digit in base \"+t+\".\")}if(2<=t&&t<=36&&n<=c/Math.log(t)){var o=parseInt(e,t);if(isNaN(o))throw new Error(s+\" is not a valid digit in base \"+t+\".\");return new f(parseInt(e,t))}t=z(t);var a=[],o=\"-\"===e[0];for(i=o?1:0;i<e.length;i++){var u=(s=e[i].toLowerCase()).charCodeAt(0);if(48<=u&&u<=57)a.push(z(s));else if(97<=u&&u<=122)a.push(z(s.charCodeAt(0)-87));else{if(\"<\"!==s)throw new Error(s+\" is not a valid character\");for(u=i;\">\"!==e[++i];);a.push(z(e.slice(u+1,i)))}}return H(a,t,o)};function H(e,t,n){for(var r=u[0],i=u[1],s=e.length-1;0<=s;s--)r=r.add(e[s].times(i)),i=i.times(t);return n?r.negate():r}function j(e){return e<=35?\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(e):\"<\"+e+\">\"}function Z(e,t){if((t=Q(t)).isZero()){if(e.isZero())return{value:[0],isNegative:!1};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(t.equals(-1)){if(e.isZero())return{value:[0],isNegative:!1};if(e.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-e)).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var n=Array.apply(null,Array(+e-1)).map(Array.prototype.valueOf,[0,1]);return n.unshift([1]),{value:[].concat.apply([],n),isNegative:!1}}n=!1;if(e.isNegative()&&t.isPositive()&&(n=!0,e=e.abs()),t.equals(1))return e.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(+e)).map(Number.prototype.valueOf,1),isNegative:n};for(var r=[],i=e;i.isNegative()||0<=i.compareAbs(t);){var i=(s=i.divmod(t)).quotient,s=s.remainder;s.isNegative()&&(s=t.minus(s).abs(),i=i.next()),r.push(s.toJSNumber())}return r.push(i.toJSNumber()),{value:r.reverse(),isNegative:n}}function X(e,t){t=Z(e,t);return(t.isNegative?\"-\":\"\")+t.value.map(j).join(\"\")}function $(e){if(h(+e)){var t=+e;if(t===d(t))return new f(t);throw new Error(\"Invalid integer: \"+e)}var n=\"-\"===e[0],r=(e=n?e.slice(1):e).split(/e/i);if(2<r.length)throw new Error(\"Invalid integer: \"+r.join(\"e\"));if(2===r.length){var i=r[1];if((i=+(i=\"+\"===i[0]?i.slice(1):i))!==d(i)||!h(i))throw new Error(\"Invalid integer: \"+i+\" is not a valid exponent.\");t=r[0],r=t.indexOf(\".\");if(0<=r&&(i-=t.length-r-1,t=t.slice(0,r)+t.slice(r+1)),i<0)throw new Error(\"Cannot include negative exponent part for integers\");e=t+=new Array(i+1).join(\"0\")}if(!/^([0-9][0-9]*)$/.test(e))throw new Error(\"Invalid integer: \"+e);for(var s=[],o=e.length,a=l,u=o-a;0<o;)s.push(+e.slice(u,o)),(u-=a)<0&&(u=0),o-=a;return g(s),new p(s,n)}function z(e){return\"number\"==typeof e?function(e){if(h(e)){if(e!==d(e))throw new Error(e+\" is not an integer.\");return new f(e)}return $(e.toString())}(e):\"string\"==typeof e?$(e):e}p.prototype.toArray=function(e){return Z(this,e)},f.prototype.toArray=function(e){return Z(this,e)},p.prototype.toString=function(e){if(10!==(e=e===o?10:e))return X(this,e);for(var t,n=this.value,r=n.length,i=String(n[--r]);0<=--r;)t=String(n[r]),i+=\"0000000\".slice(t.length)+t;return(this.sign?\"-\":\"\")+i},f.prototype.toString=function(e){return 10!=(e=e===o?10:e)?X(this,e):String(this.value)},p.prototype.toJSON=f.prototype.toJSON=function(){return this.toString()},p.prototype.toJSNumber=p.prototype.valueOf=function(){return parseInt(this.toString(),10)},f.prototype.toJSNumber=f.prototype.valueOf=function(){return this.value};for(var e=0;e<1e3;e++)u[e]=new f(e),0<e&&(u[-e]=new f(-e));return u.one=u[1],u.zero=u[0],u.minusOne=u[-1],u.max=D,u.min=B,u.gcd=G,u.lcm=function(e,t){return e=z(e).abs(),t=z(t).abs(),e.divide(G(e,t)).multiply(t)},u.isInstance=function(e){return e instanceof p||e instanceof f},u.randBetween=function(e,t){var n=B(e=z(e),t=z(t)),r=D(e,t).subtract(n).add(1);if(r.isSmall)return n.add(Math.floor(Math.random()*r));for(var i=[],s=!0,o=r.value.length-1;0<=o;o--){var a=s?r.value[o]:v,u=d(Math.random()*a);i.unshift(u),u<a&&(s=!1)}return i=w(i),n.add(\"number\"==typeof i?new f(i):new p(i,!1))},u.fromArray=function(e,t,n){return H(e.map(z),z(t||10),n)},u}();return true&&module.hasOwnProperty(\"exports\")&&(module.exports=Q), true&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return Q}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)),Q}(),bigDec:function(e){\"use strict\";var c,L,t,s,o=9e15,m=1e9,g=\"0123456789abcdef\",r=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",i=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-o,maxE:o,crypto:!1},y=!0,u=\"[DecimalError] \",d=u+\"Invalid argument: \",l=u+\"Precision limit exceeded\",p=u+\"crypto unavailable\",I=Math.floor,v=Math.pow,f=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,h=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,w=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,b=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,U=1e7,_=7,S=r.length-1,M=i.length-1,N={name:\"[object Decimal]\"};function E(e){var t,n,r,i=e.length-1,s=\"\",o=e[0];if(0<i){for(s+=o,t=1;t<i;t++)r=e[t]+\"\",(n=_-r.length)&&(s+=V(n)),s+=r;o=e[t],(n=_-(r=o+\"\").length)&&(s+=V(n))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function q(e,t,n){if(e!==~~e||e<t||n<e)throw Error(d+e)}function x(e,t,n,r){for(var i,s,o=e[0];10<=o;o/=10)--t;return--t<0?(t+=_,i=0):(i=Math.ceil((t+1)/_),t%=_),o=v(10,_-t),s=e[i]%o|0,null==r?t<3?(0==t?s=s/100|0:1==t&&(s=s/10|0),n<4&&99999==s||3<n&&49999==s||5e4==s||0==s):(n<4&&s+1==o||3<n&&s+1==o/2)&&(e[i+1]/o/100|0)==v(10,t-2)-1||(s==o/2||0==s)&&0==(e[i+1]/o/100|0):t<4?(0==t?s=s/1e3|0:1==t?s=s/100|0:2==t&&(s=s/10|0),(r||n<4)&&9999==s||!r&&3<n&&4999==s):((r||n<4)&&s+1==o||!r&&3<n&&s+1==o/2)&&(e[i+1]/o/1e3|0)==v(10,t-3)-1}function A(e,t,n){for(var r,i,s=[0],o=0,a=e.length;o<a;){for(i=s.length;i--;)s[i]*=t;for(s[0]+=g.indexOf(e.charAt(o++)),r=0;r<s.length;r++)s[r]>n-1&&(void 0===s[r+1]&&(s[r+1]=0),s[r+1]+=s[r]/n|0,s[r]%=n)}return s.reverse()}N.absoluteValue=N.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),P(e)},N.ceil=function(){return P(new this.constructor(this),this.e+1,2)},N.comparedTo=N.cmp=function(e){var t,n,r=this,i=r.d,s=(e=new r.constructor(e)).d,o=r.s,a=e.s;if(!i||!s)return o&&a?o!==a?o:i===s?0:!i^o<0?1:-1:NaN;if(!i[0]||!s[0])return i[0]?o:s[0]?-a:0;if(o!==a)return o;if(r.e!==e.e)return r.e>e.e^o<0?1:-1;for(t=0,n=(r=i.length)<(e=s.length)?r:e;t<n;++t)if(i[t]!==s[t])return i[t]>s[t]^o<0?1:-1;return r===e?0:e<r^o<0?1:-1},N.cosine=N.cos=function(){var e,t,n=this,r=n.constructor;return n.d?n.d[0]?(e=r.precision,t=r.rounding,r.precision=e+Math.max(n.e,n.sd())+_,r.rounding=1,n=function(e,t){var n,r=t.d.length,r=r<32?(1/Y(4,n=Math.ceil(r/3))).toString():(n=16,\"2.3283064365386962890625e-10\");e.precision+=n,t=Q(e,1,t.times(r),new e(1));for(var i=n;i--;){var s=t.times(t);t=s.times(s).minus(s).times(8).plus(1)}return e.precision-=n,t}(r,W(r,n)),r.precision=e,r.rounding=t,P(2==s||3==s?n.neg():n,e,t,!0)):new r(1):new r(NaN)},N.cubeRoot=N.cbrt=function(){var e,t,n,r,i,s,o,a,u,l,c=this,p=c.constructor;if(!c.isFinite()||c.isZero())return new p(c);for(y=!1,(s=c.s*v(c.s*c,1/3))&&Math.abs(s)!=1/0?r=new p(s.toString()):(n=E(c.d),(s=((e=c.e)-n.length+1)%3)&&(n+=1==s||-2==s?\"0\":\"00\"),s=v(n,1/3),e=I((e+1)/3)-(e%3==(e<0?-1:2)),(r=new p(n=s==1/0?\"5e\"+e:(n=s.toExponential()).slice(0,n.indexOf(\"e\")+1)+e)).s=c.s),o=(e=p.precision)+3;;)if(l=(u=(a=r).times(a).times(a)).plus(c),r=C(l.plus(c).times(a),l.plus(u),o+2,1),E(a.d).slice(0,o)===(n=E(r.d)).slice(0,o)){if(\"9999\"!=(n=n.slice(o-3,o+1))&&(i||\"4999\"!=n)){+n&&(+n.slice(1)||\"5\"!=n.charAt(0))||(P(r,e+1,1),t=!r.times(r).times(r).eq(c));break}if(!i&&(P(a,e+1,0),a.times(a).times(a).eq(c))){r=a;break}o+=4,i=1}return y=!0,P(r,e,p.rounding,t)},N.decimalPlaces=N.dp=function(){var e,t=this.d,n=NaN;if(t){if(n=((e=t.length-1)-I(this.e/_))*_,e=t[e])for(;e%10==0;e/=10)n--;n<0&&(n=0)}return n},N.dividedBy=N.div=function(e){return C(this,new this.constructor(e))},N.dividedToIntegerBy=N.divToInt=function(e){var t=this.constructor;return P(C(this,new t(e),0,1,1),t.precision,t.rounding)},N.equals=N.eq=function(e){return 0===this.cmp(e)},N.floor=function(){return P(new this.constructor(this),this.e+1,3)},N.greaterThan=N.gt=function(e){return 0<this.cmp(e)},N.greaterThanOrEqualTo=N.gte=function(e){e=this.cmp(e);return 1==e||0===e},N.hyperbolicCosine=N.cosh=function(){var e,t,n,r=(a=this).constructor,i=new r(1);if(!a.isFinite())return new r(a.s?1/0:NaN);if(a.isZero())return i;t=r.precision,n=r.rounding,r.precision=t+Math.max(a.e,a.sd())+4,r.rounding=1;for(var s,o=(o=a.d.length)<32?(1/Y(4,e=Math.ceil(o/3))).toString():(e=16,\"2.3283064365386962890625e-10\"),a=Q(r,1,a.times(o),new r(1),!0),u=e,l=new r(8);u--;)s=a.times(a),a=i.minus(s.times(l.minus(s.times(l))));return P(a,r.precision=t,r.rounding=n,!0)},N.hyperbolicSine=N.sinh=function(){var e,t,n,r=(o=this).constructor;if(!o.isFinite()||o.isZero())return new r(o);if(e=r.precision,t=r.rounding,r.precision=e+Math.max(o.e,o.sd())+4,r.rounding=1,(n=o.d.length)<3)o=Q(r,2,o,o,!0);else for(var i,s=16<(s=1.4*Math.sqrt(n))?16:0|s,o=Q(r,2,o=o.times(1/Y(5,s)),o,!0),a=new r(5),u=new r(16),l=new r(20);s--;)i=o.times(o),o=o.times(a.plus(i.times(u.times(i).plus(l))));return P(o,r.precision=e,r.rounding=t,!0)},N.hyperbolicTangent=N.tanh=function(){var e,t,n=this,r=n.constructor;return n.isFinite()?n.isZero()?new r(n):(e=r.precision,t=r.rounding,r.precision=e+7,r.rounding=1,C(n.sinh(),n.cosh(),r.precision=e,r.rounding=t)):new r(n.s)},N.inverseCosine=N.acos=function(){var e=this,t=e.constructor,n=e.abs().cmp(1),r=t.precision,i=t.rounding;return-1!==n?0===n?e.isNeg()?B(t,r,i):new t(0):new t(NaN):e.isZero()?B(t,r+4,i).times(.5):(t.precision=r+6,t.rounding=1,e=e.asin(),n=B(t,r+4,i).times(.5),t.precision=r,t.rounding=i,n.minus(e))},N.inverseHyperbolicCosine=N.acosh=function(){var e,t,n=this,r=n.constructor;return n.lte(1)?new r(n.eq(1)?0:NaN):n.isFinite()?(e=r.precision,t=r.rounding,r.precision=e+Math.max(Math.abs(n.e),n.sd())+4,r.rounding=1,y=!1,n=n.times(n).minus(1).sqrt().plus(n),y=!0,r.precision=e,r.rounding=t,n.ln()):new r(n)},N.inverseHyperbolicSine=N.asinh=function(){var e,t,n=this,r=n.constructor;return!n.isFinite()||n.isZero()?new r(n):(e=r.precision,t=r.rounding,r.precision=e+2*Math.max(Math.abs(n.e),n.sd())+6,r.rounding=1,y=!1,n=n.times(n).plus(1).sqrt().plus(n),y=!0,r.precision=e,r.rounding=t,n.ln())},N.inverseHyperbolicTangent=N.atanh=function(){var e,t,n,r=this,i=r.constructor;return r.isFinite()?0<=r.e?new i(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(e=i.precision,t=i.rounding,n=r.sd(),Math.max(n,e)<2*-r.e-1?P(new i(r),e,t,!0):(i.precision=n=n-r.e,r=C(r.plus(1),new i(1).minus(r),n+e,1),i.precision=e+4,i.rounding=1,r=r.ln(),i.precision=e,i.rounding=t,r.times(.5))):new i(NaN)},N.inverseSine=N.asin=function(){var e,t,n,r=this,i=r.constructor;return r.isZero()?new i(r):(e=r.abs().cmp(1),t=i.precision,n=i.rounding,-1!==e?0===e?((e=B(i,t+4,n).times(.5)).s=r.s,e):new i(NaN):(i.precision=t+6,i.rounding=1,r=r.div(new i(1).minus(r.times(r)).sqrt().plus(1)).atan(),i.precision=t,i.rounding=n,r.times(2)))},N.inverseTangent=N.atan=function(){var e,t,n,r,i,s,o,a,u,l=this,c=l.constructor,p=c.precision,f=c.rounding;if(l.isFinite()){if(l.isZero())return new c(l);if(l.abs().eq(1)&&p+4<=M)return(o=B(c,p+4,f).times(.25)).s=l.s,o}else{if(!l.s)return new c(NaN);if(p+4<=M)return(o=B(c,p+4,f).times(.5)).s=l.s,o}for(c.precision=a=p+10,c.rounding=1,e=n=Math.min(28,a/_+2|0);e;--e)l=l.div(l.times(l).plus(1).sqrt().plus(1));for(y=!1,t=Math.ceil(a/_),r=1,u=l.times(l),o=new c(l),i=l;-1!==e;)if(i=i.times(u),s=o.minus(i.div(r+=2)),i=i.times(u),void 0!==(o=s.plus(i.div(r+=2))).d[t])for(e=t;o.d[e]===s.d[e]&&e--;);return n&&(o=o.times(2<<n-1)),y=!0,P(o,c.precision=p,c.rounding=f,!0)},N.isFinite=function(){return!!this.d},N.isInteger=N.isInt=function(){return!!this.d&&I(this.e/_)>this.d.length-2},N.isNaN=function(){return!this.s},N.isNegative=N.isNeg=function(){return this.s<0},N.isPositive=N.isPos=function(){return 0<this.s},N.isZero=function(){return!!this.d&&0===this.d[0]},N.lessThan=N.lt=function(e){return this.cmp(e)<0},N.lessThanOrEqualTo=N.lte=function(e){return this.cmp(e)<1},N.logarithm=N.log=function(e){var t,n,r,i,s,o,a,u,l=this.constructor,c=l.precision,p=l.rounding;if(null==e)e=new l(10),t=!0;else{if(n=(e=new l(e)).d,e.s<0||!n||!n[0]||e.eq(1))return new l(NaN);t=e.eq(10)}if(n=this.d,this.s<0||!n||!n[0]||this.eq(1))return new l(n&&!n[0]?-1/0:1!=this.s?NaN:n?0:1/0);if(t)if(1<n.length)s=!0;else{for(i=n[0];i%10==0;)i/=10;s=1!==i}if(y=!1,o=X(this,a=c+5),r=t?D(l,a+10):X(e,a),x((u=C(o,r,a,1)).d,i=c,p))do{if(o=X(this,a+=10),r=t?D(l,a+10):X(e,a),u=C(o,r,a,1),!s){+E(u.d).slice(i+1,i+15)+1==1e14&&(u=P(u,c+1,0));break}}while(x(u.d,i+=10,p));return y=!0,P(u,c,p)},N.minus=N.sub=function(e){var t,n,r,i,s,o,a,u,l,c,p,f=this,h=f.constructor;if(e=new h(e),!f.d||!e.d)return f.s&&e.s?f.d?e.s=-e.s:e=new h(e.d||f.s!==e.s?f:NaN):e=new h(NaN),e;if(f.s!=e.s)return e.s=-e.s,f.plus(e);if(l=f.d,p=e.d,a=h.precision,u=h.rounding,!l[0]||!p[0]){if(p[0])e.s=-e.s;else{if(!l[0])return new h(3===u?-0:0);e=new h(f)}return y?P(e,a,u):e}if(n=I(e.e/_),f=I(f.e/_),l=l.slice(),s=f-n){for(o=(c=s<0)?(t=l,s=-s,p.length):(t=p,n=f,l.length),s>(r=Math.max(Math.ceil(a/_),o)+2)&&(s=r,t.length=1),t.reverse(),r=s;r--;)t.push(0);t.reverse()}else{for((c=(r=l.length)<(o=p.length))&&(o=r),r=0;r<o;r++)if(l[r]!=p[r]){c=l[r]<p[r];break}s=0}for(c&&(t=l,l=p,p=t,e.s=-e.s),o=l.length,r=p.length-o;0<r;--r)l[o++]=0;for(r=p.length;s<r;){if(l[--r]<p[r]){for(i=r;i&&0===l[--i];)l[i]=U-1;--l[i],l[r]+=U}l[r]-=p[r]}for(;0===l[--o];)l.pop();for(;0===l[0];l.shift())--n;return l[0]?(e.d=l,e.e=F(l,n),y?P(e,a,u):e):new h(3===u?-0:0)},N.modulo=N.mod=function(e){var t,n=this,r=n.constructor;return e=new r(e),!n.d||!e.s||e.d&&!e.d[0]?new r(NaN):!e.d||n.d&&!n.d[0]?P(new r(n),r.precision,r.rounding):(y=!1,9==r.modulo?(t=C(n,e.abs(),0,3,1)).s*=e.s:t=C(n,e,0,r.modulo,1),t=t.times(e),y=!0,n.minus(t))},N.naturalExponential=N.exp=function(){return Z(this)},N.naturalLogarithm=N.ln=function(){return X(this)},N.negated=N.neg=function(){var e=new this.constructor(this);return e.s=-e.s,P(e)},N.plus=N.add=function(e){var t,n,r,i,s,o,a,u,l=this,c=l.constructor;if(e=new c(e),!l.d||!e.d)return l.s&&e.s?l.d||(e=new c(e.d||l.s===e.s?l:NaN)):e=new c(NaN),e;if(l.s!=e.s)return e.s=-e.s,l.minus(e);if(a=l.d,u=e.d,s=c.precision,o=c.rounding,!a[0]||!u[0])return u[0]||(e=new c(l)),y?P(e,s,o):e;if(c=I(l.e/_),l=I(e.e/_),a=a.slice(),r=c-l){for(i=r<0?(n=a,r=-r,u.length):(n=u,l=c,a.length),r>(i=(c=Math.ceil(s/_))>i?c+1:i+1)&&(r=i,n.length=1),n.reverse();r--;)n.push(0);n.reverse()}for((i=a.length)-(r=u.length)<0&&(r=i,n=u,u=a,a=n),t=0;r;)t=(a[--r]=a[r]+u[r]+t)/U|0,a[r]%=U;for(t&&(a.unshift(t),++l),i=a.length;0==a[--i];)a.pop();return e.d=a,e.e=F(a,l),y?P(e,s,o):e},N.precision=N.sd=function(e){var t;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(d+e);return this.d?(t=G(this.d),e&&this.e+1>t&&(t=this.e+1)):t=NaN,t},N.round=function(){var e=this.constructor;return P(new e(this),this.e+1,e.rounding)},N.sine=N.sin=function(){var e,t,n=this,r=n.constructor;return n.isFinite()?n.isZero()?new r(n):(e=r.precision,t=r.rounding,r.precision=e+Math.max(n.e,n.sd())+_,r.rounding=1,n=function(e,t){var n,r=t.d.length;if(r<3)return Q(e,2,t,t);n=16<(n=1.4*Math.sqrt(r))?16:0|n,t=Q(e,2,t=t.times(1/Y(5,n)),t);for(var i,s=new e(5),o=new e(16),a=new e(20);n--;)i=t.times(t),t=t.times(s.plus(i.times(o.times(i).minus(a))));return t}(r,W(r,n)),r.precision=e,r.rounding=t,P(2<s?n.neg():n,e,t,!0)):new r(NaN)},N.squareRoot=N.sqrt=function(){var e,t,n,r,i,s,o=this,a=o.d,u=o.e,l=o.s,c=o.constructor;if(1!==l||!a||!a[0])return new c(!l||l<0&&(!a||a[0])?NaN:a?o:1/0);for(y=!1,r=0==(l=Math.sqrt(+o))||l==1/0?(((t=E(a)).length+u)%2==0&&(t+=\"0\"),l=Math.sqrt(t),u=I((u+1)/2)-(u<0||u%2),new c(t=l==1/0?\"5e\"+u:(t=l.toExponential()).slice(0,t.indexOf(\"e\")+1)+u)):new c(l.toString()),n=(u=c.precision)+3;;)if(r=(s=r).plus(C(o,s,n+2,1)).times(.5),E(s.d).slice(0,n)===(t=E(r.d)).slice(0,n)){if(\"9999\"!=(t=t.slice(n-3,n+1))&&(i||\"4999\"!=t)){+t&&(+t.slice(1)||\"5\"!=t.charAt(0))||(P(r,u+1,1),e=!r.times(r).eq(o));break}if(!i&&(P(s,u+1,0),s.times(s).eq(o))){r=s;break}n+=4,i=1}return y=!0,P(r,u,c.rounding,e)},N.tangent=N.tan=function(){var e,t,n=this,r=n.constructor;return n.isFinite()?n.isZero()?new r(n):(e=r.precision,t=r.rounding,r.precision=e+10,r.rounding=1,(n=n.sin()).s=1,n=C(n,new r(1).minus(n.times(n)).sqrt(),e+10,0),r.precision=e,r.rounding=t,P(2==s||4==s?n.neg():n,e,t,!0)):new r(NaN)},N.times=N.mul=function(e){var t,n,r,i,s,o,a,u,l,c=this.constructor,p=this.d,f=(e=new c(e)).d;if(e.s*=this.s,!(p&&p[0]&&f&&f[0]))return new c(!e.s||p&&!p[0]&&!f||f&&!f[0]&&!p?NaN:p&&f?0*e.s:e.s/0);for(n=I(this.e/_)+I(e.e/_),(u=p.length)<(l=f.length)&&(s=p,p=f,f=s,o=u,u=l,l=o),s=[],r=o=u+l;r--;)s.push(0);for(r=l;0<=--r;){for(t=0,i=u+r;r<i;)a=s[i]+f[r]*p[i-r-1]+t,s[i--]=a%U|0,t=a/U|0;s[i]=(s[i]+t)%U|0}for(;!s[--o];)s.pop();return t?++n:s.shift(),e.d=s,e.e=F(s,n),y?P(e,c.precision,c.rounding):e},N.toBinary=function(e,t){return J(this,2,e,t)},N.toDecimalPlaces=N.toDP=function(e,t){var n=this.constructor,r=new n(this);return void 0===e?r:(q(e,0,m),void 0===t?t=n.rounding:q(t,0,8),P(r,e+r.e+1,t))},N.toExponential=function(e,t){var n=this,r=n.constructor,e=void 0===e?k(n,!0):(q(e,0,m),void 0===t?t=r.rounding:q(t,0,8),k(n=P(new r(n),e+1,t),!0,e+1));return n.isNeg()&&!n.isZero()?\"-\"+e:e},N.toFixed=function(e,t){var n=this,r=n.constructor,i=void 0===e?k(n):(q(e,0,m),void 0===t?t=r.rounding:q(t,0,8),k(i=P(new r(n),e+n.e+1,t),!1,e+i.e+1));return n.isNeg()&&!n.isZero()?\"-\"+i:i},N.toFraction=function(e){var t,n,r,i,s,o,a,u,l,c,p=this,f=p.d,h=p.constructor;if(!f)return new h(p);if(u=n=new h(1),r=a=new h(0),l=(s=(t=new h(r)).e=G(f)-p.e-1)%_,t.d[0]=v(10,l<0?_+l:l),null==e)e=0<s?t:u;else{if(!(o=new h(e)).isInt()||o.lt(u))throw Error(d+o);e=o.gt(t)?0<s?t:u:o}for(y=!1,o=new h(E(f)),l=h.precision,h.precision=s=f.length*_*2;c=C(o,t,0,1,1),1!=(i=n.plus(c.times(r))).cmp(e);)n=r,r=i,u=a.plus(c.times(i=u)),a=i,t=o.minus(c.times(i=t)),o=i;return i=C(e.minus(n),r,0,1,1),a=a.plus(i.times(u)),n=n.plus(i.times(r)),a.s=u.s=p.s,p=C(u,r,s,1).minus(p).abs().cmp(C(a,n,s,1).minus(p).abs())<1?[u,r]:[a,n],h.precision=l,y=!0,p},N.toHexadecimal=N.toHex=function(e,t){return J(this,16,e,t)},N.toNearest=function(e,t){var n=(r=this).constructor,r=new n(r);if(null==e){if(!r.d)return r;e=new n(1),t=n.rounding}else{if(e=new n(e),void 0===t?t=n.rounding:q(t,0,8),!r.d)return e.s?r:e;if(!e.d)return e.s&&(e.s=r.s),e}return e.d[0]?(y=!1,r=C(r,e,0,t,1).times(e),y=!0,P(r)):(e.s=r.s,r=e),r},N.toNumber=function(){return+this},N.toOctal=function(e,t){return J(this,8,e,t)},N.toPower=N.pow=function(e){var t,n,r,i,s,o,a=this,u=a.constructor,l=+(e=new u(e));if(!(a.d&&e.d&&a.d[0]&&e.d[0]))return new u(v(+a,l));if((a=new u(a)).eq(1))return a;if(r=u.precision,s=u.rounding,e.eq(1))return P(a,r,s);if((t=I(e.e/_))>=e.d.length-1&&(n=l<0?-l:l)<=9007199254740991)return i=H(u,a,n,r),e.s<0?new u(1).div(i):P(i,r,s);if((o=a.s)<0){if(t<e.d.length-1)return new u(NaN);if(0==(1&e.d[t])&&(o=1),0==a.e&&1==a.d[0]&&1==a.d.length)return a.s=o,a}return(t=0!=(n=v(+a,l))&&isFinite(n)?new u(n+\"\").e:I(l*(Math.log(\"0.\"+E(a.d))/Math.LN10+a.e+1)))>u.maxE+1||t<u.minE-1?new u(0<t?o/0:0):(y=!1,u.rounding=a.s=1,n=Math.min(12,(t+\"\").length),(i=Z(e.times(X(a,r+n)),r)).d&&x((i=P(i,r+5,1)).d,r,s)&&(+E((i=P(Z(e.times(X(a,(t=r+10)+n)),t),t+5,1)).d).slice(r+1,r+15)+1==1e14&&(i=P(i,r+1,0))),i.s=o,y=!0,P(i,r,u.rounding=s))},N.toPrecision=function(e,t){var n=this,r=n.constructor,e=void 0===e?k(n,n.e<=r.toExpNeg||n.e>=r.toExpPos):(q(e,1,m),void 0===t?t=r.rounding:q(t,0,8),k(n=P(new r(n),e,t),e<=n.e||n.e<=r.toExpNeg,e));return n.isNeg()&&!n.isZero()?\"-\"+e:e},N.toSignificantDigits=N.toSD=function(e,t){var n=this.constructor;return void 0===e?(e=n.precision,t=n.rounding):(q(e,1,m),void 0===t?t=n.rounding:q(t,0,8)),P(new n(this),e,t)},N.toString=function(){var e=this.constructor,e=k(this,this.e<=e.toExpNeg||this.e>=e.toExpPos);return this.isNeg()&&!this.isZero()?\"-\"+e:e},N.truncated=N.trunc=function(){return P(new this.constructor(this),this.e+1,1)},N.valueOf=N.toJSON=function(){var e=this.constructor,e=k(this,this.e<=e.toExpNeg||this.e>=e.toExpPos);return this.isNeg()?\"-\"+e:e};var C=function(e,t,n,r,i,s){var o,a,u,l,c,p,f,h,m,g,d,v,w,y,b,S,M,N,E,q=e.constructor,x=e.s==t.s?1:-1,A=e.d,C=t.d;if(!(A&&A[0]&&C&&C[0]))return new q(e.s&&t.s&&(A?!C||A[0]!=C[0]:C)?A&&0==A[0]||!C?0*x:x/0:NaN);for(a=s?(c=1,e.e-t.e):(s=U,I(e.e/(c=_))-I(t.e/c)),N=C.length,S=A.length,m=(x=new q(x)).d=[],u=0;C[u]==(A[u]||0);u++);if(C[u]>(A[u]||0)&&a--,null==n?(w=n=q.precision,r=q.rounding):w=i?n+(e.e-t.e)+1:n,w<0)m.push(1),p=!0;else{if(w=w/c+2|0,u=0,1==N){for(C=C[l=0],w++;(u<S||l)&&w--;u++)y=l*s+(A[u]||0),m[u]=y/C|0,l=y%C|0;p=l||u<S}else{for(1<(l=s/(C[0]+1)|0)&&(C=R(C,l,s),A=R(A,l,s),N=C.length,S=A.length),d=(g=A.slice(0,b=N)).length;d<N;)g[d++]=0;for((E=C.slice()).unshift(0),M=C[0],C[1]>=s/2&&++M;l=0,(o=O(C,g,N,d))<0?(v=g[0],1<(l=(v=N!=d?v*s+(g[1]||0):v)/M|0)?1==(o=O(f=R(C,l=s<=l?s-1:l,s),g,h=f.length,d=g.length))&&(l--,T(f,N<h?E:C,h,s)):(0==l&&(o=l=1),f=C.slice()),(h=f.length)<d&&f.unshift(0),T(g,f,d,s),-1==o&&(o=O(C,g,N,d=g.length))<1&&(l++,T(g,N<d?E:C,d,s)),d=g.length):0===o&&(l++,g=[0]),m[u++]=l,o&&g[0]?g[d++]=A[b]||0:(g=[A[b]],d=1),(b++<S||void 0!==g[0])&&w--;);p=void 0!==g[0]}m[0]||m.shift()}if(1==c)x.e=a,L=p;else{for(u=1,l=m[0];10<=l;l/=10)u++;x.e=u+a*c-1,P(x,i?n+x.e+1:n,r,p)}return x};function R(e,t,n){var r,i=0,s=e.length;for(e=e.slice();s--;)r=e[s]*t+i,e[s]=r%n|0,i=r/n|0;return i&&e.unshift(i),e}function O(e,t,n,r){var i,s;if(n!=r)s=r<n?1:-1;else for(i=s=0;i<n;i++)if(e[i]!=t[i]){s=e[i]>t[i]?1:-1;break}return s}function T(e,t,n,r){for(var i=0;n--;)e[n]-=i,i=e[n]<t[n]?1:0,e[n]=i*r+e[n]-t[n];for(;!e[0]&&1<e.length;)e.shift()}function P(e,t,n,r){var i,s,o,a,u,l,c,p,f=e.constructor;e:if(null!=t){if(!(c=e.d))return e;for(i=1,a=c[0];10<=a;a/=10)i++;if((s=t-i)<0)s+=_,u=(l=c[p=0])/v(10,i-(o=t)-1)%10|0;else if((p=Math.ceil((s+1)/_))>=(a=c.length)){if(!r)break e;for(;a++<=p;)c.push(0);l=u=0,o=(s%=_)-_+(i=1)}else{for(l=a=c[p],i=1;10<=a;a/=10)i++;u=(o=(s%=_)-_+i)<0?0:l/v(10,i-o-1)%10|0}if(r=r||t<0||void 0!==c[p+1]||(o<0?l:l%v(10,i-o-1)),u=n<4?(u||r)&&(0==n||n==(e.s<0?3:2)):5<u||5==u&&(4==n||r||6==n&&(0<s?0<o?l/v(10,i-o):0:c[p-1])%10&1||n==(e.s<0?8:7)),t<1||!c[0])return c.length=0,u?(t-=e.e+1,c[0]=v(10,(_-t%_)%_),e.e=-t||0):c[0]=e.e=0,e;if(0==s?(c.length=p,a=1,p--):(c.length=p+1,a=v(10,_-s),c[p]=0<o?(l/v(10,i-o)%v(10,o)|0)*a:0),u)for(;;){if(0==p){for(s=1,o=c[0];10<=o;o/=10)s++;for(o=c[0]+=a,a=1;10<=o;o/=10)a++;s!=a&&(e.e++,c[0]==U&&(c[0]=1));break}if(c[p]+=a,c[p]!=U)break;c[p--]=0,a=1}for(s=c.length;0===c[--s];)c.pop()}return y&&(e.e>f.maxE?(e.d=null,e.e=NaN):e.e<f.minE&&(e.e=0,e.d=[0])),e}function k(e,t,n){if(!e.isFinite())return $(e);var r,i=e.e,s=E(e.d),o=s.length;return t?(n&&0<(r=n-o)?s=s.charAt(0)+\".\"+s.slice(1)+V(r):1<o&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(e.e<0?\"e\":\"e+\")+e.e):i<0?(s=\"0.\"+V(-i-1)+s,n&&0<(r=n-o)&&(s+=V(r))):o<=i?(s+=V(i+1-o),n&&0<(r=n-i-1)&&(s=s+\".\"+V(r))):((r=i+1)<o&&(s=s.slice(0,r)+\".\"+s.slice(r)),n&&0<(r=n-o)&&(i+1===o&&(s+=\".\"),s+=V(r))),s}function F(e,t){var n=e[0];for(t*=_;10<=n;n/=10)t++;return t}function D(e,t,n){if(S<t)throw y=!0,n&&(e.precision=n),Error(l);return P(new e(r),t,1,!0)}function B(e,t,n){if(M<t)throw Error(l);return P(new e(i),t,n,!0)}function G(e){var t=e.length-1,n=t*_+1;if(t=e[t]){for(;t%10==0;t/=10)n--;for(t=e[0];10<=t;t/=10)n++}return n}function V(e){for(var t=\"\";e--;)t+=\"0\";return t}function H(e,t,n,r){var i,s=new e(1),o=Math.ceil(r/_+4);for(y=!1;;){if(n%2&&K((s=s.times(t)).d,o)&&(i=!0),0===(n=I(n/2))){n=s.d.length-1,i&&0===s.d[n]&&++s.d[n];break}K((t=t.times(t)).d,o)}return y=!0,s}function j(e){return 1&e.d[e.d.length-1]}function n(e,t,n){for(var r,i=new e(t[0]),s=0;++s<t.length;){if(!(r=new e(t[s])).s){i=r;break}i[n](r)&&(i=r)}return i}function Z(e,t){var n,r,i,s,o,a,u,l=0,c=0,p=0,f=e.constructor,h=f.rounding,m=f.precision;if(!e.d||!e.d[0]||17<e.e)return new f(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(u=null==t?(y=!1,m):t,a=new f(.03125);-2<e.e;)e=e.times(a),p+=5;for(u+=r=Math.log(v(2,p))/Math.LN10*2+5|0,n=s=o=new f(1),f.precision=u;;){if(s=P(s.times(e),u,1),n=n.times(++c),E((a=o.plus(C(s,n,u,1))).d).slice(0,u)===E(o.d).slice(0,u)){for(i=p;i--;)o=P(o.times(o),u,1);if(null!=t)return f.precision=m,o;if(!(l<3&&x(o.d,u-r,h,l)))return P(o,f.precision=m,h,y=!0);f.precision=u+=10,n=s=a=new f(1),c=0,l++}o=a}}function X(e,t){var n,r,i,s,o,a,u,l,c,p,f,h=1,m=e,g=m.d,d=m.constructor,v=d.rounding,w=d.precision;if(m.s<0||!g||!g[0]||!m.e&&1==g[0]&&1==g.length)return new d(g&&!g[0]?-1/0:1!=m.s?NaN:g?0:m);if(c=null==t?(y=!1,w):t,d.precision=c+=10,r=(n=E(g)).charAt(0),!(Math.abs(s=m.e)<15e14))return l=D(d,c+2,w).times(s+\"\"),m=X(new d(r+\".\"+n.slice(1)),c-10).plus(l),d.precision=w,null==t?P(m,w,v,y=!0):m;for(;r<7&&1!=r||1==r&&3<n.charAt(1);)r=(n=E((m=m.times(e)).d)).charAt(0),h++;for(s=m.e,1<r?(m=new d(\"0.\"+n),s++):m=new d(r+\".\"+n.slice(1)),u=o=m=C((p=m).minus(1),m.plus(1),c,1),f=P(m.times(m),c,1),i=3;;){if(o=P(o.times(f),c,1),E((l=u.plus(C(o,new d(i),c,1))).d).slice(0,c)===E(u.d).slice(0,c)){if(u=u.times(2),0!==s&&(u=u.plus(D(d,c+2,w).times(s+\"\"))),u=C(u,new d(h),c,1),null!=t)return d.precision=w,u;if(!x(u.d,c-10,v,a))return P(u,d.precision=w,v,y=!0);d.precision=c+=10,l=o=m=C(p.minus(1),p.plus(1),c,1),f=P(m.times(m),c,1),i=a=1}u=l,i+=2}}function $(e){return String(e.s*e.s/0)}function z(e,t){var n,r,i;for(0<(r=(t=-1<(n=t.indexOf(\".\"))?t.replace(\".\",\"\"):t).search(/e/i))?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;48===t.charCodeAt(r);r++);for(i=t.length;48===t.charCodeAt(i-1);--i);if(t=t.slice(r,i)){if(i-=r,e.e=n=n-r-1,e.d=[],r=(n+1)%_,n<0&&(r+=_),r<i){for(r&&e.d.push(+t.slice(0,r)),i-=_;r<i;)e.d.push(+t.slice(r,r+=_));t=t.slice(r),r=_-t.length}else r-=i;for(;r--;)t+=\"0\";e.d.push(+t),y&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function Q(e,t,n,r,i){var s,o,a,u,l=e.precision,c=Math.ceil(l/_);for(y=!1,u=n.times(n),a=new e(r);;){if(o=C(a.times(u),new e(t++*t++),l,1),a=i?r.plus(o):r.minus(o),r=C(o.times(u),new e(t++*t++),l,1),void 0!==(o=a.plus(r)).d[c]){for(s=c;o.d[s]===a.d[s]&&s--;);if(-1==s)break}s=a,a=r,r=o,o=s}return y=!0,o.d.length=c+1,o}function Y(e,t){for(var n=e;--t;)n*=e;return n}function W(e,t){var n=t.s<0,r=B(e,e.precision,1),i=r.times(.5);if((t=t.abs()).lte(i))return s=n?4:1,t;if((e=t.divToInt(r)).isZero())s=n?3:2;else{if((t=t.minus(e.times(r))).lte(i))return s=j(e)?n?2:3:n?4:1,t;s=j(e)?n?1:4:n?3:2}return t.minus(r).abs()}function J(e,t,n,r){var i,s,o,a,u,l,c,p,f=e.constructor,h=void 0!==n;if(h?(q(n,1,m),void 0===r?r=f.rounding:q(r,0,8)):(n=f.precision,r=f.rounding),e.isFinite()){for(h?(i=2,16==t?n=4*n-3:8==t&&(n=3*n-2)):i=t,0<=(o=(l=k(e)).indexOf(\".\"))&&(l=l.replace(\".\",\"\"),(p=new f(1)).e=l.length-o,p.d=A(k(p),10,i),p.e=p.d.length),s=a=(c=A(l,10,i)).length;0==c[--a];)c.pop();if(c[0]){if(o<0?s--:((e=new f(e)).d=c,e.e=s,c=(e=C(e,p,n,r,0,i)).d,s=e.e,u=L),o=c[n],p=i/2,u=u||void 0!==c[n+1],u=r<4?(void 0!==o||u)&&(0===r||r===(e.s<0?3:2)):p<o||o===p&&(4===r||u||6===r&&1&c[n-1]||r===(e.s<0?8:7)),c.length=n,u)for(;++c[--n]>i-1;)c[n]=0,n||(++s,c.unshift(1));for(a=c.length;!c[a-1];--a);for(o=0,l=\"\";o<a;o++)l+=g.charAt(c[o]);if(h){if(1<a)if(16==t||8==t){for(o=16==t?4:3,--a;a%o;a++)l+=\"0\";for(a=(c=A(l,i,t)).length;!c[a-1];--a);for(o=1,l=\"1.\";o<a;o++)l+=g.charAt(c[o])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(s<0?\"p\":\"p+\")+s}else if(s<0){for(;++s;)l=\"0\"+l;l=\"0.\"+l}else if(++s>a)for(s-=a;s--;)l+=\"0\";else s<a&&(l=l.slice(0,s)+\".\"+l.slice(s))}else l=h?\"0p+0\":\"0\";l=(16==t?\"0x\":2==t?\"0b\":8==t?\"0o\":\"\")+l}else l=$(e);return e.s<0?\"-\"+l:l}function K(e,t){return e.length>t&&(e.length=t,1)}function ee(e){return new this(e).abs()}function te(e){return new this(e).acos()}function ne(e){return new this(e).acosh()}function re(e,t){return new this(e).plus(t)}function ie(e){return new this(e).asin()}function se(e){return new this(e).asinh()}function oe(e){return new this(e).atan()}function ae(e){return new this(e).atanh()}function ue(e,t){e=new this(e),t=new this(t);var n,r=this.precision,i=this.rounding,s=r+4;return e.s&&t.s?e.d||t.d?!t.d||e.isZero()?(n=t.s<0?B(this,r,i):new this(0)).s=e.s:!e.d||t.isZero()?(n=B(this,s,1).times(.5)).s=e.s:n=t.s<0?(this.precision=s,this.rounding=1,n=this.atan(C(e,t,s,1)),t=B(this,s,1),this.precision=r,this.rounding=i,e.s<0?n.minus(t):n.plus(t)):this.atan(C(e,t,s,1)):(n=B(this,s,1).times(0<t.s?.25:.75)).s=e.s:n=new this(NaN),n}function le(e){return new this(e).cbrt()}function ce(e){return P(e=new this(e),e.e+1,2)}function pe(e){if(!e||\"object\"!=typeof e)throw Error(u+\"Object expected\");for(var t,n,r=!0===e.defaults,i=[\"precision\",1,m,\"rounding\",0,8,\"toExpNeg\",-o,0,\"toExpPos\",0,o,\"maxE\",0,o,\"minE\",-o,0,\"modulo\",0,9],s=0;s<i.length;s+=3)if(t=i[s],r&&(this[t]=a[t]),void 0!==(n=e[t])){if(!(I(n)===n&&i[s+1]<=n&&n<=i[s+2]))throw Error(d+t+\": \"+n);this[t]=n}if(t=\"crypto\",r&&(this[t]=a[t]),void 0!==(n=e[t])){if(!0!==n&&!1!==n&&0!==n&&1!==n)throw Error(d+t+\": \"+n);if(n){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(p);this[t]=!0}else this[t]=!1}return this}function fe(e){return new this(e).cos()}function he(e){return new this(e).cosh()}function me(e,t){return new this(e).div(t)}function ge(e){return new this(e).exp()}function de(e){return P(e=new this(e),e.e+1,3)}function ve(){var e,t,n=new this(0);for(y=!1,e=0;e<arguments.length;)if((t=new this(arguments[e++])).d)n.d&&(n=n.plus(t.times(t)));else{if(t.s)return y=!0,new this(1/0);n=t}return y=!0,n.sqrt()}function we(e){return e instanceof c||e&&\"[object Decimal]\"===e.name||!1}function ye(e){return new this(e).ln()}function be(e,t){return new this(e).log(t)}function Se(e){return new this(e).log(2)}function Me(e){return new this(e).log(10)}function Ne(){return n(this,arguments,\"lt\")}function Ee(){return n(this,arguments,\"gt\")}function qe(e,t){return new this(e).mod(t)}function xe(e,t){return new this(e).mul(t)}function Ae(e,t){return new this(e).pow(t)}function Ce(e){var t,n,r,i,s=0,o=new this(1),a=[];if(void 0===e?e=this.precision:q(e,1,m),r=Math.ceil(e/_),this.crypto)if(crypto.getRandomValues)for(t=crypto.getRandomValues(new Uint32Array(r));s<r;)429e7<=(i=t[s])?t[s]=crypto.getRandomValues(new Uint32Array(1))[0]:a[s++]=i%1e7;else{if(!crypto.randomBytes)throw Error(p);for(t=crypto.randomBytes(r*=4);s<r;)214e7<=(i=t[s]+(t[s+1]<<8)+(t[s+2]<<16)+((127&t[s+3])<<24))?crypto.randomBytes(4).copy(t,s):(a.push(i%1e7),s+=4);s=r/4}else for(;s<r;)a[s++]=1e7*Math.random()|0;for(r=a[--s],e%=_,r&&e&&(i=v(10,_-e),a[s]=(r/i|0)*i);0===a[s];s--)a.pop();if(s<0)a=[n=0];else{for(n=-1;0===a[0];n-=_)a.shift();for(r=1,i=a[0];10<=i;i/=10)r++;r<_&&(n-=_-r)}return o.e=n,o.d=a,o}function Le(e){return P(e=new this(e),e.e+1,this.rounding)}function Ie(e){return(e=new this(e)).d?e.d[0]?e.s:0*e.s:e.s||NaN}function Ue(e){return new this(e).sin()}function _e(e){return new this(e).sinh()}function Re(e){return new this(e).sqrt()}function Oe(e,t){return new this(e).sub(t)}function Te(e){return new this(e).tan()}function Pe(e){return new this(e).tanh()}function ke(e){return P(e=new this(e),e.e+1,1)}return(c=function e(t){var n,r,i;function s(e){var t,n,r,i=this;if(!(i instanceof s))return new s(e);if(e instanceof(i.constructor=s))return i.s=e.s,void(y?!e.d||e.e>s.maxE?(i.e=NaN,i.d=null):e.e<s.minE?(i.e=0,i.d=[0]):(i.e=e.e,i.d=e.d.slice()):(i.e=e.e,i.d=e.d&&e.d.slice()));if(\"number\"==(r=typeof e)){if(0===e)return i.s=1/e<0?-1:1,i.e=0,void(i.d=[0]);if(e<0?(e=-e,i.s=-1):i.s=1,e===~~e&&e<1e7){for(t=0,n=e;10<=n;n/=10)t++;return void(y?s.maxE<t?(i.e=NaN,i.d=null):t<s.minE?(i.e=0,i.d=[0]):(i.e=t,i.d=[e]):(i.e=t,i.d=[e]))}return 0*e!=0?(e||(i.s=NaN),i.e=NaN,void(i.d=null)):z(i,e.toString())}if(\"string\"!=r)throw Error(d+e);return 45===(n=e.charCodeAt(0))?(e=e.slice(1),i.s=-1):(43===n&&(e=e.slice(1)),i.s=1),(b.test(e)?z:function(e,t){var n,r,i,s,o,a,u,l;if(\"Infinity\"===t||\"NaN\"===t)return+t||(e.s=NaN),e.e=NaN,e.d=null,e;if(h.test(t))l=16,t=t.toLowerCase();else if(f.test(t))l=2;else{if(!w.test(t))throw Error(d+t);l=8}for(s=0<=(i=(t=0<(i=t.search(/p/i))?(a=+t.slice(i+1),t.substring(2,i)):t.slice(2)).indexOf(\".\")),n=e.constructor,s&&(i=(o=(t=t.replace(\".\",\"\")).length)-i,r=H(n,new n(l),i,2*i)),i=l=(u=A(t,l,U)).length-1;0===u[i];--i)u.pop();return i<0?new n(0*e.s):(e.e=F(u,l),e.d=u,y=!1,s&&(e=C(e,r,4*o)),a&&(e=e.times(Math.abs(a)<54?v(2,a):c.pow(2,a))),y=!0,e)})(i,e)}if(s.prototype=N,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=pe,s.clone=e,s.isDecimal=we,s.abs=ee,s.acos=te,s.acosh=ne,s.add=re,s.asin=ie,s.asinh=se,s.atan=oe,s.atanh=ae,s.atan2=ue,s.cbrt=le,s.ceil=ce,s.cos=fe,s.cosh=he,s.div=me,s.exp=ge,s.floor=de,s.hypot=ve,s.ln=ye,s.log=be,s.log10=Me,s.log2=Se,s.max=Ne,s.min=Ee,s.mod=qe,s.mul=xe,s.pow=Ae,s.random=Ce,s.round=Le,s.sign=Ie,s.sin=Ue,s.sinh=_e,s.sqrt=Re,s.sub=Oe,s.tan=Te,s.tanh=Pe,s.trunc=ke,(t=void 0===t?{}:t)&&!0!==t.defaults)for(i=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],n=0;n<i.length;)t.hasOwnProperty(r=i[n++])||(t[r]=this[r]);return s.config(t),s}(a)).default=c.Decimal=c,r=new c(r),i=new c(i), true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return c}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0,c}(this)}); true&&(module.exports=nerdamer), true&&(nerdamer=__webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\"),__webpack_require__(/*! ./Calculus.js */ \"./src/nerdamer/Calculus.js\")),function(){\"use strict\";var $=nerdamer.getCore(),H=$.PARSER,u=$.groups.N,c=$.groups.P,j=$.groups.S,p=$.groups.EX,x=$.groups.FN,y=$.groups.PL,Z=$.groups.CP,A=$.groups.CB,C=$.Utils.keys,L=$.Utils.even,X=$.Utils.variables,l=$.Utils.format,b=$.Utils.round,z=$.Frac,I=$.Utils.isInt,Q=$.Symbol,Y=$.Settings.CONST_HASH,f=$.Utils.importFunctions();$.Utils.evaluate;function W(e,t,n){if($.Utils.isSymbol(e))this.parse(e),this.variable=this.variable||t;else if(isNaN(e))\"string\"==typeof e&&this.parse(H.parse(e));else{if(n=n||0,void 0===t)throw new $.exceptions.InvalidVariableNameError(\"Polynomial expects a variable name when creating using order\");this.coeffs=[],this.coeffs[n]=e,this.fill(e)}}function U(){this.factors={},this.length=0}function J(e,t,n){this.terms=t||[],this.coeff=e,this.map=n,this.sum=new $.Frac(0),this.image=void 0}W.fromArray=function(e,t){if(void 0===t)throw new $.exceptions.InvalidVariableNameError(\"A variable name must be specified when creating polynomial from array\");var n=new W;return n.coeffs=e,n.variable=t,n},W.fit=function(e,t,n,r,i,s){var o=new Array(i+1),a=n-t;o[0]=t,a-=(o[i]=e)*Math.pow(r,i);for(var u=i-1;0<u;u--){var l=Math.pow(r,u),c=a/l,c=Math.sign(c)*Math.floor(Math.abs(c));a-=c*l,o[u]=c}if(0!==a)return null;for(u=0;u<o.length;u++)o[u]=new z(o[u]);return W.fromArray(o,s)},W.prototype={parse:function(e,t){if(this.variable=X(e)[0],!e.isPoly())throw $.exceptions.NerdamerTypeError(\"Polynomial Expected! Received \"+$.Utils.text(e));if(t=t||[],(e=!e.power.absEquals(1)?H.expand(e):e).group===$.groups.N)t[0]=e.multiplier;else if(e.group===$.groups.S)t[e.power.toDecimal()]=e.multiplier;else for(var n in e.symbols){var r=e.symbols[n],n=r.power;if($.Utils.isSymbol(n))throw new $.exceptions.NerdamerTypeError(\"power cannot be a Symbol\");n=r.group===u?0:n.toDecimal(),r.symbols?this.parse(r,t):t[n]=r.multiplier}this.coeffs=t,this.fill()},fill:function(e){e=Number(e)||0;for(var t=this.coeffs.length,n=0;n<t;n++)void 0===this.coeffs[n]&&(this.coeffs[n]=new z(e));return this},trim:function(){for(var e=this.coeffs.length;e--;){var t=this.coeffs[e],n=t.equals(0);if(!t||!n)break;if(0===e)break;this.coeffs.pop()}return this},modP:function(e){for(var t=this.coeffs.length,n=0;n<t;n++){var r=this.coeffs[n];if(r<0){for(var i,s=n;s<t;s++)if(0<this.coeffs[s]){i=this.coeffs[s];break}if(i){for(;n<s;s--)this.coeffs[s]=this.coeffs[s].subtract(new z(1)),this.coeffs[s-1]=this.coeffs[s-1].add(new z(e));r=this.coeffs[n]}}var o,a=r.mod(e),u=r.subtract(a).divide(e);u.equals(0)||(r=(r=this.coeffs[o=n+1]||new z(0)).add(u),this.coeffs[o]=new z(r),this.coeffs[n]=new z(a))}return this},add:function(e){for(var t=Math.max(this.coeffs.length,e.coeffs.length),n=0;n<t;n++){var r=this.coeffs[n]||new z(0),i=e.coeffs[n]||new z(0);this.coeffs[n]=r.add(i)}return this},subtract:function(e){for(var t=Math.max(this.coeffs.length,e.coeffs.length),n=0;n<t;n++){var r=this.coeffs[n]||new z(0),i=e.coeffs[n]||new z(0);this.coeffs[n]=r.subtract(i)}return this},divide:function(e){for(var t=this.variable,n=$.Utils.arrayClone(this.coeffs),r=$.Utils.arrayClone(e.coeffs),i=n.length,s=r.length-1,o=[],a=0;a<i;a++){var u=i-(a+1),l=u-s,c=n[u].divide(r[s]);if(l<0)break;o[l]=c;for(var p=0;p<=s;p++)n[p+l]=n[p+l].subtract(r[p].multiply(c))}e=W.fromArray(n,t||\"x\").trim();return[W.fromArray(o,t||\"x\"),e]},multiply:function(e){for(var t=this.coeffs.length,n=e.coeffs.length,r=[],i=0;i<t;i++)for(var s=this.coeffs[i],o=0;o<n;o++){var a=i+o,u=e.coeffs[o],l=r[a]||new z(0);r[a]=l.add(s.multiply(u))}return this.coeffs=r,this},isZero:function(){for(var e=this.coeffs.length,t=0;t<e;t++)if(!this.coeffs[t].equals(0))return!1;return!0},sub:function(e){for(var t=new z(0),n=this.coeffs.length,r=0;r<n;r++){var i=this.coeffs[r];i.equals(0)||(t=t.add(i.multiply(new z(Math.pow(e,r)))))}return t},clone:function(){var e=new W;return e.coeffs=this.coeffs,e.variable=this.variable,e},deg:function(){return this.trim(),this.coeffs.length-1},lc:function(){return this.coeffs[this.deg()].clone()},monic:function(){for(var e=this.lc(),t=this.coeffs.length,n=0;n<t;n++)this.coeffs[n]=this.coeffs[n].divide(e);return this},gcd:function(e){if(this.coeffs.length-1<e.coeffs.length-1)return e.gcd(this);for(var t=this;!e.isZero();){var n=e.clone();e=(t=t.clone()).divide(n)[1],t=n}var r=$.Math2.QGCD.apply(null,t.coeffs);if(!r.equals(1))for(var i=t.coeffs.length,s=0;s<i;s++)t.coeffs[s]=t.coeffs[s].divide(r);return t},diff:function(){for(var e=[],t=this.coeffs.length,n=1;n<t;n++)e.push(this.coeffs[n].multiply(new z(n)));return this.coeffs=e,this},integrate:function(){for(var e=[0],t=this.coeffs.length,n=0;n<t;n++){var r=new z(n+1);e[r]=this.coeffs[n].divide(r)}return this.coeffs=e,this},gcf:function(e){for(var t=[],n=0;n<this.coeffs.length;n++){var r=this.coeffs[n];r.equals(0)||-1!==t.indexOf(r)||t.push(r)}var i=[$.Math2.QGCD.apply(void 0,t),function(e){for(var t=0;t<e.length;t++)if(!e[t].equals(0))return t}(this.coeffs)].toDecimal();return e&&((e=[])[i[1]-1]=i[0],i=W.fromArray(e,this.variable).fill()),i},quad:function(e){var t=[];if(3<this.coeffs.length)throw new Error(\"Cannot calculate quadratic order of \"+(this.coeffs.length-1));if(0===this.coeffs.length)throw new Error(\"Polynomial array has no terms\");var n=this.coeffs[2]||0,r=this.coeffs[1]||0,i=r*r-4*n*this.coeffs[0];return i<0&&!e||(t[0]=(-r+Math.sqrt(i))/(2*n),t[1]=(-r-Math.sqrt(i))/(2*n)),t},squareFree:function(){for(var e=this.clone(),t=1,n=e.clone().diff(),r=e.clone().gcd(n),i=e.divide(r)[0],s=W.fromArray([new z(1)],e.variable);!r.equalsNumber(1);){var o=i.gcd(r),a=i.divide(o)[0];if(!a.equalsNumber(1)&&1<t){for(var u=a.clone(),l=1;l<t;l++)u.multiply(a.clone());a=u}s=s.multiply(a),t++,r=r.divide(i=o)[0]}return[s,i,t]},toSymbol:function(){var e=this.coeffs.length,t=this.variable;if(0===e)return new $.Symbol(0);for(var n=e-1,r=\"\",i=0;i<e;i++){var s=i===n?\"\":\"+\",o=this.coeffs[i];o.equals(0)||(r+=o+\"*\"+t+\"^\"+i+s)}return H.parse(r)},equalsNumber:function(e){return this.trim(),1===this.coeffs.length&&this.coeffs[0].toDecimal()===String(e)},toString:function(){return this.toSymbol().toString()}},Q.prototype.coeffs=function(e,t){t&&!this.isPoly(!0)&&H.error(\"Polynomial expected when requesting coefficients with order\"),e=e||[];var n,r=this.clone().distributeMultiplier();if(r.isComposite())for(var i in r.symbols){i=r.symbols[i];i.isComposite()?i.clone().distributeMultiplier().coeffs(e,t):t?e[i.isConstant()?0:i.power.toDecimal()]=i.multiplier:e.push(i.multiplier)}else t?e[r.isConstant(!0)?0:r.power.toDecimal()]=r.multiplier:r.group===A&&r.isImaginary()?(n=new Q(r.multiplier),r.each(function(e){(e.isConstant(!0)||e.imaginary)&&(n=H.multiply(n,e))}),e.push(n)):e.push(r.multiplier);if(t)for(var s=0;s<e.length;s++)void 0===e[s]&&(e[s]=new Q(0));return e},Q.prototype.tBase=function(e){if(void 0===e)throw new Error(\"Symbol.tBase requires a map object!\");for(var t=[],n=this.collectSymbols(null,null,null,!0),r=n.length,i=0;i<r;i++){var s=n[i],o=s.group,a=new J(s.multiplier,[],e);if(o===A)for(var u in s.symbols){var l=s.symbols[u];a.terms[e[u]]=l.power}else a.terms[e[s.value]]=s.power;t.push(a.fill()),a.updateCount()}return t},Q.prototype.altVar=function(e){var t=this.multiplier.toString(),n=this.power.toString();return(\"1\"===t?\"\":t+\"*\")+e+(\"1\"===n?\"\":\"^\"+n)},Q.prototype.sameVars=function(e){if(!this.symbols&&this.group!==e.group)return!1;for(var t in this.symbols){var n=this.symbols[t],t=e.symbols[t];if(!t)return!1;if(n.value!==t.value)return!1}return!0},Q.prototype.groupTerms=function(r){var i,s,o;r=String(r);var a=[];return this.each(function(e){if(e.group===y){o=e.groupTerms(r);for(var t=0;t<o.length;t++){var n=o[t];n&&(a[t]=n)}}else i=$.Utils.decompose_fn(e,r,!0),s=i.x.value===r?Number(i.x.power):0,a[s]=H.add(a[s]||new Q(0),i.a)}),a},Q.prototype.collectFactors=function(){var t=[];return this.group===A?this.each(function(e){t.push(e.clone())}):t.push(this.clone()),t},U.prototype.getNumberSymbolics=function(){var t=0;return this.each(function(e){e.isConstant(!0)||t++}),t},U.prototype.add=function(e){if(e.equals(0))return this;if(e.equals(-1)&&0<this.length){var t=$.Utils.firstObject(this.factors,null,!0);return this.add(H.symfunction($.Settings.PARENTHESIS,[t.obj]).negate()),delete this.factors[t.key],this.length--,this}if(e.group===A){var n=this;e.multiplier.equals(1)||n.add(new Q(e.multiplier)),e.each(function(e){n.add(e)})}else{this.preAdd&&(e=this.preAdd(e));t=(e=this.pFactor?H.pow(e,new Q(this.pFactor)):e).isConstant();if(t&&e.equals(1))return this;t=t?e.value:e.text();t in this.factors?(this.factors[t]=H.multiply(this.factors[t],e),this.factors[t].equals(1)&&(delete this.factors[t],this.length--)):(this.factors[t]=e,this.length++)}return this},U.prototype.toSymbol=function(){for(var e=new Q(1),t=Object.values(this.factors).sort(function(e,t){return e.group>t.group}),n=0,r=t.length;n<r;n++)var i=t[n],i=i.power.equals(1)&&\"\"!==i.fname?H.symfunction($.PARENTHESIS,[i]):i,e=H.multiply(e,i);return e=\"\"===e.fname?Q.unwrapPARENS(e):e},U.prototype.merge=function(e){for(var t in e)t in this.factors?this.factors[t]=H.multiply(this.factors[t],e[t]):this.factors[t]=e[t];return this},U.prototype.each=function(e){for(var t in this.factors){var n=this.factors[t];n.fname===$.PARENTHESIS&&n.isLinear()&&(n=n.args[0]),e.call(this,n,t)}return this},U.prototype.count=function(){return C(this.factors).length},U.prototype.clean=function(){try{var e=$.Settings.CONST_HASH;this.factors[e].lessThan(0)&&(this.factors[e].equals(-1)?delete this.factors[e]:this.factors[e].negate(),this.each(function(e){e.negate()}))}catch(e){}},U.prototype.toString=function(){return this.toSymbol().toString()},J.prototype.updateCount=function(){this.count=this.count||0;for(var e=0;e<this.terms.length;e++)this.terms[e].equals(0)||this.count++;return this},J.prototype.getVars=function(){for(var e=[],t=0;t<this.terms.length;t++){var n=this.terms[t];this.getRevMap();n.equals(0)||e.push(this.rev_map[t])}return e.join(\" \")},J.prototype.len=function(){return void 0===this.count&&this.updateCount(),this.count},J.prototype.toSymbol=function(e){e=e||this.getRevMap();for(var t=new Q(this.coeff),n=0;n<this.terms.length;n++){var r=e[n],i=this.terms[n];i.equals(0)||r===Y||((r=new Q(r)).power=i,t=H.multiply(t,r))}return t},J.prototype.getRevMap=function(){if(this.rev_map)return this.rev_map;var e,t={};for(e in this.map)t[this.map[e]]=e;return this.rev_map=t},J.prototype.generateImage=function(){return this.image=this.terms.join(\" \"),this},J.prototype.getImg=function(){return this.image||this.generateImage(),this.image},J.prototype.fill=function(){for(var e=this.map.length,t=0;t<e;t++)void 0===this.terms[t]?this.terms[t]=new $.Frac(0):this.sum=this.sum.add(this.terms[t]);return this},J.prototype.divide=function(e){for(var t=this.coeff.divide(e.coeff),n=this.terms.length,r=new J(t,[],this.map),i=0;i<n;i++)r.terms[i]=this.terms[i].subtract(e.terms[i]),r.sum=r.sum.add(r.terms[i]);return r},J.prototype.multiply=function(e){for(var t=this.coeff.multiply(e.coeff),n=this.terms.length,r=new J(t,[],this.map),i=0;i<n;i++)r.terms[i]=this.terms[i].add(e.terms[i]),r.sum=r.sum.add(r.terms[i]);return r},J.prototype.isZero=function(){return this.coeff.equals(0)},J.prototype.toString=function(){return\"{ coeff: \"+this.coeff.toString()+\", terms: [\"+this.terms.join(\",\")+\"]: sum: \"+this.sum.toString()+\", count: \"+this.count+\"}\"},$.Utils.toMapObj=function(e){for(var t=0,n={},r=0;r<e.length;r++){var i=e[r];void 0===n[i]&&(n[i]=t,t++)}return n.length=t,n},$.Utils.filledArray=function(e,t,n){for(var r=[];t--;)r[t]=n?new n(e):e;return r},$.Utils.arrSum=function(e){for(var t=0,n=e.length,r=0;r<n;r++)t+=e[r];return t},$.Utils.haveIntersection=function(e,t){var n;return t.length>e.length&&(n=t,t=e,e=n),e.some(function(e){return-1<t.indexOf(e)})},$.Utils.subFunctions=function(e,r){r=r||{};var i=[];return e.each(function(e){var t,n;e.group===x||e.previousGroup===x?(t=$.Utils.text(e,\"hash\"),(n=r[t])?i.push(e.altVar(n)):(n=e.fname+C(r).length,r[t]=n,i.push(e.altVar(n)))):e.group===A||e.group===y||e.group===Z?i.push($.Utils.subFunctions(e,r)):i.push(e.text())}),e.group===Z||e.group===y?e.altVar($.Utils.inBrackets(i.join(\"+\"))):e.group===A?e.altVar($.Utils.inBrackets(i.join(\"*\"))):e.text()},$.Utils.getFunctionsSubs=function(e){var t,n={};for(t in e)n[e[t]]=H.parse(t);return n};var _=$.Algebra={version:\"1.4.6\",proots:function(e,l){l=l||7;function t(e,t,n){for(var r=function(e,t){var n=e.slice(0);if(e.unshift(t),100<t)throw new $.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to 100. \");var r=[],e={};for(e.Degree=t,p=0;p<t;p++)r.push(0);var i=r.slice(0);function V(e,t,n,r,i,s){i[0]=s.b=r[0],i[1]=s.a=-(t*s.b)+r[1];for(var o=2;o<e;o++)i[o]=-(t*s.a+n*s.b)+r[o],s.b=s.a,s.a=i[o]}function H(e,t,n,r,i,s,o,a,u){var l=new Object,c=3;return l.b=l.a=0,V(t,o,a,s,u,l),i.c=l.a,i.d=l.b,Math.abs(i.c)<=100*e*Math.abs(s[t-1])&&Math.abs(i.d)<=100*e*Math.abs(s[t-2])||(i.h=a*r,Math.abs(i.d)>=Math.abs(i.c)?(c=2,i.e=n/i.d,i.f=i.c/i.d,i.g=o*r,i.a3=i.e*(i.g+n)+i.h*(r/i.d),i.a1=-n+i.f*r,i.a7=i.h+(i.f+o)*n):(c=1,i.e=n/i.c,i.f=i.d/i.c,i.g=i.e*o,i.a3=i.e*n+(i.g+i.h/i.c)*r,i.a1=-(n*(i.d/i.c))+r,i.a7=i.g*i.d+i.h*i.f+n)),c}function j(e,t,n,r,i,s,o,a,u){if(3!=n)if(r=1==n?i:r,Math.abs(s.a1)>10*e*Math.abs(r)){s.a7/=s.a1,s.a3/=s.a1,o[0]=u[0],o[1]=-(u[0]*s.a7)+u[1];for(l=2;l<t;l++)o[l]=-(u[l-1]*s.a7)+a[l-2]*s.a3+u[l]}else{o[0]=0,o[1]=-(u[0]*s.a7);for(l=2;l<t;l++)o[l]=-(u[l-1]*s.a7)+a[l-2]*s.a3}else{o[1]=o[0]=0;for(var l=2;l<t;l++)o[l]=a[l-2]}}function Z(e,t,n,r,i,s,o,a,u,l,c,p,f,h,m,g,d){var v;t.b=t.a=0,3!=e&&(a=2!=e?(v=n+f*o+p*l,a+(f+h*l)*u):(v=(n+c)*l+p,(l+f)*a+h*u),u=-(m[g-1]/d[g]),0!=(v=-(i=h*(m=-(m[g-2]+u*d[g-1])/d[g])*r-((d=u*s)+(g=u*u*i)))+a+u*v)&&(t.a=-(f*(g+d)+h*(u*r+m*s))/v+f,t.b=h*(1+i/v)))}function X(e,t,n,r){var i,s,o;(r.sr=r.si=r.lr=r.li=0)!=e?0!=n?(i=t/2,s=Math.abs(i)<Math.abs(n)?(o=-(o=0<=n?e:-e)+i*(i/Math.abs(n)),Math.sqrt(Math.abs(o))*Math.sqrt(Math.abs(n))):(o=-e/i*(n/i)+1,Math.sqrt(Math.abs(o))*Math.abs(i)),0<=o?(r.lr=(-i+(s=0<=i?-s:s))/e,r.sr=0!=r.lr?n/r.lr/e:r.sr):(r.lr=r.sr=-i/e,r.si=Math.abs(s/e),r.li=-r.si)):r.lr=-t/e:r.sr=0!=t?-n/t:r.sr}function G(e,t,n,r,i,s,o,a,u,l,c,p){var f,h,m,g,d,v,w,y,b,S,M,N,E,q,x,A,C,L,I,U,_,R,O,T,P,k=new Object,F=new Object,D=new Array(t),B=new Array(t),G=1;for(p.NZ=0,g=m=.25,d=r,y=i,k.b=k.a=0,V(u,c,i,a,l,k),f=k.a,h=k.b,F.h=F.g=F.f=F.e=F.d=F.c=F.a7=F.a3=F.a1=0,O=H(e,o,f,h,F,s,c,i,D),U=0;U<n;U++){if(L=1,j(e,o,O,f,h,F,s,D,l),Z(O=H(e,o,f,h,F,s,c,i,D),k,f,F.a1,F.a3,F.a7,h,F.c,F.d,F.f,F.g,F.h,c,i,s,o,a),x=k.a,C=A=k.b,S=0!=s[o-1]?-(a[o]/s[o-1]):0,M=E=1,0!=U&&3!=O&&(T=(q=(E=0!=C?Math.abs((C-y)/C):E)<w?E*w:1)<g?1:0,(_=(N=(M=0!=S?Math.abs((S-d)/S):M)<v?M*v:1)<m?1:0)||T)){for(I=0;I<o;I++)B[I]=s[I];for(b=S,R=P=0;;){if(!L||0!=(L=0)||!_||T&&!(N<q)){if(!function(e,t,n,r,i,s,o,a,u,l,c,p){var f,h,m,g,d,v,w,y,b,S=new Object,M=0,N=0;n.NZ=0,g=r,v=i;do{if(S.li=S.lr=S.si=S.sr=0,X(1,g,v,S),n.szr=S.sr,n.szi=S.si,n.lzr=S.lr,n.lzi=S.li,Math.abs(Math.abs(n.szr)-Math.abs(n.lzr))>.01*Math.abs(n.lzr))break;for(V(o,g,v,u,s,a),w=Math.abs(-(n.szr*a.b)+a.a)+Math.abs(n.szi*a.b),y=Math.sqrt(Math.abs(v)),f=2*Math.abs(s[0]),d=-(n.szr*a.b),b=1;b<t;b++)f=f*y+Math.abs(s[b]);if(w<=20*(f=(9*(f=f*y+Math.abs(d+a.a))+2*Math.abs(d)-7*(Math.abs(a.a+d)+y*Math.abs(a.b)))*e)){n.NZ=2;break}if(20<++M)break;if(2<=M&&m<=.01&&h<=w&&!N){for(V(o,g-=g*(m=m<e?Math.sqrt(e):Math.sqrt(m)),v+=v*m,u,s,a),b=0;b<5;b++)j(e,t,H(e,t,a.a,a.b,c,p,g,v,l),a.a,a.b,c,p,l,s);N=1,M=0}}while(h=w,j(e,t,H(e,t,a.a,a.b,c,p,g,v,l),a.a,a.b,c,p,l,s),Z(H(e,t,a.a,a.b,c,p,g,v,l),a,a.a,c.a1,c.a3,c.a7,a.b,c.c,c.d,c.f,c.g,c.h,g,v,p,t,u),d=a.a,0!=(w=a.b)&&(m=Math.abs((-v+w)/w),g=d,v=w),0!=w)}(e,o,p,x,A,l,u,k,a,D,F,s),f=k.a,h=k.b,0<p.NZ)return;if(G=P=1,g*=.25,R||!_)G=0;else for(I=0;I<o;I++)s[I]=B[I]}if(0!=G){if(k.a=b,G=function(e,t,n,r,i,s,o,a,u){var l,c,p,f,h,m,g,d,v,w,y,b=r-1;for(t.NZ=y=v=0,g=n.a;;){for(m=i[0],o[0]=m,w=1;w<s;w++)o[w]=m=m*g+i[w];for(p=Math.abs(m),f=Math.abs(g),l=.5*Math.abs(o[0]),w=1;w<s;w++)l=l*f+Math.abs(o[w]);if(p<=20*e*(2*l-p)){t.NZ=1,t.szr=g,t.szi=0;break}if(10<++y)break;if(2<=y&&Math.abs(d)<=.001*Math.abs(-d+g)&&h<p){v=1,t.a=g;break}for(h=p,u[0]=c=a[0],w=1;w<r;w++)u[w]=c=c*g+a[w];if(Math.abs(c)>10*Math.abs(a[b])*e)for(d=-m/c,a[0]=o[0],w=1;w<r;w++)a[w]=d*u[w-1]+o[w];else for(a[0]=0,w=1;w<r;w++)a[w]=u[w-1];for(c=a[0],w=1;w<r;w++)c=c*g+a[w];g+=d=Math.abs(c)>10*Math.abs(a[b])*e?-m/c:0}return v}(e,p,k,o,a,u,l,s,D),b=k.a,0<p.NZ)return;if(R=1,m*=.25,0!=G){x=-(b+b),A=b*b;continue}}for(I=0;I<o;I++)s[I]=B[I];if(!T||P)break}V(u,c,i,a,l,k),O=H(e,o,f=k.a,h=k.b,F,s,c,i,D)}y=C,d=S,w=E,v=M}}!function(e,t,n,r){for(var i,s,o,a,u,l,c,p,f,h,m,g,d,v,w=e.Degree,y=.017453292519943295,b=Math.LN2,S=e.Degree+1,M=new Array(S),N=new Array(S),E=new Array(S),q=new Array(S),x=new Object,A=new Object,C=1;i=C,1<(l=1+(C/=2)););var L=Number.MIN_VALUE/i,I=Math.cos(94*y),U=Math.sin(94*y),_=Math.sqrt(.5),R=-_;for(A.NZ=f=0,A.szr=A.szi=A.lzr=A.lzi=0;0==t[w];)n[f]=r[f]=0,w--,f++;for(d=w+1;1<=w;){if(w<=2){w<2?(n[e.Degree-1]=-(t[1]/t[0]),r[e.Degree-1]=0):(X(t[x.li=x.lr=x.si=x.sr=0],t[1],t[2],x),n[e.Degree-2]=x.sr,r[e.Degree-2]=x.si,n[e.Degree-1]=x.lr,r[e.Degree-1]=x.li);break}for(a=0,u=Number.MAX_VALUE,O=0;O<d;O++)a<(T=Math.abs(t[O]))&&(a=T),0!=T&&T<u&&(u=T);if(((m=L/u)<=1&&10<=a||1<m&&Number.MAX_VALUE/m>=a)&&(m=0==m?Number.MIN_VALUE:m,m=Math.floor(Math.log(m)/b+.5),1!=(o=Math.pow(2,m))))for(O=0;O<d;O++)t[O]*=o;for(var O=0;O<d;O++)N[O]=Math.abs(t[O]);N[w]=-N[w],g=w-1,T=Math.exp((Math.log(-N[w])-Math.log(N[0]))/w),P=T=0!=N[g]?(P=-N[w]/N[g])<T?P:T:T;do{for(var T,P=.1*(T=P),k=N[0],O=1;O<d;O++)k=k*P+N[O]}while(0<k);0;do{for(var F=k=N[0],O=1;O<w;O++)F=T*F+(k=T*k+N[O])}while(T-=s=(k=T*k+N[w])/F,.005<Math.abs(s/T));for(var D=T,O=1;O<w;O++)M[O]=(w-O)*t[O]/w;for(M[0]=t[0],C=t[w],l=t[g],v=0==M[g]?1:0,h=0;h<5;h++)if(c=M[g],v){for(O=0;O<g;O++)M[f=g-O]=M[f-1];v=(M[0]=0)==M[g]?1:0}else{for(var B=-C/c,O=0;O<g;O++)M[f=g-O]=B*M[f-1]+t[f];M[0]=t[0],v=Math.abs(M[g])<=Math.abs(l)*i*10?1:0}for(O=0;O<w;O++)q[O]=M[O];for(h=1;h<=20;h++){if(p=-U*R+I*_,R=U*_+I*R,G(i,S,20*h,p=D*(_=p),D,M,w,t,d,E,-2*p,A),0!=A.NZ){n[f=e.Degree-w]=A.szr,r[f]=A.szi;for(w=(d-=A.NZ)-1,O=0;O<d;O++)t[O]=E[O];1!=A.NZ&&(n[f+1]=A.lzr,r[f+1]=A.lzi);break}for(O=0;O<w;O++)M[O]=q[O]}if(20<h){e.Degree-=w;break}}}(e,n,i,r);var s=r.length;for(p=0;p<s;p++){var o=b(r[p],l+8),a=b(i[p],l+8);a=2<l-String(a).length?a:i[p];var u=o<0?\"-\":\"\";0===a&&(a=\"\"),0===o&&(o=\"\"),o=1===Math.abs(o)?u+\"i\":o?o+\"*i\":\"\";o=a&&o?a+\"+\"+o:a+o;i[p]=o.replace(/\\+\\-/g,\"-\")}return i}(e,n).concat(s),i=0;i<0;i++)r.unshift(0);return r}var n,s=[];if(e instanceof Q&&e.isPoly()){if(e.distributeMultiplier(),e.group===y&&(n=$.Utils.arrayMin(C(e.symbols)),n=e.symbols[n].clone().toUnitMultiplier(),e=H.expand(H.divide(e,n)),s.push(0)),e.group===$.groups.S)return[0];e.group===$.groups.PL&&(a=C(e.symbols),r=$.Utils.arrayMin(a),e=$.PARSER.divide(e,$.PARSER.parse(e.value+\"^\"+r)));for(var r=C(e.symbols).sort().pop(),i=e.group===$.groups.PL?e.symbols:e.symbols[r],o=i.group,a=o===j?[i.power.toDecimal()]:C(i.symbols),u=[],c=$.Utils.arrayMax(a),p=1;p<=c;p++){var f=0;-1!==a.indexOf(p+\"\")&&(f=(o===j?i:i.symbols[p]).multiplier),u.unshift(f)}return u.push(e.symbols[Y].multiplier),i.group===j&&(u[0]=i.multiplier),t(u,0,c)}if($.Utils.isArray(e)){for(var h=e,u=[],a=[],m=0,p=0;p<h.length;p++){for(var g=h[p][0],d=h[p][1],v=d-m-1,w=0;w<v;w++)u.unshift(0);u.unshift(g),0!==d&&a.push(d),m=d}return t(u,0,c=Math.max.apply(void 0,a))}throw new $.exceptions.NerdamerTypeError(\"Cannot calculate roots. Symbol must be a polynomial!\")},roots:function(e){if(e.isConstant(!0,!0))return $.Utils.nroots(e);e=_.proots(e).map(function(e){return H.parse(e)});return $.Vector.fromArray(e)},froot:function(a,e,u){return function(e){for(var t=u||$.Utils.build($.Calculus.diff(a.clone())),n=a instanceof Function?a:$.Utils.build(a),r=!1,i=0;!r;){var s=e-n(e)/t(e),o=Math.abs(s)-Math.abs(e);e=s,Math.abs(o)<1e-12?r=!0:1e4<i&&(r=!(e=null)),i++}return e}(Number(e))},quad:function(e,t,n){function r(e,t,n,r){return H.parse(\"-(\"+t+\"+\"+r+\"*sqrt((\"+t+\")^2-4*(\"+e+\")*(\"+n+\")))/(2*\"+e+\")\")}return[r(e,t,n,1),r(e,t,n,-1)]},sumProd:function(e,t){return _.quad(-t,e,-1).map(function(e){return e.invert()})},coeffs:function(e,t,n){t=String(t),e=H.expand(e),n=n||[new Q(0)],e.group===p&&e.contains(t,!0)&&H.error(\"Unable to get coefficients using expression \"+e.toString());var r,i=X(e);if(1!==i.length||i[0]!==t||e.isImaginary())t||H.error(\"Polynomial contains more than one variable. Please specify which variable is to be used!\"),-1===i.indexOf(t)?n[0]=H.add(e,n[0]):(n=n||[new Q(0)],e.group===A?((r=e.symbols[t])||H.error(\"Expression is not a polynomial!\"),i=Number(r.power),((l=H.divide(e.clone(),r.clone())).contains(t,!0)||i<0||!I(i))&&H.error(\"Expression is not a polynomial!\"),(u=n[i])&&(l=H.add(u,l)),n[i]=l):e.group===Z&&e.each(function(e){_.coeffs(e.clone(),t,n)},!0));else for(var s=new W(e).coeffs.map(function(e){return new Q(e)}),o=0,a=s.length;o<a;o++){var u,l=s[o];(u=n[o])&&(l=H.add(u,l)),n[o]=l}for(o=0,a=n.length;o<a;o++)void 0===n[o]&&(n[o]=new Q(0));return n},polyPowers:function(e,t,n){if(n=n||[],(s=e.group)===y&&t===e.value)n=n.concat(C(e.symbols));else if(s===Z)for(var r in e.symbols){var i=e.symbols[r],s=i.group,r=i.value;s===j&&t===r?n.push(i.power):s===y||s===Z?n=_.polyPowers(i,t,n):s===A&&i.contains(t)?(i=i.symbols[t])&&n.push(i.power):s!==u&&t===r||n.push(0)}else s===A&&e.contains(t)&&n.push($.Utils.decompose_fn(e,t,!0).x.power);return $.Utils.arrayUnique(n).sort()},Factor:{split:function(e){var n=new Q(1),r=new Q(1);return _.Factor.factor(e,new U).each(function(e){var t=H.parse(e);e.isConstant(!0)?n=H.multiply(n,t):r=H.multiply(r,t)}),[n,r]},mix:function(e,t){for(var n=C(e),r=n.length,i=[],s=0;s<r;s++){for(var o=n[s],a=e[o],u=i.length,l=0;l<u;l++){var c=i[l]*o;i.push(c),t&&i.push(-c)}for(l=1;l<=a;l++)i.push(Math.pow(o,l))}return i},common:function(e,t){try{if(e.group===Z){for(var n=H.expand(e.clone(),!0).collectSymbols(null,null,function(e,t){return(t.length||1)-(e.length||1)}),r={},i=[],s=0;s<n.length;s++){var o=n[s];i.push(o.multiplier.clone()),o.each(function(e){var t=Number(e.power);if(isNaN(t))throw new Error(\"exiting\");e.value in r?(t<r[e.value][0]&&(r[e.value][0]=t),r[e.value][1].push(e)):r[e.value]=[t,[e]]})}var a,u=new Q(1);for(a in r)r[a][1].length===n.length&&(u=H.multiply(u,H.pow(new Q(a),new Q(r[a][0]))));var l=$.Math2.QGCD.apply(null,i);if(!l.equals(1)){t.add(new Q(l));for(s=0;s<n.length;s++)n[s].multiplier=n[s].multiplier.divide(l)}if(!u.equals(1)){t.add(u),e=new Q(0);for(s=0;s<n.length;s++)e=H.add(e,H.divide(n[s],u.clone()))}}}catch(e){}return e},zeroes:function(e,t){function n(){throw new $.exceptions.ValueLimitExceededError(\"Exiting\")}try{for(var r,i,s,o=(e=H.expand(e.clone())).toString(),a=X(e),u=new Q(0),l=[],c=[],p=0,f=a.length;p<a.length;p++){for(var h={},m=0;m<f;m++)p!==m&&(h[a[m]]=0);var g,d=(g=H.parse(o,h)).power;I(d)||n(),l.push(g),c.push(g.power)}$.Utils.allSame(c)?(i=e.length,2===(s=l.length)&&(r=new z(c[0]/(i-1))),3===s&&(r=new z(c[0]/Math.round((Math.sqrt(8*i-1)-3)/2)))):r=$.Math2.QGCD.apply(null,c),I(r)||n();for(p=0;p<l.length;p++){var v=l[p],w=v.power.clone().divide(r);v.multiplier=new z(Math.pow(v.multiplier,1/w)),v.power=r.clone(),u=H.add(u,v)}if(u.group!==Z)return e;for(;;){var y=_.div(e.clone(),u.clone());if(!y[1].equals(0))break;if(e=y[0],t.add(u.clone()),e.equals(1))break}}catch(o){}return e},factor:function(e,t){if(e.isConstant())return $.Math2.factor(e);var n,r,i=H.parse(e),t=_.Factor._factor(i,t);return t.equals(e)||t.group===A&&(n=new Q(1),e=H.parse(t.power),r=H.parse(t.multiplier),t.toUnitMultiplier(),t.multiplier.lessThan(0)&&(n.negate(),t.negate()),t.each(function(e){e=H.parse(_.Factor._factor(e));e.group===A?(r=H.multiply(r,Q.create(e.multiplier)),e.each(function(e){e=H.parse(_.Factor._factor(e));n=H.multiply(n,e),e.group===A&&(r=H.multiply(r,Q.create(e.multiplier)))})):n=H.multiply(n,e)}),t=H.pow(H.multiply(r,n),e)),t},quadFactor:function(e,t){if(e.isPoly()&&_.degree(e.equals(2))){var n=$.Utils.variables(e)[0],r=_.coeffs(e,n),i=_.Factor._factor(r[2].clone());if(i.group===A){var s=i.collectSymbols();if(2<s.length)return e;var o=H.multiply(H.parse(r[0]),H.parse(s[0])),a=H.parse(r[1]).negate(),i=H.parse(s[1]),o=_.quad(i,a,o).filter(function(e){if($.Utils.isInt(e))return e});1===o.length&&(o=o[0],r=H.divide(r[0],H.parse(o)),$.Utils.isInt(r)&&(t.add(H.parse(l(\"({0})*({1})+({2})\",s[1],n,r))),t.add(H.parse(l(\"({0})*({1})+({2})\",s[0],n,o))),e=new Q(1)))}}return e},cubeFactor:function(e,t){var n,r,i,s,o,a;return!e.isComposite()||2===(a=e.collectSymbols()).length&&(n=a[0].sign(),r=a[0].clone().abs(),i=a[1].sign(),s=a[1].clone().abs(),r.isCube()&&s.isCube()&&(n<i&&([n,i]=[i,n],[r,s]=[s,r]),o=H.parse(r.getNth(3)),a=H.parse(s.getNth(3)),o=H.multiply(H.expand(H.pow(r.clone().toUnitMultiplier(),H.parse(\"1/3\"))),o),a=H.multiply(H.expand(H.pow(s.clone().toUnitMultiplier(),H.parse(\"1/3\"))),a),1===n&&-1===i?(t.add(H.parse(l(\"(({0})-({1}))\",o,a))),t.add(H.parse(l(\"(({0})^2+({0})*({1})+({1})^2)\",o,a))),e=Q(1)):1===n&&1===i&&(t.add(H.parse(l(\"(({0})+({1}))\",o,a))),t.add(H.parse(l(\"(({0})^2-({0})*({1})+({1})^2)\",o,a))),e=Q(1)))),e},_factor:function(e,t){if(e.group===x){var n=e.args[0];if(n.group===j&&n.isSimple())return e}else if(e.group===j&&e.isSimple())return e;var r;e.group===Z&&(e.distributeMultiplier(!0),r=new Q(0),e.each(function(e){(e.group===Z&&e.power.greaterThan(1)||e.group===A)&&(e=H.expand(e)),r=H.add(r,e)}),r.power=e.power,e=r);n=(e=e.group===x&&\"sqrt\"!==e.fname?$.Utils.evaluate(e):e).clone();try{if(e.group===A){var i=H.parse(e.power),s=_.Simplify.strip(e.getDenom()),o=_.Simplify.strip(e.getNum()),a=s.pop(),u=o.pop();if(u.equals(e))return e;var l=_.Factor.factor(u),c=_.Factor.factor(a),p=_.Simplify.unstrip(o,l),f=_.Simplify.unstrip(s,c);return H.divide(p,f)}if(e.group===j)return e;if(e.isConstant())return e.equals(1)?e.clone():$.Math2.factor(e);i=e.power.clone();if(!I(i)||i.lessThan(0)&&e.group===x)return e;var h=i.sign();e.toLinear(),t=t||new U;var m={};e=H.parse($.Utils.subFunctions(e,m)),0<C(m).length&&(t.preAdd=function(e){return H.parse(e,$.Utils.getFunctionsSubs(m))}),e.isLinear()||(t.pFactor=e.power.toString(),e.toLinear());var g=X(e);e.isImaginary()&&g.push($.Settings.IMAGINARY);var d=1<g.length;if(d){var v=!0,w=!0;if(e.each(function(e){e.group!==j&&(v=!1),e.multiplier.equals(1)||(w=!1)}),v&&w)return H.pow(H.parse(e,$.Utils.getFunctionsSubs(m)),H.parse(i))}var y=new U;e=_.Factor.coeffFactor(e,y),y.each(function(e){L(i)&&e.lessThan(0)&&e.negate(),h<0&&e.invert(),t.add(e)});var b=new U;if(e=_.Factor.powerFactor(e,b),b.each(function(e){h<0&&e.invert(),t.add(e)}),d)e=_.Factor.cubeFactor(e,t),e=_.Factor.mfactor(e,t),t.each(function(e){h<0&&e.power.negate()});else{var S=g[0];e=_.Factor.squareFree(e,t,S);var M=new U;e=_.Factor.trialAndError(e,M,S);var N,E=M.toSymbol();if(E.equals(n))return E;for(N in M.factors){var q=M.factors[N];t.add(H.pow(q,H.parse(i)))}e.equals(n)&&(e=_.Factor.quadFactor(e,t))}return e=H.parse(e,$.Utils.getFunctionsSubs(m)),t.add(H.pow(e,H.parse(i))),t.toSymbol()}catch(e){return n}},reduce:function(e,t){if(e.group===Z&&2===e.length){var n=e.collectSymbols().sort(function(e,t){return t.multiplier-e.multiplier});if(n[0].power.equals(n[1].power)){var r=H.parse(n[0].power),i=n[0].clone().toLinear(),s=n[1].clone().toLinear();t.add(H.add(i.clone(),s.clone())),s.negate();for(var o=Number(r),a=new Q(0),u=1;u<=o;u++)var l=H.pow(i.clone(),H.subtract(r.clone(),new Q(u))),c=H.pow(s.clone(),H.subtract(new Q(u),new Q(1))),a=H.add(a,H.multiply(l,c));return a}}return e},squareFree:function(e,t,n){if(e.isConstant()||e.group===j)return e;var r=new W(e,n).squareFree(),n=r[2];if(1===n)return e;e=r[1].toSymbol();return e.power=e.power.multiply(new z(n)),t.add(_.Factor.factor(e)),_.Factor.squareFree(r[0].toSymbol(),t)},powerFactor:function(e,t){if(e.group!==y||e.previousGroup===p)return e;var n=C(e.symbols);if(!$.Utils.allNumeric(n))return e;var n=$.Utils.arrayMin(n),r=new Q(0),i=H.parse(e.value+\"^\"+n);return e.each(function(e){e=H.divide(e,i.clone()),r=H.add(r,e)}),t.add(i),r},coeffFactor:function(e,t){var n,r,i,s;return e.isComposite()&&((n=$.Math2.QGCD.apply(null,e.coeffs())).equals(1)?((r=function(e){var t;return e.group===A?(t=0,e.each(function(e){t+=e.power})):t=Number(e.power),t})(s=(i=e.collectSymbols(null,null,null,!0).sort(function(e,t){return e.isConstant(!0)?1:t.power-e.power}))[0])>r(i[1])||i[1].isConstant(!0))&&s.multiplier.lessThan(0)&&(t.add(new Q(-1)),e.each(function(e){e.negate()},!0)):(e.each(function(e){e.isComposite()?e.each(function(e){e.multiplier=e.multiplier.divide(n)}):e.multiplier=e.multiplier.divide(n)}),e.updateHash()),t&&t.add(new Q(n))),e},trialAndError:function(e,t,n){var r=e.clone();try{var i=[];if(e.isConstant()||e.group===j)return e;for(var s=new W(e,n),o=s.coeffs[0],a=$.Math2.ifactor(o),u=_.proots(e),l=0;l<u.length;l++){var c=u[l],p=1;if(!isNaN(c)){for(var f in a){var h=$.Utils.round(Math.log(f)/Math.log(Math.abs(c)),8);if(I(h)){c=f,p=h;break}}var m=new z(c),g=[new z(m.num).negate()];g[p]=new z(m.den);var d=W.fromArray(g,s.variable).fill(),v=s.divide(d);v[1].equalsNumber(0)&&(s=v[0],i.push(d.toSymbol()))}}return s.equalsNumber(1)||(s=_.Factor.search(s,t)),i.forEach(function(e){t.add(e)}),s.toSymbol()}catch(e){return r}},search:function(i,s,o){o=o||10;function e(e,t,n,r){if((n=W.fit(e,t,n,o,r,a))&&1<n.coeffs.length){r=i.divide(n);if(r[1].equalsNumber(0))return s.add(n.toSymbol()),[r[0],n]}return null}var a=i.variable,t=i.coeffs[0],n=$.Math2.ifactor(t),r=i.lc(),u=$.Math2.ifactor(r),l=i.sub(o),c=$.Math2.ifactor(l),p=_.Factor.mix(c,l<0),f=Math.ceil(i.coeffs.length/2),h=r.lessThan(0),m=t.lessThan(0);for(n[u[1]=1]=1;f--;)for(var g in u)for(var d in n)for(var v=0;v<p.length;v++){var w=e(g,d,p[v],f);if(w)return i=w[0],i=!$.Utils.isPrime(i.sub(o))?_.Factor.search(i,s):i;w||(h&&m?w=e(-g,-d,p[v],f):h?w=e(-g,d,p[v],f):m&&(w=e(g,-d,p[v],f)))}return i},mSqfrFactor:function(e,t){if(e.group!==x)for(var n=X(e).reverse(),r=0;r<n.length;r++)do{if(n[r]!==e.value){var i=$.Calculus.diff(e,n[r]),s=_.Factor.coeffFactor(i);if(s.equals(0))break;var o=!0;if(s.isConstant()&&e.isComposite()&&e.each(function(e){e.multiplier%s!=0&&(o=!1)},!0),o){var a=_.div(e,s.clone()),u=a[1].equals(0);if(a[0].isConstant()){t.add(a[0]);break}}else u=!1;u&&(t.add(a[0]),e=s)}else t.add(e),e=new Q(1)}while(u);return e},sqdiff:function(e,t){if(e.isConstant(\"all\"))return e;try{var n,r,i,s,o,a=function(e){return $.Utils.block(\"POSITIVE_MULTIPLIERS\",function(){return Q.unwrapPARENS(f.sqrt(f.abs(e)))},!0)},u=$.Utils.separate(e.clone()),l=[];for(n in u)\"constants\"!==n&&l.push(u[n]);if(l.sort(function(e,t){return t.power-e.power}),2===l.length){if(o=l.pop(),r=l.pop(),L(o.power)&&L(r.power)&&o.sign()===r.sign()&&o.group===j&&r.group===j)throw new Error(\"Unable to factor\");o.isComposite()&&r.power.equals(2)?(r=a(r),(i=_.Factor.factor(H.add(o,u.constants))).power.equals(2)&&(i.toLinear(),t.add(H.subtract(i.clone(),r.clone())),t.add(H.add(i,r)),e=new Q(1))):(o=o.powSimp(),r=r.powSimp(),o.group!==j&&\"\"!==o.fname||!o.power.equals(2)||r.group!==j&&\"\"!==r.fname||!r.power.equals(2)||u.constants||(o.multiplier.lessThan(0)&&(s=r,r=o,o=s),o.multiplier.greaterThan(0)&&(o=a(o),r=a(r)),t.add(H.subtract(o.clone(),r.clone())),t.add(H.add(o,r)),e=new Q(1)))}}catch(e){}return e},mfactor:function(t,e){if(t.group===x){var n,r;\"sqrt\"===t.fname?(n=new U,r=_.Factor.common(t.args[0].clone(),n),r=_.Factor.coeffFactor(r,n),t=H.multiply(H.symfunction(\"sqrt\",[r]),H.parse(t.multiplier)),n.each(function(e){t=H.multiply(t,H.parse($.Utils.format(\"sqrt({0})\",e)))})):e.add(t)}else{t=_.Factor.mSqfrFactor(t,e);for(var i,s=X(t),o=t.collectSymbols().map(function(e){return Q.unwrapSQRT(e)}),a={},u={},l=s.length,c=o.length,p=0;p<l;p++){var f=s[p];a[f]=new Q(0);for(var h=0;h<c;h++){var m,g=o[h];g.contains(f)&&(m=(g.value===f?g:g.symbols[f]).power.toDecimal(),(!u[f]||m<u[f])&&(u[f]=m),a[f]=H.add(a[f],g.clone()))}}for(i in a){var d=H.parse(i+\"^\"+u[i]),v=H.divide(a[i],d),w=H.expand(v);if(w.equals(1))break;v=_.div(t.clone(),w);if(v[0].equals(0))break;if(v[1].equals(0)){var y=!1;if(v[0].each(function(e){I(e.multiplier)||(y=!0)}),y){v[1]=H.expand(H.multiply(v[1],w));break}}w=I(w)&&w.lessThan(0);if(v[1].equals(0)&&!w){w=_.div(t.clone(),v[0].clone());if((d=w[0]).equals(0))return t;if(t=w[1],d.equals(-1)&&!t.equals(0))return t;w=v[0];if(t.equals(w)){v=_.Factor.reduce(w,e);return t.equals(v)?v:_.Factor.mfactor(v,e)}return(e.add(w),t.equals(0))?d:d.isConstant(\"all\")?(e.add(d),d):_.Factor.mfactor(d,e)}}}return t=_.Factor.sqdiff(t,e),t=_.Factor.zeroes(t,e)}},allLinear:function(e){for(var t=e.length,n=0;n<t;n++)if(!_.isLinear(e[n]))return!1;return!0},isLinear:function(e){var t=!1,n=e.group;if(n===y||n===Z)for(var r in t=!0,e.symbols){var i=e.symbols[r],r=i.group;if(r!==x&&r!==p||(t=!1),r===A)t=1===X(i).length;else if(r===y||r===Z)t=_.isLinear(i);else if(i.group!==u&&\"1\"!==i.power.toString()){t=!1;break}}else n===j&&1===e.power&&(t=!0);return t},gcd:function(){var e=1===arguments.length&&arguments[0]instanceof $.Vector?arguments[0].elements:$.Utils.arguments2Array(arguments);if(0===e.length)return new Q(1);if(1===e.length)return e[0];for(var t=[],n=!1,r=0;r<e.length;r++)if(e[r].group===x&&\"gcd\"===e[r].fname)(e=e.concat(arguments[r].args)).splice(r,1);else{var i=X(e[r]);if($.Utils.haveIntersection(i,t)){n=!0;break}t=t.concat(i)}if(n||0===t.length){if(e.every(function(e){return e.getDenom().equals(1)})){for(var s=e[0],r=1;r<e.length;r++)s=_.gcd_(e[r],s);return s}return H.divide(_.gcd.apply(null,e.map(function(e){return e.getNum()})),_.lcm.apply(null,e.map(function(e){return e.getDenom()})))}return H.symfunction(\"gcd\",e)},gcd_:function(e,t){if(e.group!==x&&e.group!==c||(e=$.Utils.block(\"PARSE2NUMBER\",function(){return H.parse(e)})),t.group===x&&(t=$.Utils.block(\"PARSE2NUMBER\",function(){return H.parse(t)})),e.isConstant()&&t.isConstant())return new Q($.Math2.QGCD(new z(+e),new z(+t)));var n=H.multiply(e.getDenom()||new Q(1),t.getDenom()||new Q(1)).invert();if(e=H.multiply(e.clone(),n.clone()),t=H.multiply(t.clone(),n.clone()),e=H.expand(e),t=H.expand(t),e.group===A||t.group===A){var r=H.divide(e.clone(),t.clone());if(!(u=H.multiply(t.clone(),r.getDenom().invert())).equals(1))return u}if(e.group===p||t.group===p){var r=new Q($.Math2.GCD(e.multiplier,t.multiplier)),i=_.gcd_(e.value===Y?new Q(1):H.parse(e.value),t.value===Y?new Q(1):H.parse(t.value)),s=_.gcd_(H.parse(e.power),H.parse(t.power));return H.multiply(r,H.pow(i,s))}e.length<t.length&&(u=e,e=t,t=u);i=X(e),s=X(t);if(i.length===s.length&&1===i.length&&i[0]===s[0]||1===i.length&&0===s.length||0===i.length&&1===s.length)return e=new W(e),t=new W(t),H.divide(e.gcd(t).toSymbol(),n);var o,a=[];for(e.each(function(e){a.push(e.multiplier)}),t.each(function(e){a.push(e.multiplier)});!t.equals(0);){var u=t.clone();if(e=e.clone(),o=_.div(e,u),t=o[1],o[0].equals(0))return H.divide(new Q($.Math2.QGCD(e.multiplier,t.multiplier)),n);e=u}var l=$.Math2.QGCD.apply(void 0,a);return l.equals(1)||e.each(function(e){e.multiplier=e.multiplier.divide(l)}),!e.equals(1)||e.isConstant()||t.isConstant()?H.divide(e,n):H.divide(H.symfunction(\"gcd\",arguments),n)},lcm:function(){var e;1===arguments.length?arguments[0]instanceof $.Vector?e=arguments[0].elements:H.error(\"lcm expects either 1 vector or 2 or more arguments\"):e=$.Utils.arguments2Array(arguments);var t=e.reduce(function(e,t){return H.multiply(e,t.clone())},new Q(1)),n=function(e,t){t=Number(t);for(var n,r,i=[],s=Math.pow(2,e.length),o=t;o<s;o++){for(n=[],r=e.length-1;0!=(o&1<<r)&&n.push(e[r]),r--;);n.length===t&&i.push(n)}return i}(arguments,arguments.length-1).map(function(e){return e.reduce(function(e,t){return H.multiply(e,t.clone())},new Q(1))}),n=e.every(function(e){return $.Utils.isVariableSymbol(e)})?H.symfunction(\"gcd\",$.Utils.arrayUnique(n)):_.gcd.apply(null,n);return H.divide(t,n)},divide:function(e,t){var n=$.Algebra.Factor.factor(e.clone()),r=n.getDenom();return r.isConstant(\"all\")?r=new Q(1):e=H.expand(Q.unwrapPARENS(H.multiply(n,r.clone()))),e=_.div(e,t),t=H.divide(e[1],t),H.divide(H.add(e[0],t),r)},div:function(e,t){var n,r,i=[new Q(0),e.clone()];try{if(t.isConstant(\"all\"))return e.each(function(e){e.multiplier=e.multiplier.divide(t.multiplier)}),[e,new Q(0)];if(e=H.expand(e),t=H.expand(t),e.group===j&&t.group===Z){var s=e.value,o=$.Utils.decompose_fn(t.clone(),s,!0);if(e.isLinear()&&o.x&&o.x.isLinear()&&t.isLinear()){var a=Q.create(e.multiplier);return[H.divide(a.clone(),o.a.clone()),H.divide(H.multiply(a,o.b),o.a).negate()]}}if(e.group===j&&t.group===j){var u=H.divide(e.clone(),t.clone());return u.isConstant()?[u,new Q(0)]:[new Q(0),e.clone()]}var l,c,p=e.hasFunc(),f=t.hasFunc(),h=!1;(p||f)&&(h=!0,l={},e=H.parse($.Utils.subFunctions(e,l)),t=H.parse($.Utils.subFunctions(t,l)),c=$.Utils.getFunctionsSubs(l));var m=$.Utils.arrayUnique(X(e).concat(X(t)));if((e.isImaginary()||t.isImaginary())&&m.push($.Settings.IMAGINARY),1===m.length)var g=(D=new W(e).divide(new W(t)))[0].toSymbol(),d=D[1].toSymbol();else{m.push(Y);var v=function(e){for(var t=new Q(0),n=0;n<e.length;n++)var r=e[n].toSymbol(),t=H.add(t,r);return t},b=function(e,t){var n,r=Math.max.apply(null,e.terms),i=0;if(!t)for(var s=0;s<e.terms.length;s++)if(e.terms[s].equals(r)&&(n=s,i++),1<i)return;if(t)for(s=0;s<e.terms.length;s++)if(e.terms[s].equals(r)){n=s;break}return[r,n,e]},S=function(e,t){var n=e[t=t||0],r=e.length;if(n){for(var i,s=b(n),o=t+1;o<r;o++){var a=e[o],u=n.sum.equals(a.sum);if(!u&&s)break;if(u){for(var l,c,p,f,h=n.terms.length,m=0;m<h;m++){var g=n.terms[m],d=a.terms[m];void 0!==l&&!g.greaterThan(l)||(l=g,p=m),void 0!==c&&!d.greaterThan(c)||(c=d,f=m)}var v=l.subtract(a.terms[p]),u=c.subtract(n.terms[f]);if(v<u){s=[c,f,a];break}if(u<v){s=[l,p,n];break}}else if(s=b(a))break;s=b(a)}if(!s)return b(e[0],!0);for(o=0;o<E.length;o++){var w,y=E[o].terms;if((w=s[1])===y.length-1)return;if(!(i=y[w]).equals(0))break}return i.equals(0)?S(e,++t):s}},w=$.Utils.toMapObj(m),y=function(e,t){return t.sum.subtract(e.sum)},M=function(e,t){if(!e||!t)return!1;for(var n=0;n<e.terms.length;n++)if(e.terms[n].lessThan(t.terms[n]))return!1;return!0},N=e.tBase(w).sort(y),E=t.tBase(w).sort(y),q=M(N[0],E[0])&&N[0].count>E[0].count?E:N,x=S(q),A=[];if(x){var C=x[1],L=function(e,t){var n=e.len(),r=t.len(),t=t.terms[C],e=e.terms[C];return n<r&&t.greaterThan(e)?r-n:t.subtract(e)},C=function(e,t){for(var n=[],r=0;r<e.length;r++)for(var i=e[r],s=0;s<i.terms.length;s++){var o=n[s],a=i.terms[s];0===r?n[s]=a:o&&!o.equals(a)&&(n[s]=void 0)}for(r=0;r<n.length;r++)if((i=n[r])&&!i.equals(0))return r;return t}(N,C);N.sort(L),E.sort(L);var I=E[0],U=N[0],_=new J(new z(1),[],U.map);if(I.sum.greaterThan(U.sum)&&1<U.len())for(var R=0;R<U.terms.length;R++){var O=I.terms[R].subtract(U.terms[R]);if(O.equals(0))_.terms[R]=new z(0);else{var T=O.add(new z(1));_.terms[R]=O;for(var P=0;P<N.length;P++)N[P].terms[R]=N[P].terms[R].add(T)}}for(var k=M(N[0],E[0]),F=0;k&&(r=E,!(n=N)[0].sum.equals(r[0].sum)||n.length>=r.length);){if(200<F++)throw new $.exceptions.InfiniteLoopError(\"Unable to compute!\");var D=N[0].divide(E[0]);A.push(D),N.shift();for(R=1;R<E.length;R++){var B=E[R].multiply(D).generateImage(),G=N.length;0===G&&(B.coeff=B.coeff.neg(),N.push(B),N.sort(L));for(P=0;P<G;P++){var V=N[P];if(V.getImg()===B.getImg()){V.coeff=V.coeff.subtract(B.coeff),V.coeff.equals(0)&&($.Utils.remove(N,P),P--);break}P===G-1&&(B.coeff=B.coeff.neg(),N.push(B),N.sort(L))}}if(!(k=M(N[0],E[0]))&&N.length>=E.length)for(R=1;R<N.length;R++)if(k=M(N[R],E[0])){N.unshift($.Utils.remove(N,R));break}}}g=v(A),d=v(N),void 0!==_&&(_=_.toSymbol(),g=H.divide(g,_.clone()),d=H.divide(d,_))}return h&&(g=H.parse(g.text(),c),d=H.parse(d.text(),c)),[g,d]}catch(e){return i}},line:function(e,t,n){$.Utils.isArray(e)&&(e=$.Utils.convertToVector(e)),$.Utils.isArray(t)&&(t=$.Utils.convertToVector(t)),n=H.parse(n||\"x\"),$.Utils.isVector(e)&&$.Utils.isVector(t)||H.error('Line expects a vector! Received \"'+e+'\" & \"'+t+'\"');var r=H.subtract(t.e(1).clone(),e.e(1).clone()),t=H.subtract(t.e(2).clone(),e.e(2).clone()),r=H.divide(t,r),n=H.multiply(n,r.clone()),r=H.multiply(e.e(1).clone(),r);return H.add(H.subtract(n,r),e.e(2).clone())},PartFrac:{createTemplate:function(r,e,t,n){(r=_.Factor.factor(r)).each(function(e,t){var n;e.group===x&&\"\"===e.fname&&e.args[0].group===j&&(n=e.args[0],this.symbols?(delete this.symbols[t],this.symbols[n.value]=n):r=e.args[0])});for(var i=e.collectFactors(),s=[],o=[],a=new Q(1),u=0;u<i.length;u++){var l=Q.unwrapPARENS(i[u]);if(l.power.greaterThan(1))for(var c=Number(l.power),p=l.clone().toLinear(),f=Number(_.degree(p,n)),h=0;h<c;h++){var m=H.pow(p.clone(),new Q(h+1));t.push(m.clone());var g=H.divide(r.clone(),m.clone());o.push(f),s.push(g)}else{f=Number(_.degree(l,n)),t.push(l);g=H.divide(r.clone(),l.clone());g=H.expand(Q.unwrapPARENS(g)),o.push(f),s.push(g)}}return[t=t.map(function(e){return H.multiply(e,a.clone())}),s,o]},partfrac:function(t,o,n){var e=X(t);o=o||H.parse(e[0]);try{var a,r,i,u,l,c,s,p,f,h,m,g,d,v,w=H.expand(t.getNum()),y=H.expand(t.getDenom().toUnitMultiplier());if(w.multiplier=t.multiplier,i=w.groupTerms(o),Number(_.degree(w,o))>=Number(_.degree(y,o))?(p=(s=_.div(w.clone(),H.expand(y.clone())))[0],i=(w=s[1]).groupTerms(o)):p=new Q(0),1===Number(_.degree(y,o))){var b=H.divide(w,y);return n?[p,b]:H.add(p,b)}r=_.Factor.factor(y),m=_.PartFrac.createTemplate(y.clone(),r,[],o),g=m[0],f=m[1],u=m[2],c=[i.length],l=[],a=[],h=[],f.map(function(e,t){d=g[t],v=u[t];for(var n=0;n<v;n++){a.push(d.clone());var r=Q.create(o,n),i=H.expand(H.multiply(e,r.clone())).groupTerms(o),s=i.length;c.push(s),l.push(i),h.push(r.clone())}});for(var S=$.Utils.arrayMax(c),M=new $.Matrix($.Utils.fillHoles(i,S)).transpose(),N=new $.Matrix,E=0;E<l.length;E++)N.elements.push($.Utils.fillHoles(l[E],S));var q=H.multiply(N.transpose().invert(),M),x=n?[p]:p;return q.each(function(e,t){t=H.multiply(h[t],H.divide(e,a[t]));n?x.push(t):x=H.add(x,t)}),x}catch(e){try{if(t.isComposite()){var A={};t.each(function(e){var t=e.getDenom(),n=e.getNum(),e=A[t];A[t]=e?H.add(e,n):n});var C,L=new Q(0);for(C in A)L=H.add(L,H.divide(A[C],H.parse(C)));t=L}}catch(e){}}return t}},degree:function(e,t,n){if(n=n||{nd:[],sd:[],depth:0},!t){var r=X(e);if(1<r.length)throw new Error(\"You must specify the variable for multivariate polynomials!\");if(0===r.length)return new Q(0);t=H.parse(r[0])}r=e.group;e.isComposite()?((e=e.clone()).distributeExponent(),e.each(function(e){n.depth++,_.degree(e,t,n),n.depth--})):e.group===A?e.each(function(e){n.depth++,_.degree(e,t,n),n.depth++}):r===p&&e.value===t.value?n.sd.push(e.power.clone()):r===j&&e.value===t.value?n.nd.push(H.parse(e.power)):n.nd.push(new Q(0));e=0<n.nd.length?$.Utils.arrayMax(n.nd):void 0;return 0===n.depth&&0<n.sd.length?(void 0!==e&&n.sd.unshift(e),H.symfunction(\"max\",n.sd)):$.Utils.isSymbol(e)?e:H.parse(e)},sqComplete:function(e,t,n){$.Utils.isSymbol(t)||(t=H.parse(t));var r,i,s,o,a,u=function(e){throw new $.exceptions.ValueLimitExceededError(e=e||\"Stopping\")};return e.isPoly(!0)||u(\"Must be a polynomial!\"),o=$.Utils.inBrackets,e=e.clone(),(r=$.Algebra.degree(e,t)).equals(2)||u(\"Cannot complete square for degree \"+r),a=(s=$.Algebra.coeffs(e,t))[2],u=s[1].sign(),r=H.divide(s[1],new Q(2)),e=H.pow(r.clone(),new Q(2)),n?[a,r,i]:(a=f.sqrt(a),e=H.divide(f.sqrt(e),a.clone()),i=H.subtract(s[0],H.pow(e.clone(),new Q(2))),{a:e=H.parse(o(a.clone()+\"*\"+t+(u<0?\"-\":\"+\")+e)),c:i,f:H.add(H.pow(e.clone(),new Q(2)),i.clone())})},Simplify:{strip:function(e){var t=H.parse(e.multiplier);e.toUnitMultiplier();var n=H.parse(e.power);return e.toLinear(),[t,n,e]},unstrip:function(e,t){var n=e[0],e=e[1];return H.multiply(n,H.pow(t,e))},complexSimp:function(e,t){var n=e.realpart(),r=e.imagpart(),i=t.realpart(),s=t.imagpart(),e=H.multiply(n.clone(),i.clone()),t=H.multiply(r.clone(),s.clone()),r=H.multiply(i.clone(),r),n=H.multiply(n,s.clone()),s=H.add(H.pow(i,new Q(2)),H.pow(s,new Q(2)));return H.divide(H.add(H.add(e,t),H.multiply(H.subtract(r,n),Q.imaginary())),s)},trigSimp:function(e){var t,n,r,i,s,o;return e.containsFunction([\"cos\",\"sin\",\"tan\"])&&(e=e.clone(),n=(e=(t=_.Simplify.strip(e)).pop()).clone(),e.group===Z?(r=new Q(0),e.each(function(e){e=_.Simplify.trigSimp(e.fnTransform());r=H.add(r,e)},!0),n=H.pow(H.multiply(new Q(e.multiplier),r),new Q(e.power))):e.group===A&&(i=e.getNum(),s=e.getDenom(),(n=\"sin\"===i.fname&&\"cos\"===s.fname&&i.args[0].equals(s.args[0])&&i.power.equals(s.power)?H.parse($.Utils.format(\"({0})*({1})*tan({2})^({3})\",s.multiplier,i.multiplier,i.args[0],i.power)):n).group===A&&(o=new Q(1),n.each(function(e){\"tan\"===e.fname&&(e=H.parse($.Utils.format(\"({0})*sin({1})^({2})/cos({1})^({2})\",e.multiplier,_.Simplify.simplify(e.args[0]),e.power))),o=H.multiply(o,e)}),n=o)),e=n=_.Simplify.unstrip(t,n).distributeMultiplier()),e},fracSimp:function(e){var t=e.getDenom();if((e=(a=e.getNum()).isImaginary()&&t.isImaginary()?_.Simplify.complexSimp(a,t):e).isComposite()){for(var n,r,i,s,o,a,u=(e=1<e.power?H.expand(e):e).collectSymbols(),l=u.pop();u.length;)o=u.pop(),s=H.parse(l.getDenom()),i=H.parse(o.getDenom()),n=l.getNum(),r=o.getNum(),o=H.multiply(s.clone(),i.clone()),i=H.multiply(n,i),s=H.multiply(r,s),l=H.divide(H.add(i,s),o);return t=H.expand(l.getDenom()),(t=(a=H.expand(l.getNum())).isImaginary()&&t.isImaginary()?_.Simplify.complexSimp(a,t):H.divide(a,t)).equals(e)?e:_.Simplify.simplify(t)}return e},ratSimp:function(e){var t,n;return e.group===A&&(t=e.getDenom(),n=e.getNum().distributeMultiplier(),t=_.Simplify.fracSimp(t),n=_.Simplify.fracSimp(n),e=H.divide(n,t)),e},sqrtSimp:function(e,t){if(e.isSQRT()){var n,r,i=_.Factor.factor(e.args[0].clone()),s=H.parse(i.multiplier),o=s.sign(),a=H.sqrt(s.abs());if(I(a))return i.group===A?(n=new Q(1),i.each(function(e){var t;e.group===u?(t=H.sqrt(e.clone()),I(t)?a=H.multiply(a,t):n=H.multiply(n,e)):n=H.multiply(n,e)}),o=H.multiply(n,H.parse(o)),(r=H.sqrt(o.clone())).isImaginary&&(r=H.sqrt(H.expand(o.clone())))):r=H.sqrt(i.clone().toUnitMultiplier()),H.multiply(a,r)}else e.isComposite()&&e.isLinear()?(a=new Q(0),e.each(function(e){a=H.add(a,_.Simplify.sqrtSimp(e))},!0),a=H.multiply(a,H.parse(e.multiplier))):e.group===A&&(a=H.parse(e.multiplier),e.each(function(e){e=_.Simplify.sqrtSimp(e);a=H.multiply(a,e)},!0),a=H.pow(a,H.parse(e.power)));return a||H.parse(e)},patternSub:function(n){var r={},i=function(e){var t=!1;return e.each(function(e){e.group===Z?t=!0:e.symbols&&(t=i(e))}),t},s=function(e){e.each(function(e){var t;!e.symbols&&e.group!==x||(i(e)?s(e):r[e.value]||(t=$.Utils.getU(n),r[e.value]=t,n=n.sub(e.value,t)))},!0)};return s(n),[n,r]},simplify:function(e){var t=_.Simplify.strip(e);if(e=t.pop(),(e=_.Simplify.fracSimp(e)).isConstant()||e.group===$.groups.S)return t.push(e),_.Simplify.unstrip(t,e);var n,r=e.clone(),r=_.Simplify.trigSimp(r);return r=_.Simplify.ratSimp(r),(r=_.Factor.factor(r)).group===$.groups.CP&&r.isLinear()&&(e=r.multiplier.clone(),r.toUnitMultiplier(),n=new Q(0),r.each(function(e){e=_.Simplify.simplify(e);n=H.add(n,e)}),(r=n).multiplier=n.multiplier.multiply(e)),_.Simplify.unstrip(t,r)}},Classes:{Polynomial:W,Factors:U,MVTerm:J}};$.Expression.prototype.simplify=function(){return _.Simplify.simplify(this.symbol)},nerdamer.useAlgebraDiv=function(){var n=_.divideFn=H.divide,r=0;H.divide=function(e,t){t=1===++r?$.Algebra.divide(e,t):n(e,t);return r=0,t}},nerdamer.useParserDiv=function(){_.divideFn&&(H.divide=_.divideFn),delete _.divideFn},nerdamer.register([{name:\"factor\",visible:!0,numargs:1,build:function(){return _.Factor.factor}},{name:\"simplify\",visible:!0,numargs:1,build:function(){return _.Simplify.simplify}},{name:\"gcd\",visible:!0,numargs:[1],build:function(){return _.gcd}},{name:\"lcm\",visible:!0,numargs:[1],build:function(){return _.lcm}},{name:\"roots\",visible:!0,numargs:-1,build:function(){return _.roots}},{name:\"divide\",visible:!0,numargs:2,build:function(){return _.divide}},{name:\"div\",visible:!0,numargs:2,build:function(){return _.div}},{name:\"partfrac\",visible:!0,numargs:[1,2],build:function(){return _.PartFrac.partfrac}},{name:\"deg\",visible:!0,numargs:[1,2],build:function(){return _.degree}},{name:\"coeffs\",visible:!0,numargs:[1,2],build:function(){return function(){var e=_.coeffs.apply(_,arguments);return new $.Vector(e)}}},{name:\"line\",visible:!0,numargs:[2,3],build:function(){return _.line}},{name:\"sqcomp\",visible:!0,numargs:[1,2],build:function(){return function(t,e){try{return e=e||X(t)[0],_.sqComplete(t.clone(),e).f}catch(e){return t}}}}]),nerdamer.api()}(), true&&void 0===nerdamer&&(nerdamer=__webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\"),__webpack_require__(/*! ./Algebra.js */ \"./src/nerdamer/Algebra.js\")),function(){\"use strict\";var ct=nerdamer.getCore(),pt=ct.PARSER,ft=ct.Frac,ht=ct.Settings,mt=ct.Utils.isSymbol,gt=ct.groups.FN,dt=ct.Symbol,m=ct.Utils.text,vt=ct.Utils.inBrackets,wt=ct.Utils.isInt,yt=ct.Utils.format,bt=ct.Utils.even,k=ct.Utils.evaluate,g=ct.groups.N,St=ct.groups.S,gt=ct.groups.FN,Mt=ct.groups.PL,Nt=ct.groups.CP,Et=ct.groups.CB,qt=ct.groups.EX,d=ct.groups.P,xt=ht.LOG,At=\"sqrt\",Ct=\"sin\",Lt=\"cos\",It=\"tan\",Ut=\"sec\",_t=\"csc\",Rt=\"cot\",Ot=\"asin\",Tt=\"atan\",Pt=\"sinh\",kt=\"cosh\",Ft=\"tanh\";function Dt(e){this.message=e||\"\"}Dt.prototype=new Error,dt.prototype.hasIntegral=function(){return this.containsFunction(\"integrate\")},dt.prototype.fnTransform=function(){if(this.group!==gt)return this;var e,t,n,r=this.args[0],i=new dt(this.multiplier),s=this.clone().toUnitMultiplier();if(this.isLinear())switch(this.fname){case Pt:n=pt.parse(yt(\"(e^({0})-e^(-({0})))/2\",r));break;case kt:n=pt.parse(yt(\"(e^({0})+e^(-({0})))/2\",r));break;case Ft:n=pt.parse(yt(\"(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))\",r));break;case It:n=pt.parse(yt(\"sin({0})/cos({0})\",r));break;case _t:n=pt.parse(yt(\"1/sin({0})\",r));break;case Ut:n=pt.parse(yt(\"1/cos({0})\",r));break;default:n=s}else if(this.power.equals(2))switch(this.fname){case Ct:n=pt.parse(yt(\"1/2-cos(2*({0}))/2\",r));break;case Lt:n=pt.parse(yt(\"1/2+cos(2*({0}))/2\",r));break;case It:n=pt.parse(yt(\"sin({0})^2/cos({0})^2\",r));break;case kt:n=pt.parse(yt(\"1/2+cosh(2*({0}))/2\",r));break;case Pt:n=pt.parse(yt(\"-1/2+cosh(2*({0}))/2\",r));break;case Ft:n=pt.parse(yt(\"(1+cosh(2*({0})))/(-1+cosh(2*({0})))\",r));break;case Ut:n=pt.parse(yt(\"(1-cos(2*({0})))/(1+cos(2*({0})))+1\",r));break;default:n=s}else this.fname===Ut?n=pt.parse(yt(\"1/cos({0})^({1})\",this.args[0],this.power)):this.fname===_t?n=pt.parse(yt(\"1/sin({0})^({1})\",this.args[0],this.power)):this.fname===It?n=this.power.lessThan(0)?pt.parse(yt(\"cos({0})^(-({1}))/sin({0})^({1})\",this.args[0],this.power.negate())):pt.parse(yt(\"sin({0})^({1})/cos({0})^({1})\",this.args[0],this.power)):this.fname===Ct&&this.power.lessThan(0)?n=pt.parse(yt(\"csc({0})^(-({1}))\",this.args[0],this.power.negate())):this.fname===Lt&&this.power.lessThan(0)?n=pt.parse(yt(\"sec({0})^(-({1}))\",this.args[0],this.power.negate())):this.fname===Ct&&this.power.equals(3)?n=pt.parse(yt(\"(3*sin({0})-sin(3*({0})))/4\",this.args[0])):this.fname===Lt&&this.power.equals(3)?n=pt.parse(yt(\"(cos(3*({0}))+3*cos({0}))/4\",this.args[0])):this.fname!==Lt&&this.fname!==Ct||!bt(this.power)?n=s:(t=this.power/2,e=pt.pow(this.clone().toLinear(),pt.parse(2)).fnTransform(),t=pt.expand(pt.pow(e,pt.parse(t))),n=new dt(0),t.each(function(e){e=e.fnTransform();n=pt.add(n,e)},!0));return pt.multiply(n,i)},dt.prototype.hasTrig=function(){if(this.isConstant(!0)||this.group===St)return!1;if(this.fname&&(ct.Utils.in_trig(this.fname)||ct.Utils.in_inverse_trig(this.fname)))return!0;if(this.symbols)for(var e in this.symbols)if(this.symbols[e].hasTrig())return!0;return!1},ct.Expression.prototype.hasIntegral=function(){return this.symbol.hasIntegral()},ct.Utils.toCommonDenominator=function(e){if(e.isComposite()&&e.isLinear()){var t=new dt(e.multiplier),n=new dt(1),r=new dt(0);return e.each(function(e){n=pt.multiply(n,e.getDenom())},!0),e.each(function(e){var t=e.getNum(),e=e.getDenom(),e=pt.multiply(t,pt.divide(n.clone(),e));r=pt.add(r,e)}),pt.multiply(t,ct.Algebra.divide(pt.expand(r),pt.expand(n)))}return e},ct.Utils.in_inverse_trig=function(e){return-1!==[Ot,\"acos\",Tt,\"acsc\",\"asec\",\"acot\"].indexOf(e)},ct.Utils.in_trig=function(e){return-1!==[Lt,Ct,It,Ut,_t,Rt].indexOf(e)},ct.Utils.in_htrig=function(e){return-1!==[Pt,kt,Ft,\"acsch\",\"asech\",\"acoth\"].indexOf(e)},ct.Matrix.jacobian=function(e,t){var i=new ct.Matrix;return(t=t||ct.Utils.arrayGetVariables(e)).forEach(function(n,r){e.forEach(function(e,t){e=ct.Calculus.diff(e.clone(),n);i.set(t,r,e)})}),i},ct.Matrix.prototype.max=function(){var t=new dt(0);return this.each(function(e){e=e.abs();e.gt(t)&&(t=e)}),t},ct.Matrix.cMatrix=function(n,e){var r=new ct.Matrix;return e.forEach(function(e,t){r.set(t,0,pt.parse(n))}),r};var Bt=ct.Utils.all_functions=function(e){for(var t=0,n=e.length;t<n;t++)if(e[t].group!==gt)return!1;return!0},l=ct.Utils.cosAsinBtranform=function(e,t){e=e.args[0],t=t.args[0];return pt.parse(yt(\"(sin(({0})+({1}))-sin(({0})-({1})))/2\",e,t))},c=ct.Utils.cosAsinAtranform=function(e,t){if(1!==Number(t.power))return pt.multiply(e,t);e=e.args[0];return pt.parse(yt(\"(sin(2*({0})))/2\",e))},p=ct.Utils.cosAsinBtranform=function(e,t){e=e.args[0],t=t.args[0];return pt.parse(yt(\"(cos(({0})+({1}))-cos(({0})-({1})))/2\",e,t))},Gt=ct.Utils.trigTransform=function(e){for(var t,n,r,i,s={},o=new dt(1),a=0,u=e.length;a<u;a++)(r=e[a]).group===gt?(n=r.fname)===Lt&&s.sin?(t=(s.sin.args[0].toString()!==r.args[0].toString()?l:c)(r,s.sin),delete s.sin,o=pt.multiply(o,t)):n===Ct&&s.cos?(t=(s.cos.args[0].toString()!==r.args[0].toString()?l:c)(r,s.cos),delete s.cos,o=pt.multiply(o,t)):n===Ct&&s.sin?(t=s.sin.args[0].toString()!==r.args[0].toString()?p(r,s.sin):pt.multiply(r,s.sin),delete s.sin,o=t):s[n]=r:o=pt.multiply(o,r);for(i in s)o=pt.multiply(o,s[i]);return o};ct.Settings.integration_depth=10,ct.Settings.max_lim_depth=10;var Vt=ct.Calculus={version:\"1.4.6\",sum:function(s,o,a,u){if(o.group!==ct.groups.S)throw new ct.exceptions.NerdamerTypeError(\"Index must be symbol. \"+m(o)+\" provided\");var e;return o=o.value,ct.Utils.isNumericSymbol(a)&&ct.Utils.isNumericSymbol(u)?(e=u-a<200?\"\":\"PARSE2NUMBER\",a=Number(a),u=Number(u),ct.Utils.block(e,function(){for(var e=s.text(),t={\"~\":!0},n=new ct.Symbol(0),r=a;r<=u;r++){t[o]=new dt(r);var i=pt.parse(e,t),n=pt.add(n,i)}return n})):pt.symfunction(\"sum\",arguments)},product:function(i,s,o,a){if(s.group!==ct.groups.S)throw new ct.exceptions.NerdamerTypeError(\"Index must be symbol. \"+m(s)+\" provided\");return s=s.value,ct.Utils.isNumericSymbol(o)&&ct.Utils.isNumericSymbol(a)?ct.Utils.block(a-o<200?\"\":\"PARSE2NUMBER\",function(){o=Number(o),a=Number(a.multiplier);for(var e=i.text(),t={},n=new ct.Symbol(1),r=o;r<=a;r++)t[s]=new dt(r),n=pt.multiply(n,pt.parse(e,t));return n}):pt.symfunction(\"product\",arguments)},diff:function(e,l,r){if(ct.Utils.isVector(e)){var t=new ct.Vector([]);return e.each(function(e){t.elements.push(Vt.diff(e,l,r))}),t}if(ct.Utils.isMatrix(e)){var i=new ct.Matrix;return e.each(function(e,t,n){i.set(t,n,Vt.diff(e,l,r))}),i}var n,s,c=mt(l)?l.text():l;return r=mt(r)?r.multiplier:r||1,void 0===c&&(c=ct.Utils.variables(e)[0]),e.group===gt&&e.fname===At&&(s=e.args[0],n=e.power.clone(),s.group===g&&s.group===d||(s.power=mt(s.power)?pt.multiply(s.power,pt.multiply(new dt(.5)),n):s.power.multiply(new ft(.5)).multiply(n),s.multiplier=s.multiplier.multiply(e.multiplier)),e=s),e=e.group!==gt||mt(e.power)?f(e):(n=f(pt.parse(e)),s=Vt.diff(e.args[0].clone(),c),pt.multiply(n,s)),e=1<r?Vt.diff(e,l,--r):e;function p(e){return e.value!==c&&!e.contains(c,!0)||(e.multiplier=e.multiplier.multiply(e.power),e.power=e.power.subtract(new ft(1)),e.power.equals(0)&&(e=dt(e.multiplier))),e}function f(e){var t=e.group;if(t===g||t===St&&e.value!==c||t===d)e=dt(0);else if(t===St)e=p(e);else{if(t===Et){var n=e.multiplier.clone();e.toUnitMultiplier();var r=pt.multiply(function(e){for(var t=e.collectSymbols(),n=new dt(0),r=t.length,i=0;i<r;i++){for(var s=Vt.diff(t[i].clone(),c),o=0;o<r;o++)i!==o&&(s=pt.multiply(s,t[o].clone()));n=pt.add(n,s)}return n}(e),p(e));return r.multiplier=r.multiplier.multiply(n),r}if(t===gt&&e.power.equals(1))switch(e.fname){case xt:s=e.clone(),(e=e.args[0].clone()).power=e.power.negate(),e.multiplier=s.multiplier.divide(e.multiplier);break;case Lt:e.fname=Ct,e.multiplier.negate();break;case Ct:e.fname=Lt;break;case It:e.fname=Ut,e.power=new ft(2);break;case Ut:e=h(e,It);break;case _t:e=h(e,\"-cot\");break;case Rt:e.fname=_t,e.multiplier.negate(),e.power=new ft(2);break;case Ot:e=pt.parse(\"(sqrt(1-(\"+m(e.args[0])+\")^2))^(-1)\");break;case\"acos\":e=pt.parse(\"-(sqrt(1-(\"+m(e.args[0])+\")^2))^(-1)\");break;case Tt:e=pt.parse(\"(1+(\"+m(e.args[0])+\")^2)^(-1)\");break;case\"abs\":n=e.multiplier.clone(),e.toUnitMultiplier(),(o=e.args[0].clone()).toUnitMultiplier(),(e=pt.parse(vt(m(e.args[0]))+\"/abs\"+vt(m(o)))).multiplier=n;break;case\"parens\":e=dt(1);break;case\"cosh\":e.fname=\"sinh\";break;case\"sinh\":e.fname=\"cosh\";break;case Ft:e.fname=\"sech\",e.power=new ft(2);break;case\"sech\":e=h(e,\"-tanh\");break;case\"csch\":var i=String(e.args[0]);return pt.parse(\"-coth(\"+i+\")*csch(\"+i+\")\");case\"coth\":i=String(e.args[0]);return pt.parse(\"-csch(\"+i+\")^2\");case\"asinh\":e=pt.parse(\"(sqrt(1+(\"+m(e.args[0])+\")^2))^(-1)\");break;case\"acosh\":e=pt.parse(\"(sqrt(-1+(\"+m(e.args[0])+\")^2))^(-1)\");break;case\"atanh\":e=pt.parse(\"(1-(\"+m(e.args[0])+\")^2)^(-1)\");break;case\"asech\":i=String(e.args[0]);e=pt.parse(\"-1/(sqrt(1/(\"+i+\")^2-1)*(\"+i+\")^2)\");break;case\"acoth\":e=pt.parse(\"-1/((\"+e.args[0]+\")^2-1)\");break;case\"acsch\":i=String(e.args[0]);e=pt.parse(\"-1/(sqrt(1/(\"+i+\")^2+1)*(\"+i+\")^2)\");break;case\"asec\":i=String(e.args[0]);e=pt.parse(\"1/(sqrt(1-1/(\"+i+\")^2)*(\"+i+\")^2)\");break;case\"acsc\":i=String(e.args[0]);e=pt.parse(\"-1/(sqrt(1-1/(\"+i+\")^2)*(\"+i+\")^2)\");break;case\"acot\":e=pt.parse(\"-1/((\"+e.args[0]+\")^2+1)\");break;case\"S\":i=String(e.args[0]);e=pt.parse(\"sin((pi*(\"+i+\")^2)/2)\");break;case\"C\":i=String(e.args[0]);e=pt.parse(\"cos((pi*(\"+i+\")^2)/2)\");break;case\"Si\":i=e.args[0];e=pt.parse(\"sin(\"+i+\")/(\"+i+\")\");break;case\"Shi\":i=e.args[0];e=pt.parse(\"sinh(\"+i+\")/(\"+i+\")\");break;case\"Ci\":i=e.args[0];e=pt.parse(\"cos(\"+i+\")/(\"+i+\")\");break;case\"Chi\":i=e.args[0];e=pt.parse(\"cosh(\"+i+\")/(\"+i+\")\");break;case\"Ei\":i=e.args[0];e=pt.parse(\"e^(\"+i+\")/(\"+i+\")\");break;case\"Li\":i=e.args[0];e=pt.parse(\"1/\"+ht.LOG+\"(\"+i+\")\");break;case\"erf\":e=pt.parse(\"(2*e^(-(\"+e.args[0]+\")^2))/sqrt(pi)\");break;case\"atan2\":var s=String(e.args[0]),i=String(e.args[1]);e=pt.parse(\"(\"+i+\")/((\"+i+\")^2+(\"+s+\")^2)\");break;case\"sign\":e=new dt(0);break;case\"sinc\":e=pt.parse(yt(\"(({0})*cos({0})-sin({0}))*({0})^(-2)\",e.args[0]));break;case ht.LOG10:e=pt.parse(\"1/((\"+e.args[0]+\")*\"+ht.LOG+\"(10))\");break;default:e=pt.symfunction(\"diff\",[e,l])}else if(t===qt||t===gt&&mt(e.power)){var r=t===qt?e.value:t===gt&&e.contains(c)?e.fname+vt(m(e.args[0])):e.value+vt(m(e.args[0])),o=(pt.multiply(pt.parse(xt+vt(r)),e.power.clone()),Vt.diff(pt.multiply(pt.parse(xt+vt(r)),e.power.clone()),c));e=pt.multiply(e,o)}else if(t!==gt||e.power.equals(1)){if(t===Nt||t===Mt){var a,t=e.clone(),u=new dt(0);for(a in e.symbols)u=pt.add(u,Vt.diff(e.symbols[a].clone(),c));e=pt.multiply(p(t),u)}}else(o=e.clone()).toLinear(),o.toUnitMultiplier(),e=pt.multiply(p(e.clone()),f(o))}return e.updateHash(),e}function h(e,t,n){return pt.multiply(e,pt.parse(t+vt(n||m(e.args[0]))))}},integration:{u_substitution:function(e,i){function t(e,t,n){var r=Vt.diff(t,i),r=n?n(e,t):pt.divide(e.clone(),r);return r.contains(i,!0)?null:r}function n(e,t){e=Vt.integrate(pt.symfunction(e,[new dt(u)]),u,0);return(e=e.sub(new dt(u),t)).updateHash(),e}var r,s=e[0].clone(),o=e[1].clone(),a=s.group,e=o.group,u=\"__u__\";if(a===gt&&e!==gt)return(r=t(o,(c=s.args[0]).clone()))?pt.multiply(r,n(s.fname,c)):(r=t(o,s))?Vt.integration.poly_integrate(s):void 0;if(e===gt&&a!==gt){if(r=t(s,(c=o.args[0]).clone()))return pt.multiply(r,n(o.fname,c))}else{if(a===gt&&e===gt)return(r=t(s.clone(),o.clone()))||(r=t(o.clone(),s.clone()))?pt.multiply(Vt.integration.poly_integrate(o),r):void 0;if(a===qt&&e!==qt){if(!(r=t(o,(p=s.power).clone()))){var l=Vt.integration.decompose_arg(p.clone(),i),c=Vt.diff(l[2].clone(),i),c=Vt.integration.decompose_arg(c.clone(),i);if(pt.multiply(l[1],c[1]).power.equals(o.power)){c=pt.divide(l[0].clone(),c[0].clone()),c=pt.multiply(c.clone(),pt.pow(new dt(s.value),pt.multiply(l[0],new dt(u)))),c=pt.multiply(c,new dt(u));return Vt.integration.by_parts(c,u,0,{}).sub(u,l[1].clone())}}l=Vt.integrate(s.sub(p.clone(),new dt(u)),u,0);return pt.multiply(l.sub(new dt(u),p),r)}if(e===qt&&a!==qt){r=t(s,(p=o.power).clone());l=Vt.integrate(o.sub(p,new dt(u)),u,0);return pt.multiply(l.sub(new dt(u),p),r)}if(s.isComposite()||o.isComposite()){var a=function(e,t){t=Vt.diff(t,i),e=ct.Algebra.Factor.factor(e),t=ct.Algebra.Factor.factor(t);return pt.divide(e,t)},l=s.isComposite()?s.clone().toLinear():s.clone(),p=o.isComposite()?o.clone().toLinear():o.clone();return(r=t(l.clone(),p.clone(),a))?pt.multiply(Vt.integration.poly_integrate(o),r):(r=t(p.clone(),l.clone(),a))?pt.multiply(Vt.integration.poly_integrate(s),r):void 0}}},poly_integrate:function(e){var t=e.power.toString(),n=e.multiplier.toDecimal(),e=e.toUnitMultiplier().toLinear();return-1===Number(t)?pt.multiply(new dt(n),pt.symfunction(xt,[e])):pt.parse(yt(\"({0})*({1})^(({2})+1)/(({2})+1)\",n,e,t))},stop:function(e){throw ct.Utils.warn(e=e||\"Unable to compute integral!\"),new Dt(e)},partial_fraction:function(e,t,n,r){var i;return mt(t)||(t=pt.parse(t)),i=new dt(0),(e=ct.Algebra.PartFrac.partfrac(e,t)).group===Et&&e.isLinear()?(e.each(function(e){e.isLinear()||Vt.integration.stop()}),e.each(function(e){i=pt.add(i,Vt.integrate(e,t,n,r))})):i=pt.add(i,Vt.integrate(e,t,n,r)),i},get_udv:function(e){function t(e){var t,n=e.group;n===gt?(t=e.fname,ct.Utils.in_trig(t)||ct.Utils.in_htrig(t)?r[3].push(e):ct.Utils.in_inverse_trig(t)?r[1].push(e):t===xt?r[0].push(e):Vt.integration.stop()):n===St||e.isComposite()&&e.isLinear()||n===Et&&e.isLinear()?r[2].push(e):n===qt||e.isComposite()&&!e.isLinear()?r[4].push(e):Vt.integration.stop()}var r=[[],[],[],[],[]];e.group===Et?e.each(function(e){t(dt.unwrapSQRT(e,!0))}):t(e);for(var n,i=new dt(1),s=0;s<5;s++){var o=r[s],a=o.length;if(0<a){if(1<a)for(var u=new dt(1),l=0;l<a;l++)u=pt.multiply(u,o[l].clone());else u=o[0].clone();n?i=pt.multiply(i,u):(n=u).multiplier=n.multiplier.multiply(e.multiplier)}}return[n,i]},trig_sub:function(e,t,n,r,i,s){(i=i||Vt.integration.decompose_arg(e.clone().toLinear(),t))[3],i[2];var o=i[0],a=i[1];if(a.power.equals(2)&&o.greaterThan(0)){t=ct.Utils.getU(e),i=pt.parse(It+vt(t)),o=pt.parse(Ut+vt(t)+\"^2\"),o=pt.multiply(e.sub(a,i),o),a=Vt.integrate(o,t,n,r).sub(i,a);return ct.Utils.clearU(i),a}},by_parts:function(e,t,n,r){var i,s,o,a,u,l;return r.previous=r.previous||[],o=(s=Vt.integration.get_udv(e))[0],i=s[1],u=(a=dt.unwrapSQRT(pt.expand(Vt.diff(o.clone(),t)),!0)).clone().stripVar(t),a=pt.divide(a,u.clone()),e=Vt.integrate(i.clone(),t,n||0),a=(s=pt.multiply(e.clone(),a)).toString(),-1!==r.previous.indexOf(a)&&ct.Utils.in_trig(o.fname)&&i.isE()?(r.is_cyclic=!0,new dt(1)):(r.previous.push(a),o=pt.multiply(o,e),e=s.multiplier.clone(),s.toUnitMultiplier(),(u=pt.multiply(Vt.integrate(s.clone(),t,n,r),u)).multiplier=u.multiplier.multiply(e),u=pt.subtract(o,u),r.is_cyclic&&(r.previous.pop(),0===r.previous.length&&(u=pt.expand(u),l=new dt(0),u.each(function(e){e.contains(t)||(l=pt.add(l,e.clone()))}),u=pt.divide(pt.subtract(u,l.clone()),pt.subtract(new dt(1),l)))),u)},decompose_arg:ct.Utils.decompose_fn},integrate:function(ot,at,ut,lt){var e;if(at||(e=ct.Utils.variables(ot),at=(at=1===e.length?e[0]:at)||\"x\"),ct.Utils.isVector(ot)){var t=new ct.Vector([]);return ot.each(function(e){t.elements.push(Vt.integrate(e,at))}),t}return isNaN(at)||pt.error(\"variable expected but received \"+at),ot.isConstant(!0)?pt.multiply(ot.clone(),pt.parse(at)):(lt=lt||{},ct.Utils.block(\"PARSE2NUMBER\",function(){ut=ut||0;var t,n=mt(at)?at.toString():at,e=(ce=dt.unwrapSQRT(ot.clone(),!0)).group;try{if(++ut>ct.Settings.integration_depth&&Vt.integration.stop(\"Maximum depth reached. Exiting!\"),ce.contains(n,!0)){if(e===St)t=Vt.integration.poly_integrate(ce,n,ut);else if(e===qt)if(ce.previousGroup===gt&&\"sqrt\"!==ce.fname&&ce.fname!==ht.PARENTHESIS&&Vt.integration.stop(),ce.contains(n)&&ce.previousGroup!==gt)ce.power.contains(n)?Vt.integration.stop():((We=Vt.diff(ce.clone().toLinear(),n)).contains(n)&&Vt.integration.stop(),t=Vt.integration.poly_integrate(ce,n,ut));else{if((f=Vt.diff(ce.power.clone(),n)).contains(n)){var r=f.stripVar(n);if((h=pt.divide(f.clone(),r.clone())).group===St&&h.isLinear())return r.multiplier=r.multiplier.divide(new ft(2)),pt.parse(yt(\"({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))\",r,n,ce.multiplier));Vt.integration.stop()}ce.isE()?f.isLinear()?t=ce:f.isE()&&f.power.group===St&&f.power.power.equals(1)?t=pt.multiply(pt.symfunction(\"Ei\",[ce.power.clone()]),ce.power):Vt.integration.stop():(g=pt.symfunction(xt,[pt.parse(ce.value)]),t=pt.divide(ce,g)),t=pt.divide(t,f)}else if(ce.isComposite()&&ce.isLinear()){var i=pt.parse(ce.multiplier);ce.toUnitMultiplier(),t=new dt(0),ce.each(function(e){t=pt.add(t,Vt.integrate(e,n,ut))}),t=pt.multiply(i,t)}else if(e===Nt)if((ce=ce.power.greaterThan(1)?pt.expand(ce):ce).power.equals(1))t=new dt(0),ce.each(function(e){t=pt.add(t,Vt.integrate(e,n,ut))},!0);else{var s=Number(ce.power),i=ce.multiplier.clone();ce.toUnitMultiplier();var o,a,u,l=ce.clone().toLinear(),c=(Ve=Vt.integration.decompose_arg(l,n))[3],p=Ve[2],f=Ve[0],h=Ve[1];if(-1===s&&h.group!==Mt&&h.power.equals(2)){var m,g,d,v,w,y,b,S,M,N,E,q=!wt(c)||0<c;t=h.group===St&&h.power.equals(2)&&q?(m=function(e){var t=new dt(1);return e.each(function(e){t=pt.multiply(t,\"abs\"===e.fname?e.args[0]:e)}),t},d=f.clone(),v=c.clone(),d=pt.pow(d,new dt(.5)),v=pt.pow(v,new dt(.5)),g=pt.multiply(m(v),m(d)),O=pt.symfunction(Tt,[pt.divide(pt.multiply(f,h.toLinear()),g.clone())]),pt.divide(O,g)):h.group===St&&h.isLinear()?pt.divide(Vt.integration.poly_integrate(ce),f):h.power.equals(4)?(E=vt,d=pt.parse(At+E(f)+\"*\"+n+\"^2\"),v=pt.parse(At+E(2)+\"*\"+E(f)+\"^\"+E(\"1/4\")+\"*\"+E(c)+\"^\"+E(\"1/4\")+\"*\"+n),w=pt.parse(At+E(c)),P=pt.add(pt.add(d.clone(),v.clone()),w.clone()),Z=pt.add(pt.subtract(d,v),w),y=pt.parse(At+E(2)+\"*\"+E(c)+\"^\"+E(\"3/4\")),b=pt.parse(At+E(c)+\"*\"+E(c)+\"^\"+E(\"1/4\")+\"*\"+n),S=pt.parse(\"2*\"+E(c)+\"*\"+At+E(2)+\"*\"+E(c)+\"^\"+E(\"1/4\")),M=pt.divide(pt.subtract(y.clone(),b.clone()),pt.multiply(S.clone(),Z)),N=pt.divide(pt.add(y,b),pt.multiply(S,P.clone())),pt.add(Vt.integrate(M,n,ut,lt),Vt.integrate(N,n,ut,lt))):Vt.integration.partial_fraction(ce,n,ut)}else if(-.5===s)h.group===St&&h.power.equals(2)&&p.multiplier.lessThan(0)&&!c.multiplier.lessThan(0)?(f.negate(),t=c.isConstant()&&f.isConstant()?(g=pt.symfunction(At,[f.clone()]),o=pt.symfunction(At,[pt.multiply(f.clone(),c)]),pt.divide(pt.symfunction(Ot,[pt.divide(p.toLinear(),o)]),g)):(a=pt.symfunction(At,[f]),u=pt.multiply(a.clone(),h.clone().toLinear()),pt.divide(pt.symfunction(Tt,[pt.divide(u,pt.symfunction(At,[l.clone()]))]),a))):Vt.integration.stop();else if(h.isLinear()&&h.group!==Mt)t=pt.divide(Vt.integration.poly_integrate(ce),f);else{if(h.power.equals(2)&&f.greaterThan(0)){var x=pt.parse(At+vt(f)),A=pt.parse(At+vt(c)),C=pt.multiply(x.clone(),A.clone()).invert(),L=pt.pow(c,new dt(ce.power)),I=ct.Utils.getU(ce);$e=pt.multiply(C,h.clone().toLinear());var U=pt.parse(Tt+vt($e)),_=2*(Math.abs(ce.power)-1),R=Vt.integrate(pt.parse(Lt+vt(I)+\"^\"+_));return ct.Utils.clearU(I),pt.multiply(R.sub(I,U),L)}if(ce.group===Et||ce.power.lessThan(0)){var O=ce.clone().toLinear(),T=ct.Algebra.Factor.factor(O).toString()!==O.toString();if(ct.Algebra.degree(O,pt.parse(n)).equals(2)&&!T)try{var P,k,F=ct.Algebra.sqComplete(O,n);$e=ct.Utils.getU(O),P=F.f.sub(F.a,$e),k=pt.pow(P,pt.parse(ce.power)),t=Vt.integrate(k,$e).sub($e,F.a)}catch(e){Vt.integration.stop()}else t=Vt.integration.partial_fraction(ce,n,ut,lt)}else t=Vt.integration.by_parts(ce,n,ut,lt)}t.multiplier=t.multiplier.multiply(i)}else if(e===gt){var D=ce.args[0],i=ce.multiplier.clone();ce.toUnitMultiplier();var B,G,V,H,j,Z,X,$,z,f=(Ve=Vt.integration.decompose_arg(D,n))[0],h=Ve[1],Q=ce.fname;if(Q===xt||Q===Ot||\"acos\"===Q||Q===Tt&&h.isLinear()){var Y,s=ce.power.toString();wt(s)&&(ut-=s),t=D.isComposite()?($e=ct.Utils.getU(ce),O=pt.pow(pt.parse(xt+vt($e)),new dt(s)),Ce=Vt.diff(D,n),Y=pt.multiply(O,Ce),R=Vt.integrate(Y,$e,ut,lt),pt.multiply(pt.parse(i),R.sub($e,D))):pt.multiply(pt.parse(i),Vt.integration.by_parts(ce,n,ut,lt))}else{if(Q===It&&ce.power.lessThan(0))return(Je=ce.clone()).power.negate(),Je.fname=Rt,pt.multiply(pt.parse(i),Vt.integrate(Je,n,ut));if(!f.contains(n,!0)&&ce.isLinear())if(\"abs\"===Q)(h=pt.divide(D.clone(),f.clone())).group!==St||h.power.lessThan(0)?Vt.integration.stop():t=ct.Utils.even(h.power)?Vt.integrate(D,n,ut):((z=Vt.integrate(h,n,ut)).power=z.power.subtract(new ft(1)),pt.multiply(pt.multiply(pt.symfunction(\"abs\",[h.toLinear()]),z),f));else{var W=ce.args[0].group,J=Vt.integration.decompose_arg(D,n);switch((W!==Nt&&W!==St&&W!==Et||!J[1].power.equals(1)||D.hasFunc())&&Vt.integration.stop(),Q){case Lt:t=pt.symfunction(Ct,[D]);break;case Ct:(t=pt.symfunction(Lt,[D])).negate();break;case It:t=pt.parse(yt(ht.LOG+\"(sec({0}))\",D));break;case Ut:t=pt.parse(yt(ht.LOG+\"(tan({0})+sec({0}))\",D));break;case _t:t=pt.parse(yt(\"-\"+ht.LOG+\"(csc({0})+cot({0}))\",D));break;case Rt:t=pt.parse(yt(ht.LOG+\"(sin({0}))\",D));break;case Pt:t=pt.symfunction(kt,[D]);break;case kt:t=pt.symfunction(Pt,[D]);break;case Ft:t=pt.parse(yt(ht.LOG+\"(cosh({0}))\",D));break;case\"asec\":case\"acsc\":case\"acot\":case\"asech\":case\"acsch\":case\"acoth\":t=Vt.integration.by_parts(ce,n,ut,lt);break;case\"sech\":t=pt.parse(yt(\"atan(sinh({0}))\",D));break;case\"csch\":t=pt.parse(yt(ht.LOG+\"(tanh(({0})/2))\",D));break;case\"coth\":t=pt.parse(yt(ht.LOG+\"(sinh({0}))\",D));break;case\"exp\":t=Vt.integrate(pt.parse(yt(\"e^({0})\",D)),n,ut);break;case\"S\":var D=ce.args[0].clone(),K=(Se=Vt.integration.decompose_arg(D,n))[1],ee=Se[0],te=Se[3];t=pt.parse(yt(\"(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)\",ee,te,h));break;case\"C\":D=ce.args[0].clone(),K=(Se=Vt.integration.decompose_arg(D,n))[1],ee=Se[0],te=Se[3];t=pt.parse(yt(\"(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)\",ee,te,K));break;case\"erf\":D=ce.args[0].clone(),K=(Se=Vt.integration.decompose_arg(D,n))[1],ee=Se[0];t=pt.parse(yt(\"e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))\",ee,K,D));break;case\"sign\":t=pt.multiply(ce.clone(),D.clone());break;default:Vt.integration.stop()}t=pt.divide(t,f)}else h.isLinear()?Q===Lt||Q===Ct?(s=Number(ce.power),t=s<0?(ce.fname=Q===Ct?_t:Ut,ce.invert().updateHash(),Vt.integrate(ce,n,ut)):(D=ce.args[0],B=ce.clone(),G=ce.clone(),Ie=new dt((s-1)/s),V=pt.multiply(f.clone(),new dt(s)).invert(),B.power=B.power.subtract(new ft(1)),G.power=G.power.subtract(new ft(2)),We=pt.symfunction(Q===Lt?Ct:Lt,[D.clone()]),Q===Ct&&We.negate(),pt.add(pt.multiply(pt.multiply(V,B),We),pt.multiply(Ie,Vt.integrate(pt.parse(G),n,ut))))):Q===It||Q===Rt?ce.args[0].isLinear(n)&&(_=ce.power.subtract(new ft(1)).toString(),nt=ce.clone().toUnitMultiplier(),$=pt.parse(yt((Q===Rt?\"-\":\"\")+\"1/({2}*{0})*{3}({1})^({0})\",_,D,f,Q)),nt.power=nt.power.subtract(new ft(2)),nt.power.equals(0)&&(nt=pt.parse(nt)),t=pt.subtract($,Vt.integrate(nt,n,ut))):Q===Ut||Q===_t?(H=ce.power.subtract(new ft(1)).toString(),j=ce.power.subtract(new ft(2)).toString(),Z=Q===Ut?It:Rt,nt=ce.clone().toUnitMultiplier(),X=yt((Q===_t?\"-\":\"\")+\"1/({0}*{1})*{4}({3})^({2})*{5}({3})\",f,H,j,D,Q,Z),$=pt.parse(X),nt.power=nt.power.subtract(new ft(2)),nt.power.equals(0)&&(nt=pt.parse(nt)),t=pt.add($,pt.multiply(new dt(j/H),Vt.integrate(nt,n,ut)))):Q!==kt&&Q!==Pt||!ce.power.equals(2)?Vt.integration.stop():t=Vt.integrate(ce.fnTransform(),n,ut):Vt.integration.stop();t.multiplier=t.multiplier.multiply(i)}}else if(e===Mt)t=Vt.integration.partial_fraction(ce,n,ut);else if(e===Et){var ne=(ce=ce.getDenom().group===St?pt.expand(ce):ce).stripVar(n),re=pt.divide(ce.clone(),ne.clone());if(ne.contains(n)&&(re=pt.multiply(re,ne),ne=new dt(1)),re.group!==Et){if(re.equals(1))return Vt.integrate(pt.expand(ce),n,ut);re.clone().toLinear().isPoly(!0)&&1<ct.Utils.variables(re).length&&(re=ct.Algebra.Factor.factor(re)),t=Vt.integrate(re,n,ut)}else{var ie=re.collectSymbols().sort(function(e,t){return e.group===t.group?Number(e.power)===Number(t.power)?e<t?1:-1:t.power-e.power:t.group-e.group}).map(function(e){e=dt.unwrapSQRT(e,!0);return\"exp\"===e.fname?pt.parse(yt(\"({1})*e^({0})\",e.args[0],e.multiplier)):e}),se=ie.length;if(ce.power<0){if(2===se)return Vt.integrate(pt.expand(ce),n,ut,lt)}else if(2===se){try{t=Vt.integration.u_substitution(ie,n)}catch(e){}if(!t){var oe,ae,ue,le,ce,pe,fe,he,me,ge,de,ve,we,ye,be,Se,Me,Ne,Ee,qe,xe,Ae,Ce,Le,Ie,Ue,_e,Re,Oe,Te,Pe=ie[0].group,ke=ie[1].group,Fe=ie[0],De=ie[1],Be=Fe.fname,Ge=De.fname;if(ce=pt.multiply(Fe.clone(),De.clone()),Pe===gt&&ke===gt)if(Be===xt||Ge===xt)t=Vt.integration.by_parts(ce.clone(),n,ut,lt);else{ie.sort(function(e,t){return t.fname>e.fname});var Ve,He=Fe.args[0];He.isLinear()&&(He.group===Nt||He.group===Et||He.group===St)||Vt.integration.stop(),h=(Ve=Vt.integration.decompose_arg(He,n))[1],f=Ve[0],h.isLinear()||Vt.integration.stop();var je,Ze=De.args[0];if(He.equals(Ze))if(Be===Ct&&Ge===Lt||Be===Lt&&Ge===Ct)if(Fe.power.lessThan(0)&&Vt.integration.stop(),Be===Ct&&Fe.power.add(De.power).equals(0))Fe.fname=It,Fe.updateHash(),t=Vt.integrate(Fe,n,ut);else if(bt(Fe.power)&&Ge===Lt&&De.power.lessThan(0)){var _=Number(Fe.power)/2,Xe=pt.parse(yt(\"(1-cos({0})^2)^({1})\",Fe.args[0],_));t=Vt.integrate(pt.expand(pt.multiply(Xe,De.clone())),n,ut,lt)}else if(bt(Fe.power)&&Ge===Ct&&De.power.lessThan(0)){_=Number(Fe.power)/2,Xe=pt.parse(yt(\"(1-sin({0})^2)^({1})\",Fe.args[0],_));t=Vt.integrate(pt.expand(pt.multiply(Xe,De.clone())),n,ut,lt)}else{var $e,ze=ct.Utils.even(Fe.power),Qe=ct.Utils.even(De.power);if(t=new dt(0),ze&&Qe){var Ye=function(e){var t=e.power/2,t=e.fname===Lt?\"((1/2)+(cos(2*(\"+e.args[0]+\"))/2))^\"+t:\"((1/2)-(cos(2*(\"+e.args[0]+\"))/2))^\"+t;return pt.parse(t)},f=Ye(Fe),c=Ye(De),We=pt.multiply(f,c);return(Je=pt.expand(We)).each(function(e){t=pt.add(t,Vt.integrate(e,n,ut))}),pt.multiply(t,ne)}nt=ze?($e=Fe,De):($e=De,Fe);var Je,Ke=$e.fname===Lt?-1:1,et=((_=nt.power)-1)/2,tt=pt.parse(\"(1-\"+$e.fname+ct.Utils.inBrackets(He)+\"^2)^\"+et);(Je=pt.expand(pt.multiply(new dt(Ke),pt.multiply($e.clone(),tt)))).each(function(e){t=pt.add(t,Vt.integration.poly_integrate(e.clone()))})}else Be===Ut&&Ge===It&&h.isLinear()&&De.isLinear()?t=pt.parse(yt(\"sec({0})^({1})/({1})\",Fe.args[0],Fe.power)):Be===It&&Ge===Ut&&h.isLinear()?Fe.isLinear()&&De.isLinear()?t=pt.divide(pt.symfunction(Ut,[He.clone()]),f):bt(Fe.power)?(s=Number(Fe.power)/2,We=pt.parse(yt(\"(sec({0})^2-1)^({1})\",Fe.args[0],s)),t=Vt.integrate(pt.expand(pt.multiply(We,De)),n,ut)):Vt.integration.stop():t=Be===Ut&&Ge===Lt?(Fe.fname=Lt,Fe.invert().updateHash(),Vt.integrate(pt.multiply(Fe,De),n,ut)):Be===Ct&&Ge===_t?(De.fname=Ct,De.invert().updateHash(),Vt.integrate(pt.multiply(Fe,De),n,ut)):(We=Be!==It||Ge!==Lt&&Ge!==Ct||!De.power.lessThan(0)?pt.multiply(Fe.fnTransform(),De.fnTransform()):pt.multiply(Fe.fnTransform(),De),Vt.integrate(pt.expand(We),n,ut));else Be!==Ct&&Be!==Lt||Ge!==Ct&&Ge!==Lt?Vt.integration.stop():Fe.isLinear()&&De.isLinear()?t=Fe.args[0].isLinear()&&De.args[0].isLinear()?(Ge===Ct?(p=Fe.args[0],je=De.args[0]):(je=Fe.args[0],p=De.args[0]),O=pt.parse(yt(\"(sin(({1})+({0}))+sin(({1})-({0})))/2\",p.toString(),je.toString())),Vt.integrate(O,n,ut)):(st=Gt(ie),Vt.integrate(pt.expand(st),n,ut)):(st=new dt(1),ie.map(function(e){e=e.fnTransform();st=pt.multiply(st,e)}),We=pt.expand(st),(t=Vt.integrate(We,n,ut)).hasIntegral()&&(t=Vt.integrate(Gt(st.collectSymbols()),n,ut)))}else Pe===gt&&ke===St?(oe=Fe.isLinear(),Fe.fname===Lt&&oe&&De.power.equals(-1)?t=pt.symfunction(\"Ci\",[Fe.args[0]]):Fe.fname===Lt&&De.power.equals(-1)?t=Vt.integrate(pt.multiply(Fe.fnTransform(),De.clone()),n,ut):Fe.fname===kt&&oe&&De.power.equals(-1)?t=pt.symfunction(\"Chi\",[Fe.args[0]]):Fe.fname===kt&&De.power.equals(-1)?t=Vt.integrate(pt.multiply(Fe.fnTransform(),De.clone()),n,ut):Fe.fname===Ct&&oe&&De.power.equals(-1)?t=pt.symfunction(\"Si\",[Fe.args[0]]):Fe.fname===Ct&&De.power.equals(-1)?t=Vt.integrate(pt.multiply(Fe.fnTransform(),De.clone()),n,ut):Fe.fname===Pt&&oe&&De.power.equals(-1)?t=pt.symfunction(\"Shi\",[Fe.args[0]]):Fe.fname===Pt&&De.power.equals(-1)?t=Vt.integrate(pt.multiply(Fe.fnTransform(),De.clone()),n,ut):Fe.fname===xt&&De.power.equals(-1)?t=Vt.integration.poly_integrate(Fe,n,ut):\"erf\"===Fe.fname?De.power.equals(1)&&(ee=(Se=Vt.integration.decompose_arg(Fe.args[0],n))[0],K=Se[1],D=Fe.args[0].toString(),t=pt.parse(yt(\"(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)\",ee,K,D))):t=Vt.integration.by_parts(ce,n,ut,lt)):Pe===qt&&ke===St?(h=Be===xt?Vt.integration.decompose_arg(Fe.args[0],n)[1]:null,t=Fe.isE()&&(Fe.power.group===St||Fe.power.group===Et)&&De.power.equals(-1)?pt.symfunction(\"Ei\",[Fe.power.clone()]):Be===xt&&h.value===De.value?Vt.integration.poly_integrate(Fe,n,ut):Vt.integration.by_parts(ce,n,ut,lt)):Pe===Mt&&ke===St?(ce=De.value===Fe.value&&Fe.power.equals(-1)?(ae=Math.min.apply(null,ct.Utils.keys(Fe.symbols)),ue=Math.min(ae,De.power),(le=De.clone()).power=new ft(ue),De=pt.divide(De,le.clone()),We=new dt(0),Fe.each(function(e){We=pt.add(We,pt.divide(e.clone(),le.clone()))}),We.multiplier=Fe.multiplier,pt.divide(De,We)):pt.expand(ce),t=Vt.integration.partial_fraction(ce,n,ut)):Pe===Nt&&ke===St?(O=Fe.clone().toLinear(),pe=ct.Algebra.degree(O,pt.parse(n)).equals(1),Fe.power.equals(-.5)?(f=(Ve=Vt.integration.decompose_arg(Fe.clone().toLinear(),n))[0].negate(),h=Ve[1],c=Ve[3],xe=Number(Fe.power),Ae=Number(De.power),wt(Ae)&&ct.Utils.even(Ae)&&h.power.equals(2)?(Me=pt.divide(pt.multiply(pt.pow(c.clone(),new dt(2)),pt.symfunction(At,[pt.divide(c.clone(),f.clone())])),pt.pow(f.clone(),new dt(2))),Me=pt.multiply(Me,pt.symfunction(At,[c]).invert()),(fe=pt.parse(\"sin(u)\")).power=fe.power.multiply(De.power),R=Vt.integrate(fe,\"u\",ut),he=pt.parse(\"asin(sqrt(\"+f+\"/\"+c+\")*\"+n+\")\"),t=pt.multiply(Me,R.sub(new dt(\"u\"),he))):-.5===xe&&(me=function(e,t){t=pt.parse(Vt.integrate(e,n,ut,lt).sub(n,yt(t,n)));if(!t.hasIntegral())return t},-1===Ae?t=me(pt.expand(pt.expand(pt.pow(pt.multiply(Fe.invert(),De.invert()),new dt(2)))).invert(),\"sqrt(1-1/({0})^2)\"):-2===Ae&&(t=me(pt.sqrt(pt.expand(pt.divide(pt.pow(ce,new dt(2)).invert(),pt.pow(new dt(n),new dt(2))).negate())).invert(),\"sqrt(1-1/({0})^2)\")))):Fe.power.equals(-1)&&De.isLinear()&&pe?t=Vt.integration.partial_fraction(ce,n,ut):!Fe.power.lessThan(0)&&wt(Fe.power)?(ge=pt.expand(Fe),t=new dt(0),ge.each(function(e){e.group===Mt?e.each(function(e){t=pt.add(t,Vt.integrate(pt.multiply(De.clone(),e),n,ut))}):t=pt.add(t,Vt.integrate(pt.multiply(De.clone(),e),n,ut))})):Fe.power.lessThan(-2)?t=Vt.integration.by_parts(ce,n,ut,lt):Fe.power.lessThan(0)&&De.power.greaterThan(1)?(f=(Ve=Vt.integration.decompose_arg(Fe.clone().toLinear(),n))[0].negate(),h=Ve[1],c=Ve[3],l=Fe.clone().toLinear(),t=h.group!==Mt&&h.isLinear()?(s=Number(De.power),$e=new dt(Ce=\"_u_\"),de=pt.expand(pt.divide(pt.pow(pt.subtract($e.clone(),c.clone()),new dt(s)),$e.clone())),(ve={})[Ce]=l,we=pt.parse(de,ve),Vt.integrate(we,n,0)):De.power.greaterThan(h.power)||De.power.equals(h.power)?(ye=new ct.Algebra.Classes.Factors,Fe=ct.Algebra.Factor.coeffFactor(Fe.invert(),ye),(be=ct.Algebra.divide(De,Fe)).group!==Et?(t=new dt(0),be.each(function(e){t=pt.add(t,Vt.integrate(e,n,ut))}),ye.each(function(e){t=pt.divide(t,e)}),pt.expand(t)):Vt.integration.by_parts(ce,n,ut,lt)):Vt.integration.partial_fraction(ce,n,ut)):Fe.power.den.equals(2)?(f=(Se=Vt.integration.decompose_arg(Fe.clone().toLinear(),n))[3],h=Se[1],c=Se[0],je=Se[2],t=h.power.equals(2)&&c.lessThan(0)?(f.equals(1)||(ne=pt.multiply(ne,pt.pow(f,new dt(2)))),$e=n,Me=pt.divide(pt.pow(c.clone().negate(),new dt(.5)),pt.pow(f,new dt(.5))),Ce=pt.symfunction(Lt,[new dt($e)]),Ne=pt.pow(pt.symfunction(Lt,[new dt($e)]),new dt(Fe.power.num)),Ee=pt.pow(pt.symfunction(Ct,[new dt($e)]),new dt(De.power)),qe=pt.multiply(pt.multiply(Ne,Ce),Ee),(R=Vt.integrate(qe,$e,ut)).sub($e,pt.symfunction(Ot,[pt.multiply(new dt(n),Me)]))):Vt.integration.partial_fraction(ce,n,ut,lt)):pe&&(t=Vt.integration.partial_fraction(ce,n,ut))):Fe.isComposite()&&De.isComposite()?(t=new dt(0),Fe.power.greaterThan(0)&&De.power.greaterThan(0)?(Je=pt.expand(ce)).each(function(e){t=pt.add(t,Vt.integrate(e,n,ut))},!0):(xe=Number(Fe.power),Ae=Number(De.power),xe<0&&0<Ae&&(We=Fe,Fe=De,De=We),-1===xe&&-1===Ae?t=Vt.integration.partial_fraction(ce,n):Fe.each(function(e){e=pt.multiply(e,De.clone()),e=Vt.integrate(e,n,ut);t=pt.add(t,e)}))):Pe===Nt&&ie[0].power.greaterThan(0)?(Fe=pt.expand(Fe),t=new dt(0),Fe.each(function(e){t=pt.add(t,Vt.integrate(pt.multiply(e,De.clone()),n,ut))},!0)):Pe===gt&&ke===qt&&ct.Utils.in_htrig(Fe.fname)?(Fe=Fe.fnTransform(),t=Vt.integrate(pt.expand(pt.multiply(Fe,De)),n,ut)):Pe===gt&&ke===Nt||ke===gt&&Pe===Nt?(ke===gt&&Pe===Nt&&(We=Fe,Fe=De,De=We),Ce=dt.unwrapSQRT(Vt.diff(Fe.clone(),n),!0),Le=dt.unwrapSQRT(De,!0),Ce.power.equals(Le.power)?(s=new dt(De.power),Ue=Ce.clone().toLinear(),_e=De.clone().toLinear(),(Ie=ct.Algebra.divide(Ue.toLinear(),_e)).isConstant()&&(Re=pt.pow(Ie,s.negate()),t=pt.multiply(Re,Vt.integration.poly_integrate(Fe.clone())))):t=Vt.integration.by_parts(ce,n,ut,lt)):(Oe=Fe.clone().toLinear(),Te=De.clone().toLinear(),t=Pe===qt&&ke===qt&&Fe.power.contains(n)&&De.power.contains(n)&&!Oe.contains(n)&&!Te.contains(n)?pt.parse(yt(\"(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))\",Oe.toString(),Te.toString(),Fe.power.multiplier.toString(),De.power.multiplier.toString(),n)):Vt.integration.by_parts(ce,n,ut,lt))}}else if(3===se&&(ie[2].group===St&&ie[2].power.lessThan(2)||ie[0].group===Nt)){var nt,rt=ie[0];rt.group===Nt?(rt.power.greaterThan(1)&&(rt=pt.expand(rt)),nt=pt.multiply(ie[1],ie[2]),t=new dt(0),rt.each(function(e){e=pt.multiply(e,nt.clone()),e=Vt.integrate(e,n,ut);t=pt.add(t,e)},!0)):t=Vt.integration.by_parts(ce,n,ut,lt)}else if(Bt(ie)){for(var We=new dt(1),it=0,se=ie.length;it<se;it++)We=pt.multiply(We,ie[it].fnTransform());We=pt.expand(We),t=Vt.integrate(We,n,ut)}else{var st=Gt(ie);t=Vt.integrate(pt.expand(st),n,ut)}}t=pt.multiply(t,ne)}}else t=pt.multiply(ce.clone(),pt.parse(n));if(t)return t}catch(e){if(!(e instanceof Dt||e instanceof ct.exceptions.DivisionByZero))throw e}return pt.symfunction(\"integrate\",[ot,at])},!1))},defint:function(e,t,n,r){r=r||\"x\";function i(t,e,n){try{return pt.parse(t,e)}catch(e){return Vt.Limit.limit(t,r,n)}}var s,o,a=ct.Utils.variables(e),u=e.hasTrig();return 1!==a.length||r||(r=a[0]),u||(s=Vt.integrate(e,r)),u||s.hasIntegral()?1===a.length&&t.isConstant()&&n.isConstant()?(o=ct.Utils.build(e),new dt(ct.Math2.num_integrate(o,Number(t),Number(n)))):pt.symfunction(\"defint\",[e,t,n,r]):(o={},(e={})[r]=n,o[r]=t,n=i(s,e,n),t=i(s,o,t),pt.subtract(n,t))},Limit:{interval:function(e,t){return pt.parse(yt(\"[{0}, {1}]\",e,t))},diverges:function(){return Vt.Limit.interval(\"-Infinity\",\"Infinity\")},divide:function(e,t,n,r,i){if(!(i++>ht.max_lim_depth)){e.clone();var s=t.clone();if(\"abs\"===t.fname){var o=e.sign(),a=r.sign();if(r.isInfinity)return pt.multiply(new dt(o),new dt(a));if(r.equals(0)){var a=pt.parse(e.multiplier),u=pt.parse(t.multiplier);return pt.divide(pt.multiply(a,Vt.Limit.interval(\"-1\",\"1\")),u)}Vt.Limit.diverges()}var l=function(e){if(ct.Utils.isVector(e)){for(var t=0;t<e.elements.length;t++)if(!e.elements[t].isInfinity)return!1;return!0}return e.isInfinity},c=function(e,t){return!ct.Utils.isVector(e)&&e.equals(t)};do{var p,f,h=k(Vt.Limit.limit(e.clone(),n,r,i)),m=k(Vt.Limit.limit(t.clone(),n,r,i)),g=l(h)&&l(m)||c(h,0)&&c(m,0)}while(g&&(p=Vt.diff(e.clone(),n),f=Vt.diff(t.clone(),n),e=(f=pt.expand(pt.divide(p,f))).getNum(),t=f.getDenom()),g);u=m.equals(0),s=Number(s.power);return r.isConstant(!0)&&u?dt.infinity(ct.Utils.even(s)&&h.lessThan(0)?-1:void 0):u?Vt.Limit.diverges():pt.divide(h,m)}},rewriteToLog:function(e){var t=e.power.clone();return e.toLinear(),pt.pow(new dt(\"e\"),pt.multiply(t,pt.symfunction(ht.LOG+\"\",[e])))},getSubbed:function(t,e,n){var r;t.group===qt&&(t=Vt.rewriteToLog(t));try{r=t.sub(e,n)}catch(e){r=t}return r},isInterval:function(e){return ct.Utils.isVector(e)},isConvergent:function(e){return!(Vt.Limit.isInterval(e)&&e.elements[0].isInfinity&&e.elements[1].isInfinity||e.containsFunction(\"limit\"))},limit:function(t,n,r,i){if(t.isLinear()&&t.isComposite()){var s=new dt(0);return t.each(function(e){s=pt.add(s,Vt.Limit.limit(e,n,r,i))},!0),s}if(t=ct.Algebra.Simplify.simplify(t),i=i||1,!(i++>ht.max_lim_depth)){var e=pt.parse(t.multiplier);t.toUnitMultiplier();try{if(t.isConstant(!0))d=t;else{var o={};o[n]=r;try{var a=pt.parse(t.sub(n,r),o);(a.isConstant(!0)||a.isInfinity)&&(d=a)}catch(e){}if(!d){var u,l=t.getNum(),c=t.getDenom();if(c.isConstant(!0)){if(t.group===qt){var p,f,h,m,g,d,v=t.clone().toLinear(),w=(t.power.clone(),v.getNum()),y=v.getDenom(),b=ct.Utils.decompose_fn(y,n,!0);d=w.group===St&&w.multiplier.isOne()&&b.ax.group===St&&b.b.isConstant(!0)&&b.a.isOne()&&b.b.isConstant(!0)?pt.parse(yt(\"(1/e^({0}))\",b.b)):(f=(p=Vt.Limit.rewriteToLog(t.clone())).power.clone(),h=p.clone().toLinear(),m=Vt.Limit.limit(h,n,r,i),g=Vt.Limit.limit(f,n,r,i),pt.pow(m,g))}else if(t.group===gt&&1===t.args.length){var S,M=Vt.Limit.limit(t.args[0],n,r,i);if(ct.Utils.isVector(M))return d=M.map(function(e){return t.clone().args[0]=e,Vt.Limit.limit(pt.symfunction(t.fname,[e]),n,r,i)}),pt.multiply(e,d);if(M.isConstant(!0)){var N=pt.symfunction(t.fname,[M]);try{k(N),S=!0}catch(e){S=!1}}if(S)d=N;else if(Vt.Limit.isConvergent(M))if(t.fname===xt)switch(M.toString()){case\"0\":d=dt.infinity().negate();break;case\"Infinity\":case\"-Infinity\":d=dt.infinity()}else if(t.fname!==Lt&&t.fname!==Ct||!r.isInfinity){if(t.fname===It){var E=t.args[0],q=E.getNum(),x=E.getDenom(),A=q.toUnitMultiplier();(r.isInfinity||A.equals(\"pi\")&&x.equals(2))&&(d=divergent())}else if(t.fname===ht.FACTORIAL&&M.isInfinity)return dt.infinity()}else d=Vt.Limit.interval(-1,1)}else if(t.group===St){if(0<t.power)return pt.parse(t,o);d=ct.Utils.even(t.power)?dt.infinity():Vt.Limit.diverges()}else if(t.group===Et){for(var v=(U=t.collectSymbols().sort(function(e,t){return e.group-t.group})).pop(),C=k(Vt.Limit.limit(v,n,r,i));U.length;){var L=U.pop(),I=k(Vt.Limit.limit(L,n,r,i));C.isInfinity||!Vt.Limit.isConvergent(C)&&I.equals(0)||C.equals(0)&&Vt.Limit.isConvergent(I)?((L=L.containsFunction(xt)?[v,v=L][0]:L).invert(),C=C.isInfinity&&I.isInfinity?dt.infinity():Vt.Limit.divide(v,L,n,r,i)):(C=pt.multiply(C,I),v=pt.multiply(v,L))}d=C}else if(t.isComposite()){t.isLinear()||(t=pt.expand(t)),d=new dt(0);for(var U=t.collectSymbols().sort(function(e,t){return t.group-e.group}),_=[],R=new dt(0),O=0,T=U.length;O<T;O++)(P=U[O].clone()).group===gt||P.group===Et&&P.hasFunc()?R=pt.add(R,P):_.push(P);_.unshift(R),1!==_.length&&(U=_);for(O=0,T=U.length;O<T;O++){var P=U[O];try{u=Vt.Limit.limit(P,n,r,i)}catch(e){u=Vt.Limit.diverges()}try{d=pt.add(d,u)}catch(e){if(i++>ht.max_lim_depth)return;d=Vt.Limit.limit(Vt.diff(t,n),n,r,i)}}}}else d=Vt.Limit.divide(l,c,n,r,i)}}d=d||pt.symfunction(\"limit\",[t,n,r])}catch(e){d=pt.symfunction(\"limit\",[t,n,r])}return pt.multiply(e,d)}}},Fresnel:{S:function(e){return e.isConstant(!0)?Vt.defint(pt.parse(\"sin(pi*x^2/2)\"),dt(0),e,\"x\"):pt.symfunction(\"S\",arguments)},C:function(e){return e.isConstant(!0)?Vt.defint(pt.parse(\"cos(pi*x^2/2)\"),dt(0),e,\"x\"):pt.symfunction(\"C\",arguments)}}};nerdamer.register([{name:\"diff\",visible:!0,numargs:[1,3],build:function(){return Vt.diff}},{name:\"sum\",visible:!0,numargs:4,build:function(){return Vt.sum}},{name:\"product\",visible:!0,numargs:4,build:function(){return Vt.product}},{name:\"integrate\",visible:!0,numargs:[1,2],build:function(){return Vt.integrate}},{name:\"defint\",visible:!0,numargs:[3,4],build:function(){return Vt.defint}},{name:\"S\",visible:!0,numargs:1,build:function(){return Vt.Fresnel.S}},{name:\"C\",visible:!0,numargs:1,build:function(){return Vt.Fresnel.C}},{name:\"limit\",visible:!0,numargs:[3,4],build:function(){return Vt.Limit.limit}}]),nerdamer.api()}(), true&&(nerdamer=__webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\"),__webpack_require__(/*! ./Calculus.js */ \"./src/nerdamer/Calculus.js\"),__webpack_require__(/*! ./Algebra.js */ \"./src/nerdamer/Algebra.js\")),function(){var t,G=nerdamer.getCore(),V=G.PARSER,H=G.Algebra,j=G.Calculus,Z=j.integration.decompose_arg,X=G.Utils.evaluate,E=G.Utils.remove,c=G.Utils.format,$=G.Utils.build,f=G.Utils.knownVariable,z=G.Symbol,Q=G.Utils.isSymbol,l=G.Utils.variables,Y=G.groups.S,W=G.groups.PL,J=G.groups.CB,K=G.groups.CP,ee=G.groups.FN,te=G.Settings,s=G.Utils.range,ne=G.Utils.isArray;function re(e,t){if(t.isConstant()&&e.isConstant()&&!e.equals(t)||e.equals(G.Settings.IMAGINARY)||t.equals(G.Settings.IMAGINARY))throw new G.exceptions.NerdamerValueError(e.toString()+\" does not equal \"+t.toString());this.LHS=e,this.RHS=t}G.Settings.SOLVE_RADIUS=1e3,G.Settings.ROOTS_PER_SIDE=10,G.Settings.make_pi_conversions=!1,G.Settings.STEP_SIZE=.1,G.Settings.EPSILON=1e-13,G.Settings.MAX_NEWTON_ITERATIONS=200,G.Settings.MAX_NON_LINEAR_TRIES=12,G.Settings.NON_LINEAR_JUMP_AT=50,G.Settings.NON_LINEAR_JUMP_SIZE=100,G.Settings.NON_LINEAR_START=.01,G.Settings.NEWTON_SLICES=200,G.Settings.NEWTON_EPSILON=2*Number.EPSILON,G.Settings.SOLUTION_PROXIMITY=1e-14,G.Settings.FILTER_SOLUTIONS=!0,G.Settings.MAX_SOLVE_DEPTH=10,G.Settings.ZERO_EPSILON=1e-9,G.Settings.MAX_BISECTION_ITER=2e3,G.Settings.BI_SECTION_EPSILON=1e-12,G.Symbol.prototype.hasTrig=function(){return this.containsFunction([\"cos\",\"sin\",\"tan\",\"cot\",\"csc\",\"sec\"])},G.Symbol.prototype.hasNegativeTerms=function(){if(this.isComposite())for(var e in this.symbols){var t=this.symbols[e];if(t.group===W&&t.hasNegativeTerms()||this.symbols[e].power.lessThan(0))return!0}return!1},re.prototype={toString:function(){return this.LHS.toString()+\"=\"+this.RHS.toString()},text:function(e){return this.LHS.text(e)+\"=\"+this.RHS.text(e)},toLHS:function(e){var t=(n=(e=void 0===e)?this.removeDenom():this.clone()).LHS,n=n.RHS;t.isConstant(!0)&&!n.isConstant(!0)&&([t,n]=[n,t]);n=V.subtract(t,n);return e?V.expand(n):n},removeDenom:function(){var e=this.LHS.clone(),t=this.RHS.clone(),n=V.multiply(e.getDenom(),t.getDenom());if(e=V.expand(V.multiply(e,n.clone())),(t=V.expand(V.multiply(t,n))).group===K&&t.group!==K&&(r=e,e=t,t=r),e.group===J){var r=new z(e.multiplier),i=t.clone();e.each(function(e){e.power.lessThan(0)?i=V.divide(i,e):r=V.multiply(r,e)}),e=r,t=i}else if(e.group===K)for(var s in e.symbols){var o=e.symbols[s];if(o.group===J)for(var a in o.symbols){a=o.symbols[a];if(a.power.lessThan(0))return new re(V.expand(V.multiply(a.clone().toLinear(),e)),V.expand(V.multiply(a.clone().toLinear(),t)))}}return new re(e,t)},clone:function(){return new re(this.LHS.clone(),this.RHS.clone())},sub:function(e,t){var n=this.clone();return n.LHS=n.LHS.sub(e.clone(),t.clone()),n.RHS=n.RHS.sub(e.clone(),t.clone()),n},isZero:function(){return G.Utils.evaluate(this.toLHS()).equals(0)},latex:function(e){return[this.LHS.latex(e),this.RHS.latex(e)].join(\"=\")}},V.equals=function(e,t){return new re(e,t)},t=V.functions.simplify[0],V.functions.simplify[0]=function(e){return e instanceof re?(e.LHS=t(e.LHS),e.RHS=t(e.RHS),e):t(e)},G.Expression.prototype.equals=function(e){return e instanceof G.Expression&&(e=e.symbol),new re(this.symbol,e)},G.Expression.prototype.solveFor=function(e){var t;if(this.symbol instanceof re){if(this.symbol.LHS.isConstant()&&this.symbol.RHS.equals(e))return new G.Expression(this.symbol.LHS);if(this.symbol.RHS.isConstant()&&this.symbol.LHS.equals(e))return new G.Expression(this.symbol.RHS);t=this.symbol.toLHS()}else t=this.symbol;return oe(t,e).map(function(e){return new G.Expression(e)})},G.Expression.prototype.expand=function(){if(this.symbol instanceof re){var e=this.symbol.clone();return e.RHS=V.expand(e.RHS),e.LHS=V.expand(e.LHS),new G.Expression(e)}return new G.Expression(V.expand(this.symbol))},G.Expression.prototype.variables=function(){return this.symbol instanceof re?G.Utils.arrayUnique(l(this.symbol.LHS).concat(l(this.symbol.RHS))):l(this.symbol)};function e(e,t){return V.equals(e,t)}G.Equation=re;var ie=G.Utils.checkAll=function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return!1;return!0},se=G.Solve={version:\"2.0.3\",solutions:[],solve:function(e,t){t=oe(e,String(t));return new G.Vector(t)},toLHS:function(e,t){return Q(e)?e:(e instanceof re||((n=e.split(\"=\"))[1]=n[1]||\"0\",e=new re(V.parse(n[0]),V.parse(n[1]))),e.toLHS(t));var n},solveCircle:function(e,t){for(var n=t.map(function(e){return V.parse(e)}),r=[],i=[],s=0;s<e.length;s++){for(var o=[],a=0;a<n.length;a++)o.push(Number(G.Algebra.degree(e[s],n[a])));o.push(G.Utils.arraySum(o,!0)),r.push(o)}var u,l,c=e[0],p=e[1];return r[0][2]>r[1][2]&&([p,c]=[c,p],[r[1],r[0]]=[r[0],r[1]]),1===r[0][0]&&2===r[0][2]&&2===r[1][0]&&4===r[1][2]&&(u=t[0],l=t[1],t=oe(V.parse(p,f(u,oe(V.parse(c),u)[0])),l).map(function(e){return e.toString()}),p=[oe(V.parse(c,f(l,t[0])))[0].toString()],t[1]&&p.push(oe(V.parse(c,f(l,t[1])))[0].toString()),te.SOLUTIONS_AS_OBJECT?((i={})[u]=p,i[l]=t):(t.unshift(l),p.unshift(u),i=[p,t])),i},solveNonLinearSystem:function(e,t,r){if(t<0)return[];r=void 0===r?G.Settings.NON_LINEAR_START:r;var i=G.Settings.MAX_NON_LINEAR_TRIES,s=Math.floor(i/2);t=void 0===t?i:t;var o,a,u,l,c,p=G.Settings.NON_LINEAR_JUMP_AT,f=G.Settings.NON_LINEAR_JUMP_SIZE,h=!0,m=G.Utils.arrayGetVariables(e),i=G.Matrix.jacobian(e,m,function(e){return $(e,m)},!0),g=G.Settings.MAX_NEWTON_ITERATIONS,d=e.map(function(e){return $(e,m)}),v=i.map(function(e){return $(e,m)},!0),w=G.Matrix.cMatrix(0,m),y=G.Matrix.cMatrix(r,m),b=0;do{if(g<b)break;o=function(e,n){return e.map(function(e,t){return Number(n.get(t,0))})}(m,y),l=y.clone(),d.forEach(function(e,t){y.set(t,0,e.apply(null,o))});var S=new G.Matrix;if(v.each(function(e,t,n){e=e.apply(null,o);S.set(t,n,e)}),S=S.invert(),c=(a=V.multiply(S,y).negate()).subtract(w,function(e){return V.parse(Number(e))}),w=l.add(a,function(e){return V.parse(Number(e))}),y=w,p<=b&&1<u){t===s&&(r=0);var M=s<t?1:-1;return n=t%Math.floor(s)+1,r+=M*n*f,se.solveNonLinearSystem(e,--t,r)}}while((M=u,b++,u=c.max(),Number(u)!==Number(M))&&Number(u)>=Number.EPSILON);return h?se.systemSolutions(y,m,!0,function(e){return G.Utils.round(Number(e),14)}):[]},systemSolutions:function(e,r,i,s){var o=G.Settings.SOLUTIONS_AS_OBJECT?{}:[];return e.each(function(e,t){var n=(i?V.expand(e):e).valueOf();s&&(n=s.call(e,n));t=r[t];G.Settings.SOLUTIONS_AS_OBJECT?o[t]=n:o.push([t,n])}),o},solveSystemBySubstitution:function(e){var t=l(e[0]),n=l(e[1]);return 2===e.length&&2===t.length&&G.Utils.arrayEqual(t,n)?se.solveCircle(e,t):[]},solveSystem:function(e,t){for(var n=0;n<e.length;n++)e[n]=se.toLHS(e[n]);var r,i=e.length,s=new G.Matrix,o=new G.Matrix,a=!1;if(void 0===t){if(!H.allLinear(e))try{return se.solveNonLinearSystem(e)}catch(h){if(h instanceof G.exceptions.DivisionByZero)return se.solveSystemBySubstitution(e)}if((r=G.Utils.arrayGetVariables(e)).length<e.length){for(var u=[],l=e.length,n=0;n<l-1;n++)u.push(V.parse(e[n]));var c={},p=se.solveSystem(u,r);Array.isArray(p)?p.forEach(function(e){c[e[0]]=e[1]}):c=p;for(var f=!0,n=l-1;n<l;n++)V.parse(e[n],c).equals(0)||(f=!1);if(f)return p}for(n=0;n<r.length;n++)nerdamer.setVar(r[n],\"delete\");for(n=0;n<i;n++){for(var h=e[n],m=0;m<r.length;m++){var g=r[m],d=[];h.each(function(e){e.contains(g)&&(d=d.concat(e.coeffs()))});var v=G.Utils.arraySum(d);s.set(n,m,v)}var w=h.clone();r.map(function(e){w=w.stripVar(e,!0)}),o.set(n,0,w.negate())}}else for(r=t,a=!0,n=0;n<i;n++){o.set(n,0,new z(0));for(h=V.expand(e[n]).collectSymbols(),m=0;m<t.length;m++){s.set(n,m,new z(0));for(var g=t[m],y=0;y<h.length;y++){for(var b,S=h[y],M=!1,N=0;N<t.length;N++)S.contains(t[N])&&(M&&G.err(\"Multiple variables found for term \"+S),M=!0);S.contains(g)&&(b=Z(E(h,y),g),s.set(n,m,V.add(s.get(n,m),b[0])))}}for(y=0;y<h.length;y++)o.set(n,0,V.add(o.get(n,0),h[y]))}if(r.length!==e.length||s.determinant().equals(0))throw new G.exceptions.SolveError(\"System does not have a distinct solution\");p=(s=s.invert()).multiply(o);return G.Utils.isArray(t)&&p.each(function(e){return e.negate()}),se.systemSolutions(p,r,a)},quad:function(e,t,n){e=V.subtract(V.pow(t.clone(),z(2)),V.multiply(V.multiply(n.clone(),e.clone()),z(4))),e=V.pow(e,z(.5)),n=V.parse(V.multiply(new z(2),n.clone()));return[V.parse(c(\"(-({0})+({1}))/({2})\",t,e,n)),V.parse(c(\"(-({0})-({1}))/({2})\",t,e,n))]},cubic:function(e,t,n,r){r=r.text(),n=n.text(),t=t.text(),e=`(-(${n})^3/(27*(${r})^3)+(${n})*(${t})/(6*(${r})^2)-(${e.text()})/(2*(${r})))`,t=`((${t})/(3*(${r}))-(${n})^2/(9*(${r})^2))`,n=`((${e})+sqrt((${e})^2+(${t})^3))^(1/3)+((${e})-sqrt((${e})^2+(${t})^3))^(1/3)-(${`(${n})/(3*(${r}))`})`,r=\"1/2+sqrt(3)/2*i\";return[V.parse(n),V.parse(`(${n})(${r})`),V.parse(`(${n})(${r})^2`)]},quartic:function(e,t,n,r,i){var s,o,a,u={};return G.Utils.arrayUnique(l(i).concat(l(r)).concat(l(n)).concat(l(t)).concat(l(e))).map(function(e){u[e]=1}),i=i.toString(),r=r.toString(),n=n.toString(),t=t.toString(),e=e.toString(),s=V.parse(c(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\",i,r,n)).toString(),o=V.parse(c(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\",i,r,n,t)).toString(),a=V.parse(c(\"12*({0})*({4})-3*({1})*({3})+({2})^2\",i,r,n,t,e)).toString(),e=V.parse(c(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\",i,r,n,t,e)).toString(),e=V.parse(c(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\",a,e)).toString(),Y=V.parse(c(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\",i,s,e,a)).toString(),[V.parse(c(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\",i,r,s,o,Y)),V.parse(c(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\",i,r,s,o,Y)),V.parse(c(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\",i,r,s,o,Y)),V.parse(c(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\",i,r,s,o,Y))]},divideAndConquer:function(e,t){var n=[],e=G.Algebra.Factor.factor(e);return e.group===J&&e.each(function(e){e=z.unwrapPARENS(e),n=n.concat(oe(e,t))}),n},csolve:function(u,l){return G.Utils.block(\"IGNORE_E\",function(){var e=[],t=G.Utils.decompose_fn(u,l,!0);if(t.x.group===Y)for(var n,r=V.parse(t.x.power),i=Number(r),s=V.pow(V.divide(t.b.negate(),t.a),r.invert()),s=(t=z.toPolarFormArray(s))[0],o=(t[1],s.toString()),a=(r.toString(),0);a<i;a++)n=c(\"({0})*e^(2*{1}*pi*{2}*{3})\",o,a,r,G.Settings.IMAGINARY),n=V.parse(n),e.push(n);return e},!0)},getPoints:function(e,t,u){t=t||.01,u=u||[];var l=$(e),n=Math.round(0),r=l(n),c=r/Math.abs(r),i=G.Settings.ROOTS_PER_SIDE,r=i;u.push(Math.floor(n/2)),u.push(Math.abs(n)),u.push(n),e.each(function(e){e.containsFunction(G.Settings.LOG)&&u.push(.1)});e=s(-G.Settings.SOLVE_RADIUS,n,t),n=s(n,G.Settings.SOLVE_RADIUS,t),t=function(e,t){for(var n,r,i,s=[],o=0,a=e.length;o<a;o++)n=e[o],i=(r=l(n))/Math.abs(r),isNaN(r)||!isFinite(r)||s.length>t||(i!==c&&s.push(n),c=i);u=u.concat(s)};return t(e,r),t(n,i),u},bisection:function(e,t){var n=e-1,r=e+1;if(Math.sign(t(n))!==Math.sign(t(r))){var i,s,o=0;do{if(i=Math.abs(r-n),o++>G.Settings.MAX_BISECTION_ITER||isNaN(i))return}while(s=(n+r)/2,0<t(n)*t(s)?n=s:r=s,i>=te.EPSILON);var a=(n+r)/2,e=t(a);if(!isNaN(e)&&Math.abs(e)<=G.Settings.BI_SECTION_EPSILON)return G.Utils.round(a,13)}},Newton:function(e,t,n){var r=G.Settings.MAX_NEWTON_ITERATIONS,i=0,s=e;do{var o=t(s);if(0===s&&0===o){a=0;break}if(r<++i)return;var a=s-o/n(s),o=Math.abs(a-s),s=a}while(o>te.NEWTON_EPSILON);if(Math.abs(t(a))<=te.EPSILON)return a},rewrite:function(e,t,n){var r,i;t=t||new z(0),e.isComposite()&&e.isLinear()?(r=[],i=[],e.each(function(e){(\"sqrt\"===(e=e.clone()).fname&&e.contains(n)?r:i).push(e)},!0),1===r.length&&(t=V.expand(V.pow(V.subtract(t,G.Utils.arraySum(i)),new z(2))),e=V.expand(V.pow(z.unwrapSQRT(r[0]),new z(2))))):e=z.unwrapSQRT(V.expand(e));var s=0,o=e.length;if(e.group===K&&e.contains(n)&&e.isLinear()){e.distributeMultiplier();var a=new z(0);return e.each(function(e){e.contains(n)?(s++,a=V.add(a,e.clone())):t=V.subtract(t,e.clone())}),e=a,s!==o?se.rewrite(e,t,n):[e,t]}if(e.group===J&&e.contains(n)&&e.isLinear()){if(e.multiplier.lessThan(0)&&(e.multiplier=e.multiplier.multiply(new G.Frac(-1)),t.multiplier=t.multiplier.multiply(new G.Frac(-1))),t.equals(0))return new z(0);a=new z(1);return e.each(function(e){e.contains(n)?a=V.multiply(a,e.clone()):t=V.divide(t,e.clone())}),se.rewrite(e=a,t,n)}if(!e.isLinear()&&e.contains(n)){o=V.parse(e.power.clone().invert());return e=V.pow(e,o.clone()),t=V.pow(V.expand(t),o.clone()),se.rewrite(e,t,n)}if(e.group===ee||e.group===Y||e.group===W)return[e,t]},sqrtSolve:function(n,r){var t=new z(0),i=new z(0);if(n.isComposite()&&(n.each(function(e){\"sqrt\"===e.fname&&e.contains(r)?t=V.add(t,e.clone()):i=V.add(i,e.clone())}),!t.equals(0))){var e=V.expand(V.multiply(V.parse(n.multiplier),V.subtract(V.pow(i,new z(2)),V.pow(t,new z(2)))));return oe(e,r).filter(function(e){if(e.isImaginary())return e;var t={};return t[r]=e,X(n,t).equals(0)?e:void 0})}}},oe=function(n,p,i,t,e){if(t=t||0,t++>te.MAX_SOLVE_DEPTH)return i;if(n instanceof re){if(n.isZero())return[new z(0)];if(n.LHS.equals(p)&&!n.RHS.contains(p))return[n.RHS];if(n.RHS.equals(p)&&!n.LHS.contains(p))return[n.LHS]}if(n instanceof G.Vector&&(n=n.elements),p=p||\"x\",ne(n))return se.solveSystem.apply(void 0,arguments);i=i||[];var s={},r={};if(r[p]=0,Q(n)&&!0===X(n.getDenom(),r).equals(0))return i;var o=function(e,t){var n,r=Q(e);void 0===e||\"number\"==typeof e&&isNaN(e)||(ne(e)?e.forEach(function(e){o(e)}):\"null\"!==e.valueOf()&&(\"function\"==typeof G.Settings.PRE_ADD_SOLUTION&&(e=G.Settings.PRE_ADD_SOLUTION(e)),r||(e=V.parse(e)),G.Settings.make_pi_conversions&&t&&(r=(n=V.divide(e.clone(),new z(Math.PI))).multiplier,t=Math.abs(r.num),r=Math.abs(r.den),t<10&&r<10&&(e=V.multiply(n,new z(\"pi\")))),n=e.toString(),s[n]||i.push(e),s[n]=!0))};if(n.group===Y&&n.contains(p)){try{var a={};a[p]=0,X(e,a,\"numer\"),o(new z(0))}catch(e){}return i}if(n.group===J){var u=n.getNum();if(u.group!==J)return oe(u,p,i,t,e);var l=String(p);return u.each(function(e){e.contains(l)&&oe(e,p,i,t,n)}),i}n.group===ee&&\"sqrt\"===n.fname&&(n=V.pow(z.unwrapSQRT(n),new z(2)));var c=(G.Utils.isSymbol(n)?n:se.toLHS(n,!1)).getNum(),r=G.Utils.variables(c),a=r.length;if((c=G.Utils.isInt(c.power)&&0<c.power?V.parse(c).toLinear():c).group===Y||c.group===J&&c.contains(p))return[new z(0)];function f(e){var t=new z(0),n=new z(0);return e.each(function(e){e.contains(p,!0)?t=V.add(t,e.clone()):n=V.subtract(n,e.clone())}),[t,n]}var h,m={},g=function(n){var e=(n=V.expand(n,{expand_denominator:!0,expand_functions:!0})).clone();if(n.symbols)for(var t in n.symbols){var r=n.symbols[t],i=r.getDenom();if(!i.isConstant(!0)&&n.isComposite()){var s=new z(0);return n.each(function(e){s=V.add(s,V.multiply(e,i.clone()))}),g(V.multiply(V.parse(n.multiplier),s))}var o=Z(r,p),a=o[1].fname===G.Settings.SQRT,u=z.unwrapSQRT(o[1]),t=u.power.clone();if(!Q(t)&&!t.equals(.5))if(t.den.gt(1)){if(a)return n=V.subtract(n,r.clone()),n=V.add(n,V.multiply(o[0].clone(),u)),g(n);u=m[t.den];m[t.den]=u?u++:1}else{if(-1===t.sign()){var l=V.parse(p+\"^\"+Math.abs(t));return n.each(function(e,t){e.contains(p)&&(n.symbols[t]=V.multiply(e,l.clone()))}),m={},g(V.parse(n))}if(r.group===W){r=G.Utils.arrayMin(G.Utils.keys(r.symbols));if(r<0){var l=V.parse(p+\"^\"+Math.abs(r)),c=new z(0);return e.each(function(e){c=V.add(c,V.multiply(e.clone(),l.clone()))},!0),c}}}}return n};if(se.inverseFunctionSolve=function(e,t,n){var r=Z(t.args[0],p);if(r[1].group===Y)return V.divide(V.symfunction(e,[V.divide(n,V.parse(t.multiplier))]),r[0])},(c=g(c)).equals(0))return[c];var d,v,u=G.Utils.keys(m);if(1===u.length&&(h=u[0],c.each(function(e,t){var n,r;!e.contains(p)||(e=(r=(n=Z(e,p))[1]).power).den.gt(1)&&(r.power=e.multiply(new G.Frac(h)),c.symbols[t]=V.multiply(r,n[0]))}),c=V.parse(c)),o(se.sqrtSolve(c,p)),1===a)if(c.isPoly(!0)){var w=new G.Algebra.Classes.Factors;if(G.Algebra.Factor.factor(c,w),1<w.getNumberSymbolics())for(var y in w.factors)o(oe(w.factors[y],p));else{var b,S,M=(b=G.Utils.getCoeffs(c,p)).length-1,a=!1;r[0]===p&&(ie(b,function(e){return e.group!==G.groups.N})&&(r=G.Algebra.proots(c),ie(r,function(e){return!G.Utils.isInt(e)})&&(a=!0,r.map(function(e){o(new z(e))}))),a||((n=V.parse(n))instanceof G.Equation&&(n=n.toLHS()),1===M?o(V.divide(b[0],b[1].negate())):2===M?o(V.expand(se.quad.apply(void 0,b))):3===M?(i=[],S=G.Algebra.Factor.factor(n),0<(i=[]).length?o(i):o(se.cubic.apply(void 0,b))):H.proots(c).map(o)))}}else try{for(var N,E,q=c.hasTrig(),x=se.getPoints(c,.1),A=se.getPoints(c,.05),C=se.getPoints(c,.01),L=G.Utils.arrayUnique(x.concat(A).concat(C)).sort(function(e,t){return e-t}),I=$(c.clone()),U=[],_=0;_<L.length;_++)N=L[_],void 0!==(E=se.bisection(N,I))?o(E,q):U.push(N);var L=U,R=j.diff(c.clone()),O=$(R);for(_=0;_<L.length;_++)N=L[_],o(se.Newton(N,I,O),q);i.sort()}catch(e){console.log(e)}else if(!c.hasFunc(p)&&c.isComposite())try{if((S=G.Algebra.Factor.factor(c.clone())).group===J)S.each(function(e){o(oe(e,p))});else{switch(M=(b=G.Utils.getCoeffs(c,p)).length-1){case 0:var T,P=(T=f(c))[0],k=T[1];P.group===G.groups.EX&&o(V.parse(G.Utils.format(G.Settings.LOG+\"(({0})/({2}))/\"+G.Settings.LOG+\"({1})\",k,P.value,P.multiplier)));break;case 1:o(V.divide(b[0],b[1].negate()));break;case 2:o(se.quad.apply(void 0,b));break;case 3:o(se.cubic.apply(void 0,b));break;case 4:o(se.quartic.apply(void 0,b));break;default:o(se.csolve(c,p)),0===i.length&&o(se.divideAndConquer(c,p))}0===i.length&&o(oe(S,p,i,t))}}catch(e){}else try{var F,D=se.rewrite(c,null,p),P=D[0],k=D[1];if(P.group===ee)\"abs\"===P.fname?o([k.clone(),k.negate()]):\"sin\"===P.fname?o(se.inverseFunctionSolve(\"asin\",P,k)):\"cos\"===P.fname?o(se.inverseFunctionSolve(\"acos\",P,k)):\"tan\"===P.fname?o(se.inverseFunctionSolve(\"atan\",P,k)):P.fname===G.Settings.LOG?(y=(F=Z(P.args[0],p))[1]).group===Y&&(c=new re(y,k=V.divide(V.subtract(V.pow(1<P.args.length?P.args[1]:new z(\"e\"),V.divide(k,V.parse(P.multiplier))),F[3]),F[0])).toLHS(),o(oe(c,p))):o(V.subtract(P,k));else{var B=new re(P,k).toLHS();if(B.equals(c))throw new Error(\"Stopping. No stop condition exists\");o(oe(B,p))}}catch(e){try{c.group===J?o(0):c.group===K&&(P=(T=f(c))[0],k=T[1],P.group===G.groups.EX&&P.value===p&&(d=P.power.clone().invert(),o(V.pow(k,d))))}catch(e){}}return h&&(i=i.map(function(e){return V.pow(e,new z(h))})),Q(n)&&(v={},i=i.filter(function(e){try{v[p]=e;var t=Number(X(n,v));return isNaN(t)?!0:!0}catch(e){return!1}})),i};nerdamer.register([{name:\"solveEquations\",parent:\"nerdamer\",numargs:-1,visible:!0,build:function(){return oe}},{name:\"solve\",parent:\"Solve\",numargs:2,visible:!0,build:function(){return G.Solve.solve}},{name:\"setEquation\",parent:\"Solve\",visible:!0,build:function(){return e}}]),nerdamer.api()}(), true&&(nerdamer=__webpack_require__(/*! ./nerdamer.core.js */ \"./src/nerdamer/nerdamer.core.js\"),__webpack_require__(/*! ./Calculus */ \"./src/nerdamer/Calculus.js\"),__webpack_require__(/*! ./Algebra */ \"./src/nerdamer/Algebra.js\")),function(){\"use strict\";var x=nerdamer.getCore(),A=x.PARSER,C=x.Symbol,L=x.Utils.format,a=x.Utils.isVector,u=x.Utils.isArray,I=(x.Vector,x.groups.S),U=(x.groups.EX,x.groups.CP),_=x.groups.CB,l=x.groups.FN;x.Settings.Laplace_integration_depth=40,C.prototype.findFunction=function(e){if(this.group===l&&this.fname===e)return this.clone();var t;if(this.symbols)for(var n in this.symbols)if(t=this.symbols[n].findFunction(e))break;return t};var R=x.Extra={version:\"1.4.2\",LaPlace:{transform:function(n,r,i){n=n.clone(),r=r.toString();var e=(n=C.unwrapSQRT(n,!0)).stripVar(r),t=n.group;if((n=A.divide(n,e.clone())).isConstant()||!n.contains(r,!0))o=A.parse(L(\"({0})/({1})\",n,i));else if(t===I&&x.Utils.isInt(n.power))var s=String(n.power),o=A.parse(L(\"factorial({0})/({1})^({0}+1)\",s,i));else if(n.group===I&&n.power.equals(.5))o=A.parse(L(\"sqrt(pi)/(2*({0})^(3/2))\",i));else if(n.isComposite())o=new C(0),n.each(function(e){o=A.add(o,R.LaPlace.transform(e,r,i))},!0);else if(!n.isE()||n.power.group!==I&&n.power.group!==_)if(n.group!==l||-1===[\"sin\",\"cos\",\"sinh\",\"cosh\"].indexOf(n.fname)||n.args[0].group!==I&&n.args[0].group!==_){var a,s=x.Settings.integration_depth<x.Settings.Laplace_integration_depth;s&&(a=x.Settings.integration_depth,x.Settings.integration_depth=x.Settings.Laplace_integration_depth),x.Utils.block(\"PARSE2NUMBER\",function(){var e=r,t=n.sub(r,e),t=A.parse(\"e^(-\"+i+\"*\"+e+\")*\"+t);if((o=x.Calculus.integrate(t,e)).hasIntegral())return A.symfunction(\"laplace\",arguments);o=o.sub(r,0),o=(o=A.expand(A.multiply(o,new C(-1)))).sub(e,r)},!1),o=x.Utils.block(\"PARSE2NUMBER\",function(){return A.parse(o)},!0),s&&(x.Settings.integration_depth=a)}else{u=n.args[0].stripVar(r);switch(n.fname){case\"sin\":o=A.parse(L(\"({0})/(({1})^2+({0})^2)\",u,i));break;case\"cos\":o=A.parse(L(\"({1})/(({1})^2+({0})^2)\",u,i));break;case\"sinh\":o=A.parse(L(\"({0})/(({1})^2-({0})^2)\",u,i));break;case\"cosh\":o=A.parse(L(\"({1})/(({1})^2-({0})^2)\",u,i))}}else{var u=n.power.stripVar(r);o=A.parse(L(\"1/(({1})-({0}))\",u,i))}return A.multiply(o,e)},inverse:function(M,N,E){var q=M.clone();return x.Utils.block(\"POSITIVE_MULTIPLIERS\",function(){if((M=M.group===_?x.Algebra.PartFrac.partfrac(A.expand(M),N):M).group===I||M.group===_||M.isComposite()){var e,t,n,r,i,s,o,a,u,l,c,p,f,h,m,g=function(){(s=A.multiply(s,e)).multiplier=s.multiplier.multiply(M.multiplier),s=A.divide(s,r.a)},d=M.multiplier.clone();if(M.toUnitMultiplier(),e=M.getNum(),(t=M.getDenom().toUnitMultiplier()).group===U?(i=t.power.clone(),t.toLinear()):i=new x.Frac(1),n=N.toString(),r=x.Utils.decompose_fn(t,n,!0),x.Utils.decompose_fn(A.expand(e.clone()),n,!0),e.multiplier=e.multiplier.multiply(d),(t.group===I||t.group===_)&&r.x.value===n&&r.b.equals(0)&&x.Utils.isInt(r.x.power))p=r.x.power-1,f=x.Math2.factorial(p),s=A.divide(A.pow(E,new C(p)),new C(f)),g();else if(t.group===U&&i.equals(1))r.x.group===x.groups.PL&&x.Algebra.degree(t).equals(2)?(u=x.Algebra.sqComplete(t,n),l=x.Utils.getU(t),h=x.Utils.decompose_fn(u.a,n,!0).b,c=R.LaPlace.inverse(A.parse(`1/((${l})^2+(${u.c}))`),l,E),s=A.multiply(c,A.parse(`(${d})*e^(-(${h})*(${E}))`))):r.x.isLinear()&&!e.contains(n)?(E=A.divide(E,r.a.clone()),s=A.parse(L(\"(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))\",E,r.a,r.b,i,f=0===(p=i-1)||1===p?\"1\":`(${i}-1)!`)),g()):r.x.group===I&&r.x.power.equals(2)&&(e.contains(n)?(h=new C(1),e.group===_&&(o=new C(1),e.each(function(e){e.contains(n)?o=A.multiply(o,e):h=A.multiply(h,e)}),e=o),u=(a=x.Utils.decompose_fn(e,n,!0)).a,l=a.b,c=u.containsFunction(\"sin\"),p=u.containsFunction(\"cos\"),f=l.containsFunction(\"cos\"),g=l.containsFunction(\"sin\"),a.x.value===n&&a.x.isLinear()&&!(c&&f||p||g)?s=A.parse(L(\"(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})\",E,a.a,r.a,r.b)):c&&f&&(c=u.findFunction(\"sin\"),f=l.findFunction(\"cos\"),c.args[0].equals(f.args[0])&&!c.args[0].contains(n)&&(v=A.divide(l,f.toUnitMultiplier()).toString(),f=c.args[0].toString(),m=r.b,c=A.divide(u,c.toUnitMultiplier()),s=A.parse(L(\"(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))\",E,h,v,f,m,c))))):s=A.parse(L(\"(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))\",E,e,r.a,r.b)));else if(r.x.power.num&&r.x.power.num.equals(3)&&r.x.power.den.equals(2)&&e.contains(\"sqrt(pi)\")&&!e.contains(n)&&e.isLinear()){var v=A.divide(e.clone(),A.parse(\"sqrt(pi)\"));s=A.parse(L(\"(2*({2})*sqrt({0}))/({1})\",E,r.a,v,e))}else if(i.equals(2)&&r.x.power.equals(2))if(e.contains(n))if((a=x.Utils.decompose_fn(A.expand(e.clone()),n,!0)).x.isComposite()){var w=[],y=e.collectSymbols(function(e){e=C.unwrapPARENS(e);var t=x.Utils.decompose_fn(e,n,!0);return t.symbol=e,t}).sort(function(e,t){e=e.x.value!==n?0:e.x.power;return(t.x.value!==n?0:t.x.power)-e});h=new C(-1);for(var b=0;b<y.length;b++){var S=y[b];S.x.value===n?w.push(S):h=A.multiply(h,S.symbol)}w[0].x.power.equals(2)&&w[1].x.power.equals(1)&&w[1].b.equals(0)&&!w[0].b.equals(0)&&(v=w[0].a.negate(),s=A.parse(L(\"-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2\",E,h,v,w[0].b,r.a,r.b)))}else a.x.isLinear()?(h=A.divide(a.a,new C(2)),s=A.parse(L(\"(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))\",E,h,r.a,r.b))):a.x.power.equals(2)&&(s=a.b.equals(0)?(h=A.divide(a.a,new C(2)),A.parse(L(\"(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2\",E,h,r.a,r.b))):(h=A.divide(a.a,new C(2)),m=a.b.negate(),A.parse(L(\"-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2\",E,h,r.a,r.b,m))));else h=A.divide(e,new C(2)),s=A.parse(L(\"(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))\",E,h,r.a,r.b));else M.isComposite()&&(i.equals(2)&&r.x.group===I?s=A.parse(`(${d})*(${E})*e^(-(${r.b})*(${E}))`):(s=new C(0),M.each(function(e){s=A.add(s,R.LaPlace.inverse(e,N,E))},!0)))}return s=s||A.symfunction(\"ilt\",[q,N,E])},!0)}},Statistics:{frequencyMap:function(e){for(var t={},n=0,r=e.length;n<r;n++){var i=e[n].toString();t[i]||(t[i]=0),t[i]++}return t},sort:function(e){return e.sort(function(e,t){return e.isConstant()&&t.isConstant()||A.error(\"Unable to sort! All values must be numeric\"),e.multiplier.subtract(t.multiplier)})},count:function(e){return new C(e.length)},sum:function(e,t){for(var n=new C(0),r=0,i=e.length;r<i;r++)var s=e[r].clone(),n=t?A.add(A.pow(A.subtract(s,t.clone()),new C(2)),n):A.add(s,n);return n},mean:function(){var e=[].slice.call(arguments);return a(e[0])?R.Statistics.mean.apply(this,e[0].elements):A.divide(R.Statistics.sum(e),R.Statistics.count(e))},median:function(){var t=[].slice.call(arguments);if(a(t[0]))return R.Statistics.median.apply(this,t[0].elements);try{var e,n,r=R.Statistics.sort(t),i=t.length;n=x.Utils.even(i)?(e=i/2,R.Statistics.mean(r[e-1],r[e])):r[Math.floor(i/2)]}catch(e){n=A.symfunction(\"median\",t)}return n},mode:function(){var e=[].slice.call(arguments);if(a(e[0]))return R.Statistics.mode.apply(this,e[0].elements);var t=R.Statistics.frequencyMap(e);if(1===x.Utils.keys(t).length)o=e[0];else{var n,r={};for(n in t){var i,s=t[n];s in r?(i=r[s],u(i)?i.push(n):r[s]=[n,r[s]]):r[s]=n}var e=r[Math.max.apply(null,x.Utils.keys(r))],o=u(e)?A.symfunction(\"mode\",e.sort()):A.parse(e)}return o},gVariance:function(e,t){var n=R.Statistics.mean.apply(R.Statistics,t),n=R.Statistics.sum(t,n);return A.multiply(e,n)},variance:function(){var e=[].slice.call(arguments);if(a(e[0]))return R.Statistics.variance.apply(this,e[0].elements);var t=A.divide(new C(1),R.Statistics.count(e));return R.Statistics.gVariance(t,e)},sampleVariance:function(){var e=[].slice.call(arguments);if(a(e[0]))return R.Statistics.sampleVariance.apply(this,e[0].elements);var t=A.divide(new C(1),A.subtract(R.Statistics.count(e),new C(1)));return R.Statistics.gVariance(t,e)},standardDeviation:function(){var e=[].slice.call(arguments);return a(e[0])?R.Statistics.standardDeviation.apply(this,e[0].elements):A.pow(R.Statistics.variance.apply(R.Statistics,e),new C(.5))},sampleStandardDeviation:function(){var e=[].slice.call(arguments);return a(e[0])?R.Statistics.sampleStandardDeviation.apply(this,e[0].elements):A.pow(R.Statistics.sampleVariance.apply(R.Statistics,e),new C(.5))},zScore:function(e,t,n){return A.divide(A.subtract(e,t),n)}},Units:{table:{foot:\"12 inch\",meter:\"100 cm\",decimeter:\"10 cm\"}}};nerdamer.register([{name:\"laplace\",visible:!0,numargs:3,build:function(){return R.LaPlace.transform}},{name:\"ilt\",visible:!0,numargs:3,build:function(){return R.LaPlace.inverse}},{name:\"mean\",visible:!0,numargs:-1,build:function(){return R.Statistics.mean}},{name:\"median\",visible:!0,numargs:-1,build:function(){return R.Statistics.median}},{name:\"mode\",visible:!0,numargs:-1,build:function(){return R.Statistics.mode}},{name:\"smpvar\",visible:!0,numargs:-1,build:function(){return R.Statistics.sampleVariance}},{name:\"variance\",visible:!0,numargs:-1,build:function(){return R.Statistics.variance}},{name:\"smpstdev\",visible:!0,numargs:-1,build:function(){return R.Statistics.sampleStandardDeviation}},{name:\"stdev\",visible:!0,numargs:-1,build:function(){return R.Statistics.standardDeviation}},{name:\"zscore\",visible:!0,numargs:3,build:function(){return R.Statistics.zScore}}]),nerdamer.api()}(), true&&(module.exports=nerdamer);\n\n//# sourceURL=webpack://graph-art-creator/./src/nerdamer/index.js?");

/***/ }),

/***/ "./src/nerdamer/nerdamer.core.js":
/*!***************************************!*\
  !*** ./src/nerdamer/nerdamer.core.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\n\nvar nerdamer = (function (imports) {\n    \"use strict\";\n\n//version ======================================================================\n    var version = '1.1.12';\n\n//inits ========================================================================\n    var _ = new Parser(); //nerdamer's parser\n\n    //import bigInt\n    var bigInt = imports.bigInt;\n    var bigDec = imports.bigDec;\n\n    //set the precision to js precision\n    bigDec.set({\n        precision: 250\n    });\n\n    var Groups = {};\n\n    //container of pregenerated primes\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\n\n//Settings =====================================================================\n    var CUSTOM_OPERATORS = {};\n\n    var Settings = {\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\n        callPeekers: false,\n\n        //the max number up to which to cache primes. Making this too high causes performance issues\n        init_primes: 1000,\n\n        exclude: [],\n        //If you don't care about division by zero for example then this can be set to true.\n        //Has some nasty side effects so choose carefully.\n        suppress_errors: false,\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\n        PARSE2NUMBER: false,\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\n        SAFE: false,\n        //the symbol to use for imaginary symbols\n        IMAGINARY: 'i',\n        //the modules used to link numeric function holders\n        FUNCTION_MODULES: [Math],\n        //Allow certain characters\n        ALLOW_CHARS: ['π'],\n        //Allow nerdamer to convert multi-character variables\n        USE_MULTICHARACTER_VARS: true,\n        //Allow changing of power operator\n        POWER_OPERATOR: '^',\n        //The variable validation regex\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n        // The regex used to determine which characters should be included in implied multiplication\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\n        //Aliases\n        ALIASES: {\n            'π': 'pi',\n            '∞': 'Infinity'\n        },\n        POSITIVE_MULTIPLIERS: false,\n        //Cached items\n        CACHE: {},\n        //Print out warnings or not\n        SILENCE_WARNINGS: false,\n        //Precision\n        PRECISION: 21,\n        //function mappings\n        VECTOR: 'vector',\n        PARENTHESIS: 'parens',\n        SQRT: 'sqrt',\n        ABS: 'abs',\n        FACTORIAL: 'factorial',\n        DOUBLEFACTORIAL: 'dfactorial',\n        //reference pi and e\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n        PI: Math.PI,\n        E: Math.E,\n        LOG: 'log',\n        LOG10: 'log10',\n        LOG10_LATEX: 'log_{10}',\n        MAX_EXP: 200000,\n        //The number of scientific place to round to\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\n        //True if ints should not be converted to\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\n    };\n\n    (function () {\n        Settings.CACHE.roots = {};\n        var x = 40,\n                y = 40;\n        for(var i = 2; i <= x; i++) {\n            for(var j = 2; j <= y; j++) {\n                var nthpow = bigInt(i).pow(j);\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\n            }\n        }\n    })();\n\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\n    //when it's raised to a symbol, which typically results in an EX\n    var N = Groups.N = 1, // A number\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\n            S = Groups.S = 3, // A single variable e.g. x.\n            EX = Groups.EX = 4, // An exponential\n            FN = Groups.FN = 5, // A function\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n    var CONST_HASH = Settings.CONST_HASH = '#';\n\n    var PARENTHESIS = Settings.PARENTHESIS;\n\n    var SQRT = Settings.SQRT;\n\n    var ABS = Settings.ABS;\n\n    var FACTORIAL = Settings.FACTORIAL;\n\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\n\n    //the storage container \"memory\" for parsed expressions\n    var EXPRESSIONS = [];\n\n    //variables\n    var VARS = {};\n\n    //the container used to store all the reserved functions\n    var RESERVED = [];\n\n    var WARNINGS = [];\n\n    /**\n     * Use this when errors are suppressible\n     * @param {String} msg\n     * @param {object} ErrorObj\n     */\n    var err = function (msg, ErrorObj) {\n        if(!Settings.suppress_errors) {\n            if(ErrorObj)\n                throw new ErrorObj(msg);\n            else\n                throw new Error(msg);\n        }\n    };\n\n//Utils ========================================================================\n    var customError = function (name) {\n        var E = function (message) {\n            this.name = name;\n            this.message = message !== undefined ? message : '';\n            var error = new Error(this.message);\n            error.name = this.name;\n            this.stack = error.stack;\n        }; //create an empty error\n        E.prototype = Object.create(Error.prototype);\n        return E;\n    };\n\n    /**\n     * Checks to see if value is one of nerdamer's reserved names\n     * @param {String} value\n     * @return boolean\n     */\n    var isReserved = function (value) {\n        return RESERVED.indexOf(value) !== -1;\n    };\n\n    /**\n     * Checks to see that all symbols in array are the same\n     * @param {Symbol[]} arr\n     * @returns {bool}\n     */\n    var allSame = function (arr) {\n        var last = arr[0];\n        for(var i = 1, l = arr.length; i < l; i++)\n            if(!arr[i].equals(last))\n                return false;\n        return true;\n    };\n\n    /**\n     * Used to pass warnings or low severity errors about the library\n     * @param msg\n     */\n    var warn = function (msg) {\n        WARNINGS.push(msg);\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\n            console.warn(msg);\n        }\n    };\n\n    /**\n     * Enforces rule: \"must start with a letter or underscore and\n     * can have any number of underscores, letters, and numbers thereafter.\"\n     * @param name The name of the symbol being checked\n     * @param {String} typ - The type of symbols that's being validated\n     * @throws {Exception}  - Throws an exception on fail\n     */\n    var validateName = function (name, typ) {\n        typ = typ || 'variable';\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\n            return;\n        var regex = Settings.VALIDATION_REGEX;\n        if(!(regex.test(name))) {\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n        }\n    };\n\n    /**\n     * Convert number from scientific format to decimal format\n     * @param {Number} num\n     */\n    var scientificToDecimal = function (num) {\n        var nsign = Math.sign(num);\n        //remove the sign\n        num = Math.abs(num);\n        //if the number is in scientific notation remove it\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n            var zero = '0',\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\n                    e = parts.pop(), //store the exponential part\n                    l = Math.abs(e), //get the number of zeros\n                    sign = e / l,\n                    coeff_array = parts[0].split('.');\n            if(sign === -1) {\n                l = l - coeff_array[0].length;\n                if(l < 0) {\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n                }\n                else {\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n                }\n            }\n            else {\n                var dec = coeff_array[1];\n                if(dec)\n                    l = l - dec.length;\n                if(l < 0) {\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n                }\n                else {\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\n                }\n            }\n        }\n\n        return nsign < 0 ? '-' + num : num;\n    };\n    /**\n     * Checks if number is a prime number\n     * @param {Number} n - the number to be checked\n     */\n    var isPrime = function (n) {\n        var q = Math.floor(Math.sqrt(n));\n        for(var i = 2; i <= q; i++) {\n            if(n % i === 0)\n                return false;\n        }\n        return true;\n    };\n\n    /**\n     * Generates an object with known variable value for evaluation\n     * @param {String} variable\n     * @param {any} value Any stringifyable object\n     * @returns {Object} \n     */\n    var knownVariable = function (variable, value) {\n        var o = {};\n        o[variable] = value;\n        return o;\n    };\n\n    /**\n     * Checks if n is a number\n     * @param {any} n\n     */\n    var isNumber = function (n) {\n        return /^\\d+\\.?\\d*$/.test(n);\n    };\n\n    /**\n     * Checks to see if an array contains only numeric values\n     * @param {Array} arr\n     */\n    var allNumeric = function (arr) {\n        for(var i = 0; i < arr.length; i++)\n            if(!isNumber(arr[i]))\n                return false;\n        return true;\n    };\n    /**\n     * Checks to see if a number or Symbol is a fraction\n     * @param {Number|Symbol} num\n     * @returns {boolean}\n     */\n    var isFraction = function (num) {\n        if(isSymbol(num))\n            return isFraction(num.multiplier.toDecimal());\n        return (num % 1 !== 0);\n    };\n\n    /**\n     * Checks to see if the object provided is a Symbol\n     * @param {Object} obj\n     */\n    var isSymbol = function (obj) {\n        return (obj instanceof Symbol);\n    };\n\n    /**\n     * Checks to see if the object provided is an Expression\n     * @param {Object} obj\n     */\n    var isExpression = function (obj) {\n        return (obj instanceof Expression);\n    };\n\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n    var variables = function (obj, poly, vars) {\n        vars = vars || {\n            c: [],\n            add: function (value) {\n                if(this.c.indexOf(value) === -1 && isNaN(value))\n                    this.c.push(value);\n            }\n        };\n\n        if(isSymbol(obj)) {\n            var group = obj.group,\n                    prevgroup = obj.previousGroup;\n            if(group === EX)\n                variables(obj.power, poly, vars);\n\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n                for(var x in obj.symbols) {\n                    variables(obj.symbols[x], poly, vars);\n                }\n            }\n            else if(group === S || prevgroup === S) {\n                //very crude needs fixing. TODO\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\n                    vars.add(obj.value);\n            }\n            else if(group === PL || prevgroup === PL) {\n                variables(firstObject(obj.symbols), poly, vars);\n            }\n            else if(group === EX) {\n                if(!isNaN(obj.value))\n                    vars.add(obj.value);\n                variables(obj.power, poly, vars);\n            }\n            else if(group === FN && !poly) {\n                for(var i = 0; i < obj.args.length; i++) {\n                    variables(obj.args[i], poly, vars);\n                }\n            }\n        }\n\n        return vars.c.sort();\n    };\n\n    /**\n     * Returns the sum of an array\n     * @param {Array} arr\n     * @param {boolean} toNumber\n     * @returns {Symbol}\n     */\n    var arraySum = function (arr, toNumber) {\n        var sum = new Symbol(0);\n        for(var i = 0; i < arr.length; i++) {\n            var x = arr[i];\n            // Convert to symbol if not\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\n        }\n\n        return toNumber ? Number(sum) : sum;\n    };\n\n    /**\n     * Separates out the variables into terms of variabls.\n     * e.g. x+y+x*y+sqrt(2)+pi returns\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n     * @param {type} symbol\n     * @param {type} o\n     * @returns {undefined}\n     * @throws {Error} for expontentials\n     */\n    var separate = function (symbol, o) {\n        symbol = _.expand(symbol);\n        o = o || {};\n        var insert = function (key, sym) {\n            if(!o[key])\n                o[key] = new Symbol(0);\n            o[key] = _.add(o[key], sym.clone());\n        };\n        symbol.each(function (x) {\n            if(x.isConstant('all')) {\n                insert('constants', x);\n            }\n            else if(x.group === S) {\n                insert(x.value, x);\n            }\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\n                separate(x.args[0]);\n            }\n            else if(x.group === EX || x.group === FN) {\n                throw new Error('Unable to separate. Term cannot be a function!');\n            }\n            else {\n                insert(variables(x).join(' '), x);\n            }\n        });\n\n        return o;\n    };\n\n    /**\n     * Fills holes in an array with zero symbol or generates one with n zeroes\n     * @param {Array} arr\n     * @param {Number} n\n     */\n    var fillHoles = function (arr, n) {\n        n = n || arr.length;\n        for(var i = 0; i < n; i++) {\n            var sym = arr[i];\n            if(!sym)\n                arr[i] = new Symbol(0);\n        }\n        return arr;\n    };\n\n    /**\n     *\n     * Checks to see if the object provided is a Vector\n     * @param {Object} obj\n     */\n    var isVector = function (obj) {\n        return (obj instanceof Vector);\n    };\n\n    /**\n     * Checks to see if the object provided is a Matrix\n     * @param {Object} obj\n     */\n    var isMatrix = function (obj) {\n        return (obj instanceof Matrix);\n    };\n\n    var isSet = function (obj) {\n        return (obj instanceof Set);\n    };\n\n    /**\n     * Checks to see if a symbol is in group N\n     * @param {Symbol} symbol\n     */\n    var isNumericSymbol = function (symbol) {\n        return symbol.group === N || symbol.group === P;\n    };\n\n    /**\n     * Checks to see if a symbol is a variable with no multiplier nor power\n     * @param {Symbol} symbol\n     */\n    var isVariableSymbol = function (symbol) {\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n    };\n\n    /**\n     * Checks to see if the object provided is an Array\n     * @param {Object} arr\n     */\n    var isArray = function (arr) {\n        return Array.isArray(arr);\n    };\n\n    /**\n     * Checks to see if a number is an integer\n     * @param {Number} num\n     */\n    var isInt = function (num) {\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n    };\n\n    /**\n     * @param {Number|Symbol} obj\n     * @returns {boolean}\n     */\n    var isNegative = function (obj) {\n        if(isSymbol(obj)) {\n            obj = obj.multiplier;\n        }\n        return obj.lessThan(0);\n    };\n    /**\n     * Safely stringify object\n     * @param o\n     */\n    var stringify = function (o) {\n        if(!o)\n            return o;\n        return String(o);\n    };\n\n    /**\n     * @param {String} str\n     * @returns {String} - returns a formatted string surrounded by brackets\n     */\n    var inBrackets = function (str) {\n        return '(' + str + ')';\n    };\n\n    /**\n     * A helper function to replace parts of string\n     * @param {String} str - The original string\n     * @param {Integer} from - The starting index\n     * @param {Integer} to - The ending index\n     * @param {String} with_str - The replacement string\n     * @returns {String} - A formatted string\n     */\n    var stringReplace = function (str, from, to, with_str) {\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\n    };\n\n    /**\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n     * @param {Object} obj\n     * @returns {boolean}\n     */\n    var customType = function (obj) {\n        return obj !== undefined && obj.custom;\n    };\n\n    /**\n     * Checks to see if numbers are both negative or are both positive\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {boolean}\n     */\n    var sameSign = function (a, b) {\n        return (a < 0) === (b < 0);\n    };\n\n    /**\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\n     * @example format('{0} nice, {0} sweet', 'something')\n     * //returns 'something nice, something sweet'\n     */\n    var format = function () {\n        var args = [].slice.call(arguments),\n                str = args.shift();\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n            var arg = args[index];\n            return typeof arg === 'function' ? arg() : arg;\n        });\n\n        return new_str;\n    };\n\n    /**\n     * Generates an array with values within a range. Multiplies by a step if provided\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} step\n     */\n    var range = function (start, end, step) {\n        var arr = [];\n        step = step || 1;\n        for(var i = start; i <= end; i++)\n            arr.push(i * step);\n        return arr;\n    };\n\n    /**\n     * Returns an array of all the keys in an array\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var keys = Object.keys;\n\n    /**\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\n     * so only use if you need any first random or if there's only one item in the object\n     * @param {Object} obj\n     * @param {String} key Return this key as first object\n     * @param {Boolean} both\n     * @returns {*}\n     */\n    var firstObject = function (obj, key, both) {\n        for(var x in obj)\n            break;\n        if(key)\n            return x;\n        if(both)\n            return {\n                key: x,\n                obj: obj[x]\n            };\n        return obj[x];\n    };\n\n    /**\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n     * @param {Symbol} sym1\n     * @param {Symbol} sym2\n     * @param {String[]} vars - an optional array of variables to use\n     * @returns {bool}\n     */\n    var compare = function (sym1, sym2, vars) {\n        var n = 5; //a random number between 1 and 5 is good enough\n        var scope = {}; // scope object with random numbers generated using vars\n        var comparison;\n        for(var i = 0; i < vars.length; i++)\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n        block('PARSE2NUMBER', function () {\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n        });\n        return comparison;\n    };\n\n    /**\n     * Is used to set a user defined function using the function assign operator\n     * @param {String} name\n     * @param {String[]} params_array\n     * @param {String} body\n     * @returns {Boolean}\n     */\n    var setFunction = function (name, params_array, body) {\n        validateName(name);\n        if(!isReserved(name)) {\n            params_array = params_array || variables(_.parse(body));\n            // The function gets set to PARSER.mapped function which is just\n            // a generic function call.\n            _.functions[name] = [_.mapped_function, params_array.length, {\n                    name: name,\n                    params: params_array,\n                    body: body\n                }];\n\n            return body;\n        }\n        return null;\n    };\n\n    /**\n     * Returns the minimum number in an array\n     * @param {Array} arr\n     * @returns {Number}\n     */\n    var arrayMax = function (arr) {\n        return Math.max.apply(undefined, arr);\n    };\n\n    /**\n     * Returns the maximum number in an array\n     * @param {Array} arr\n     * @returns {Number}\n     */\n    var arrayMin = function (arr) {\n        return Math.min.apply(undefined, arr);\n    };\n\n    /**\n     * Checks to see if two arrays are equal\n     * @param {Array} arr1 \n     * @param {Array} arr2 \n     */\n    var arrayEqual = function (arr1, arr2) {\n        arr1.sort();\n        arr2.sort();\n\n        // The must be of the same length\n        if(arr1.length === arr2.length) {\n            for(var i = 0; i < arr1.length; i++) {\n                // If any two items don't match we're done\n                if(arr1[i] !== arr2[i]) {\n                    return false;\n                }\n            }\n            // Otherwise they're equal\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Clones array with clonable items\n     * @param {Array} arr\n     * @returns {Array}\n     */\n    var arrayClone = function (arr) {\n        var new_array = [], l = arr.length;\n        for(var i = 0; i < l; i++)\n            new_array[i] = arr[i].clone();\n        return new_array;\n    };\n\n    /**\n     * Fills numbers between array values\n     * @param {Numbers[]} arr\n     * @param {Integer} slices\n     */\n    var arrayAddSlices = function (arr, slices) {\n        slices = slices || 20;\n        var retval = [];\n        var c, delta, e;\n        retval.push(arr[0]); //push the beginning\n        for(var i = 0; i < arr.length - 1; i++) {\n            c = arr[i];\n            delta = arr[i + 1] - c; //get the difference\n            e = delta / slices; //chop it up in the desired number of slices\n            for(var j = 0; j < slices; j++) {\n                c += e; //add the mesh to the last slice\n                retval.push(c);\n            }\n        }\n\n        return retval;\n    };\n\n    /**\n     * Gets nth roots of a number\n     * @param {Symbol} symbol\n     * @returns {Vector}\n     */\n    var nroots = function (symbol) {\n        var a, b;\n\n        if(symbol.group === FN && symbol.fname === '') {\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n            b = _.parse(symbol.power);\n        }\n        else if(symbol.group === P) {\n            a = _.parse(symbol.value);\n            b = _.parse(symbol.power);\n        }\n\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\n            var _roots = [];\n\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\n            var r = parts[0];\n\n            //var r = _.parse(a).abs().toString();\n\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n            var x = _.arg(a);\n            var n = b.multiplier.den.toString();\n            var p = b.multiplier.num.toString();\n\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n            for(var i = 0; i < n; i++) {\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n            }\n            return Vector.fromArray(_roots);\n        }\n        else if(symbol.isConstant(true, true)) {\n            var sign = symbol.sign();\n            var x = evaluate(symbol.abs());\n            var root = _.sqrt(x);\n\n            var _roots = [root.clone(), root.negate()];\n\n            if(sign < 0)\n                _roots = _roots.map(function (x) {\n                    return _.multiply(x, Symbol.imaginary());\n                });\n\n        }\n        else {\n            _roots = [_.parse(symbol)];\n        }\n\n        return Vector.fromArray(_roots);\n    };\n\n    /**\n     * Sorts and array given 2 parameters\n     * @param {String} a\n     * @param {String} b\n     */\n    var comboSort = function (a, b) {\n        var l = a.length,\n                combined = []; //the linker\n        for(var i = 0; i < a.length; i++) {\n            combined.push([a[i], b[i]]); //create the map\n        }\n\n        combined.sort(function (x, y) {\n            return x[0] - y[0];\n        });\n\n        var na = [], nb = [];\n\n        for(i = 0; i < l; i++) {\n            na.push(combined[i][0]);\n            nb.push(combined[i][1]);\n        }\n\n        return [na, nb];\n    };\n    /**\n     * TODO: Pick a more descriptive name and better description\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n     * Example a*x^2+b wrt x\n     * @param {Symbol} fn\n     * @param {String} wrt\n     * @param {bool} as_obj\n     */\n    var decompose_fn = function (fn, wrt, as_obj) {\n        wrt = String(wrt); //convert to string\n        var ax, a, x, b;\n        if(fn.group === CP) {\n            var t = _.expand(fn.clone()).stripVar(wrt);\n            ax = _.subtract(fn.clone(), t.clone());\n            b = t;\n        }\n        else\n            ax = fn.clone();\n        a = ax.stripVar(wrt);\n        x = _.divide(ax.clone(), a.clone());\n        b = b || new Symbol(0);\n        if(as_obj)\n            return {\n                a: a,\n                x: x,\n                ax: ax,\n                b: b\n            };\n        return [a, x, ax, b];\n    };\n    /**\n     * Rounds a number up to x decimal places\n     * @param {Number} x\n     * @param {Number} s\n     */\n    var nround = function (x, s) {\n        if(isInt(x)) {\n            if(x >= Number.MAX_VALUE)\n                return x.toString();\n            return Number(x);\n        }\n\n        s = typeof s === 'undefined' ? 14 : s;\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n    };\n\n    /**\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\n     * instance a is used in the symbol then it keeps going down the line until\n     * one is found that's not in use. If all letters are taken then it\n     * starts appending numbers.\n     * IMPORTANT! It assumes that the substitution will be undone\n     * beore the user gets to interact with the object again.\n     * @param {Symbol} symbol\n     */\n    var getU = function (symbol) {\n        //start with u\n        var u = 'u', //start with u\n                v = u, //init with u\n                c = 0, //postfix number\n                vars = variables(symbol);\n        //make sure this variable isn't reserved and isn't in the variable list\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\n            v = u + c++;\n        //get an empty slot. It seems easier to just push but the\n        //problem is that we may have some which are created by clearU\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\n            if(!RESERVED[i]) {\n                RESERVED[i] = v; //reserve the variable\n                break;\n            }\n        return v;\n    };\n\n    /**\n     * Clears the u variable so it's no longer reserved\n     * @param {String} u\n     */\n    var clearU = function (u) {\n        var indx = RESERVED.indexOf(u);\n        if(indx !== -1)\n            RESERVED[indx] = undefined;\n    };\n\n    /**\n     * Loops through each item in object and calls function with item as param\n     * @param {Object|Array} obj\n     * @param {Function} fn\n     */\n    var each = function (obj, fn) {\n        if(isArray(obj)) {\n            var l = obj.length;\n            for(var i = 0; i < l; i++)\n                fn.call(obj, i);\n        }\n        else {\n            for(var x in obj)\n                if(obj.hasOwnProperty(x))\n                    fn.call(obj, x);\n        }\n    };\n\n    /**\n     * Checks to see if a number is an even number\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var even = function (num) {\n        return num % 2 === 0;\n    };\n\n    /**\n     * Checks to see if a fraction is divisible by 2\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var evenFraction = function (num) {\n        return 1 / (num % 1) % 2 === 0;\n    };\n\n    /**\n     * Strips duplicates out of an array\n     * @param {Array} arr\n     */\n    var arrayUnique = function (arr) {\n        var l = arr.length, a = [];\n        for(var i = 0; i < l; i++) {\n            var item = arr[i];\n            if(a.indexOf(item) === -1)\n                a.push(item);\n        }\n        return a;\n    };\n\n    /**\n     * Gets all the variables in an array of Symbols\n     * @param {Symbol[]} arr \n     */\n    var arrayGetVariables = function (arr) {\n        var vars = variables(arr[0], null, null, true);\n\n        //get all variables\n        for(var i = 1, l = arr.length; i < l; i++)\n            vars = vars.concat(variables(arr[i]));\n        //remove duplicates\n        vars = arrayUnique(vars).sort();\n\n        //done\n        return vars;\n    };\n\n    /**\n     * Removes duplicates from an array. Returns a new array\n     * @param {Array} arr\n     * @param {Function} condition\n     */\n    var removeDuplicates = function (arr, condition) {\n        var conditionType = typeof condition;\n\n        if(conditionType !== 'function' || conditionType === 'undefined') {\n            condition = function (a, b) {\n                return a === b;\n            };\n        }\n\n        var seen = [];\n\n        while(arr.length) {\n            var a = arr[0];\n            //only one element left so we're done\n            if(arr.length === 1) {\n                seen.push(a);\n                break;\n            }\n            var temp = [];\n            seen.push(a); //we already scanned these\n            for(var i = 1; i < arr.length; i++) {\n                var b = arr[i];\n                //if the number is outside the specified tolerance\n                if(!condition(a, b))\n                    temp.push(b);\n            }\n            //start over with the remainder\n            arr = temp;\n        }\n\n        return seen;\n    };\n\n    /**\n     * Reserves the names in an object so they cannot be used as function names\n     * @param {Object} obj\n     */\n    var reserveNames = function (obj) {\n        var add = function (item) {\n            if(RESERVED.indexOf(item) === -1)\n                RESERVED.push(item);\n        };\n\n        if(typeof obj === 'string')\n            add(obj);\n        else {\n            each(obj, function (x) {\n                add(x);\n            });\n        }\n    };\n\n    /**\n     * Removes an item from either an array or an object. If the object is an array, the index must be\n     * specified after the array. If it's an object then the key must be specified\n     * @param {Object|Array} obj\n     * @param {Integer} indexOrKey\n     */\n    var remove = function (obj, indexOrKey) {\n        var result;\n        if(isArray(obj)) {\n            result = obj.splice(indexOrKey, 1)[0];\n        }\n        else {\n            result = obj[indexOrKey];\n            delete obj[indexOrKey];\n        }\n        return result;\n    };\n\n    /**\n     * Creates a temporary block in which one of the global settings is temporarily modified while\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n     * answer for a period you would set PARSE2NUMBER to true in the block.\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n     * @param {String} setting - The setting being accessed\n     * @param {Function} f\n     * @param {boolean} opt - The value of the setting in the block\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\n     */\n    var block = function (setting, f, opt, obj) {\n        var current_setting = Settings[setting];\n        Settings[setting] = opt === undefined ? true : !!opt;\n        var retval = f.call(obj);\n        Settings[setting] = current_setting;\n        return retval;\n    };\n\n    /**\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\n     * Some functions will return undefined. This can maybe just remove the\n     * function object at some point when all functions are eventually\n     * housed in the global function object. Returns ALL parser available\n     * functions. Parser.functions may not contain all functions\n     */\n    var importFunctions = function () {\n        var o = {};\n        for(var x in _.functions)\n            o[x] = _.functions[x][0];\n        return o;\n    };\n\n    /**\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n     * @param {Array|object} obj\n     */\n    var arguments2Array = function (obj) {\n        return [].slice.call(obj);\n    };\n\n    /**\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\n     * each nth term by x^n.\n     * @param {Symbol} symbol\n     * @param {Symbol} wrt\n     */\n    var getCoeffs = function (symbol, wrt, info) {\n        var coeffs = [];\n        //we loop through the symbols and stick them in their respective\n        //containers e.g. y*x^2 goes to index 2\n        symbol.each(function (term) {\n            if(term.contains(wrt)) {\n                //we want only the coefficient which in this case will be everything but the variable\n                //e.g. a*b*x -> a*b if the variable to solve for is x\n                var coeff = term.stripVar(wrt),\n                        x = _.divide(term.clone(), coeff.clone()),\n                        p = x.power.toDecimal();\n            }\n            else {\n                coeff = term;\n                p = 0;\n            }\n            var e = coeffs[p];\n            //if it exists just add it to it\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\n\n        }, true);\n\n        for(var i = 0; i < coeffs.length; i++)\n            if(!coeffs[i])\n                coeffs[i] = new Symbol(0);\n        //fill the holes\n        return coeffs;\n    };\n\n    /**\n     * As the name states. It forces evaluation of the expression\n     * @param {Symbol} symbol\n     * @param {Symbol} o\n     */\n    var evaluate = function (symbol, o) {\n        return block('PARSE2NUMBER', function () {\n            return _.parse(symbol, o);\n        }, true);\n    };\n\n    /**\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\n     * @param {String[]|String|Symbol|Number|Number[]} x\n     */\n    var convertToVector = function (x) {\n        if(isArray(x)) {\n            var vector = new Vector([]);\n            for(var i = 0; i < x.length; i++)\n                vector.elements.push(convertToVector(x[i]));\n            return vector;\n        }\n        //Ensure that a nerdamer ready object is returned\n        if(!isSymbol(x))\n            return _.parse(x);\n        return x;\n    };\n\n    /**\n     * Generates prime numbers up to a specified number\n     * @param {Number} upto\n     */\n    var generatePrimes = function (upto) {\n        //get the last prime in the array\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\n        //no need to check if we've already encountered the number. Just check the cache.\n        for(var i = last_prime; i < upto; i++) {\n            if(isPrime(i))\n                PRIMES.push(i);\n        }\n    };\n    /**\n     * Checks to see if all arguments are numbers\n     * @param {object} args\n     */\n    var allNumbers = function (args) {\n        for(var i = 0; i < args.length; i++)\n            if(args[i].group !== N)\n                return false;\n        return true;\n    };\n    /*\n     * Checks if all arguments aren't just all number but if they\n     * are constants as well e.g. pi, e.\n     * @param {object} args\n     */\n    var allConstants = function (args) {\n        for(var i = 0; i < args.length; i++) {\n            if(args[i].isPi() || args[i].isE())\n                continue;\n            if(!args[i].isConstant(true))\n                return false;\n        }\n        return true;\n    };\n\n    /**\n     * Used to multiply two expression in expanded form\n     * @param {Symbol} a\n     * @param {Symbol} b\n     */\n    var mix = function (a, b, opt) {\n        // Flip them if b is a CP or PL and a is not\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\n            [a, b] = [b, a];\n        }\n        // A temporary variable to hold the expanded terms\n        var t = new Symbol(0);\n        if(a.isLinear()) {\n            a.each(function (x) {\n                // If b is not a PL or a CP then simply multiply it\n                if(!b.isComposite()) {\n                    var term = _.multiply(_.parse(x), _.parse(b));\n                    t = _.add(t, _.expand(term, opt));\n                }\n                // Otherwise multiply out each term.\n                else if(b.isLinear()) {\n                    b.each(function (y) {\n                        var term = _.multiply(_.parse(x), _.parse(y));\n                        var expanded = _.expand(_.parse(term), opt);\n                        t = _.add(t, expanded);\n                    }, true);\n                }\n                else {\n                    t = _.add(t, _.multiply(x, _.parse(b)));\n                }\n            }, true);\n        }\n        else {\n            // Just multiply them together\n            t = _.multiply(a, b);\n        }\n\n        // The expanded function is now t\n        return t;\n    };\n\n//Exceptions ===================================================================\n    //Is thrown for division by zero\n    var DivisionByZero = customError('DivisionByZero');\n    // Is throw if an error occured during parsing\n    var ParseError = customError('ParseError');\n    // Is thrown if the expression results in undefined\n    var UndefinedError = customError('UndefinedError');\n    // Is throw input is out of the function domain\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\n    // Is throw if a function exceeds x amount of iterations\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\n    // Is thrown if the parser receives an incorrect type\n    var NerdamerTypeError = customError('NerdamerTypeError');\n    // Is thrown if bracket parity is not correct\n    var ParityError = customError('ParityError');\n    // Is thrown if an unexpectd or incorrect operator is encountered\n    var OperatorError = customError('OperatorError');\n    // Is thrown if an index is out of range.\n    var OutOfRangeError = customError('OutOfRangeError');\n    // Is thrown if dimensions are incorrect. Mostly for matrices\n    var DimensionError = customError('DimensionError');\n    // Is thrown if variable name violates naming rule\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\n    // Is thrown if the limits of the library are exceeded for a function\n    // This can be that the function become unstable passed a value\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\n    // Is throw if the value is an incorrect LH or RH value\n    var NerdamerValueError = customError('NerdamerValueError');\n    // Is thrown if the value is an incorrect LH or RH value\n    var SolveError = customError('SolveError');\n    // Is thrown for an infinite loop\n    var InfiniteLoopError = customError('InfiniteLoopError');\n    // Is thrown if an operator is found when there shouldn't be one\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\n\n    var exceptions = {\n        DivisionByZero: DivisionByZero,\n        ParseError: ParseError,\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\n        UndefinedError: UndefinedError,\n        MaximumIterationsReached: MaximumIterationsReached,\n        NerdamerTypeError: NerdamerTypeError,\n        ParityError: ParityError,\n        OperatorError: OperatorError,\n        OutOfRangeError: OutOfRangeError,\n        DimensionError: DimensionError,\n        InvalidVariableNameError: InvalidVariableNameError,\n        ValueLimitExceededError: ValueLimitExceededError,\n        NerdamerValueError: NerdamerValueError,\n        SolveError: SolveError,\n        InfiniteLoopError: InfiniteLoopError,\n        UnexpectedTokenError: UnexpectedTokenError\n    };\n//Math2 ========================================================================\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\n    //functions within are pretty self-explanatory.\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n    var Math2 = {\n        csc: function (x) {\n            return 1 / Math.sin(x);\n        },\n        sec: function (x) {\n            return 1 / Math.cos(x);\n        },\n        cot: function (x) {\n            return 1 / Math.tan(x);\n        },\n        acsc: function (x) {\n            return Math.asin(1 / x);\n        },\n        asec: function (x) {\n            return Math.acos(1 / x);\n        },\n        acot: function (x) {\n            return (Math.PI / 2) - Math.atan(x);\n        },\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n        erf: function (x) {\n            var t = 1 / (1 + 0.5 * Math.abs(x));\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\n                    t * (1.00002368 +\n                            t * (0.37409196 +\n                                    t * (0.09678418 +\n                                            t * (-0.18628806 +\n                                                    t * (0.27886807 +\n                                                            t * (-1.13520398 +\n                                                                    t * (1.48851587 +\n                                                                            t * (-0.82215223 +\n                                                                                    t * (0.17087277)))))))))\n                    );\n            return x >= 0 ? result : -result;\n        },\n        diff: function (f) {\n            var h = 0.001;\n\n            var derivative = function (x) {\n                return (f(x + h) - f(x - h)) / (2 * h);\n            };\n\n            return derivative;\n        },\n        median: function (...values) {\n            values.sort(function (a, b) {\n                return a - b;\n            });\n\n            var half = Math.floor(values.length / 2);\n\n            if(values.length % 2)\n                return values[half];\n\n            return (values[half - 1] + values[half]) / 2.0;\n        },\n        /*\n         * Reverses continued fraction calculation\n         * @param {obj} contd\n         * @returns {Number}\n         */\n        fromContinued: function (contd) {\n            var arr = contd.fractions.slice();\n            var e = 1 / arr.pop();\n            for(var i = 0, l = arr.length; i < l; i++) {\n                e = 1 / (arr.pop() + e);\n            }\n            return contd.sign * (contd.whole + e);\n        },\n        /*\n         * Calculates continued fractions\n         * @param {Number} n\n         * @param {Number} x The number of places\n         * @returns {Number}\n         */\n        continuedFraction: function (n, x) {\n            x = x || 20;\n            var sign = Math.sign(n); /*store the sign*/\n            var absn = Math.abs(n); /*get the absolute value of the number*/\n            var whole = Math.floor(absn); /*get the whole*/\n            var ni = absn - whole; /*subtract the whole*/\n            var c = 0; /*the counter to keep track of iterations*/\n            var done = false;\n            var epsilon = 1e-14;\n            var max = 1e7;\n            var e, w;\n            var retval = {\n                whole: whole,\n                sign: sign,\n                fractions: []\n            };\n            /*start calculating*/\n            while(!done && ni !== 0) {\n                /*invert and get the whole*/\n                e = 1 / ni;\n                w = Math.floor(e);\n                if(w > max) {\n                    /*this signals that we may have already gone too far*/\n                    var d = Math2.fromContinued(retval) - n;\n                    if(d <= Number.EPSILON)\n                        break;\n                }\n                /*add to result*/\n                retval.fractions.push(w);\n                /*move the ni to the decimal*/\n                ni = e - w;\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n                if(ni <= epsilon || c >= x - 1)\n                    done = true;\n                c++;\n            }\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n            var idx = retval.fractions.length - 1;\n            if(retval.fractions[idx] === 1) {\n                retval.fractions.pop();\n                /*increase the last one by one*/\n                retval.fractions[--idx]++;\n            }\n            return retval;\n        },\n        bigpow: function (n, p) {\n            if(!(n instanceof Frac))\n                n = Frac.create(n);\n            if(!(p instanceof Frac))\n                p = Frac.create(p);\n            var retval = new Frac(0);\n            if(p.isInteger()) {\n                retval.num = n.num.pow(p.toString());\n                retval.den = n.den.pow(p.toString());\n            }\n            else {\n                var num = Frac.create(Math.pow(n.num, p.num));\n                var den = Frac.create(Math.pow(n.den, p.num));\n\n                retval.num = Math2.nthroot(num, p.den.toString());\n                retval.den = Math2.nthroot(den, p.den);\n            }\n            return retval;\n        },\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n        gamma: function (z) {\n            var g = 7;\n            var C = [\n                0.99999999999980993,\n                676.5203681218851,\n                -1259.1392167224028,\n                771.32342877765313,\n                -176.61502916214059,\n                12.507343278686905,\n                -0.13857109526572012,\n                9.9843695780195716e-6,\n                1.5056327351493116e-7]\n                    ;\n\n            if(z < 0.5)\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\n            else {\n                z -= 1;\n\n                var x = C[0];\n                for(var i = 1; i < g + 2; i++)\n                    x += C[i] / (z + i);\n\n                var t = z + g + 0.5;\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n            }\n        },\n        //factorial\n        bigfactorial: function (x) {\n            var retval = new bigInt(1);\n            for(var i = 2; i <= x; i++)\n                retval = retval.times(i);\n            return new Frac(retval);\n        },\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\n        bigLog: function (x) {\n            varn            if(CACHE[x]) {\n                return Frac.quick.apply(null, CACHE[x].split('/'));\n            }\n            x = new Frac(x);\n            var n = 80;\n            var retval = new Frac(0);\n            var a = x.subtract(new Frac(1));\n            var b = x.add(new Frac(1));\n            for(var i = 0; i < n; i++) {\n                var t = new Frac(2 * i + 1);\n                var k = Math2.bigpow(a.divide(b), t);\n                var r = t.clone().invert().multiply(k);\n                retval = retval.add(r);\n\n            }\n            return retval.multiply(new Frac(2));\n        },\n        //the factorial function but using the big library instead\n        factorial: function (x) {\n            var is_int = x % 1 === 0;\n\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n            if(is_int && x < 0)\n                return NaN;\n\n            if(!is_int)\n                return Math2.gamma(x + 1);\n\n            var retval = 1;\n            for(var i = 2; i <= x; i++)\n                retval = retval * i;\n            return retval;\n        },\n        //double factorial\n        //http://mathworld.wolfram.com/DoubleFactorial.html\n        dfactorial: function (x) {\n            if(isInt(x)) {\n                var even = x % 2 === 0;\n                /* If x = even then n = x/2 else n = (x-1)/2*/\n                var n = even ? x / 2 : (x + 1) / 2;\n                /*the return value*/\n                var r = new Frac(1);\n                /*start the loop*/\n                if(even)\n                    for(var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\n                else\n                    for(var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n            }\n            else {\n                /*Not yet extended to bigNum*/\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n            }\n\n            /*done*/\n            return r;\n        },\n        GCD: function () {\n            var args = arrayUnique([].slice.call(arguments)\n                    .map(function (x) {\n                        return Math.abs(x);\n                    })).sort(),\n                    a = Math.abs(args.shift()),\n                    n = args.length;\n\n            while(n-- > 0) {\n                var b = Math.abs(args.shift());\n                while(true) {\n                    a %= b;\n                    if(a === 0) {\n                        a = b;\n                        break;\n                    }\n                    b %= a;\n                    if(b === 0)\n                        break;\n                    ;\n                }\n            }\n            return a;\n        },\n        QGCD: function () {\n            var args = [].slice.call(arguments);\n            var a = args[0];\n            for(var i = 1; i < args.length; i++) {\n                var b = args[i];\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n                a = b.gcd(a);\n                if(sign < 0)\n                    a.negate();\n            }\n            return a;\n        },\n        LCM: function (a, b) {\n            return (a * b) / Math2.GCD(a, b);\n        },\n        //pow but with the handling of negative numbers\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n        pow: function (b, e) {\n            if(b < 0) {\n                if(Math.abs(e) < 1) {\n                    /*nth root of a negative number is imaginary when n is even*/\n                    if(1 / e % 2 === 0)\n                        return NaN;\n                    return -Math.pow(Math.abs(b), e);\n                }\n            }\n            return Math.pow(b, e);\n        },\n        factor: function (n) {\n            n = Number(n);\n            var sign = Math.sign(n); /*store the sign*/\n            /*move the number to absolute value*/\n            n = Math.abs(n);\n            var ifactors = Math2.ifactor(n);\n            var factors = new Symbol();\n            factors.symbols = {};\n            factors.group = CB;\n            for(var x in ifactors) {\n                var factor = new Symbol(1);\n                factor.group = P; /*cheat a little*/\n                factor.value = x;\n                factor.power = new Symbol(ifactors[x]);\n                factors.symbols[x] = factor;\n            }\n            factors.updateHash();\n\n            if(n === 1) {\n                factors = new Symbol(n);\n            }\n\n            /*put back the sign*/\n            if(sign < 0)\n                factors.negate();\n\n            return factors;\n        },\n        /**\n         * Uses trial division\n         * @param {Integer} n - the number being factored\n         * @param {object} factors -  the factors object\n         * @returns {object}\n         */\n        sfactor: function (n, factors) {\n            factors = factors || {};\n            var r = Math.floor(Math.sqrt(n));\n            var lcprime = PRIMES[PRIMES.length - 1];\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n            /*takes too long*/\n            if(r > lcprime && n < 1e6)\n                generatePrimes(r);\n            var l = PRIMES.length;\n            for(var i = 0; i < l; i++) {\n                var prime = PRIMES[i];\n                /*trial division*/\n                while(n % prime === 0) {\n                    n = n / prime;\n                    factors[prime] = (factors[prime] || 0) + 1;\n                }\n            }\n            if(n > 1)\n                factors[n] = 1;\n            return factors;\n        },\n        /**\n         * Pollard's rho\n         * @param {Integer} n\n         * @returns {object}\n         */\n        ifactor: function (n) {\n            var input = new bigInt(n);\n\n            n = String(n);\n\n            if(n === '0')\n                return {'0': 1};\n            n = new bigInt(n); /*convert to bigInt for safety*/\n            var sign = n.sign ? -1 : 1;\n            n = n.abs();\n            var factors = {}; /*factor object being returned.*/\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\n                factors = Math2.sfactor(n, factors);\n            }\n            else {\n                var add = function (e) {\n                    if(!e.isPrime()) {\n                        factors = Math2.sfactor(e, factors);\n                    }\n                    else\n                        factors[e] = (factors[e] || 0) + 1;\n                };\n\n                try {\n                    //set a safety\n                    var max = 1e3;\n                    var safety = 0;\n\n                    while(!n.abs().equals(1)) {\n                        if(n.isPrime()) {\n                            add(n);\n                            break;\n                        }\n                        else {\n                            function rho(c) {\n                                var xf = new bigInt(c),\n                                        cz = 2,\n                                        x = new bigInt(c),\n                                        factor = new bigInt(1);\n\n                                while(factor.equals(1)) {\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\n                                        //trigger the safety\n                                        if(safety++ > max)\n                                            throw new Error('stopping');\n\n                                        x = x.pow(2).add(1).mod(n);\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\n                                    }\n\n                                    cz = cz * 2;\n                                    xf = x;\n                                }\n                                if(factor.equals(n)) {\n                                    return rho(c + 1);\n                                }\n                                return factor;\n                            }\n                            var factor = rho(2);\n                            add(factor);\n                            /*divide out the factor*/\n                            n = n.divide(factor);\n                        }\n                    }\n                }\n                catch(e) {\n                    //reset factors\n                    factors = {};\n                    add(input);\n                }\n\n            }\n\n            /*put the sign back*/\n            if(sign === -1) {\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\n                factors['-' + sm] = factors[sm];\n                delete factors[sm];\n            }\n\n            return factors;\n        },\n        //factors a number into rectangular box. If sides are primes that this will be\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n        boxfactor: function (n, max) {\n            max = max || 200; //stop after this number of iterations\n            var c, r,\n                    d = Math.floor((5 / 12) * n), //the divisor\n                    i = 0, //number of iterations\n                    safety = false;\n            while(true) {\n                c = Math.floor(n / d);\n                r = n % d;\n                if(r === 0)\n                    break; //we're done\n                if(safety)\n                    return [n, 1];\n                d = Math.max(r, d - r);\n                i++;\n                safety = i > max;\n            }\n            return [c, d, i];\n        },\n        fib: function (n) {\n            var sign = Math.sign(n);\n            n = Math.abs(n);\n            sign = even(n) ? sign : Math.abs(sign);\n            var a = 0, b = 1, f = 1;\n            for(var i = 2; i <= n; i++) {\n                f = a + b;\n                a = b;\n                b = f;\n            }\n            return f * sign;\n        },\n        mod: function (x, y) {\n            return x % y;\n        },\n        //http://mathworld.wolfram.com/IntegerPart.html\n        integer_part: function (x) {\n            var sign = Math.sign(x);\n            return sign * Math.floor(Math.abs(x));\n        },\n        simpson: function (f, a, b, step) {\n            var get_value = function (f, x, side) {\n                var v = f(x);\n                var d = 0.000000000001;\n                if(isNaN(v)) {\n                    v = f(side === 1 ? x + d : x - d);\n                }\n                return v;\n            };\n\n            step = step || 0.0001;\n            //calculate the number of intervals\n            var n = Math.abs(Math.floor((b - a) / step));\n            //simpson's rule requires an even number of intervals. If it's not then add 1\n            if(n % 2 !== 0)\n                n++;\n            //get the interval size\n            var dx = (b - a) / n;\n            //get x0\n            var retval = get_value(f, a, 1);\n\n            //get the middle part 4x1+2x2+4x3 ...\n            //but first set a flag to see if it's even or odd.\n            //The first one is odd so we start there\n            var even = false;\n            //get x1\n            var xi = a + dx;\n            //the coefficient\n            var c, k;\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\n            for(var i = 1; i < n; i++) {\n                c = even ? 2 : 4;\n                k = c * get_value(f, xi, 1);\n                retval += k;\n                //flip the even flag\n                even = !even;\n                //increment xi\n                xi += dx;\n            }\n\n            //add xn\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\n\n        },\n        /**\n         * https://github.com/scijs/integrate-adaptive-simpson\n         * @param {Function} f - the function being integrated\n         * @param {Number} a - lower bound\n         * @param {Number} b - upper bound\n         * @param {Number} tol - step width\n         * @param {Number} maxdepth\n         * @returns {Number}\n         */\n        num_integrate: function (f, a, b, tol, maxdepth) {\n            if(maxdepth < 0)\n                throw new Error('max depth cannot be negative');\n\n            /* This algorithm adapted from pseudocode in:*/\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n                if(state.nanEncountered) {\n                    return NaN;\n                }\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n                h = b - a;\n                f1 = f(a + h * 0.25);\n                f2 = f(b - h * 0.25);\n                /* Simple check for NaN:*/\n                if(isNaN(f1)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n                /* Simple check for NaN:*/\n                if(isNaN(f2)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n\n                sl = h * (fa + 4 * f1 + fm) / 12;\n                sr = h * (fm + 4 * f2 + fb) / 12;\n                s2 = sl + sr;\n                err = (s2 - V0) / 15;\n\n                if(state.maxDepthCount > 1000 * maxdepth) {\n                    return;\n                }\n\n\n                if(depth > maxdepth) {\n                    state.maxDepthCount++;\n                    return s2 + err;\n                }\n                else if(Math.abs(err) < tol) {\n                    return s2 + err;\n                }\n                else {\n                    m = a + h * 0.5;\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n                    if(isNaN(V1)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n                    if(isNaN(V2)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n\n                    return V1 + V2;\n                }\n            }\n\n            function integrate(f, a, b, tol, maxdepth) {\n                var state = {\n                    maxDepthCount: 0,\n                    nanEncountered: false\n                };\n\n                if(tol === undefined) {\n                    tol = 1e-9;\n                }\n                if(maxdepth === undefined) {\n                    /*Issue #458 - This was lowered because of performance issues. */\n                    /*This was suspected from before but is now confirmed with this issue*/\n                    maxdepth = 45;\n                }\n\n                var fa = f(a);\n                var fm = f(0.5 * (a + b));\n                var fb = f(b);\n\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n                if(state.maxDepthCount > 0) {\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n                }\n\n                if(state.nanEncountered) {\n                    throw new Error('Function does not converge over interval!');\n                }\n\n                return result;\n            }\n            var retval;\n\n            try {\n                retval = integrate(f, a, b, tol, maxdepth);\n            }\n            catch(e) {\n                /*fallback to non-adaptive*/\n                return Math2.simpson(f, a, b);\n            }\n            return nround(retval, 12);\n        },\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\n        //CosineIntegral\n        Ci: function (x) {\n            var n = 20,\n                    /*roughly Euler–Mascheroni*/\n                    g = 0.5772156649015329,\n                    sum = 0;\n            for(var i = 1; i < n; i++) {\n                /*cache 2n*/\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\n            }\n            return Math.log(x) + g + sum;\n        },\n        /*SineIntegral*/\n        Si: function (x) {\n            var n = 20,\n                    sum = 0;\n            for(var i = 0; i < n; i++) {\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\n            }\n            return sum;\n        },\n        /*ExponentialIntegral*/\n        Ei: function (x) {\n            if(Number(x) === 0)\n                return -Infinity;\n            var n = 30,\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\n                    sum = 0;\n            for(var i = 1; i < n; i++) {\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\n            }\n            return g + Math.abs(Math.log(x)) + sum;\n        },\n        /*Hyperbolic Sine Integral*/\n        /*http://mathworld.wolfram.com/Shi.html*/\n        Shi: function (x) {\n            var n = 30,\n                    sum = 0,\n                    k, t;\n            for(var i = 0; i < n; i++) {\n                k = 2 * i;\n                t = k + 1;\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n            }\n            return sum;\n        },\n        /*the cosine integral function*/\n        Chi: function (x) {\n            var dx, g, f;\n            dx = 0.001;\n            g = 0.5772156649015328606;\n            f = function (t) {\n                return (Math.cosh(t) - 1) / t;\n            };\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n        },\n        /*the log integral*/\n        Li: function (x) {\n            return Math2.Ei(Math2.bigLog(x));\n        },\n        /*the gamma incomplete function*/\n        gamma_incomplete: function (n, x) {\n            var t = n - 1,\n                    sum = 0,\n                    x = x || 0;\n            for(var i = 0; i < t; i++) {\n                sum += Math.pow(x, i) / Math2.factorial(i);\n            }\n            return Math2.factorial(t) * Math.exp(-x) * sum;\n        },\n        /*\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\n         * if x > 0 then 1\n         * if x == 0 then 1/2\n         * if x < 0 then 0\n         */\n        step: function (x) {\n            if(x > 0)\n                return 1;\n            if(x < 0)\n                return 0;\n            return 0.5;\n        },\n        /*\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\n         * if |x| > 1/2 then 0\n         * if |x| == 1/2 then 1/2\n         * if |x| < 1/2 then 1\n         */\n        rect: function (x) {\n            var x = Math.abs(x);\n            if(x === 0.5)\n                return x;\n            if(x > 0.5)\n                return 0;\n            return 1;\n        },\n        /*\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\n         * if x == 0 then 1\n         * otherwise sin(x)/x\n         */\n        sinc: function (x) {\n            if(x.equals(0))\n                return 1;\n            return Math.sin(x) / x;\n        },\n        /*\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\n         * if |x| >= 1 then 0\n         * if |x| < then 1-|x|\n         */\n        tri: function (x) {\n            x = Math.abs(x);\n            if(x >= 1)\n                return 0;\n            return 1 - x;\n        },\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\n        nthroot: function (A, n) {\n            /*make sure the input is of type Frac*/\n            if(!(A instanceof Frac))\n                A = new Frac(A.toString());\n            if(!(n instanceof Frac))\n                n = new Frac(n.toString());\n            if(n.equals(1))\n                return A;\n            /*begin algorithm*/\n            var xk = A.divide(new Frac(2)); /*x0*/\n            var e = new Frac(1e-15);\n            var dk, dk0, d0;\n            var a = n.clone().invert(),\n                    b = n.subtract(new Frac(1));\n            do {\n                var powb = Math2.bigpow(xk, b);\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n                dk = Frac.create(dk_dec);\n                if(d0)\n                    break;\n\n                xk = xk.add(dk);\n                /*check to see if there's no change from the last xk*/\n                var dk_dec = dk.toDecimal();\n                d0 = dk0 ? dk0 === dk_dec : false;\n                dk0 = dk_dec;\n            }\n            while(dk.abs().gte(e))\n\n            return xk;\n        },\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n        /*Just the square root function but big :)*/\n        sqrt: function (n) {\n            if(!(n instanceof Frac))\n                n = new Frac(n);\n            var xn, d, ld, same_delta;\n            var c = 0; /*counter*/\n            var done = false;\n            var delta = new Frac(1e-20);\n            xn = n.divide(new Frac(2));\n            var safety = 1000;\n            do {\n                /*break if we're not converging*/\n                if(c > safety)\n                    throw new Error('Unable to calculate square root for ' + n);\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\n                xn = new Frac(xn.decimal(30));\n                /*get the difference from the true square*/\n                d = n.subtract(xn.multiply(xn));\n                /*if the square of the calculated number is close enough to the number*/\n                /*we're getting the square root or the last delta was the same as the new delta*/\n                /*then we're done*/\n                same_delta = ld ? ld.equals(d) : false;\n                if(d.clone().abs().lessThan(delta) || same_delta)\n                    done = true;\n                /*store the calculated delta*/\n                ld = d;\n                c++; /*increase the counter*/\n            }\n            while(!done)\n\n            return xn;\n        }\n    };\n    //link the Math2 object to Settings.FUNCTION_MODULES\n    Settings.FUNCTION_MODULES.push(Math2);\n    reserveNames(Math2); //reserve the names in Math2\n\n\n//Polyfills ====================================================================\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n    Math.sign = Math.sign || function (x) {\n        x = +x; // convert to a number\n        if(x === 0 || isNaN(x)) {\n            return x;\n        }\n        return x > 0 ? 1 : -1;\n    };\n\n    Math.cosh = Math.cosh || function (x) {\n        var y = Math.exp(x);\n        return (y + 1 / y) / 2;\n    };\n\n    Math.sech = Math.sech || function (x) {\n        return 1 / Math.cosh(x);\n    };\n\n    Math.csch = Math.csch || function (x) {\n        return 1 / Math.sinh(x);\n    };\n\n    Math.coth = Math.coth || function (x) {\n        return 1 / Math.tanh(x);\n    };\n\n    Math.sinh = Math.sinh || function (x) {\n        var y = Math.exp(x);\n        return (y - 1 / y) / 2;\n    };\n\n    Math.tanh = Math.tanh || function (x) {\n        if(x === Infinity) {\n            return 1;\n        }\n        else if(x === -Infinity) {\n            return -1;\n        }\n        else {\n            var y = Math.exp(2 * x);\n            return (y - 1) / (y + 1);\n        }\n    };\n\n    Math.asinh = Math.asinh || function (x) {\n        if(x === -Infinity) {\n            return x;\n        }\n        else {\n            return Math.log(x + Math.sqrt(x * x + 1));\n        }\n    };\n\n    Math.acosh = Math.acosh || function (x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n    };\n\n    Math.atanh = Math.atanh || function (x) {\n        return Math.log((1 + x) / (1 - x)) / 2;\n    };\n\n    Math.log10 = Math.log10 || function (x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n\n    Math.trunc = Math.trunc || function (x) {\n        if(isNaN(x)) {\n            return NaN;\n        }\n        if(x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n\n//Global functions =============================================================\n    /**\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\n     * If all else fails it *assumes* the object has a toString method and will call that.\n     *\n     * @param {Object} obj\n     * @param {String} option get is as a hash\n     * @param {int} useGroup\n     * @returns {String}\n     */\n    function text(obj, option, useGroup, decp) {\n        var asHash = option === 'hash',\n                //whether to wrap numbers in brackets\n                wrapCondition = undefined,\n                opt = asHash ? undefined : option,\n                asDecimal = opt === 'decimal' || opt === 'decimals';\n\n        if(asDecimal && typeof decp === 'undefined')\n            decp = 16;\n\n        function toString(obj) {\n            switch(option)\n            {\n                case 'decimals':\n                case 'decimal':\n                    wrapCondition = wrapCondition || function (str) {\n                        return false;\n                    };\n                    return obj.valueOf();\n                case 'recurring':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf(\"'\") !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if(frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var negative = false;\n                    var m = Number(parts[0]);\n                    if(m < 0) {\n                        m = -m;\n                        negative = true;\n                    }\n                    var n = Number(parts[1]);\n                    if(!n)\n                        n = 1;\n\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\n                    quotient = quotient.toString() + \".\";\n                    while(c && c < n) {\n                        c *= 10;\n                        quotient += \"0\";\n                    }\n                    var digits = \"\", passed = [], i = 0;\n                    while(true) {\n                        if(typeof passed[c] !== 'undefined') {\n                            var prefix = digits.slice(0, passed[c]),\n                                    cycle = digits.slice(passed[c]),\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n                        }\n                        var q = Math.floor(c / n), r = c - q * n;\n                        passed[c] = i;\n                        digits += q.toString();\n                        i += 1;\n                        c = 10 * r;\n                    }\n                case 'mixed':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if(frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var numer = new bigInt(parts[0]);\n                    var denom = new bigInt(parts[1]);\n                    if(denom.equals(0))\n                        denom = new bigInt(1);\n\n                    //return the quotient plus the remainder\n                    var divmod = numer.divmod(denom);\n                    var quotient = divmod.quotient;\n                    var remainder = divmod.remainder;\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\n                case 'scientific':\n                    wrapCondition = wrapCondition || function (str) {\n                        return false;\n                    }\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n                default:\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    return obj.toString();\n            }\n        }\n\n        //if the object is a symbol\n        if(isSymbol(obj)) {\n            var multiplier = '',\n                    power = '',\n                    sign = '',\n                    group = obj.group || useGroup,\n                    value = obj.value;\n\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\n            if(!asHash) {\n                //use asDecimal to get the object back as a decimal\n                var om = toString(obj.multiplier);\n                if(om == '-1' && String(obj.multiplier) === '-1') {\n                    sign = '-';\n                    om = '1';\n                }\n                //only add the multiplier if it's not 1\n                if(om != '1')\n                    multiplier = om;\n                //use asDecimal to get the object back as a decimal\n                var p = obj.power ? toString(obj.power) : '';\n                //only add the multiplier\n                if(p != '1') {\n                    //is it a symbol\n                    if(isSymbol(p)) {\n                        power = text(p, opt);\n                    }\n                    else {\n                        power = p;\n                    }\n                }\n            }\n\n            switch(group) {\n                case N:\n                    multiplier = '';\n                    //round if requested\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\n                    //if it's numerical then all we need is the multiplier\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\n                    power = '';\n                    break;\n                case PL:\n                    value = obj.collectSymbols().map(function (x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CP:\n                    value = obj.collectSymbols().map(function (x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CB:\n                    value = obj.collectSymbols(function (symbol) {\n                        var g = symbol.group;\n                        //both groups will already be in brackets if their power is greater than 1\n                        //so skip it.\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\n                            return inBrackets(text(symbol, opt));\n                        }\n                        return text(symbol, opt);\n                    }).join('*');\n                    break;\n                case EX:\n                    var pg = obj.previousGroup,\n                            pwg = obj.power.group;\n\n                    //PL are the exception. It's simpler to just collect and set the value\n                    if(pg === PL)\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\n                        value = inBrackets(value);\n                    }\n\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n                        power = inBrackets(power);\n                    }\n                    break;\n            }\n\n            if(group === FN) {\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n                    return text(symbol, opt);\n                }).join(','));\n            }\n            //TODO: Needs to be more efficient. Maybe.\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\n                var a = text(obj.args[0]);\n                var b = text(obj.args[1]);\n                if(obj.args[0].isComposite()) //preserve the brackets\n                    a = inBrackets(a);\n                if(obj.args[1].isComposite()) //preserve the brackets\n                    b = inBrackets(b);\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\n            }\n            //wrap the power since / is less than ^\n            //TODO: introduce method call isSimple\n            if(power && group !== EX && wrapCondition(power)) {\n                power = inBrackets(power);\n            }\n\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n            //by a multiplier and have to be in brackets to preserve the order of precedence\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\n                    || !asHash && group === P && value == -1\n                    || obj.fname === PARENTHESIS) {\n\n                value = inBrackets(value);\n            }\n\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n                multiplier = nround(multiplier, decp);\n            }\n\n\n            //add the sign back\n            var c = sign + multiplier;\n\n            if(multiplier && wrapCondition(multiplier))\n                c = inBrackets(c);\n\n            if(power < 0)\n                power = inBrackets(power);\n\n            //add the multiplication back\n            if(multiplier)\n                c = c + '*';\n\n            if(power) {\n                if(value === 'e' && Settings.E_TO_EXP) {\n                    return c + 'exp' + inBrackets(power);\n                }\n                power = Settings.POWER_OPERATOR + power;\n            }\n\n            //this needs serious rethinking. Must fix\n            if(group === EX && value.charAt(0) === '-') {\n                value = inBrackets(value);\n            }\n\n            var cv = c + value;\n\n            if(obj.parens) {\n                cv = inBrackets(cv);\n            }\n\n            return cv + power;\n        }\n        else if(isVector(obj)) {\n            var l = obj.elements.length,\n                    c = [];\n            for(var i = 0; i < l; i++)\n                c.push(obj.elements[i].text(option));\n            return '[' + c.join(',') + ']';\n        }\n        else {\n            try {\n                return obj.toString();\n            }\n            catch(e) {\n                return '';\n            }\n        }\n    }\n    /**\n     * Calculates prime factors for a number. It first checks if the number\n     * is a prime number. If it's not then it will calculate all the primes \n     * for that number.\n     * @param {int} num\n     * @returns {Array}\n     */\n\n    function primeFactors(num) {\n        if(isPrime(num)) {\n            return [num];\n        }\n\n        var l = num, i = 1, factors = [],\n                epsilon = 2.2204460492503130808472633361816E-16;\n        while(i < l) {\n            var quotient = num / i;\n            var whole = Math.floor(quotient);\n            var remainder = quotient - whole;\n\n            if(remainder <= epsilon && i > 1) {\n                // If the prime wasn't found but calculated then save it and\n                // add it as a factor.\n                if(isPrime(i)) {\n                    if(PRIMES.indexOf(i) === -1) {\n                        PRIMES.push(i);\n                    }\n                    factors.push(i);\n                }\n\n                // Check if the remainder is a prime\n                if(isPrime(whole)) {\n                    factors.push(whole);\n                    break;\n                }\n\n                l = whole;\n            }\n            i++;\n        }\n\n        return factors.sort(function (a, b) {\n            return a - b;\n        });\n    }\n    ;\n    primeFactors(314146179365)\n//Expression ===================================================================\n    /**\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\n     * provides the user with some useful functions. If you want to provide the user with extra\n     * library functions then add them to this class's prototype.\n     * @param {Symbol} symbol\n     * @returns {Expression} wraps around the Symbol class\n     */\n    function Expression(symbol) {\n        //we don't want arrays wrapped\n        this.symbol = symbol;\n    }\n    /**\n     * Returns stored expression at index. For first index use 1 not 0.\n     * @param {bool} asType\n     * @param {Integer} expression_number\n     */\n    Expression.getExpression = function (expression_number, asType) {\n        if(expression_number === 'last' || !expression_number)\n            expression_number = EXPRESSIONS.length;\n        if(expression_number === 'first')\n            expression_number = 1;\n        var index = expression_number - 1,\n                expression = EXPRESSIONS[index],\n                retval = expression ? new Expression(expression) : expression;\n        return retval;\n    };\n    Expression.prototype = {\n        /**\n         * Returns the text representation of the expression\n         * @param {String} opt - option of formatting numbers\n         * @param {Number} n The number of significant figures\n         * @returns {String}\n         */\n        text: function (opt, n) {\n            n = n || 19;\n            opt = opt || 'decimals';\n            if(this.symbol.text_)\n                return this.symbol.text_(opt);\n\n            return text(this.symbol, opt, undefined, n);\n        },\n        /**\n         * Returns the latex representation of the expression\n         * @param {String} option - option for formatting numbers\n         * @returns {String}\n         */\n        latex: function (option) {\n            if(this.symbol.latex)\n                return this.symbol.latex(option);\n            return LaTeX.latex(this.symbol, option);\n        },\n        valueOf: function () {\n            return this.symbol.valueOf();\n        },\n\n        /**\n         * Evaluates the expression and tries to reduce it to a number if possible.\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\n         * Other than that it will just use it's own text and reparse\n         * @returns {Expression}\n         */\n        evaluate: function () {\n\n            // Don't evaluate an empty vector\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\n                return this;\n            }\n\n            var first_arg = arguments[0], expression, idx = 1;\n\n            //Enable getting of expressions using the % so for example %1 should get the first expression\n            if(typeof first_arg === 'string') {\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n            }\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\n                expression = first_arg.text();\n            }\n            else {\n                expression = this.symbol.text();\n                idx--;\n            }\n\n            var subs = arguments[idx] || {};\n\n            var retval = new Expression(block('PARSE2NUMBER', function () {\n                return _.parse(expression, subs);\n            }, true));\n\n            return retval;\n        },\n        /**\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\n         * the default alphabetical order\n         * @param vars {Array}\n         */\n        buildFunction: function (vars) {\n            return Build.build(this.symbol, vars);\n        },\n        /**\n         * Checks to see if the expression is just a plain old number\n         * @returns {boolean}\n         */\n        isNumber: function () {\n            return isNumericSymbol(this.symbol);\n        },\n        /**\n         * Checks to see if the expression is infinity\n         * @returns {boolean}\n         */\n        isInfinity: function () {\n            return Math.abs(this.symbol.multiplier) === Infinity;\n        },\n        /**\n         * Checks to see if the expression contains imaginary numbers\n         * @returns {boolean}\n         */\n        isImaginary: function () {\n            return evaluate(_.parse(this.symbol)).isImaginary();\n        },\n        /**\n         * Returns all the variables in the expression\n         * @returns {Array}\n         */\n        variables: function () {\n            return variables(this.symbol);\n        },\n\n        toString: function () {\n            try {\n                if(isArray(this.symbol))\n                    return '[' + this.symbol.toString() + ']';\n                return this.symbol.toString();\n            }\n            catch(e) {\n                return '';\n            }\n        },\n        //forces the symbol to be returned as a decimal\n        toDecimal: function (prec) {\n            Settings.precision = prec;\n            var dec = text(this.symbol, 'decimals');\n            Settings.precision = undefined;\n            return dec;\n        },\n        //checks to see if the expression is a fraction\n        isFraction: function () {\n            return isFraction(this.symbol);\n        },\n        //checks to see if the symbol is a multivariate polynomial\n        isPolynomial: function () {\n            return this.symbol.isPoly();\n        },\n        //performs a substitution\n        sub: function (symbol, for_symbol) {\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n        },\n        operation: function (otype, symbol) {\n            if(isExpression(symbol))\n                symbol = symbol.symbol;\n            else if(!isSymbol(symbol))\n                symbol = _.parse(symbol);\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n        },\n        add: function (symbol) {\n            return this.operation('add', symbol);\n        },\n        subtract: function (symbol) {\n            return this.operation('subtract', symbol);\n        },\n        multiply: function (symbol) {\n            return this.operation('multiply', symbol);\n        },\n        divide: function (symbol) {\n            return this.operation('divide', symbol);\n        },\n        pow: function (symbol) {\n            return this.operation('pow', symbol);\n        },\n        expand: function () {\n            return new Expression(_.expand(this.symbol));\n        },\n        each: function (callback, i) {\n            if(this.symbol.each)\n                this.symbol.each(callback, i);\n            else if(isArray(this.symbol)) {\n                for(var i = 0; i < this.symbol.length; i++)\n                    callback.call(this.symbol, this.symbol[i], i);\n            }\n            else\n                callback.call(this.symbol);\n        },\n        eq: function (value) {\n            if(!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = _.subtract(this.symbol.clone(), value);\n                return d.equals(0);\n            }\n            catch(e) {\n                return false;\n            }\n            ;\n        },\n        lt: function (value) {\n            if(!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.lessThan(0);\n            }\n            catch(e) {\n                return false;\n            }\n            ;\n        },\n        gt: function (value) {\n            if(!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.greaterThan(0);\n            }\n            catch(e) {\n                return false;\n            }\n        },\n        gte: function (value) {\n            return this.gt(value) || this.eq(value);\n        },\n        lte: function (value) {\n            return this.lt(value) || this.eq(value);\n        },\n\n        numerator: function () {\n            return new Expression(this.symbol.getNum());\n        },\n        denominator: function () {\n            return new Expression(this.symbol.getDenom());\n        },\n        hasFunction: function (f) {\n            return this.symbol.containsFunction(f);\n        },\n        contains: function (variable) {\n            return this.symbol.contains(variable);\n        }\n    };\n    //Aliases\n    Expression.prototype.toTeX = Expression.prototype.latex;\n\n//Scientific ===================================================================\n    function Scientific(num) {\n        if(!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if(num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        }\n        else {\n            this.sign = 1;\n        }\n\n        if(Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        }\n        else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function (num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function (num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w + d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location - (zeroes + 1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function (num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if(num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num + 1);\n                //get the next two\n                var next_two = this.coeff.substring(num + 1, num + 3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if(next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded + ed;\n            }\n\n            return n;\n        },\n        copy: function () {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function (n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n\n            var c;\n            if(this.exponent === 0 && Settings.SCIENTIFIC_IGNORE_INTS) {\n                c = this.coeff;\n            }\n            else {\n                c = coeff + 'e' + this.exponent;\n            }\n            return (this.sign === -1 ? '-' : '') + c;\n        }\n    };\n\n    Scientific.isScientific = function (num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function (num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function (num) {\n        var match = num.match(/^0*(.*)$/);\n        return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function (num) {\n        var match = num.match(/0*$/);\n        return match ? num.substring(0, num.length - match[0].length) : '';\n    };\n    Scientific.round = function (c, n) {\n        var coeff = nround(c, n);\n        var m = String(coeff).split('.').pop();\n        var d = n - m.length;\n        //if we're asking for more significant figures\n        if(d > 0) {\n            coeff = coeff + (new Array(d + 1).join(0));\n        }\n        return coeff;\n    };\n\n//Scientific ===================================================================\n    /*\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n     */\n\n    function Scientific(num) {\n        if(!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if(num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        }\n        else {\n            this.sign = 1;\n        }\n\n        if(Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        }\n        else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function (num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function (num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w + d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location - (zeroes + 1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n            //the coeff decimal places\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n\n            this.decp = dec === '0' ? 0 : dec.length;\n            //decimals\n            this.dec = d;\n            //wholes\n            this.wholes = w;\n\n            return this;\n        },\n        round: function (num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if(num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num + 1);\n                //get the next two\n                var next_two = this.coeff.substring(num + 1, num + 3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if(next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded + ed;\n            }\n\n            return n;\n        },\n        copy: function () {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function (n) {\n            var retval;\n\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\n                if(this.decp === 0)\n                    retval = this.wholes;\n                else\n                    retval = this.coeff;\n            }\n            else {\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\n            }\n\n            return (this.sign === -1 ? '-' : '') + retval;\n        }\n    };\n\n    Scientific.isScientific = function (num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function (num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function (num) {\n        var match = num.match(/^0*(.*)$/);\n        return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function (num) {\n        var match = num.match(/0*$/);\n        return match ? num.substring(0, num.length - match[0].length) : '';\n    };\n\n\n//Frac =========================================================================\n    function Frac(n) {\n        if(n instanceof Frac)\n            return n;\n        if(n === undefined)\n            return this;\n        try {\n            if(isInt(n)) {\n                try {\n                    this.num = bigInt(n);\n                    this.den = bigInt(1);\n                }\n                catch(e) {\n                    return Frac.simple(n);\n                }\n            }\n            else {\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\n                this.num = new bigInt(frac[0]);\n                this.den = new bigInt(frac[1]);\n            }\n        }\n        catch(e) {\n            return Frac.simple(n);\n        }\n\n    }\n    //safe to use with negative numbers or other types\n    Frac.create = function (n) {\n        if(n instanceof Frac)\n            return n;\n        n = n.toString();\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\n        if(is_neg)\n            n = n.substr(1, n.length - 1); //remove the sign\n        var frac = new Frac(n);\n        //put the sign back\n        if(is_neg)\n            frac.negate();\n        return frac;\n    };\n    Frac.isFrac = function (o) {\n        return (o instanceof Frac);\n    };\n    Frac.quick = function (n, d) {\n        var frac = new Frac();\n        frac.num = new bigInt(n);\n        frac.den = new bigInt(d);\n        return frac;\n    };\n    Frac.simple = function (n) {\n        var nstr = String(scientificToDecimal(n)),\n                m_dc = nstr.split('.'),\n                num = m_dc.join(''),\n                den = 1,\n                l = (m_dc[1] || '').length;\n        for(var i = 0; i < l; i++)\n            den += '0';\n        var frac = Frac.quick(num, den);\n        return frac.simplify();\n    };\n    Frac.prototype = {\n        multiply: function (m) {\n            if(this.isOne()) {\n                return m.clone();\n            }\n            if(m.isOne()) {\n                return this.clone();\n            }\n\n            var c = this.clone();\n            c.num = c.num.multiply(m.num);\n            c.den = c.den.multiply(m.den);\n\n            return c.simplify();\n        },\n        divide: function (m) {\n            if(m.equals(0))\n                throw new DivisionByZero('Division by zero not allowed!');\n            return this.clone().multiply(m.clone().invert()).simplify();\n        },\n        subtract: function (m) {\n            return this.clone().add(m.clone().neg());\n        },\n        neg: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        add: function (m) {\n            var n1 = this.den, n2 = m.den, c = this.clone();\n            var a = c.num, b = m.num;\n            if(n1.equals(n2)) {\n                c.num = a.add(b);\n            }\n            else {\n                c.num = a.multiply(n2).add(b.multiply(n1));\n                c.den = n1.multiply(n2);\n            }\n\n            return c.simplify();\n        },\n        mod: function (m) {\n            var a = this.clone(),\n                    b = m.clone();\n            //make their denominators even and return the mod of their numerators\n            a.num = a.num.multiply(b.den);\n            a.den = a.den.multiply(b.den);\n            b.num = b.num.multiply(this.den);\n            b.den = b.den.multiply(this.den);\n            a.num = a.num.mod(b.num);\n            return a.simplify();\n        },\n        simplify: function () {\n            var gcd = bigInt.gcd(this.num, this.den);\n\n            this.num = this.num.divide(gcd);\n            this.den = this.den.divide(gcd);\n            return this;\n        },\n        clone: function () {\n            var m = new Frac();\n            m.num = new bigInt(this.num);\n            m.den = new bigInt(this.den);\n            return m;\n        },\n        decimal: function (prec) {\n            var sign = this.num.isNegative() ? '-' : '';\n            if(this.num.equals(this.den)) {\n                return '1';\n            }\n            //go plus one for rounding\n            prec = prec || Settings.PRECISION;\n            prec++;\n            var narr = [],\n                    n = this.num.abs(),\n                    d = this.den;\n            for(var i = 0; i < prec; i++) {\n                var w = n.divide(d), //divide out whole\n                        r = n.subtract(w.multiply(d)); //get remainder\n\n                narr.push(w);\n                if(r.equals(0))\n                    break;\n                n = r.times(10); //shift one dec place\n            }\n            var whole = narr.shift();\n            if(narr.length === 0) {\n                return sign + whole.toString();\n            }\n\n            if(i === prec) {\n                var lt = [];\n                //get the last two so we can round it\n                for(var i = 0; i < 2; i++)\n                    lt.unshift(narr.pop());\n                //put the last digit back by rounding the last two\n                narr.push(Math.round(lt.join('.')));\n            }\n\n            var dec = whole.toString() + '.' + narr.join('');\n            return sign + dec;\n        },\n        toDecimal: function (prec) {\n            prec = prec || Settings.PRECISION;\n            if(prec) {\n                return this.decimal(prec);\n            }\n            else\n                return this.num / this.den;\n        },\n        qcompare: function (n) {\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\n        },\n        equals: function (n) {\n            if(!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].equals(q[1]);\n        },\n        absEquals: function (n) {\n            if(!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].abs().equals(q[1]);\n        },\n        //lazy check to be fixed. Sufficient for now but will cause future problems\n        greaterThan: function (n) {\n            if(!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].gt(q[1]);\n        },\n        gte: function (n) {\n            return this.greaterThan(n) || this.equals(n);\n        },\n        lte: function (n) {\n            return this.lessThan(n) || this.equals(n);\n        },\n        lessThan: function (n) {\n            if(!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].lt(q[1]);\n        },\n        isInteger: function () {\n            return this.den.equals(1);\n        },\n        negate: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        invert: function () {\n            var t = this.den;\n            //why invert 0/1? It'll become 1/0 and that's a lie.\n            if(!this.num.equals(0)) {\n                var isnegative = this.num.isNegative();\n                this.den = this.num.abs();\n                this.num = t;\n                if(isnegative)\n                    this.num = this.num.multiply(-1);\n            }\n\n            return this;\n        },\n        isOne: function () {\n            return this.num.equals(1) && this.den.equals(1);\n        },\n        sign: function () {\n            return this.num.isNegative() ? -1 : 1;\n        },\n        abs: function () {\n            this.num = this.num.abs();\n            return this;\n        },\n        gcd: function (f) {\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n        },\n        toString: function () {\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n        },\n        valueOf: function () {\n//            if(this.num == 24) throw new Error(999)\n            if(Settings.USE_BIG)\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n            return this.num / this.den;\n        },\n        isNegative: function () {\n            return this.toDecimal() < 0;\n        }\n    };\n\n//Symbol =======================================================================\n    /**\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\n     * All symbols except for \"numbers (group N)\" have a power.\n     * @class Primary data type for the Parser.\n     * @param {String} obj\n     * @returns {Symbol}\n     */\n    function Symbol(obj) {\n        var isInfinity = obj === 'Infinity';\n        // This enables the class to be instantiated without the new operator\n        if(!(this instanceof Symbol)) {\n            return new Symbol(obj);\n        }\n        // Convert big numbers to a string\n        if(obj instanceof bigDec) {\n            obj = obj.toString();\n        }\n        //define numeric symbols\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\n            this.group = N;\n            this.value = CONST_HASH;\n            this.multiplier = new Frac(obj);\n        }\n        //define symbolic symbols\n        else {\n            this.group = S;\n            validateName(obj);\n            this.value = obj;\n            this.multiplier = new Frac(1);\n            this.imaginary = obj === Settings.IMAGINARY;\n            this.isInfinity = isInfinity;\n        }\n\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\n        //Although this is still redundant in constants, it simplifies the logic in\n        //other parts so we'll keep it\n        this.power = new Frac(1);\n\n        // Added to silence the strict warning.\n        return this;\n    }\n    /**\n     * Returns vanilla imaginary symbol\n     * @returns {Symbol}\n     */\n    Symbol.imaginary = function () {\n        var s = new Symbol(Settings.IMAGINARY);\n        s.imaginary = true;\n        return s;\n    };\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity\n     * @returns {Symbol}\n     */\n    Symbol.infinity = function (negative) {\n        var v = new Symbol('Infinity');\n        if(negative === -1)\n            v.negate();\n        return v;\n    };\n    Symbol.shell = function (group, value) {\n        var symbol = new Symbol(value);\n        symbol.group = group;\n        symbol.symbols = {};\n        symbol.length = 0;\n        return symbol;\n    };\n    //sqrt(x) -> x^(1/2)\n    Symbol.unwrapSQRT = function (symbol, all) {\n        var p = symbol.power;\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\n            var t = symbol.args[0].clone();\n            t.power = t.power.multiply(new Frac(1 / 2));\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\n            symbol = t;\n            if(all)\n                symbol.power = p.multiply(new Frac(1 / 2));\n        }\n\n        return symbol;\n    };\n    Symbol.hyp = function (a, b) {\n        a = a || new Symbol(0);\n        b = b || new Symbol(0);\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n    };\n    //converts to polar form array\n    Symbol.toPolarFormArray = function (symbol) {\n        var re, im, r, theta;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        r = Symbol.hyp(re, im);\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n        return [r, theta];\n    };\n    //removes parentheses\n    Symbol.unwrapPARENS = function (symbol) {\n        if(symbol.fname === '') {\n            var r = symbol.args[0];\n            r.power = r.power.multiply(symbol.power);\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\n            if(symbol.fname === '')\n                return Symbol.unwrapPARENS(r);\n            return r;\n        }\n        return symbol;\n    };\n    //quickly creates a Symbol\n    Symbol.create = function (value, power) {\n        power = power === undefined ? 1 : power;\n        return _.parse('(' + value + ')^(' + power + ')');\n    };\n    Symbol.prototype = {\n        /**\n         * Gets nth root accounting for rounding errors\n         * @param {Number} n\n         * @return {Number}\n         */\n        getNth: function (n) {\n            // First calculate the root\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\n            // Round of any errors\n            var rounded = _.parse(nround(root));\n            // Reverse the root\n            var e = evaluate(_.pow(rounded, _.parse(n)));\n            // If the rounded root equals the original number then we're good \n            if(e.equals(_.parse(this.multiplier))) {\n                return rounded;\n            }\n            // Otherwise return the unrounded version\n            return root;\n        },\n        /**\n         * Checks if symbol is to the nth power\n         * @returns {Boolean}\n         */\n        isToNth: function (n) {\n            // Start by check in the multiplier for squareness\n            // First get the root but round it because currently we still depend \n            var root = this.getNth(n);\n            var nthMultiplier = isInt(root);\n            var nthPower;\n\n            if(this.group === CB) {\n                // Start by assuming that all will be square.\n                nthPower = true;\n                // All it takes is for one of the symbols to not have an even power\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\n                this.each(function (x) {\n                    var isNth = x.isToNth(n);\n\n                    if(!isNth) {\n                        nthPower = false;\n                    }\n                });\n            }\n            else {\n                // Check if the power is divisible by n if it's not a number.\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\n            }\n\n            return nthMultiplier && nthPower;\n        },\n        /**\n         * Checks if a symbol is square\n         * @return {Boolean}\n         */\n        isSquare: function () {\n            return this.isToNth(2);\n        },\n        /**\n         * Checks if a symbol is cube\n         * @return {Boolean}\n         */\n        isCube: function () {\n            return this.isToNth(3);\n        },\n        /**\n         * Checks if a symbol is a bare variable\n         * @return {Boolean}\n         */\n        isSimple: function () {\n            return this.power.equals(1) && this.multiplier.equals(1);\n        },\n        /**\n         * Simplifies the power of the symbol\n         * @returns {Symbol} a clone of the symbol\n         */\n        powSimp: function () {\n            if(this.group === CB) {\n                var powers = [],\n                        sign = this.multiplier.sign();\n                this.each(function (x) {\n                    var p = x.power;\n                    //why waste time if I can't do anything anyway\n                    if(isSymbol(p) || p.equals(1))\n                        return this.clone();\n                    powers.push(p);\n                });\n                var min = new Frac(arrayMin(powers));\n\n                //handle the coefficient\n                //handle the multiplier\n                var sign = this.multiplier.sign(),\n                        m = this.multiplier.clone().abs(),\n                        mfactors = Math2.ifactor(m);\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n                //we can then reduce it to 2*3*5*(15)^2\n                var out_ = new Frac(1);\n                var in_ = new Frac(1);\n\n                for(var x in mfactors) {\n                    var n = new Frac(mfactors[x]);\n                    if(!n.lessThan(min)) {\n                        n = n.divide(min).subtract(new Frac(1));\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n                    }\n\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n                }\n                var t = new Symbol(in_);\n                this.each(function (x) {\n                    x = x.clone();\n                    x.power = x.power.divide(min);\n                    t = _.multiply(t, x);\n                });\n\n                var xt = _.symfunction(PARENTHESIS, [t]);\n                xt.power = min;\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\n\n                return xt;\n            }\n            return this.clone();\n        },\n        /**\n         * Checks to see if two functions are of equal value\n         * @param {Symbol} symbol\n         */\n        equals: function (symbol) {\n            if(!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.value === symbol.value && this.power.equals(symbol.power)\n                    && this.multiplier.equals(symbol.multiplier)\n                    && this.group === symbol.group;\n        },\n        abs: function () {\n            var e = this.clone();\n            e.multiplier.abs();\n            return e;\n        },\n        // Greater than\n        gt: function (symbol) {\n            if(!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Greater than\n        gte: function (symbol) {\n            if(!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Less than\n        lt: function (symbol) {\n            if(!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        // Less than\n        lte: function (symbol) {\n            if(!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        /**\n         * Because nerdamer doesn't group symbols by polynomials but\n         * rather a custom grouping method, this has to be\n         * reinserted in order to make use of most algorithms. This function\n         * checks if the symbol meets the criteria of a polynomial.\n         * @param {bool} multivariate\n         * @returns {boolean}\n         */\n        isPoly: function (multivariate) {\n            var g = this.group,\n                    p = this.power;\n            //the power must be a integer so fail if it's not\n            if(!isInt(p) || p < 0)\n                return false;\n            //constants and first orders\n            if(g === N || g === S || this.isConstant(true))\n                return true;\n            var vars = variables(this);\n            if(g === CB && vars.length === 1) {\n                //the variable is assumed the only one that was found\n                var v = vars[0];\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\n                if(!v)\n                    return true;\n                for(var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    //sqrt(x)\n                    if(sym.group === FN && !sym.args[0].isConstant())\n                        return false;\n                    if(!sym.contains(v) && !sym.isConstant(true))\n                        return false;\n                }\n                return true;\n            }\n            //PL groups. These only fail if a power is not an int\n            //this should handle cases such as x^2*t\n            if(this.isComposite() || g === CB && multivariate) {\n                //fail if we're not checking for multivariate polynomials\n                if(!multivariate && vars.length > 1)\n                    return false;\n                //loop though the symbols and check if they qualify\n                for(var x in this.symbols) {\n                    //we've already the symbols if we're not checking for multivariates at this point\n                    //so we check the sub-symbols\n                    if(!this.symbols[x].isPoly(multivariate))\n                        return false;\n                }\n                return true;\n            }\n            else\n                return false;\n\n            /*\n             //all tests must have passed so we must be dealing with a polynomial\n             return true;\n             */\n        },\n        //removes the requested variable from the symbol and returns the remainder\n        stripVar: function (x, exclude_x) {\n            var retval;\n            if((this.group === PL || this.group === S) && this.value === x)\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\n            else if(this.group === CB && this.isLinear()) {\n                retval = new Symbol(1);\n                this.each(function (s) {\n                    if(!s.contains(x, true))\n                        retval = _.multiply(retval, s.clone());\n                });\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\n            }\n            else if(this.group === CP && !this.isLinear()) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if(this.group === CP && this.isLinear()) {\n                retval = new Symbol(0);\n                this.each(function (s) {\n                    if(!s.contains(x)) {\n                        var t = s.clone();\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\n                        retval = _.add(retval, t);\n                    }\n                });\n                //BIG TODO!!! It doesn't make much sense\n                if(retval.equals(0))\n                    retval = new Symbol(this.multiplier);\n            }\n            else if(this.group === EX && this.power.contains(x, true)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if(this.group === FN && this.contains(x)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else\n                //wth? This should technically be the multiplier.\n                //Unfortunately this method wasn't very well thought out :`(.\n                //should be: retval = new Symbol(this.multiplier);\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n                //this will break a bunch of unit tests so be ready to for the long haul\n                retval = this.clone();\n\n\n            return retval;\n        },\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n        toArray: function (v, arr) {\n            arr = arr || {\n                arr: [],\n                add: function (x, idx) {\n                    var e = this.arr[idx];\n                    this.arr[idx] = e ? _.add(e, x) : x;\n                }\n            };\n            var g = this.group;\n\n            if(g === S && this.contains(v)) {\n                arr.add(new Symbol(this.multiplier), this.power);\n            }\n            else if(g === CB) {\n                var a = this.stripVar(v),\n                        x = _.divide(this.clone(), a.clone());\n                var p = x.isConstant() ? 0 : x.power;\n                arr.add(a, p);\n            }\n            else if(g === PL && this.value === v) {\n                this.each(function (x, p) {\n                    arr.add(x.stripVar(v), p);\n                });\n            }\n            else if(g === CP) {\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n                //each case is handled above\n                this.each(function (x) {\n                    x.toArray(v, arr);\n                });\n            }\n            else if(this.contains(v)) {\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\n            }\n            else {\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\n            }\n            //fill the holes\n            arr = arr.arr; //keep only the array since we don't need the object anymore\n            for(var i = 0; i < arr.length; i++)\n                if(!arr[i])\n                    arr[i] = new Symbol(0);\n            return arr;\n        },\n        //checks to see if a symbol contans a function\n        hasFunc: function (v) {\n            var fn_group = this.group === FN || this.group === EX;\n            if(fn_group && !v || fn_group && this.contains(v))\n                return true;\n            if(this.symbols) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].hasFunc(v))\n                        return true;\n                }\n            }\n            return false;\n        },\n        sub: function (a, b) {\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\n            if(a.group === N || a.group === P)\n                err('Cannot substitute a number. Must be a variable');\n            var same_pow = false,\n                    a_is_unit_multiplier = a.multiplier.equals(1),\n                    m = this.multiplier.clone(),\n                    retval;\n            /*\n             * In order to make the substitution the bases have to first match take\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n             * In both cases the first condition is that the bases match so we begin there\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\n             */\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n                //we cleared the first hurdle but a subsitution may not be possible just yet\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n                    if(a.isLinear()) {\n                        retval = b;\n                    }\n                    else if(a.power.equals(this.power)) {\n                        retval = b;\n                        same_pow = true;\n                    }\n                    if(a.multiplier.equals(this.multiplier))\n                        m = new Frac(1);\n                }\n            }\n            //the next thing is to handle CB\n            else if(this.group === CB || this.previousGroup === CB) {\n                retval = new Symbol(1);\n                this.each(function (x) {\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\n                    retval = _.multiply(retval, subbed);\n\n                });\n            }\n            else if(this.isComposite()) {\n                var symbol = this.clone();\n\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\n                    var find = function (stack, needle) {\n                        for(var x in stack.symbols) {\n                            var sym = stack.symbols[x];\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\n                                return true;\n                        }\n                        return false;\n                    };\n                    //go fish\n                    for(var x in a.symbols) {\n                        if(!find(symbol, a.symbols[x]))\n                            return symbol.clone();\n                    }\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\n                }\n                else {\n                    retval = new Symbol(0);\n                    symbol.each(function (x) {\n                        retval = _.add(retval, x.sub(a, b));\n                    });\n                }\n            }\n            else if(this.group === EX) {\n                // the parsed value could be a function so parse and sub\n                retval = _.parse(this.value).sub(a, b);\n            }\n            else if(this.group === FN) {\n                var nargs = [];\n                for(var i = 0; i < this.args.length; i++) {\n                    var arg = this.args[i];\n                    if(!isSymbol(arg))\n                        arg = _.parse(arg);\n                    nargs.push(arg.sub(a, b));\n                }\n                retval = _.symfunction(this.fname, nargs);\n            }\n            //if we did manage a substitution\n            if(retval) {\n                if(!same_pow) {\n                    //substitute the power\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\n                    //now raise the symbol to that power\n                    retval = _.pow(retval, p);\n                }\n\n                //transfer the multiplier\n                retval.multiplier = retval.multiplier.multiply(m);\n\n                //done\n                return retval;\n            }\n            //if all else fails\n            return this.clone();\n        },\n        isMonomial: function () {\n            if(this.group === S)\n                return true;\n            if(this.group === CB) {\n                for(var x in this.symbols)\n                    if(this.symbols[x].group !== S)\n                        return false;\n            }\n            else\n                return false;\n            return true;\n        },\n        isPi: function () {\n            return this.group === S && this.value === 'pi';\n        },\n        sign: function () {\n            return this.multiplier.sign();\n        },\n        isE: function () {\n            return this.value === 'e';\n        },\n        isSQRT: function () {\n            return this.fname === SQRT;\n        },\n        isConstant: function (check_all, check_symbols) {\n            if(check_symbols && this.group === CB) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].isConstant(true))\n                        return true;\n                }\n            }\n\n            if(check_all === 'functions' && this.isComposite()) {\n                var isConstant = true;\n\n                this.each(function (x) {\n                    if(!x.isConstant(check_all, check_symbols)) {\n                        isConstant = false;\n                    }\n                }, true);\n\n                return isConstant;\n            }\n\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\n                return true;\n            }\n\n            if(check_all && this.group === FN) {\n                for(var i = 0; i < this.args.length; i++) {\n                    if(!this.args[i].isConstant(check_all))\n                        return false;\n                }\n                return true;\n            }\n\n            if(check_all)\n                return isNumericSymbol(this);\n            return this.value === CONST_HASH;\n        },\n        //the symbols is imaginary if\n        //1. n*i\n        //2. a+b*i\n        //3. a*i\n        isImaginary: function () {\n            if(this.imaginary)\n                return true;\n            else if(this.symbols) {\n                for(var x in this.symbols)\n                    if(this.symbols[x].isImaginary())\n                        return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the real part of a symbol\n         * @returns {Symbol}\n         */\n        realpart: function () {\n            if(this.isConstant()) {\n                return this.clone();\n            }\n            else if(this.imaginary)\n                return new Symbol(0);\n            else if(this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.realpart());\n                });\n                return retval;\n            }\n            else if(this.isImaginary())\n                return new Symbol(0);\n            return this.clone();\n        },\n        /*\n         * Return imaginary part of a symbol\n         * @returns {Symbol}\n         */\n        imagpart: function () {\n            if(this.group === S && this.isImaginary())\n                return new Symbol(this.multiplier);\n            if(this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.imagpart());\n                });\n                return retval;\n            }\n            if(this.group === CB)\n                return this.stripVar(Settings.IMAGINARY);\n            return new Symbol(0);\n        },\n        isInteger: function () {\n            return this.isConstant() && this.multiplier.isInteger();\n        },\n        isLinear: function (wrt) {\n            if(wrt) {\n                if(this.isConstant())\n                    return true;\n                if(this.group === S) {\n                    if(this.value === wrt)\n                        return this.power.equals(1);\n                    else\n                        return true;\n                }\n\n                if(this.isComposite() && this.power.equals(1)) {\n                    for(var x in this.symbols) {\n                        if(!this.symbols[x].isLinear(wrt))\n                            return false;\n                    }\n                    return true;\n                }\n\n                if(this.group === CB && this.symbols[wrt])\n                    return this.symbols[wrt].isLinear(wrt);\n                return false;\n            }\n            else\n                return this.power.equals(1);\n        },\n        /**\n         * Checks to see if a symbol has a function by a specified name or within a specified list\n         * @param {String|String[]} names\n         * @returns {Boolean}\n         */\n        containsFunction: function (names) {\n            if(typeof names === 'string')\n                names = [names];\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\n                return true;\n            if(this.symbols) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].containsFunction(names))\n                        return true;\n                }\n            }\n            return false;\n        },\n        multiplyPower: function (p2) {\n            //leave out 1\n            if(this.group === N && this.multiplier.equals(1))\n                return this;\n\n            var p1 = this.power;\n\n            if(this.group !== EX && p2.group === N) {\n                var p = p2.multiplier;\n                if(this.group === N && !p.isInteger()) {\n                    this.convert(P);\n                }\n\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n                if(this.group === P && isInt(this.power)) {\n                    //bring it back to an N\n                    this.value = Math.pow(this.value, this.power);\n                    this.toLinear();\n                    this.convert(N);\n                }\n            }\n            else {\n                if(this.group !== EX) {\n                    p1 = new Symbol(p1);\n                    this.convert(EX);\n                }\n                this.power = _.multiply(p1, p2);\n            }\n\n            return this;\n        },\n        setPower: function (p, retainSign) {\n            //leave out 1\n            if(this.group === N && this.multiplier.equals(1)) {\n                return this;\n            }\n            if(this.group === EX && !isSymbol(p)) {\n                this.group = this.previousGroup;\n                delete this.previousGroup;\n                if(this.group === N) {\n                    this.multiplier = new Frac(this.value);\n                    this.value = CONST_HASH;\n                }\n                else\n                    this.power = p;\n            }\n            else {\n                var isSymbolic = false;\n                if(isSymbol(p)) {\n                    if(p.group === N) {\n                        //p should be the multiplier instead\n                        p = p.multiplier;\n\n                    }\n                    else {\n                        isSymbolic = true;\n                    }\n                }\n                var group = isSymbolic ? EX : P;\n                this.power = p;\n                if(this.group === N && group)\n                    this.convert(group, retainSign);\n            }\n\n            return this;\n        },\n        /**\n         * Checks to see if symbol is located in the denominator\n         * @returns {boolean}\n         */\n        isInverse: function () {\n            if(this.group === EX)\n                return (this.power.multiplier.lessThan(0));\n            return this.power < 0;\n        },\n        /**\n         * Make a duplicate of a symbol by copying a predefined list of items.\n         * The name 'copy' would probably be a more appropriate name.\n         * to a new symbol\n         * @param {Symbol} c\n         * @returns {Symbol}\n         */\n        clone: function (c) {\n            var clone = c || new Symbol(0),\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\n                    properties = [\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n                    l = properties.length, i;\n            if(this.symbols) {\n                clone.symbols = {};\n                for(var x in this.symbols) {\n                    clone.symbols[x] = this.symbols[x].clone();\n                }\n            }\n\n            for(i = 0; i < l; i++) {\n                if(this[properties[i]] !== undefined) {\n                    clone[properties[i]] = this[properties[i]];\n                }\n            }\n\n            clone.power = this.power.clone();\n            clone.multiplier = this.multiplier.clone();\n            //add back the flag to track if this symbol is a conversion symbol\n            if(this.isConversion)\n                clone.isConversion = this.isConversion;\n\n            if(this.isUnit)\n                clone.isUnit = this.isUnit;\n\n            return clone;\n        },\n        /**\n         * Converts a symbol multiplier to one.\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n         * @returns {Symbol}\n         */\n        toUnitMultiplier: function (keepSign) {\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n            this.multiplier.den = new bigInt(1);\n            return this;\n        },\n        /**\n         * Converts a Symbol's power to one.\n         * @returns {Symbol}\n         */\n        toLinear: function () {\n            // Do nothing if it's already linear\n            if(this.power.equals(1)) {\n                return this;\n            }\n            this.setPower(new Frac(1));\n            return this;\n        },\n        /**\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n         * @param {Function} fn\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\n         */\n        each: function (fn, deep) {\n            if(!this.symbols) {\n                fn.call(this, this, this.value);\n            }\n            else {\n                for(var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    if(sym.group === PL && deep) {\n                        for(var y in sym.symbols) {\n                            fn.call(x, sym.symbols[y], y);\n                        }\n                    }\n                    else\n                        fn.call(this, sym, x);\n                }\n            }\n        },\n        /**\n         * A numeric value to be returned for Javascript. It will try to\n         * return a number as far a possible but in case of a pure symbolic\n         * symbol it will just return its text representation\n         * @returns {String|Number}\n         */\n        valueOf: function () {\n            if(this.group === N)\n                return this.multiplier.valueOf();\n            else if(this.power === 0) {\n                return 1;\n            }\n            else if(this.multiplier === 0) {\n                return 0;\n            }\n            else {\n                return text(this, 'decimals');\n            }\n        },\n        /**\n         * Checks to see if a symbols has a particular variable within it.\n         * Pass in true as second argument to include the power of exponentials\n         * which aren't check by default.\n         * @example var s = _.parse('x+y+z'); s.contains('y');\n         * //returns true\n         * @param {any} variable\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        contains: function (variable, all) {\n            //contains expects a string\n            variable = String(variable);\n            var g = this.group;\n            if(this.value === variable)\n                return true;\n            if(this.symbols) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].contains(variable, all))\n                        return true;\n                }\n            }\n            if(g === FN || this.previousGroup === FN) {\n                for(var i = 0; i < this.args.length; i++) {\n                    if(this.args[i].contains(variable, all))\n                        return true;\n                }\n            }\n\n            if(g === EX) {\n                //exit only if it does\n                if(all && this.power.contains(variable, all)) {\n                    return true;\n                }\n                if(this.value === variable)\n                    return true;\n\n            }\n\n            return this.value === variable;\n        },\n        /**\n         * Negates a symbols\n         * @returns {boolean}\n         */\n        negate: function () {\n            this.multiplier.negate();\n            if(this.group === CP || this.group === PL)\n                this.distributeMultiplier();\n            return this;\n        },\n        /**\n         * Inverts a symbol\n         * @param {boolean} power_only\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        invert: function (power_only, all) {\n            //invert the multiplier\n            if(!power_only)\n                this.multiplier = this.multiplier.invert();\n            //invert the rest\n            if(isSymbol(this.power)) {\n                this.power.negate();\n            }\n            else if(this.group === CB && all) {\n                this.each(function (x) {\n                    return x.invert();\n                });\n            }\n            else {\n                if(this.power && this.group !== N)\n                    this.power.negate();\n            }\n            return this;\n        },\n        /**\n         * Symbols of group CP or PL may have the multiplier being carried by\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\n         * convenient in many cases, however in some cases the multiplier needs\n         * to be carried individually e.g. 2*x+2*y+2*z.\n         * This method distributes the multiplier over the entire symbol\n         * @param {boolean} all\n         * @returns {Symbol}\n         */\n        distributeMultiplier: function (all) {\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n                for(var x in this.symbols) {\n                    var s = this.symbols[x];\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\n                    s.distributeMultiplier();\n                }\n                this.toUnitMultiplier();\n            }\n\n            return this;\n        },\n        /**\n         * This method expands the exponent over the entire symbol just like\n         * distributeMultiplier\n         * @returns {Symbol}\n         */\n        distributeExponent: function () {\n            if(!this.power.equals(1)) {\n                var p = this.power;\n                for(var x in this.symbols) {\n                    var s = this.symbols[x];\n                    if(s.group === EX) {\n                        s.power = _.multiply(s.power, new Symbol(p));\n                    }\n                    else {\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\n                    }\n                }\n                this.toLinear();\n            }\n            return this;\n        },\n        /**\n         * This method will attempt to up-convert or down-convert one symbol\n         * from one group to another. Not all symbols are convertible from one\n         * group to another however. In that case the symbol will remain\n         * unchanged.\n         * @param {int} group\n         * @param {string} imaginary\n         */\n        convert: function (group, imaginary) {\n            if(group > FN) {\n                //make a clone of this symbol;\n                var cp = this.clone();\n\n                //attach a symbols object and upgrade the group\n                this.symbols = {};\n\n                if(group === CB) {\n                    //symbol of group CB hold symbols bound together through multiplication\n                    //because of commutativity this multiplier can technically be anywhere within the group\n                    //to keep track of it however it's easier to always have the top level carry it\n                    cp.toUnitMultiplier();\n                }\n                else {\n                    //reset the symbol\n                    this.toUnitMultiplier();\n                }\n\n                if(this.group === FN) {\n                    cp.args = this.args;\n                    delete this.args;\n                    delete this.fname;\n                }\n\n                //the symbol may originate from the symbol i but this property no longer holds true\n                //after copying\n                if(this.isImgSymbol)\n                    delete this.isImgSymbol;\n\n                this.toLinear();\n                //attach a clone of this symbol to the symbols object using its proper key\n                this.symbols[cp.keyForGroup(group)] = cp;\n                this.group = group;\n                //objects by default don't have a length property. However, in order to keep track of the number\n                //of sub-symbols we have to impliment our own.\n                this.length = 1;\n            }\n            else if(group === EX) {\n                //1^x is just one so check and make sure\n                if(!(this.group === N && this.multiplier.equals(1))) {\n                    if(this.group !== EX)\n                        this.previousGroup = this.group;\n                    if(this.group === N) {\n                        this.value = this.multiplier.num.toString();\n                        this.toUnitMultiplier();\n                    }\n                    //update the hash to reflect the accurate hash\n                    else\n                        this.value = text(this, 'hash');\n\n                    this.group = EX;\n                }\n            }\n            else if(group === N) {\n                var m = this.multiplier.toDecimal();\n                if(this.symbols)\n                    this.symbols = undefined;\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n            }\n            else if(group === P && this.group === N) {\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n                this.toUnitMultiplier(!imaginary);\n                this.group = P;\n            }\n            return this;\n        },\n        /**\n         * This method is one of the principal methods to make it all possible.\n         * It performs cleanup and prep operations whenever a symbols is\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\n         * group for instance it will remove the redundant symbol. Similarly\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\n         * will remove any dangling zeroes from the symbol. It will also\n         * up-convert or down-convert a symbol if it detects that it's\n         * incorrectly grouped. It should be noted that this method is not\n         * called directly but rather by the 'attach' method for addition groups\n         * and the 'combine' method for multiplication groups.\n         * @param {Symbol} symbol\n         * @param {String} action\n         */\n        insert: function (symbol, action) {\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n            if(!isSymbol(symbol))\n                err('Object ' + symbol + ' is not of type Symbol!');\n            if(this.symbols) {\n                var group = this.group;\n                if(group > FN) {\n                    var key = symbol.keyForGroup(group);\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n                    if(action === 'add') {\n                        var hash = key;\n                        if(existing) {\n                            //add them together using the parser\n                            this.symbols[hash] = _.add(existing, symbol);\n                            //if the addition resulted in a zero multiplier remove it\n                            if(this.symbols[hash].multiplier.equals(0)) {\n                                delete this.symbols[hash];\n                                this.length--;\n\n                                if(this.length === 0) {\n                                    this.convert(N);\n                                    this.multiplier = new Frac(0);\n                                }\n                            }\n                        }\n                        else {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                    }\n                    else {\n                        //check if this is of group P and unwrap before inserting\n                        if(symbol.group === P && isInt(symbol.power)) {\n                            symbol.convert(N);\n                        }\n\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\n                        if(symbol.group !== EX) {\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                            symbol.toUnitMultiplier();\n                        }\n                        else {\n                            symbol.parens = symbol.multiplier.lessThan(0);\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n                            symbol.toUnitMultiplier(true);\n                        }\n\n                        if(existing) {\n                            //remove because the symbol may have changed\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\n                            if(symbol.isConstant()) {\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n                            }\n\n                            this.length--;\n                            //clean up\n                        }\n\n                        //don't insert the symbol if it's 1\n                        if(!symbol.isOne(true)) {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                        else if(symbol.multiplier.lessThan(0)) {\n                            this.negate(); //put back the sign\n                        }\n                    }\n\n                    //clean up\n                    if(this.length === 0)\n                        this.convert(N);\n                    //update the hash\n                    if(this.group === CP || this.group === CB) {\n                        this.updateHash();\n                    }\n                }\n            }\n\n            return this;\n        },\n        //the insert method for addition\n        attach: function (symbol) {\n            if(isArray(symbol)) {\n                for(var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'add');\n                return this;\n            }\n            return this.insert(symbol, 'add');\n        },\n        //the insert method for multiplication\n        combine: function (symbol) {\n            if(isArray(symbol)) {\n                for(var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'multiply');\n                return this;\n            }\n            return this.insert(symbol, 'multiply');\n        },\n        /**\n         * This method should be called after any major \"surgery\" on a symbol.\n         * It updates the hash of the symbol for example if the fname of a\n         * function has changed it will update the hash of the symbol.\n         */\n        updateHash: function () {\n            if(this.group === N)\n                return;\n\n            if(this.group === FN) {\n                var contents = '',\n                        args = this.args,\n                        is_parens = this.fname === PARENTHESIS;\n                for(var i = 0; i < args.length; i++)\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\n                var fn_name = is_parens ? '' : this.fname;\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n            }\n            else if(!(this.group === S || this.group === PL)) {\n                this.value = text(this, 'hash');\n            }\n        },\n        /**\n         * this function defines how every group in stored within a group of\n         * higher order think of it as the switchboard for the library. It\n         * defines the hashes for symbols.\n         * @param {int} group\n         */\n        keyForGroup: function (group) {\n            var g = this.group;\n            var key;\n\n            if(g === N) {\n                key = this.value;\n            }\n            else if(g === S || g === P) {\n                if(group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if(g === FN) {\n                if(group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if(g === PL) {\n                //if the order is reversed then we'll assume multiplication\n                //TODO: possible future dilemma\n                if(group === CB)\n                    key = text(this, 'hash');\n                else if(group === CP) {\n                    if(this.power.equals(1))\n                        key = this.value;\n                    else\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n                }\n                else if(group === PL)\n                    key = this.power.toString();\n                else\n                    key = this.value;\n                return key;\n            }\n            else if(g === CP) {\n                if(group === CP) {\n                    key = text(this, 'hash');\n                }\n                if(group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if(g === CB) {\n                if(group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if(g === EX) {\n                if(group === PL)\n                    key = text(this.power);\n                else\n                    key = text(this, 'hash');\n            }\n\n            return key;\n        },\n        /**\n         * Symbols are typically stored in an object which works fine for most\n         * cases but presents a problem when the order of the symbols makes\n         * a difference. This function simply collects all the symbols and\n         * returns them as an array. If a function is supplied then that\n         * function is called on every symbol contained within the object.\n         * @param {Function} fn\n         * @param {Object} opt\n         * @param {Function} sort_fn\n         * @@param {Boolean} expand_symbol\n         * @returns {Array}\n         */\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n            var collected = [];\n            if(!this.symbols)\n                collected.push(this);\n            else {\n                for(var x in this.symbols) {\n                    var symbol = this.symbols[x];\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n                        collected = collected.concat(symbol.collectSymbols());\n                    }\n                    else\n                        collected.push(fn ? fn(symbol, opt) : symbol);\n                }\n            }\n            if(sort_fn === null)\n                sort_fn = undefined; //WTF Firefox? Seriously?\n\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\n        },\n        /**\n         * Returns the latex representation of the symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        latex: function (option) {\n            return LaTeX.latex(this, option);\n        },\n        /**\n         * Returns the text representation of a symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        text: function (option) {\n            return text(this, option);\n        },\n        /**\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n         * @@param {bool} abs Compares the absolute value\n         */\n        isOne: function (abs) {\n            var f = abs ? 'absEquals' : 'equals';\n            if(this.group === N)\n                return this.multiplier[f](1);\n            else\n                return this.power.equals(0);\n        },\n        isComposite: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CP || g === PL || pg === PL || pg === CP;\n        },\n        isCombination: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CB || pg === CB;\n        },\n        lessThan: function (n) {\n            return this.multiplier.lessThan(n);\n        },\n        greaterThan: function (n) {\n            if(!isSymbol(n)) {\n                n = new Symbol(n);\n            }\n\n            // We can't tell for sure if a is greater than be if they're not both numbers\n            if(!this.isConstant(true) || !n.isConstant(true)) {\n                return false;\n            }\n\n            return this.multiplier.greaterThan(n.multiplier);\n        },\n        /**\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\n         * with other classes the symbol is either the denominator or not.\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n         * denominator and has to be found by looking at the actual symbols themselves.\n         */\n        getDenom: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if(this.group === CB && this.power.lessThan(0))\n                symbol = _.expand(symbol);\n\n            //if the symbol already is the denominator... DONE!!!\n            if(symbol.power.lessThan(0)) {\n                var d = _.parse(symbol.multiplier.den);\n                retval = symbol.toUnitMultiplier();\n                retval.power.negate();\n                retval = _.multiply(d, retval); //put back the coeff\n            }\n            else if(symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.den);\n                for(var x in symbol.symbols)\n                    if(symbol.symbols[x].power < 0)\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n            }\n            else\n                retval = _.parse(symbol.multiplier.den);\n            return retval;\n        },\n        getNum: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if(symbol.group === CB && symbol.power.lessThan(0))\n                symbol = _.expand(symbol);\n            //if the symbol already is the denominator... DONE!!!\n            if(symbol.power.greaterThan(0) && symbol.group !== CB) {\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n            }\n            else if(symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.num);\n                symbol.each(function (x) {\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n                        retval = _.multiply(retval, x.clone());\n                    }\n                });\n            }\n            else {\n                retval = _.parse(symbol.multiplier.num);\n            }\n            return retval;\n        },\n        toString: function () {\n            return this.text();\n        }\n    };\n\n//Parser =======================================================================\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    function Parser() {\n        //Point to the local parser instead of the global one\n        var _ = this;\n        var bin = {};\n        var preprocessors = {names: [], actions: []};\n\n//Parser.classes ===============================================================\n        function Slice(upper, lower) {\n            this.start = upper;\n            this.end = lower;\n        }\n        ;\n        Slice.prototype.isConstant = function () {\n            return this.start.isConstant() && this.end.isConstant();\n        };\n        Slice.prototype.text = function () {\n            return text(this.start) + ':' + text(this.end);\n        };\n\n        /**\n         * Class used to collect arguments for functions\n         * @returns {Parser.Collection}\n         */\n        function Collection() {\n            this.elements = [];\n        }\n        Collection.prototype.append = function (e) {\n            this.elements.push(e);\n        };\n        Collection.prototype.getItems = function () {\n            return this.elements;\n        };\n        Collection.prototype.toString = function () {\n            return _.pretty_print(this.elements);\n        };\n        Collection.create = function (e) {\n            var collection = new Collection();\n            if(e)\n                collection.append(e);\n            return collection;\n        };\n\n        function Token(node, node_type, column) {\n            this.type = node_type;\n            this.value = node;\n            if(column !== undefined)\n                this.column = column + 1;\n            if(node_type === Token.OPERATOR) {\n                //copy everything over from the operator\n                var operator = operators[node];\n                for(var x in operator)\n                    this[x] = operator[x];\n\n            }\n            else if(node_type === Token.FUNCTION) {\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n                this.leftAssoc = false;\n            }\n        }\n        Token.prototype.toString = function () {\n            return this.value;\n        };\n        Token.prototype.toString = function () {\n            if(this.is_prefix)\n                return '`' + this.value;\n            return this.value;\n        };\n        //some constants\n        Token.OPERATOR = 'OPERATOR';\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n        Token.FUNCTION = 'FUNCTION';\n        Token.UNIT = 'UNIT';\n        Token.KEYWORD = 'KEYWORD';\n        Token.MAX_PRECEDENCE = 999;\n        //create link to classes\n        this.classes = {\n            Collection: Collection,\n            Slice: Slice,\n            Token: Token\n        };\n//Parser.modules ===============================================================\n        //object for functions which handle complex number\n        var complex = {\n            prec: undefined,\n            cos: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cos(r) * Math.cosh(i));\n                im = _.parse(Math.sin(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sin: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(r) * Math.cosh(i));\n                im = _.parse(Math.cos(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tan: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sec: function (r, i) {\n                var t = this.removeDen(this.cos(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csc: function (r, i) {\n                var t = this.removeDen(this.sin(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            cot: function (r, i) {\n                var t = this.removeDen(this.tan(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acos: function (r, i) {\n                var symbol, sq, a, b, c, squared;\n                symbol = this.fromArray([r, i]);\n                squared = _.pow(symbol.clone(), new Symbol(2));\n                sq = _.expand(squared); //z*z\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n                b = _.expand(_.add(symbol.clone(), a));\n                c = log(b);\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n            },\n            asin: function (r, i) {\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\n            },\n            atan: function (r, i) {\n                // Handle i and -i\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\n                    // Just copy Wolfram Alpha for now. The parenthesis \n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\n                }\n                var a, b, c, symbol;\n                symbol = complex.fromArray([r, i]);\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n            },\n            asec: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.acos.apply(this, d);\n            },\n            acsc: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.asin.apply(this, d);\n            },\n            acot: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.atan.apply(this, d);\n            },\n            //Hyperbolic trig\n            cosh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cosh(r) * Math.cos(i));\n                im = _.parse(Math.sinh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sinh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(r) * Math.cos(i));\n                im = _.parse(Math.cosh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tanh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sech: function (r, i) {\n                var t = this.removeDen(this.cosh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csch: function (r, i) {\n                var t = this.removeDen(this.sinh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            coth: function (r, i) {\n                var t = this.removeDen(this.tanh(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acosh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n            },\n            asinh: function (r, i) {\n                var a, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n                return _.expand(log(_.add(z, a)));\n            },\n            atanh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = log(_.add(z.clone(), new Symbol(1)));\n                b = log(_.subtract(new Symbol(1), z));\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n            },\n            asech: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.acosh.apply(this, t);\n            },\n            acsch: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.asinh.apply(this, t);\n            },\n            acoth: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.atanh.apply(this, t);\n            },\n            sqrt: function (symbol) {\n                var re, im, h, a, d;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n                h = Symbol.hyp(re, im);\n                a = _.add(re.clone(), h);\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n            },\n            log: function (r, i) {\n                var re, im, phi;\n                re = log(Symbol.hyp(r, i));\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\n                im = _.parse(phi);\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\n            },\n            erf(symbol, n) {\n                //Do nothing for now. Revisit this in the future.\n                return _.symfunction('erf', [symbol]);\n\n                n = n || 30;\n\n                var f = function (R, I) {\n                    return block('PARSE2NUMBER', function () {\n                        var retval = new Symbol(0);\n                        for(var i = 0; i < n; i++) {\n                            var a, b;\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\n                            retval = _.add(retval, _.multiply(a, b));\n                        }\n                        return _.multiply(retval, new Symbol(2));\n                    }, true);\n                };\n                var re, im, a, b, c, k;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\n                b = f(re.toString(), im.toString());\n\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\n            },\n            removeDen: function (symbol) {\n                var den, r, i, re, im;\n                if(isArray(symbol)) {\n                    r = symbol[0];\n                    i = symbol[1];\n                }\n                else {\n                    r = symbol.realpart();\n                    i = symbol.imagpart();\n                }\n\n                den = Math.pow(r, 2) + Math.pow(i, 2);\n                re = _.parse(r / den);\n                im = _.parse(i / den);\n                return [re, im];\n            },\n            fromArray: function (arr) {\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n            },\n            evaluate: function (symbol, f) {\n                var re, im, sign;\n\n                sign = symbol.power.sign();\n                //remove it from under the denominator\n                symbol.power = symbol.power.abs();\n                //expand\n                if(symbol.power.greaterThan(1))\n                    symbol = _.expand(symbol);\n                //remove the denominator\n                if(sign < 0) {\n                    var d = this.removeDen(symbol);\n                    re = d[0];\n                    im = d[1];\n                }\n                else {\n                    re = symbol.realpart();\n                    im = symbol.imagpart();\n                }\n\n                if(re.isConstant('all') && im.isConstant('all'))\n                    return this[f].call(this, re, im);\n\n                return _.symfunction(f, [symbol]);\n            }\n        };\n        //object for functions which handle trig\n        var trig = this.trig = {\n            //container for trigonometric function\n            cos: function (symbol) {\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\n                    return new Symbol(0);\n\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\n                        return new Symbol(0);\n                    if(symbol.isConstant()) {\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.cos(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cos');\n                    }\n                }\n                if(symbol.equals(0))\n                    return new Symbol(1);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if(isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = Number(m.num), d = Number(m.den);\n                        if(d === 2)\n                            retval = new Symbol(0);\n                        else if(d === 3) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else if(d === 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if(d === 6) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cos', [symbol]);\n                    }\n                }\n\n                if(c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if(!retval)\n                    retval = _.symfunction('cos', [symbol]);\n\n                return retval;\n            },\n            sin: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        if(symbol % Math.PI === 0) {\n                            return new Symbol(0);\n                        }\n\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.sin(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sin');\n                }\n\n                if(symbol.equals(0))\n                    return new Symbol(0);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        sign = symbol.multiplier.sign(),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n                if(symbol.equals('pi'))\n                    retval = new Symbol(0);\n                else if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if(isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if(d == 3) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if(d == 6) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n                    }\n                }\n\n                if(!retval)\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n\n                if(c && (q === 3 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            tan: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\n                        return new Symbol(0);\n                    }\n                    if(symbol.isConstant()) {\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.tan(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'tan');\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if(isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2)\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\n                        else if(d == 3) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else if(d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if(d == 6) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('tan', [symbol]);\n                    }\n                }\n\n                if(!retval)\n                    retval = _.symfunction('tan', [symbol]);\n\n                if(c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            sec: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        if(Settings.USE_BIG) {\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\n                        }\n\n                        return new Symbol(Math2.sec(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sec');\n                    return _.parse(format('1/cos({0})', symbol));\n                }\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if(isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2)\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\n                        else if(d == 3) {\n                            retval = new Symbol(2);\n                            c = true;\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('sqrt(2)');\n                            c = true;\n                        }\n                        else if(d == 6) {\n                            retval = _.parse('2/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('sec', [symbol]);\n                    }\n                }\n\n                if(c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if(!retval)\n                    retval = _.symfunction('sec', [symbol]);\n\n                return retval;\n            },\n            csc: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        if(Settings.USE_BIG) {\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\n                        }\n\n                        return new Symbol(Math2.csc(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'csc');\n                    return _.parse(format('1/sin({0})', symbol));\n                }\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        sign = symbol.multiplier.sign(),\n                        m = symbol.multiplier.abs();\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if(isInt(m)) {\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if(d == 3) {\n                            retval = _.parse('2/sqrt(3)');\n                            c = true\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('sqrt(2)');\n                            c = true;\n                        }\n                        else if(d == 6) {\n                            retval = new Symbol(2);\n                            c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n                    }\n                }\n\n                if(!retval)\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n\n                if(c && (q === 3 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            cot: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol % (Math.PI/2) === 0) {\n                        return new Symbol(0);\n                    }\n                    if(symbol.isConstant()) {\n                        if(Settings.USE_BIG) {\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\n                        }\n\n                        return new Symbol(Math2.cot(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'cot');\n                    return _.parse(format('1/tan({0})', symbol));\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if(isInt(m)) {\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2)\n                            retval = new Symbol(0);\n                        else if(d == 3) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else if(d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if(d == 6) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cot', [symbol]);\n                    }\n                }\n\n                if(!retval)\n                    retval = _.symfunction('cot', [symbol]);\n\n                if(c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            acos: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        // Handle values in the complex domain\n                        if(symbol.gt(1) || symbol.lt(-1)) {\n                            var x = symbol.toString();\n                            return expand(evaluate(`pi/2-asin(${x})`));\n                        }\n                        // Handle big numbers\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.acos(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acos');\n                }\n                return _.symfunction('acos', arguments);\n            },\n            asin: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        // Handle values in the complex domain\n                        if(symbol.gt(1) || symbol.lt(-1)) {\n                            var i = Settings.IMAGINARY;\n                            var x = symbol.multiplier.toDecimal();\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\n                        }\n                        // Handle big numbers\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.asin(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asin');\n                }\n                return _.symfunction('asin', arguments);\n            },\n            atan: function (symbol) {\n                var retval;\n                if(symbol.equals(0))\n                    retval = new Symbol(0);\n                else if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        // Handle big numbers\n                        if(Settings.USE_BIG) {\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\n                        }\n\n                        return new Symbol(Math.atan(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'atan');\n                    return _.symfunction('atan', arguments);\n                }\n                else if(symbol.equals(-1))\n                    retval = _.parse('-pi/4');\n                else\n                    retval = _.symfunction('atan', arguments);\n                return retval;\n            },\n            asec: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.equals(0)) {\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\n                    }\n                    if(symbol.isConstant()) {\n                        return trig.acos(symbol.invert());\n                    }\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'asec');\n                    }\n                }\n                return _.symfunction('asec', arguments);\n            },\n            acsc: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return trig.asin(symbol.invert());\n                    }\n\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acsc');\n                }\n                return _.symfunction('acsc', arguments);\n            },\n            acot: function (symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n                    }\n\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acot');\n                }\n                return _.symfunction('acot', arguments);\n            },\n            atan2: function (a, b) {\n                if(a.equals(0) && b.equals(0))\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\n\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n                    return new Symbol(Math.atan2(a, b));\n                }\n                return _.symfunction('atan2', arguments);\n            }\n        };\n        //object for functions which handle hyperbolic trig\n        var trigh = this.trigh = {\n            //container for hyperbolic trig function\n            cosh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math.cosh(symbol.valueOf()));\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cosh');\n                    }\n                }\n\n                return retval = _.symfunction('cosh', arguments);\n            },\n            sinh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math.sinh(symbol.valueOf()));\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sinh');\n                    }\n                }\n\n                return retval = _.symfunction('sinh', arguments);\n            },\n            tanh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math.tanh(symbol.valueOf()));\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'tanh');\n                    }\n                }\n\n                return retval = _.symfunction('tanh', arguments);\n            },\n            sech: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return new Symbol(Math.sech(symbol.valueOf()));\n                    }\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sech');\n                    }\n                    return _.parse(format('1/cosh({0})', symbol));\n                }\n\n                return retval = _.symfunction('sech', arguments);\n            },\n            csch: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math.csch(symbol.valueOf()));\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'csch');\n                    }\n                    return _.parse(format('1/sinh({0})', symbol));\n                }\n\n                return retval = _.symfunction('csch', arguments);\n            },\n            coth: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math.coth(symbol.valueOf()));\n                    if(symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'coth');\n                    }\n                    return _.parse(format('1/tanh({0})', symbol));\n                }\n\n                return retval = _.symfunction('coth', arguments);\n            },\n            acosh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acosh');\n                else if(Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\n                else\n                    retval = _.symfunction('acosh', arguments);\n                return retval;\n            },\n            asinh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asinh');\n                else if(Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\n                else\n                    retval = _.symfunction('asinh', arguments);\n                return retval;\n            },\n            atanh: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'atanh');\n                else if(Settings.PARSE2NUMBER) {\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\n                }\n                else\n                    retval = _.symfunction('atanh', arguments);\n                return retval;\n            },\n            asech: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asech');\n                else if(Settings.PARSE2NUMBER)\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\n                else\n                    retval = _.symfunction('asech', arguments);\n                return retval;\n            },\n            acsch: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acsch');\n                else if(Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\n                else\n                    retval = _.symfunction('acsch', arguments);\n                return retval;\n            },\n            acoth: function (symbol) {\n                var retval;\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acoth');\n                else if(Settings.PARSE2NUMBER) {\n                    if(symbol.equals(1))\n                        retval = Symbol.infinity();\n                    else\n                        retval = evaluate(\n                                _.divide(\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\n                                        new Symbol(2)));\n                }\n                else\n                    retval = _.symfunction('acoth', arguments);\n                return retval;\n            }\n        };\n        //list of supported units\n        this.units = {};\n        //list all the supported operators\n        var operators = {\n            '\\\\': {\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            },\n            '!!': {\n                precedence: 7,\n                operator: '!!',\n                action: 'dfactorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n                }\n            },\n            '!': {\n                precedence: 7,\n                operator: '!',\n                action: 'factorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return factorial(e); //wrap it in a factorial function\n                }\n            },\n            '^': {\n                precedence: 6,\n                operator: '^',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '**': {\n                precedence: 6,\n                operator: '**',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '%': {\n                precedence: 4,\n                operator: '%',\n                action: 'percent',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                overloaded: true,\n                overloadAction: 'mod',\n                overloadLeftAssoc: false,\n                operation: function (x) {\n                    return _.divide(x, new Symbol(100));\n                }\n            },\n            '*': {\n                precedence: 4,\n                operator: '*',\n                action: 'multiply',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '/': {\n                precedence: 4,\n                operator: '/',\n                action: 'divide',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '+': {\n                precedence: 3,\n                operator: '+',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            'plus': {\n                precedence: 3,\n                operator: 'plus',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            '-': {\n                precedence: 3,\n                operator: '-',\n                action: 'subtract',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x.negate();\n                }\n            },\n            '=': {\n                precedence: 2,\n                operator: '=',\n                action: 'equals',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '==': {\n                precedence: 1,\n                operator: '==',\n                action: 'eq',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<': {\n                precedence: 1,\n                operator: '<',\n                action: 'lt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<=': {\n                precedence: 1,\n                operator: '<=',\n                action: 'lte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '>': {\n                precedence: 1,\n                operator: '>',\n                action: 'gt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '=>': {\n                precedence: 1,\n                operator: '=>',\n                action: 'gte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ',': {\n                precedence: 0,\n                operator: ',',\n                action: 'comma',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ':': {\n                precedence: 0,\n                operator: ',',\n                action: 'assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false,\n                vectorFn: 'slice'\n            },\n            ':=': {\n                precedence: 0,\n                operator: ',',\n                action: 'function_assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            }\n        };\n        //brackets\n        var brackets = {\n            '(': {\n                type: 'round',\n                id: 1,\n                is_open: true,\n                is_close: false\n            },\n            ')': {\n                type: 'round',\n                id: 2,\n                is_open: false,\n                is_close: true\n            },\n            '[': {\n                type: 'square',\n                id: 3,\n                is_open: true,\n                is_close: false,\n                maps_to: 'vector'\n            },\n            ']': {\n                type: 'square',\n                id: 4,\n                is_open: false,\n                is_close: true\n            },\n            '{': {\n                type: 'curly',\n                id: 5,\n                is_open: true,\n                is_close: false,\n                maps_to: 'Set'\n            },\n            '}': {\n                type: 'curly',\n                id: 6,\n                is_open: false,\n                is_close: true\n            }\n        };\n        // Supported functions.\n        // Format: function_name: [mapped_function, number_of_parameters]\n        var functions = this.functions = {\n            'cos': [trig.cos, 1],\n            'sin': [trig.sin, 1],\n            'tan': [trig.tan, 1],\n            'sec': [trig.sec, 1],\n            'csc': [trig.csc, 1],\n            'cot': [trig.cot, 1],\n            'acos': [trig.acos, 1],\n            'asin': [trig.asin, 1],\n            'atan': [trig.atan, 1],\n            'arccos': [trig.acos, 1],\n            'arcsin': [trig.asin, 1],\n            'arctan': [trig.atan, 1],\n            'asec': [trig.asec, 1],\n            'acsc': [trig.acsc, 1],\n            'acot': [trig.acot, 1],\n            'atan2': [trig.atan2, 2],\n            'acoth': [trigh.acoth, 1],\n            'asech': [trigh.asech, 1],\n            'acsch': [trigh.acsch, 1],\n            'sinh': [trigh.sinh, 1],\n            'cosh': [trigh.cosh, 1],\n            'tanh': [trigh.tanh, 1],\n            'asinh': [trigh.asinh, 1],\n            'sech': [trigh.sech, 1],\n            'csch': [trigh.csch, 1],\n            'coth': [trigh.coth, 1],\n            'acosh': [trigh.acosh, 1],\n            'atanh': [trigh.atanh, 1],\n            'log10': [, 1],\n            'exp': [exp, 1],\n            'radians': [radians, 1],\n            'degrees': [degrees, 1],\n            'min': [min, -1],\n            'max': [max, -1],\n            'erf': [, 1],\n            'floor': [, 1],\n            'ceil': [, 1],\n            'trunc': [, 1],\n            'Si': [, 1],\n            'step': [, 1],\n            'rect': [, 1],\n            'sinc': [sinc, 1],\n            'tri': [, 1],\n            'sign': [sign, 1],\n            'Ci': [, 1],\n            'Ei': [, 1],\n            'Shi': [, 1],\n            'Chi': [, 1],\n            'Li': [, 1],\n            'fib': [, 1],\n            'fact': [factorial, 1],\n            'factorial': [factorial, 1],\n            'continued_fraction': [continued_fraction, [1, 2]],\n            'dfactorial': [, 1],\n            'gamma_incomplete': [, [1, 2]],\n            'round': [round, [1, 2]],\n            'scientific': [scientific, [1, 2]],\n            'mod': [mod, 2],\n            'pfactor': [pfactor, 1],\n            'vector': [vector, -1],\n            'matrix': [matrix, -1],\n            'Set': [set, -1],\n            'imatrix': [imatrix, -1],\n            'parens': [parens, -1],\n            'sqrt': [sqrt, 1],\n            'cbrt': [cbrt, 1],\n            'nthroot': [nthroot, 2],\n            'log': [log, [1, 2]],\n            'expand': [expandall, 1],\n            'abs': [abs, 1],\n            'invert': [invert, 1],\n            'determinant': [determinant, 1],\n            'size': [size, 1],\n            'transpose': [transpose, 1],\n            'dot': [dot, 2],\n            'cross': [cross, 2],\n            'vecget': [vecget, 2],\n            'vecset': [vecset, 3],\n            'vectrim': [vectrim, [1, 2]],\n            'matget': [matget, 3],\n            'matset': [matset, 4],\n            'matgetrow': [matgetrow, 2],\n            'matsetrow': [matsetrow, 3],\n            'matgetcol': [matgetcol, 2],\n            'matsetcol': [matsetcol, 3],\n            'rationalize': [rationalize, 1],\n            'IF': [IF, 3],\n            'is_in': [is_in, 2],\n            //imaginary support\n            'realpart': [realpart, 1],\n            'imagpart': [imagpart, 1],\n            'conjugate': [conjugate, 1],\n            'arg': [arg, 1],\n            'polarform': [polarform, 1],\n            'rectform': [rectform, 1],\n            'sort': [sort, [1, 2]],\n            'integer_part': [, 1],\n            'union': [union, 2],\n            'contains': [contains, 2],\n            'intersection': [intersection, 2],\n            'difference': [difference, 2],\n            'intersects': [intersects, 2],\n            'is_subset': [is_subset, 2],\n            //system support\n            'print': [print, -1]\n        };\n\n        //error handler\n        this.error = err;\n        //this function is used to comb through the function modules and find a function given its name\n        var findFunction = function (fname) {\n            var fmodules = Settings.FUNCTION_MODULES,\n                    l = fmodules.length;\n            for(var i = 0; i < l; i++) {\n                var fmodule = fmodules[i];\n                if(fname in fmodule)\n                    return fmodule[fname];\n            }\n            err('The function ' + fname + ' is undefined!');\n        };\n\n        /**\n         * This method gives the ability to override operators with new methods.\n         * @param {String} which\n         * @param {Function} with_what\n         */\n        this.override = function (which, with_what) {\n            if(!bin[which])\n                bin[which] = [];\n            bin[which].push(this[which]);\n            this[which] = with_what;\n        };\n\n        /**\n         * Restores a previously overridden operator\n         * @param {String} what\n         */\n        this.restore = function (what) {\n            if(this[what])\n                this[what] = bin[what].pop();\n        };\n\n        /**\n         * This method is supposed to behave similarly to the override method but it does not override\n         * the existing function rather it only extends it\n         * @param {String} what\n         * @param {Function} with_what\n         * @param {boolean} force_call\n         */\n        this.extend = function (what, with_what, force_call) {\n            var _ = this,\n                    extended = this[what];\n            if(typeof extended === 'function' && typeof with_what === 'function') {\n                var f = this[what];\n                this[what] = function (a, b) {\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\n                        return f.call(_, a, b);\n                    else\n                        return with_what.call(_, a, b, f);\n                };\n            }\n        };\n\n        /**\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\n         * a few extras. The most important thing is that that it gives a fname and\n         * an args property to the symbols in addition to changing its group to FN\n         * @param {String} fn_name\n         * @param {Array} params\n         * @returns {Symbol}\n         */\n        this.symfunction = function (fn_name, params) {\n            //call the proper function and return the result;\n            var f = new Symbol(fn_name);\n            f.group = FN;\n            if(typeof params === 'object')\n                params = [].slice.call(params);//ensure an array\n            f.args = params;\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n            f.updateHash();\n            return f;\n        };\n\n        /**\n         * An internal function call for the Parser. This will either trigger a real\n         * function call if it can do so or just return a symbolic representation of the\n         * function using symfunction.\n         * @param {String} fn_name\n         * @param {Array} args\n         * @param {int} allowed_args\n         * @returns {Symbol}\n         */\n        this.callfunction = function (fn_name, args, allowed_args) {\n            var fn_settings = functions[fn_name];\n\n            if(!fn_settings)\n                err('Nerdamer currently does not support the function ' + fn_name);\n\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\n                    fn = fn_settings[0], //get the mapped function\n                    retval;\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\n            //an array so make sure to wrap the argument in an array.\n            if(!(args instanceof Array))\n                args = args !== undefined ? [args] : [];\n\n            if(num_allowed_args !== -1) {\n                var is_array = isArray(num_allowed_args),\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n                        num_args = args.length;\n\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n\n                if(num_args < min_args)\n                    err(format(error_msg, 'minimum', min_args, num_args));\n                if(num_args > max_args)\n                    err(format(error_msg, 'maximum', max_args, num_args));\n            }\n\n            /*\n             * The following are very important to the how nerdamer constructs functions!\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n             *     they are expecting a symbolic output.\n             */\n            //check if arguments are all numers\n            var numericArgs = allNumbers(args);\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n//            if (Settings.USE_BIG && numericArgs) {\n//                retval = Big[fn_name].apply(undefined, args);\n//            }\n//            else {\n            if(!fn) {\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\n                fn = findFunction(fn_name);\n                if(Settings.PARSE2NUMBER && numericArgs)\n                    retval = bigConvert(fn.apply(fn, args));\n                else\n                    retval = _.symfunction(fn_name, args);\n            }\n            else {\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n                retval = fn.apply(fn_settings[2], args);\n            }\n//            }\n\n            return retval;\n        };\n        /**\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\n         * substituting spaces for multiplication\n         */\n        this.operator_filter_regex = (function () {\n            //we only want the operators which are singular since those are the ones\n            //that nerdamer uses anyway\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n                if(x.length === 1)\n                    return x;\n            }).join('\\\\');\n            //create a regex which captures all spaces between characters except those\n            //have an operator on one end\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n        })();\n\n        /**\n         * Replaces nerdamer.setOperator\n         * @param {object} operator\n         * @param {boolean} shift\n         */\n        this.setOperator = function (operator, action, shift) {\n            var name = operator.operator; //take the name to be the symbol\n            operators[name] = operator;\n            if(action)\n                this[operator.action] = action;\n            //make the parser aware of the operator\n            _[name] = operator.operation;\n            //make the action available to the parser if infix\n            if(!operator.action && !(operator.prefix || operator.postif)) {\n                operator.action = name;\n            }\n            //if this operator is exclusive then all successive operators should be shifted\n            if(shift === 'over' || shift === 'under') {\n                var precedence = operator.precedence;\n\n                for(var x in operators) {\n                    var o = operators[x];\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n                    if(condition)\n                        o.precedence++;\n                }\n                ;\n            }\n        };\n\n        /**\n         * Gets an opererator by its symbol\n         * @param {String} operator\n         * @returns {Object}\n         */\n        this.getOperator = function (operator) {\n            return operators[operator];\n        };\n\n        this.aliasOperator = function (o, n) {\n            var t = {};\n            var operator = operators[o];\n            //copy everything over to the new operator\n            for(var x in operator) {\n                t[x] = operator[x];\n            }\n            //update the symbol\n            t.operator = n;\n\n            this.setOperator(t);\n        };\n\n        /**\n         * Returns the list of operators. Caution! Can break parser!\n         * @returns {object}\n         */\n        this.getOperators = function () {\n            //will replace this with some cloning action in the future\n            return operators;\n        };\n\n        this.getBrackets = function () {\n            return brackets;\n        };\n        /*\n         * Preforms preprocessing on the string. Useful for making early modification before\n         * sending to the parser\n         * @param {String} e\n         */\n        var prepare_expression = function (e) {\n            /*\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\n             * a side-by-side close and open parenthesis\n             */\n            e = String(e);\n            //apply preprocessors\n            for(var i = 0; i < preprocessors.actions.length; i++)\n                e = preprocessors.actions[i].call(this, e);\n\n            //e = e.split(' ').join('');//strip empty spaces\n            //replace multiple spaces with one space\n            e = e.replace(/\\s+/g, ' ');\n\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n            if(/e/gi.test(e)) {\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\n                    return scientificToDecimal(x);\n                });\n            }\n            //replace scientific numbers\n\n            //allow omission of multiplication after coefficients\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\n                var str = arguments[4],\n                        group1 = arguments[1],\n                        group2 = arguments[2],\n                        start = arguments[3],\n                        first = str.charAt(start),\n                        before = '',\n                        d = '*';\n                if(!first.match(/[\\+\\-\\/\\*]/))\n                    before = str.charAt(start - 1);\n                if(before.match(/[a-z]/i))\n                    d = '';\n                return group1 + d + group2;\n            })\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n                            if(!isNaN(a))\n                                return a;\n                            return a.split('').join('*');\n                        }\n                        return a;\n                    })\n                    //allow omission of multiplication sign between brackets\n                    .replace(/\\)\\(/g, ')*(') || '0';\n            //replace x(x+a) with x*(x+a)\n            while(true) {\n                var e_org = e; //store the original\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n                    var g1 = a || c,\n                            g2 = b || d;\n                    if(g1 in functions) //create a passthrough for functions\n                        return g1 + g2;\n                    return g1 + '*' + g2;\n                });\n                //if the original equals the replace we're done\n                if(e_org === e)\n                    break;\n            }\n            return e;\n        };\n        //delay setting of constants until Settings is ready\n        this.initConstants = function () {\n            this.CONSTANTS = {\n                E: new Symbol(Settings.E),\n                PI: new Symbol(Settings.PI)\n            };\n        };\n        /*\n         * Debugging method used to better visualize vector and arrays\n         * @param {object} o\n         * @returns {String}\n         */\n        this.pretty_print = function (o) {\n            if(Array.isArray(o)) {\n                var s = o.map(x => _.pretty_print(x)).join(', ');\n                if(o.type === 'vector')\n                    return 'vector<' + s + '>';\n                return '(' + s + ')';\n            }\n            return o.toString();\n        };\n        this.peekers = {\n            pre_operator: [],\n            post_operator: [],\n            pre_function: [],\n            post_function: []\n        };\n\n        this.callPeekers = function (name) {\n            if(Settings.callPeekers) {\n                var peekers = this.peekers[name];\n                //remove the first items and stringify\n                var args = arguments2Array(arguments).slice(1).map(stringify);\n                //call each one of the peekers\n                for(var i = 0; i < peekers.length; i++) {\n                    peekers[i].apply(null, args);\n                }\n            }\n        };\n        /*\n         * Tokenizes the string\n         * @param {String} e\n         * @returns {Token[]}\n         */\n        this.tokenize = function (e) {\n            //cast to String\n            e = String(e);\n            //remove multiple white spaces and spaces at beginning and end of string\n            e = e.trim().replace(/\\s+/g, ' ');\n            //remove spaces before and after brackets\n            for(var x in brackets) {\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n                e = e.replace(regex, x);\n            }\n\n            var col = 0; //the column position\n            var L = e.length; //expression length\n            var lpos = 0; //marks beginning of next token\n            var tokens = []; //the tokens container\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n            var depth = 0;\n            var open_brackets = [];\n            var has_space = false; //marks if an open space character was found\n            var SPACE = ' ';\n            var EMPTY_STRING = '';\n            var COMMA = ',';\n            var MINUS = '-';\n            var MULT = '*';\n            //Possible source of bug. Review\n            /*\n             //gets the next space\n             var next_space = function(from) {\n             for(var i=from; i<L; i++) {\n             if(e.charAt(i) === ' ')\n             return i;\n             }\n             \n             return L; //assume the end of the string instead\n             };\n             */\n            /**\n             * Adds a scope to tokens\n             * @param {String} scope_type\n             * @param {int} column\n             * @returns {undefined}\n             */\n            var addScope = function (scope_type, column) {\n                var new_scope = []; //create a new scope\n                if(scope_type !== undefined) {\n                    new_scope.type = scope_type;\n                }\n                new_scope.column = column; //mark the column of the scope\n                scopes.push(new_scope); //add it to the list of scopes\n                target.push(new_scope); //add it to the tokens list since now it's a scope\n                target = new_scope; //point to it\n                depth++; //go down one in scope\n            };\n            /**\n             * Goes up in scope by one\n             * @returns {undefined}\n             */\n            var goUp = function () {\n                scopes.pop(); //remove the scope from the scopes stack\n                target = scopes[--depth]; //point the above scope\n            };\n            /**\n             * Extracts all the operators from the expression string starting at postion start_at\n             * @param {int} start_at\n             * @returns {String}\n             */\n            var get_operator_str = function (start_at) {\n                start_at = start_at !== undefined ? start_at : col;\n                //mark the end of the operator as the start since we're just going\n                //to be walking along the string\n                var end = start_at + 1;\n                //just keep moving along\n                while(e.charAt(end++) in operators) {\n                }\n                //remember that we started at one position ahead. The beginning operator is what triggered\n                //this function to be called in the first place. String.CharAt is zero based so we now\n                //have to correct two places. The initial increment + the extra++ at the end of end during\n                //the last iteration.\n                return e.substring(start_at, end - 1);\n            };\n            /**\n             * Breaks operator up in to several different operators as defined in operators\n             * @param {String} operator_str\n             * @returns {String[]}\n             */\n            var chunkify = function (operator_str) {\n                var start = col - operator_str.length; //start of operator\n                var _operators = [];\n                var operator = operator_str.charAt(0);\n                //grab the largest possible chunks but start at 2 since we already know\n                //that the first character is an operator\n\n                for(var i = 1, L = operator_str.length; i < L; i++) {\n                    var ch = operator_str.charAt(i);\n                    var o = operator + ch;\n                    //since the operator now is undefined then the last operator\n                    //was the largest possible combination.\n                    if(!(o in operators)) {\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                        operator = ch;\n                    }\n                    else\n                        operator = o;//now the operator is the larger chunk\n                }\n                //add the last operator\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                return _operators;\n            };\n\n            /**\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\n             * @param {int} at\n             * @param {String} token\n             * @returns {undefined}\n             */\n            var add_token = function (at, token) {\n                //grab the token if we're not supplied one\n                if(token === undefined)\n                    token = e.substring(lpos, at);\n                //only add it if it's not an empty string\n                if(token in _.units)\n                    target.push(new Token(token, Token.UNIT, lpos));\n                else if(token !== '')\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n            };\n            /**\n             * Adds a function to the output\n             * @param {String} f\n             * @returns {undefined}\n             */\n            var add_function = function (f) {\n                target.push(new Token(f, Token.FUNCTION, lpos));\n            };\n            /**\n             * Tokens are found between operators so this marks the location of where the last token was found\n             * @param {int} position\n             * @returns {undefined}\n             */\n            var set_last_position = function (position) {\n                lpos = position + 1;\n            };\n            /**\n             * When a operator is found and added, especially a combo operator, then the column location\n             * has to be adjusted to the end of the operator\n             * @returns {undefined}\n             */\n            var adjust_column_position = function () {\n                lpos = lpos + operator_str.length - 2;\n                col = lpos - 1;\n            };\n            for(; col < L; col++) {\n                var ch = e.charAt(col);\n                if(ch in operators) {\n                    add_token(col);\n                    //is the last token numeric?\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\n                    //is this character multiplication?\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\n                    //if we're in a new scope then go up by one but if the space\n                    //is right befor an operator then it makes no sense to go up in scope\n                    //consider sin -x. The last position = current position at the minus sign\n                    //this means that we're going for sin(x) -x which is wrong\n                    //Ignore comma since comma is still part of the existing scope.\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n                        has_space = false;\n                        goUp();\n                    }\n                    //mark the last position that a\n                    set_last_position(col + 1);\n                    var operator_str = get_operator_str(col);\n\n                    adjust_column_position();\n                    target.push.apply(target, chunkify(operator_str));\n                }\n                else if(ch in brackets) {\n                    var bracket = brackets[ch];\n\n                    if(bracket.is_open) {\n                        //mark the bracket\n                        open_brackets.push([bracket, lpos]);\n                        var f = e.substring(lpos, col);\n                        if(f in functions) {\n                            add_function(f);\n                        }\n                        else if(f !== '') {\n                            //assume multiplication\n                            //TODO: Add the multiplication to stack\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n                        }\n                        //go down one in scope\n                        addScope(bracket.maps_to, col);\n                    }\n                    else if(bracket.is_close) {\n                        //get the matching bracket\n                        var pair = open_brackets.pop();\n                        //throw errors accordingly\n                        //missing open bracket\n                        if(!pair)\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\n                        //incorrect pair\n                        else if(pair[0].id !== bracket.id - 1)\n                            throw new ParityError('Parity error');\n\n                        add_token(col);\n                        goUp();\n                    }\n                    set_last_position(col);\n                }\n                else if(ch === SPACE) {\n                    var prev = e.substring(lpos, col); //look back\n                    var nxt = e.charAt(col + 1); //look forward\n                    if(has_space) {\n\n                        if(prev in operators) {\n                            target.push(new Token(prev, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, prev);\n                            //we're at the closing space\n                            goUp(); //go up in scope if we're at a space\n\n                            //assume multiplication if it's not an operator except for minus\n                            var is_operator = nxt in operators;\n\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                            }\n                        }\n                        has_space = false; //remove the space\n                    }\n                    else {\n                        //we're at the closing space\n                        //check if it's a function\n                        var f = e.substring(lpos, col);\n\n                        if(f in functions) {\n                            //there's no need to go up in scope if the next character is an operator\n                            has_space = true; //mark that a space was found\n                            add_function(f);\n                            addScope();\n                        }\n                        else if(f in operators) {\n                            target.push(new Token(f, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, f);\n                            //peek ahead to the next character\n                            var nxt = e.charAt(col + 1);\n\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\n                            //is not an operator\n\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                        }\n                        //Possible source of bug. Review\n                        /*\n                         //space can mean multiplication so add the symbol if the is encountered\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n                         var next = e.charAt(col+1);\n                         var next_is_operator = next in operators;\n                         var ns = next_space(col+1);\n                         var next_word = e.substring(col+1, ns);\n                         //the next can either be a prefix operator or no operator\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n                         target.push(new Token('*', Token.OPERATOR, col));\n                         }\n                         */\n                    }\n                    set_last_position(col); //mark this location\n                }\n            }\n            //check that all brackets were closed\n            if(open_brackets.length) {\n                var b = open_brackets.pop();\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n            }\n            //add the last token\n            add_token(col);\n\n            return tokens;\n        };\n        /*\n         * Puts token array in Reverse Polish Notation\n         * @param {Token[]} tokens\n         * @returns {Token[]}\n         */\n        this.toRPN = function (tokens) {\n            var fn = tokens.type;\n            var l = tokens.length, i;\n            var output = [];\n            var stack = [];\n            var prefixes = [];\n            var collapse = function (target, destination) {\n                while(target.length)\n                    destination.push(target.pop());\n            };\n            //mark all the prefixes and add them to the stack\n            for(i = 0; i < l; i++) {\n                var token = tokens[i];\n                if(token.type !== Token.OPERATOR)\n                    break;\n                if(!token.prefix)\n                    throw new OperatorError('Not a prefix operator');\n                token.is_prefix = true;\n                stack.push(token);\n            }\n            //begin with remaining tokens\n            for(; i < l; i++) {\n                var e = tokens[i];\n                if(e.type === Token.OPERATOR) {\n                    var operator = e;\n\n                    //create the option for the operator being overloaded\n                    if(operator.overloaded) {\n                        var next = tokens[i + 1];\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\n                            operator.postfix = false;\n                            //override the original function with the overload function\n                            operator.action = operator.overloadAction;\n                            operator.leftAssoc = operator.overloadLeftAssoc;\n                        }\n                    }\n\n                    //if the stack is not empty\n                    while(stack.length) {\n                        var last = stack[stack.length - 1];\n                        //if (there is an operator at the top of the operator stack with greater precedence)\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\n                            break;\n                        output.push(stack.pop());\n                    }\n\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\n                        operator.action = operator.vectorFn;\n\n\n                    //if the operator is a postfix operator then we're ready to go since it belongs\n                    //to the preceding token. However the output cannot be empty. It must have either\n                    //an operator or a variable/literal\n                    if(operator.postfix) {\n                        var previous = tokens[i - 1];\n                        if(!previous)\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\n                        else if(previous.type === Token.OPERATOR) {\n                            //a postfix can only be followed by a postfix\n                            if(!previous.postfix)\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n                        }\n                    }\n                    else {\n                        //we must be at an infix so point the operator this\n                        do {\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\n                            var next = tokens[i + 1]; //take a look ahead\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n                            if(next_is_operator) {\n                                //if it's not a prefix operator then it not in the right place\n                                if(!next.prefix) {\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\n                                }\n                                //mark it as a confirmed prefix\n                                next.is_prefix = true;\n                                //add it to the prefixes\n                                prefixes.push(next);\n                                i++;\n                            }\n                        }\n                        while(next_is_operator)\n                    }\n\n                    //if it's a prefix it should be on a special stack called prefixes\n                    //we do this to hold on to prefixes because of left associative operators.\n                    //they belong to the variable/literal but if placed on either the stack\n                    //or output there's no way of knowing this. I might be wrong so I welcome\n                    //any discussion about this.\n\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n                        prefixes.push(operator);\n                    else\n                        stack.push(operator);\n                    //move the prefixes to the stack\n                    while(prefixes.length) {\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n                            stack.push(prefixes.pop());\n                        else\n                            break;\n                    }\n                }\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\n                    //move prefixes to stack at beginning of scope\n                    if(output.length === 0)\n                        collapse(prefixes, stack);\n                    //done with token\n                    output.push(e);\n                    var last_on_stack = stack[stack.length - 1];\n                    //then move all the prefixes to the output\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\n                        collapse(prefixes, output);\n                }\n                else if(e.type === Token.FUNCTION) {\n                    stack.push(e);\n                }\n                else if(e.type === Token.UNIT) {\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\n                    output.push(e);\n                }\n                //if it's an additonal scope then put that into RPN form\n                if(Array.isArray(e)) {\n                    output.push(this.toRPN(e));\n                    if(e.type)\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n\n                }\n            }\n            //collapse the remainder of the stack and prefixes to output\n            collapse(stack, output);\n            collapse(prefixes, output);\n\n            return output;\n        };\n        /*\n         * Parses the tokens\n         * @param {Tokens[]} rpn\n         * @param {object} substitutions\n         * @returns {Symbol}\n         */\n        this.parseRPN = function (rpn, substitutions) {\n            try {\n                //default substitutions\n                substitutions = substitutions || {};\n                //prepare the substitutions.\n                //we first parse them out as-is\n                for(var x in substitutions)\n                    substitutions[x] = _.parse(substitutions[x], {});\n\n                //Although technically constants,\n                //pi and e are only available when evaluating the expression so add to the subs.\n                //Doing this avoids rounding errors\n                //link e and pi\n                if(Settings.PARSE2NUMBER) {\n                    //use the value provided if the individual for some strange reason prefers this.\n                    //one reason could be to sub e but not pi or vice versa\n                    if(!('e' in substitutions))\n                        substitutions.e = new Symbol(Settings.E);\n                    if((!('pi' in substitutions)))\n                        substitutions.pi = new Symbol(Settings.PI);\n                }\n\n                var Q = [];\n                for(var i = 0, l = rpn.length; i < l; i++) {\n                    var e = rpn[i];\n\n                    //Arrays indicate a new scope so parse that out\n                    if(Array.isArray(e)) {\n                        e = this.parseRPN(e, substitutions);\n                    }\n\n                    if(e) {\n                        if(e.type === Token.OPERATOR) {\n                            if(e.is_prefix || e.postfix)\n                                //resolve the operation assocated with the prefix\n                                Q.push(e.operation(Q.pop()));\n                            else {\n                                var b = Q.pop();\n                                var a = Q.pop();\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n                                if(typeof a === 'undefined')\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n\n                                var is_comma = e.action === 'comma';\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n                                if(a instanceof Set && !is_comma)\n                                    a = Vector.fromSet(a);\n\n                                if(b instanceof Set && !is_comma)\n                                    b = Vector.fromSet(b);\n\n                                //call all the pre-operators\n                                this.callPeekers('pre_operator', a, b, e);\n\n                                var ans = _[e.action](a, b);\n\n                                //call all the pre-operators\n                                this.callPeekers('post_operator', ans, a, b, e);\n\n                                Q.push(ans);\n                            }\n                        }\n                        else if(e.type === Token.FUNCTION) {\n                            var args = Q.pop();\n                            var parent = args.parent; //make a note of the parent\n                            if(!(args instanceof Collection))\n                                args = Collection.create(args);\n                            //the return value may be a vector. If it is then we check\n                            //Q to see if there's another vector on the stack. If it is then\n                            //we check if has elements. If it does then we know that we're dealing\n                            //with an \"getter\" object and return the requested values\n\n                            //call the function. This is the _.callfunction method in nerdamer\n                            //call the function. This is the _.callfunction method in nerdamer\n                            var fn_name = e.value;\n                            var fn_args = args.getItems();\n\n                            //call the pre-function peekers\n                            this.callPeekers('pre_function', fn_name, fn_args);\n\n                            var ret = _.callfunction(fn_name, fn_args);\n\n                            //call the post-function peekers\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\n\n                            var last = Q[Q.length - 1];\n                            var next = rpn[i + 1];\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                                //remove the item from the queue\n                                var item = Q.pop();\n\n                                var getter = ret.elements[0];\n                                //check if it's symbolic. If so put it back and add the item to the stack\n                                if(!getter.isConstant()) {\n                                    item.getter = getter;\n                                    Q.push(item);\n                                    Q.push(ret);\n                                }\n                                else if(getter instanceof Slice) {\n                                    //if it's a Slice return the slice\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                                }\n                                else {\n                                    var index = Number(getter);\n                                    var il = item.elements.length;\n                                    //support for negative indices\n                                    if(index < 0)\n                                        index = il + index;\n                                    //it it's still out of bounds\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                                        //range error\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n\n                                    var element = item.elements[index];\n                                    //cyclic but we need to mark this for future reference\n                                    item.getter = index;\n                                    element.parent = item;\n\n                                    Q.push(element);\n                                }\n                            }\n                            else {\n                                //extend the parent reference\n                                if(parent)\n                                    ret.parent = parent;\n                                Q.push(ret);\n                            }\n\n                        }\n                        else {\n                            var subbed;\n                            var v = e.value;\n\n                            if(v in Settings.ALIASES)\n                                e = _.parse(Settings.ALIASES[e]);\n                            //wrap it in a symbol if need be\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\n                                e = new Symbol(v);\n                            else if(e.type === Token.UNIT) {\n                                e = new Symbol(v);\n                                e.isUnit = true;\n                            }\n\n                            //make substitutions\n                            //Always constants first. This avoids the being overridden\n                            if(v in _.CONSTANTS) {\n                                subbed = e;\n                                e = new Symbol(_.CONSTANTS[v]);\n                            }\n                            //next substitutions. This allows declared variable to be overridden\n                            //check if the values match to avoid erasing the multiplier.\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\n                                subbed = e;\n                                e = substitutions[v].clone();\n                            }\n                            //next declare variables\n                            else if(v in VARS) {\n                                subbed = e;\n                                e = VARS[v].clone();\n                            }\n                            //make notation of what it was before\n                            if(subbed)\n                                e.subbed = subbed;\n\n                            Q.push(e);\n                        }\n                    }\n                }\n\n                var retval = Q[0];\n\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\n                    throw new UnexpectedTokenError('Unexpected token!');\n                }\n\n                return retval;\n            }\n            catch(error) {\n                var rethrowErrors = [OutOfFunctionDomainError];\n                // Rethrow certain errors in the same class to preserve them\n                rethrowErrors.forEach(function (E) {\n                    if(error instanceof E) {\n                        throw new E(error.message + ': ' + e.column);\n                    }\n                });\n\n                throw new ParseError(error.message + ': ' + e.column);\n            }\n        };\n        /**\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\n         * it right away. The operator functions are called when their respective operators are reached. For instance\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\n         * character of the string and placing the operators on the stack and values on the output. When an operator\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\n         * stack.\n         * @param {String} token\n         */\n\n        function Node(token) {\n            this.type = token.type;\n            this.value = token.value;\n            //the incoming token may already be a Node type\n            this.left = token.left;\n            this.right = token.right;\n        }\n\n        Node.prototype.toString = function () {\n            var left = this.left ? this.left.toString() + '---' : '';\n            var right = this.right ? '---' + this.right.toString() : '';\n            return left + '(' + this.value + ')' + right;\n        };\n\n        Node.prototype.toHTML = function (depth, indent) {\n            depth = depth || 0;\n            indent = typeof indent === 'undefined' ? 4 : indent;\n            var tab = function (n) {\n                return ' '.repeat(indent * n);\n            };\n            var html = '';\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n            if(left || right) {\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n            }\n            html += '';\n            return html;\n        };\n\n        this.tree = function (tokens) {\n            var Q = [];\n            for(var i = 0; i < tokens.length; i++) {\n                var e = tokens[i];\n                //Arrays indicate a new scope so parse that out\n                if(Array.isArray(e)) {\n                    e = this.tree(e);\n                    //if it's a comma then it's just arguments\n                    Q.push(e);\n                    continue;\n                }\n                if(e.type === Token.OPERATOR) {\n                    if(e.is_prefix || e.postfix) {\n                        //prefixes go to the left, postfix to the right\n                        var location = e.is_prefix ? 'left' : 'right';\n                        var last = Q.pop();\n                        e = new Node(e);\n                        e[location] = last;\n                        Q.push(e);\n                    }\n                    else {\n                        e = new Node(e);\n                        e.right = Q.pop();\n                        e.left = Q.pop();\n                        Q.push(e);\n                    }\n                }\n                else if(e.type === Token.FUNCTION) {\n                    e = new Node(e);\n                    var args = Q.pop();\n                    e.right = args;\n                    if(e.value === 'object') {\n                        //check if Q has a value\n                        var last = Q[Q.length - 1];\n                        if(last) {\n                            while(last.right) {\n                                last = last.right;\n                            }\n                            last.right = e;\n                            continue;\n                        }\n                    }\n\n                    Q.push(e);\n                }\n                else {\n                    Q.push(new Node(e));\n                }\n            }\n\n            return Q[0];\n        };\n        this.parse = function (e, substitutions) {\n            e = prepare_expression(e);\n            substitutions = substitutions || {};\n            //three passes but easier to debug\n            var tokens = this.tokenize(e);\n            var rpn = this.toRPN(tokens);\n            return this.parseRPN(rpn, substitutions);\n        };\n        /**\n         * TODO: Switch to Parser.tokenize for this method\n         * Reads a string into an array of Symbols and operators\n         * @param {String} expression_string\n         * @returns {Array}\n         */\n        this.toObject = function (expression_string) {\n            var objectify = function (tokens) {\n                var output = [];\n                for(var i = 0, l = tokens.length; i < l; i++) {\n                    var token = tokens[i];\n                    var v = token.value;\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\n                        output.push(new Symbol(v));\n                    }\n                    else if(token.type === Token.FUNCTION) {\n                        //jump ahead since the next object are the arguments\n                        i++;\n                        //create a symbolic function and stick it on output\n                        var f = _.symfunction(v, objectify(tokens[i]));\n                        f.isConversion = true;\n                        output.push(f);\n                    }\n                    else if(token.type === Token.OPERATOR) {\n                        output.push(v);\n                    }\n                    else {\n                        output.push(objectify(token));\n                    }\n                }\n\n                return output;\n            };\n            return objectify(_.tokenize(expression_string));\n        };\n\n        // A helper method for toTeX\n        var chunkAtCommas = function (arr) {\n            var j, k = 0, chunks = [[]];\n            for(var j = 0, l = arr.length; j < l; j++) {\n                if(arr[j] === ',') {\n                    k++;\n                    chunks[k] = [];\n                }\n                else {\n                    chunks[k].push(arr[j]);\n                }\n            }\n            return chunks;\n        };\n\n        // Helper method for toTeX\n        var rem_brackets = function (str) {\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n                if(a)\n                    return a;\n                return str;\n            });\n        };\n\n        var remove_redundant_powers = function (arr) {\n            // The filtered array\n            var narr = [];\n\n            while(arr.length) {\n                // Remove the element from the front\n                var e = arr.shift();\n                var next = arr[0];\n                var next_is_array = isArray(next);\n                var next_is_minus = next === '-';\n\n                // Remove redundant plusses \n                if(e === '^') {\n                    if(next === '+') {\n                        arr.shift();\n                    }\n                    else if(next_is_array && next[0] === '+') {\n                        next.shift();\n                    }\n\n                    // Remove redundant parentheses\n                    if(next_is_array && next.length === 1) {\n                        arr.unshift(arr.shift()[0]);\n                    }\n                }\n\n                // Check if it's a negative power\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\n                    // If so:\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\n                    var last = narr.pop();\n                    // Check if it's something multiplied by\n                    var before = narr[narr.length - 1];\n                    var before_last = '1';\n\n                    if(before === '*') {\n                        narr.pop();\n                        // For simplicity we just pop it. \n                        before_last = narr.pop();\n                    }\n                    // Implied multiplication\n                    else if(isArray(before)) {\n                        before_last = narr.pop();\n                    }\n\n                    narr.push(before_last, '/', last, e);\n\n                    // Remove the negative sign from the power \n                    if(next_is_array) {\n                        next.shift();\n                    }\n                    else {\n                        arr.shift();\n                    }\n\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\n                    if(next_is_array && next.length === 1) {\n                        narr.push(arr.shift()[0]);\n                    }\n                }\n                else {\n                    narr.push(e);\n                }\n            }\n\n            return narr;\n        };\n        /*\n         * Convert expression or object to LaTeX\n         * @param {String} expression_or_obj\n         * @param {object} opt\n         * @returns {String}\n         */\n        this.toTeX = function (expression_or_obj, opt) {\n            opt = opt || {};\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\n\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n                    TeX = [],\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n            // Remove negative powers as per issue #570\n            obj = remove_redundant_powers(obj);\n\n            if(isArray(obj)) {\n                var nobj = [], a, b;\n                //first handle ^\n                for(var i = 0; i < obj.length; i++) {\n                    a = obj[i];\n\n                    if(obj[i + 1] === '^') {\n                        b = obj[i + 2];\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n                        i += 2;\n                    }\n                    else {\n                        nobj.push(a);\n                    }\n                }\n                obj = nobj;\n            }\n\n            for(var i = 0, l = obj.length; i < l; i++) {\n                var e = obj[i];\n\n                // Convert * to cdot\n                if(e === '*') {\n                    e = cdot;\n                }\n\n                if(isSymbol(e)) {\n                    if(e.group === FN) {\n                        var fname = e.fname, f;\n\n                        if(fname === SQRT)\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\n                        else if(fname === ABS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\n                        else if(fname === PARENTHESIS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        else if(fname === Settings.LOG10) {\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n                        }\n                        else if(fname === 'integrate') {\n                            /* Retrive [Expression, x] */\n                            var chunks = chunkAtCommas(e.args);\n                            /* Build TeX */\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[1]);\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\n                        }\n                        else if(fname === 'defint') {\n                            var chunks = chunkAtCommas(e.args),\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[3]),\n                                    lb = this.toTeX(chunks[1]),\n                                    ub = this.toTeX(chunks[2]);\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n\n                        }\n                        else if(fname === 'diff') {\n                            var chunks = chunkAtCommas(e.args);\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n                            if(chunks.length === 1) {\n                                var vars = [];\n                                for(j = 0; j < chunks[0].length; j++) {\n                                    if(chunks[0][j].group === 3) {\n                                        vars.push(chunks[0][j].value);\n                                    }\n                                }\n                                vars.sort();\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\n                            }\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\n                            else if(chunks.length === 2) {\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                            }\n                            /* If we have more than 2 arguments, we assume we've got everything */\n                            else {\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                            }\n\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\n\n                        }\n                        else if(fname === 'sum' || fname === 'product') {\n                            // Split e.args into 4 parts based on locations of , symbols.\n                            var argSplit = [[], [], [], []], j = 0, i;\n                            for(i = 0; i < e.args.length; i++) {\n                                if(e.args[i] === ',') {\n                                    j++;\n                                    continue;\n                                }\n                                argSplit[j].push(e.args[i]);\n                            }\n                            // Then build TeX string.\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n                        }\n                        else if(fname === 'limit') {\n                            var args = chunkAtCommas(e.args).map(function (x) {\n                                if(Array.isArray(x))\n                                    return _.toTeX(x.join(''));\n                                return _.toTeX(String(x));\n                            });\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n                        }\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL)\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\n                        else {\n\n                            f = LaTeX.latex(e, decimals);\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        }\n\n                        TeX.push(f);\n                    }\n                    else {\n                        TeX.push(LaTeX.latex(e, decimals));\n                    }\n                }\n                else if(isArray(e)) {\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\n                }\n                else {\n                    if(e === '/')\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\n                    else\n                        TeX.push(e);\n                }\n            }\n\n            return TeX.join(' ');\n        };\n\n//Parser.functions ==============================================================\n        /* Although parens is not a \"real\" function it is important in some cases when the\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\n         * as the parser will get rid of it at the first opportunity\n         */\n        function parens(symbol) {\n            if(Settings.PARSE2NUMBER) {\n                return symbol;\n            }\n            return _.symfunction('parens', [symbol]);\n        }\n\n        function abs(symbol) {\n\n            //|-∞| = ∞\n            if(symbol.isInfinity) {\n                return Symbol.infinity();\n            }\n            if(symbol.multiplier.lessThan(0))\n                symbol.multiplier.negate();\n\n            if(symbol.isImaginary()) {\n                var re = symbol.realpart();\n                var im = symbol.imagpart();\n                if(re.isConstant() && im.isConstant())\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n            }\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\n                return symbol;\n            }\n\n            if(symbol.isComposite()) {\n                var ms = [];\n                symbol.each(function (x) {\n                    ms.push(x.multiplier);\n                });\n                var gcd = Math2.QGCD.apply(null, ms);\n                if(gcd.lessThan(0)) {\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n                    symbol.distributeMultiplier();\n                }\n            }\n\n            //convert |n*x| to n*|x|\n            var m = _.parse(symbol.multiplier);\n            symbol.toUnitMultiplier();\n\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\n        }\n        /**\n         * The factorial function\n         * @param {Symbol} symbol\n         * @return {Symbol}\n         */\n        function factorial(symbol) {\n            var retval;\n            if(isVector(symbol)) {\n                var V = new Vector();\n                symbol.each(function (x, i) {\n                    //i start at one.\n                    V.set(i - 1, factorial(x));\n                });\n                return V;\n            }\n            if(isMatrix(symbol)) {\n                var M = new Matrix();\n                symbol.each(function (x, i, j) {\n                    //i start at one.\n                    M.set(i, j, factorial(x));\n                });\n                return M;\n            }\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\n                if(isInt(symbol)) {\n                    retval = Math2.bigfactorial(symbol);\n                }\n                else {\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n                }\n\n                retval = bigConvert(retval);\n                return retval;\n            }\n            else if(symbol.isConstant()) {\n                var den = symbol.getDenom();\n                if(den.equals(2)) {\n                    var num = symbol.getNum();\n                    var a, b, c, n;\n\n                    if(!symbol.multiplier.isNegative()) {\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                    }\n                    else {\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\n                    }\n                    c = a.divide(b);\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n                }\n            }\n            return _.symfunction(FACTORIAL, [symbol]);\n        }\n        ;\n        /**\n         * Returns the continued fraction of a number\n         * @param {Symbol} symbol\n         * @param {Symbol} n\n         * @returns {Symbol}\n         */\n        function continued_fraction(symbol, n) {\n            var _symbol = evaluate(symbol);\n            if(_symbol.isConstant()) {\n                var cf = Math2.continuedFraction(_symbol, n);\n                //convert the fractions array to a new Vector\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n                    return new Symbol(x);\n                }));\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n            }\n            return _.symfunction('continued_fraction', arguments);\n        }\n        /**\n         * Returns the error function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function erf(symbol) {\n            var _symbol = evaluate(symbol);\n\n            if(_symbol.isConstant()) {\n                return Math2.erf(_symbol);\n            }\n            else if(_symbol.isImaginary()) {\n                return complex.erf(symbol);\n            }\n            return _.symfunction('erf', arguments);\n        }\n        ;\n        /**\n         * The mod function\n         * @param {Symbol} symbol1\n         * @param {Symbol} symbol2\n         * @returns {Symbol}\n         */\n        function mod(symbol1, symbol2) {\n            if(symbol1.isConstant() && symbol2.isConstant()) {\n                var retval = new Symbol(1);\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n                return retval;\n            }\n            //try to see if division has remainder of zero\n            var r = _.divide(symbol1.clone(), symbol2.clone());\n            if(isInt(r))\n                return new Symbol(0);\n            return _.symfunction('mod', [symbol1, symbol2]);\n        }\n        /**\n         * A branghing function\n         * @param {Boolean} condition\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        function IF(condition, a, b) {\n            if(typeof condition !== 'boolean')\n                if(isNumericSymbol(condition))\n                    condition = !!Number(condition);\n            if(condition)\n                return a;\n            return b;\n        }\n        /**\n         *\n         * @param {Matrix|Vector|Set|Collection} obj\n         * @param {Symbol} item\n         * @returns {Boolean}\n         */\n        function is_in(obj, item) {\n            if(isMatrix(obj)) {\n                for(var i = 0, l = obj.rows(); i < l; i++) {\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\n                        var element = obj.elements[i][j];\n                        if(element.equals(item))\n                            return new Symbol(1);\n                    }\n                }\n            }\n            else if(obj.elements) {\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\n                    if(obj.elements[i].equals(item))\n                        return new Symbol(1);\n                }\n            }\n\n            return new Symbol(0);\n        }\n\n        /**\n         * A symbolic extension for sinc\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sinc(symbol) {\n            if(Settings.PARSE2NUMBER) {\n                if(symbol.isConstant()) {\n                    return new Symbol(Math2.sinc(symbol));\n                }\n                return _.parse(format('sin({0})/({0})', symbol));\n            }\n            return _.symfunction('sinc', [symbol]);\n        }\n\n        /**\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\n         * Thanks @ Happypig375\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function exp(symbol) {\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\n            }\n            return _.parse(format('e^({0})', symbol));\n        }\n\n        /**\n         * Converts value degrees to radians\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function radians(symbol) {\n            return _.parse(format('({0})*pi/180', symbol));\n        }\n\n        /**\n         * Converts value from radians to degrees\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function degrees(symbol) {\n            return _.parse(format('({0})*180/pi', symbol));\n        }\n\n        function nroots(symbol) {\n            var a, b;\n            if(symbol.group === FN && symbol.fname === '') {\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n                b = _.parse(symbol.power);\n            }\n            else if(symbol.group === P) {\n                a = _.parse(symbol.value);\n                b = _.parse(symbol.power);\n            }\n\n            if(a && b && a.group === N && b.group === N) {\n                var _roots = [];\n                var parts = Symbol.toPolarFormArray(symbol);\n                var r = _.parse(a).abs().toString();\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n                var x = arg(a).toString();\n                var n = b.multiplier.den.toString();\n                var p = b.multiplier.num.toString();\n\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n                for(var i = 0; i < n; i++) {\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n                }\n                return Vector.fromArray(_roots);\n            }\n            else if(symbol.isConstant(true)) {\n                var sign = symbol.sign();\n                var x = evaluate(symbol.abs());\n                var root = _.sqrt(x);\n\n                var _roots = [root.clone(), root.negate()];\n\n                if(sign < 0)\n                    _roots = _roots.map(function (x) {\n                        return _.multiply(x, Symbol.imaginary());\n                    });\n            }\n            else {\n                _roots = [_.parse(symbol)];\n            }\n\n            return Vector.fromArray(_roots);\n        }\n\n        /**\n         * Rationalizes a symbol\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rationalize(symbol) {\n            if(symbol.isComposite()) {\n                var retval = new Symbol(0);\n                var num, den, retnum, retden, a, b, n, d;\n                symbol.each(function (x) {\n                    num = x.getNum();\n                    den = x.getDenom();\n                    retnum = retval.getNum();\n                    retden = retval.getDenom();\n                    a = _.multiply(den, retnum);\n                    b = _.multiply(num, retden);\n                    n = _.expand(_.add(a, b));\n                    d = _.multiply(retden, den);\n                    retval = _.divide(n, d);\n                }, true);\n\n                return retval;\n            }\n            return symbol;\n        }\n\n        /**\n         * The square root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sqrt(symbol) {\n            if(!isSymbol(symbol)) {\n                symbol = _.parse(symbol);\n            }\n            \n            // Exit early for EX\n            if(symbol.group === EX) {\n                return _.symfunction(SQRT, [symbol]);\n            }\n\n            if(symbol.fname === '' && symbol.power.equals(1))\n                symbol = symbol.args[0];\n\n            var is_negative = symbol.multiplier.sign() < 0;\n\n            if(Settings.PARSE2NUMBER) {\n                if(symbol.isConstant() && !is_negative) {\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\n                }\n                else if(symbol.isImaginary()) {\n                    return complex.sqrt(symbol);\n                }\n                else if(symbol.group === S) {\n                    return _.symfunction('sqrt', [symbol]);\n                }\n            }\n\n            var img, retval,\n                    isConstant = symbol.isConstant();\n\n            if(symbol.group === CB && symbol.isLinear()) {\n                var m = sqrt(Symbol(symbol.multiplier));\n                for(var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    m = _.multiply(m, sqrt(x));\n                }\n\n                retval = m;\n            }\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n            else if(symbol.fname === SQRT) {\n                var s = symbol.args[0];\n                var ms = symbol.multiplier;\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\n                retval = s;\n                //grab the multiplier\n                if(!ms.equals(1))\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\n            }\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\n            //no need to keep sqrt(x^(1/3))\n            else if(!symbol.power.isInteger()) {\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n                retval = symbol;\n            }\n            else if(symbol.multiplier < 0 && symbol.group === S) {\n                var a = _.parse(symbol.multiplier).negate();\n                var b = _.parse(symbol).toUnitMultiplier().negate();\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\n            }\n            else {\n\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n                //to sqrt(a)*sqrt(b)^1 for better simplification\n                //the sign of the power\n                var sign = symbol.power.sign();\n                //remove the sign\n                symbol.power = symbol.power.abs();\n\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\n                //as a product\n                if(isConstant && symbol.multiplier.lessThan(0)) {\n                    img = Symbol.imaginary();\n                    symbol.multiplier = symbol.multiplier.abs();\n                }\n\n                var q = symbol.multiplier.toDecimal(),\n                        qa = Math.abs(q),\n                        t = Math.sqrt(qa);\n\n                var m;\n                //it's a perfect square so take the square\n                if(isInt(t)) {\n                    m = new Symbol(t);\n                }\n                else if(isInt(q)) {\n                    var factors = Math2.ifactor(q);\n                    var tw = 1;\n                    for(var x in factors) {\n                        var n = factors[x],\n                                nn = (n - (n % 2)); //get out the whole numbers\n                        if(nn) { //if there is a whole number ...\n                            var w = Math.pow(x, nn);\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\n                            q /= w; //reduce the number by the wholes\n                        }\n                    }\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n                }\n                else {\n                    //reduce the numerator and denominator using prime factorization\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n                    var r = [new Symbol(1), new Symbol(1)];\n                    var sq = [new Symbol(1), new Symbol(1)];\n                    for(var i = 0; i < 2; i++) {\n                        var n = c[i];\n                        //get the prime factors and loop through each.\n                        pfactor(n).each(function (x) {\n                            x = Symbol.unwrapPARENS(x);\n                            var b = x.clone().toLinear();\n                            var p = Number(x.power);\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                        });\n                    }\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n                }\n\n\n                //strip the multiplier since we already took the sqrt\n                symbol = symbol.toUnitMultiplier(true);\n                //if the symbol is one just return one and not the sqrt function\n                if(symbol.isOne()) {\n                    retval = symbol;\n                }\n                else if(even(symbol.power.toString())) {\n                    //just raise it to the 1/2\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\n                }\n                else {\n                    retval = _.symfunction(SQRT, [symbol]);\n                }\n\n                //put back the sign that was removed earlier\n                if(sign < 0)\n                    retval.power.negate();\n\n                if(m)\n                    retval = _.multiply(m, retval);\n\n                if(img)\n                    retval = _.multiply(img, retval);\n            }\n\n            if(is_negative && Settings.PARSE2NUMBER)\n                return _.parse(retval);\n\n            return retval;\n        }\n\n        /**\n         * The cube root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function cbrt(symbol) {\n            if(!symbol.isConstant(true)) {\n                var retval;\n\n                var n = symbol.power / 3;\n                //take the cube root of the multplier\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\n                //strip the multiplier\n                var sym = symbol.toUnitMultiplier();\n\n                //simplify the power\n                if(isInt(n)) {\n                    retval = _.pow(sym.toLinear(), _.parse(n));\n                }\n                else {\n                    if(sym.group === CB) {\n                        retval = new Symbol(1);\n                        sym.each(function (x) {\n                            retval = _.multiply(retval, cbrt(x));\n                        });\n                    }\n                    else {\n                        retval = _.symfunction('cbrt', [sym]);\n                    }\n                }\n\n                return _.multiply(m, retval);\n            }\n            return nthroot(symbol, new Symbol(3));\n        }\n\n        function scientific(symbol, sigfigs) {\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\n            //display this\n            symbol.scientific = sigfigs || 10;\n            return symbol;\n        }\n\n        /**\n         *\n         * @param {Symbol} num - the number being raised\n         * @param {Symbol} p - the exponent\n         * @param {type} prec - the precision wanted\n         * @param {bool} asbig - true if a bigDecimal is wanted\n         * @returns {Symbol}\n         */\n        function nthroot(num, p, prec, asbig) {\n            //clone p and convert to a number if possible\n            p = evaluate(_.parse(p));\n\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\n            if(p.equals(0)) {\n                throw new UndefinedError('Unable to calculate nthroots of zero');\n            }\n\n            //Stop computation if it negative and even since we have an imaginary result\n            if(num < 0 && even(p))\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\n\n            //return non numeric values unevaluated\n            if(!num.isConstant(true)) {\n                return _.symfunction('nthroot', arguments);\n            }\n\n            //evaluate numeric values\n            if(num.group !== N) {\n                num = evaluate(num);\n            }\n\n            //default is to return a big value\n            if(typeof asbig === 'undefined')\n                asbig = true;\n\n            prec = prec || 25;\n\n            var sign = num.sign();\n            var retval;\n            var ans;\n\n            if(sign < 0) {\n                num = abs(num); //remove the sign\n            }\n\n            if(isInt(num) && p.isConstant()) {\n\n                if(num < 18446744073709551616) {\n                    //2^64\n                    ans = Frac.create(Math.pow(num, 1 / p));\n                }\n                else {\n                    ans = Math2.nthroot(num, p);\n                }\n\n                var retval;\n                if(asbig) {\n                    retval = new Symbol(ans);\n                }\n                retval = new Symbol(ans.toDecimal(prec));\n\n                return _.multiply(new Symbol(sign), retval);\n            }\n        }\n\n        function pfactor(symbol) {\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n            //More Big Number issues >:(\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\n                return symbol;\n            //Fix issue #298\n            if(symbol.equals(Math.PI))\n                return new Symbol(Math.PI);\n            //evaluate the symbol to merge constants\n            symbol = evaluate(symbol.clone());\n\n            if(symbol.isConstant()) {\n                var retval = new Symbol(1);\n                var m = symbol.toString();\n                if(isInt(m)) {\n                    var factors = Math2.ifactor(m);\n                    for(var factor in factors) {\n                        var p = factors[factor];\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n                    }\n                }\n                else {\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n                }\n            }\n            else\n                retval = _.symfunction('pfactor', arguments);\n            return retval;\n        }\n\n        /**\n         * Get's the real part of a complex number. Return number if real\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function realpart(symbol) {\n            return symbol.realpart();\n        }\n\n        /**\n         * Get's the imaginary part of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function imagpart(symbol) {\n            return symbol.imagpart();\n        }\n\n        /**\n         * Computes the conjugate of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function conjugate(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if(re.isConstant() && im.isConstant())\n                return new Symbol(Math.atan2(im, re));\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if(re.isConstant() && im.isConstant()) {\n                if(im.equals(0) && re.equals(-1)) {\n                    return _.parse('pi');\n                }\n                else if(im.equals(1) && re.equals(0)) {\n                    return _.parse('pi/2');\n                }\n                else if(im.equals(1) && re.equals(1)) {\n                    return _.parse('pi/4');\n                }\n                return new Symbol(Math.atan2(im, re));\n            }\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the polarform of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function polarform(symbol) {\n            var p, r, e, theta;\n            p = Symbol.toPolarFormArray(symbol);\n            theta = p[1];\n            r = p[0];\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n            return _.multiply(r, e);\n        }\n\n        /**\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rectform(symbol) {\n            //TODO: e^((i*pi)/4)\n            var original = symbol.clone();\n            try {\n                var f, p, q, s, h, d, n;\n                f = decompose_fn(symbol, 'e', true);\n                p = _.divide(f.x.power, Symbol.imaginary());\n                q = evaluate(trig.tan(p));\n                s = _.pow(f.a, new Symbol(2));\n                d = q.getDenom(true);\n                n = q.getNum();\n                h = Symbol.hyp(n, d);\n                //check\n                if(h.equals(f.a)) {\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\n                }\n                else {\n                    return original;\n                }\n            }\n            catch(e) {\n                return original;\n            }\n        }\n\n        function symMinMax(f, args) {\n            args.map(function (x) {\n                x.numVal = evaluate(x).multiplier;\n            });\n            var l, a, b, a_val, b_val;\n            while(true) {\n                l = args.length;\n                if(l < 2)\n                    return args[0];\n                a = args.pop();\n                b = args[l - 2];\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n                    args.pop();\n                    args.push(a);\n                }\n            }\n        }\n\n        /**\n         * Returns maximum of a set of numbers\n         * @returns {Symbol}\n         */\n        function max() {\n            var args = [].slice.call(arguments);\n            if(allSame(args))\n                return args[0];\n            if(allNumbers(args))\n                return new Symbol(Math.max.apply(null, args));\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('max', args);\n            return _.symfunction('max', args);\n        }\n\n        /**\n         * Returns minimum of a set of numbers\n         * @returns {Symbol}\n         */\n        function min() {\n            var args = [].slice.call(arguments);\n            if(allSame(args))\n                return args[0];\n            if(allNumbers(args))\n                return new Symbol(Math.min.apply(null, args));\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('min', args);\n            return _.symfunction('min', args);\n        }\n\n        /**\n         * Returns the sign of a number\n         * @param {Symbol} x\n         * @returns {Symbol}\n         */\n        function sign(x) {\n            if(x.isConstant(true))\n                return new Symbol(Math.sign(evaluate(x)));\n            return _.symfunction('sign', arguments);\n        }\n\n        function sort(symbol, opt) {\n            opt = opt ? opt.toString() : 'asc';\n            var getval = function (e) {\n                if(e.group === N)\n                    return e.multiplier;\n                if(e.group === FN) {\n                    if(e.fname === '')\n                        return getval(e.args[0]);\n                    return e.fname;\n                }\n                if(e.group === S)\n                    return e.power;\n\n                return e.value;\n            };\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n            return new Vector(symbols.sort(function (a, b) {\n                var aval = getval(a),\n                        bval = getval(b);\n                if(opt === 'desc')\n                    return bval - aval;\n                return aval - bval;\n            }));\n        }\n\n        /**\n         * The log function\n         * @param {Symbol} symbol\n         * @param {Symbol} base\n         * @returns {Symbol}\n         */\n        function log(symbol, base) {\n\n            if(symbol.equals(1)) {\n                return new Symbol(0);\n            }\n\n            var retval;\n\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\n\n                if(symbol.power.sign() < 0) {\n                    retval.negate();\n                }\n\n                // Exit early\n                return retval;\n            }\n\n            //log(0) is undefined so complain\n            if(symbol.equals(0)) {\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\n            }\n\n            //deal with imaginary values\n            if(symbol.isImaginary()) {\n                return complex.evaluate(symbol, Settings.LOG);\n            }\n\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n                var log_sym = Math.log(symbol);\n                var log_base = Math.log(base);\n                retval = new Symbol(log_sym / log_base);\n            }\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n                symbol.power.negate();\n                //move the negative outside but keep the positive inside :)\n                retval = log(symbol).negate();\n            }\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\n                var p = symbol.power;\n                retval = isSymbol(p) ? p : new Symbol(p);\n            }\n            else if(symbol.group === FN && symbol.fname === 'exp') {\n                var s = symbol.args[0];\n                if(symbol.multiplier.equals(1))\n                    retval = _.multiply(s, new Symbol(symbol.power));\n                else\n                    retval = _.symfunction(Settings.LOG, [symbol]);\n            }\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n                // Parse for safety.\n                symbol = _.parse(symbol);\n\n                var img_part;\n                if(symbol.multiplier.lessThan(0)) {\n                    symbol.negate();\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n                }\n\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n\n                if(img_part) {\n                    retval = _.add(retval, img_part);\n                }\n\n            }\n            else {\n                var s;\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n                    symbol.toLinear();\n                }\n                //log(a,a) = 1 since the base is allowed to be changed.\n                //This was pointed out by Happypig375 in issue #280\n                if(arguments.length > 1 && allSame(arguments)) {\n                    retval = new Symbol(1);\n                }\n                else {\n                    retval = _.symfunction(Settings.LOG, arguments);\n                }\n\n                if(s)\n                    retval = _.multiply(s, retval);\n            }\n\n            return retval;\n        }\n\n        /**\n         * Round a number up to s decimal places\n         * @param {Number} x\n         * @param {int} s - the number of decimal places\n         * @returns {undefined}\n         */\n        function round(x, s) {\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n            if(x.isConstant() && sIsConstant) {\n                var v, e, exp, retval;\n                v = x;\n                //round the coefficient of then number but not the actual decimal value\n                //we know this because a negative number was passed\n                if(s && s.lessThan(0)) {\n                    s = abs(s);\n                    //convert the number to exponential form\n                    e = Number(x).toExponential().toString().split('e');\n                    //point v to the coefficient of then number\n                    v = e[0];\n                    //set the expontent\n                    exp = e[1];\n                }\n                //round the number to the requested precision\n                retval = new Symbol(nround(v, Number(s || 0)));\n                //if there's a exponent then put it back\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\n            }\n\n\n            return _.symfunction('round', arguments);\n        }\n\n        /**\n         * Gets the quadrant of the trig function\n         * @param {Frac} m\n         * @returns {Int}\n         */\n        function getQuadrant(m) {\n            var v = m % 2, quadrant;\n\n            if(v < 0)\n                v = 2 + v; //put it in terms of pi\n\n            if(v >= 0 && v <= 0.5)\n                quadrant = 1;\n            else if(v > 0.5 && v <= 1)\n                quadrant = 2;\n            else if(v > 1 && v <= 1.5)\n                quadrant = 3;\n            else\n                quadrant = 4;\n            return quadrant;\n        }\n\n        /*\n         * Serves as a bridge between numbers and bigNumbers\n         * @param {Frac|Number} n\n         * @returns {Symbol}\n         */\n        function bigConvert(n) {\n            if(!isFinite(n)) {\n                var sign = Math.sign(n);\n                var r = new Symbol(String(Math.abs(n)));\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\n                return r;\n            }\n            if(isSymbol(n))\n                return n;\n            if(typeof n === 'number') {\n                try {\n                    n = Frac.simple(n);\n                }\n                catch(e) {\n                    n = new Frac(n);\n                }\n            }\n\n            var symbol = new Symbol(0);\n            symbol.multiplier = n;\n            return symbol;\n        }\n        ;\n\n        function clean(symbol) {\n            // handle functions with numeric values\n            // handle denominator within denominator\n            // handle trig simplifications\n            var g = symbol.group, retval;\n            //Now let's get to work\n            if(g === CP) {\n                var num = symbol.getNum(),\n                        den = symbol.getDenom() || new Symbol(1),\n                        p = Number(symbol.power),\n                        factor = new Symbol(1);\n                if(Math.abs(p) === 1) {\n                    den.each(function (x) {\n                        if(x.group === CB) {\n                            factor = _.multiply(factor, clean(x.getDenom()));\n                        }\n                        else if(x.power.lessThan(0)) {\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n                        }\n                    });\n\n                    var new_den = new Symbol(0);\n                    //now divide out the factor and add to new den\n                    den.each(function (x) {\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\n                    });\n\n                    factor.invert(); //invert so it can be added to the top\n                    var new_num;\n                    if(num.isComposite()) {\n                        new_num = new Symbol(0);\n                        num.each(function (x) {\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n                        });\n                    }\n                    else\n                        new_num = _.multiply(factor, num);\n\n                    retval = _.divide(new_num, new_den);\n                }\n            }\n            else if(g === CB) {\n                retval = new Symbol(1);\n                symbol.each(function (x) {\n                    retval = _.multiply(retval, _.clean(x));\n                });\n            }\n            else if(g === FN) {\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\n                    retval = block('PARSE2NUMBER', function () {\n                        return _.parse(symbol);\n                    }, true);\n            }\n\n            if(!retval)\n                retval = symbol;\n\n            return retval;\n        }\n\n        /**\n         * A wrapper for the expand function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function expandall(symbol, opt) {\n            opt = opt || {\n                expand_denominator: true,\n                expand_functions: true\n            };\n            return expand(symbol, opt);\n        }\n        /**\n         * Expands a symbol\n         * @param symbol\n         */\n        // Old expand\n        function expand(symbol, opt) {\n            if(Array.isArray(symbol)) {\n                return symbol.map(function (x) {\n                    return expand(x, opt);\n                });\n            }\n            opt = opt || {};\n            //deal with parenthesis\n            if(symbol.group === FN && symbol.fname === '') {\n                var f = expand(symbol.args[0], opt);\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\n            }\n            // We can expand these groups so no need to waste time. Just return and be done.\n            if([N, P, S].indexOf(symbol.group) !== -1) {\n                return symbol; //nothing to do\n            }\n\n            var original = symbol.clone();\n\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\n            try {\n                // Store the power and multiplier\n                var m = symbol.multiplier.toString();\n                var p = Number(symbol.power);\n                var retval = symbol;\n\n                // Handle (a+b)^2 | (x+x^2)^2\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\n                    var n = p - 1;\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\n                    var f = new Symbol(0);\n\n                    symbol.each(function (x) {\n                        f = _.add(f, expand(_.parse(x), opt));\n                    });\n\n                    var expanded = _.parse(f);\n\n                    for(var i = 0; i < n; i++) {\n                        expanded = mix(expanded, f, opt);\n                    }\n\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\n                }\n                else if(symbol.group === FN && opt.expand_functions === true) {\n                    var args = [];\n                    // Expand function the arguments\n                    symbol.args.forEach(function (x) {\n                        args.push(expand(x, opt));\n                    });\n                    // Put back the power and multiplier\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\n                }\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\n                    // Invert it. Expand it and then re-invert it.\n                    symbol = symbol.invert();\n                    retval = expand(symbol, opt);\n                    retval.invert();\n                }\n                else if(symbol.group === CB) {\n                    var rank = function (s) {\n                        switch(s.group) {\n                            case CP:\n                                return 0;\n                            case PL:\n                                return 1;\n                            case CB:\n                                return 2;\n                            case FN:\n                                return 3;\n                            default:\n                                return 4;\n                        }\n                    };\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\n                        return rank(b) - rank(a);\n                    })\n                            // Distribute the power to each symbol and expand\n                            .map(function (s) {\n                                var x = _.pow(s, _.parse(p));\n                                var e = expand(x, opt);\n                                return e;\n                            });\n\n                    var f = symbols.pop();\n\n                    // If the first symbols isn't a composite then we're done\n                    if(f.isComposite() && f.isLinear()) {\n                        symbols.forEach(function (s) {\n                            f = mix(f, s, opt);\n                        });\n\n                        // If f is of group PL or CP then we can expand some more\n                        if(f.isComposite()) {\n                            if(f.power > 1) {\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\n                            }\n                            // Put back the multiplier\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\n                            ;\n                        }\n                        else {\n                            // Everything is expanded at this point so if it's still a CB\n                            // then just return the symbol\n                            retval = f;\n                        }\n                    }\n                    else {\n                        // Just multiply back in the expanded form of each\n                        retval = f;\n                        symbols.forEach(function (s) {\n                            retval = _.multiply(retval, s);\n                        });\n                        // Put back the multiplier\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\n                    }\n\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\n                    if(retval.group === CB) {\n                        retval = _.parse(retval);\n                    }\n                }\n                else {\n                    // Otherwise just return the expression\n                    retval = symbol;\n                }\n                // Final cleanup and return\n                return retval;\n            }\n            catch(e) {\n                return original;\n            }\n\n            return original;\n        }\n\n        /**\n         * Returns an identity matrix of nxn\n         * @param {Number} n\n         * @returns {Matrix}\n         */\n        function imatrix(n) {\n            return Matrix.identity(n);\n        }\n\n        /**\n         * Retrieves and item from a vector\n         * @param {Vector} vector\n         * @param {Number} index\n         * @returns {Vector|Symbol}\n         */\n        function vecget(vector, index) {\n            if(index.isConstant() && isInt(index))\n                return vector.elements[index];\n            return _.symfunction('vecget', arguments);\n        }\n\n        /**\n         * Removes duplicates from a vector\n         * @param {Vector} vector\n         * @param {Number} tolerance\n         * @returns {Vector}\n         */\n        function vectrim(vector, tolerance) {\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n\n            vector = vector.clone();\n\n            tolerance = Number(tolerance);\n            //place algebraic solutions first\n            vector.elements.sort(function (a, b) {\n                return b.group - a.group;\n            });\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n                return diff <= tolerance;\n            });\n\n            return vector;\n        }\n\n        /**\n         * Set a value for a vector at a given index\n         * @param {Vector} vector\n         * @param {Number} index\n         * @param {Symbol} value\n         * @returns {Vector}\n         */\n        function vecset(vector, index, value) {\n            if(!index.isConstant)\n                return _.symfunction('vecset', arguments);\n            vector.elements[index] = value;\n            return vector;\n        }\n\n        function matget(matrix, i, j) {\n            if(i.isConstant() && j.isConstant())\n                return matrix.elements[i][j];\n            return _.symfunction('matget', arguments);\n        }\n\n        function matgetrow(matrix, i) {\n            if(i.isConstant())\n                return new Matrix(matrix.elements[i]);\n            return _.symfunction('matgetrow', arguments);\n        }\n\n        function matsetrow(matrix, i, x) {\n            //handle symbolics\n            if(!i.isConstant())\n                return _.symfunction('matsetrow', arguments);\n            if(matrix.elements[i].length !== x.elements.length)\n                throw new DimensionError('Matrix row must match row dimensions!');\n            var M = matrix.clone();\n            M.elements[i] = x.clone().elements;\n            return M;\n        }\n\n        function matgetcol(matrix, col_index) {\n            //handle symbolics\n            if(!col_index.isConstant())\n                return _.symfunction('matgetcol', arguments);\n            col_index = Number(col_index);\n            var M = Matrix.fromArray([]);\n            matrix.each(function (x, i, j) {\n                if(j === col_index) {\n                    M.elements.push([x.clone()]);\n                }\n            });\n            return M;\n        }\n\n        function matsetcol(matrix, j, col) {\n            //handle symbolics\n            if(!j.isConstant())\n                return _.symfunction('matsetcol', arguments);\n            j = Number(j);\n            if(matrix.rows() !== col.elements.length)\n                throw new DimensionError('Matrix columns must match number of columns!');\n            col.each(function (x, i) {\n                matrix.set(i - 1, j, x.elements[0].clone());\n            });\n            return matrix;\n        }\n\n\n        function matset(matrix, i, j, value) {\n            matrix.elements[i][j] = value;\n            return matrix;\n        }\n\n        //the constructor for vectors\n        function vector() {\n            return new Vector([].slice.call(arguments));\n        }\n\n        //the constructor for matrices\n        function matrix() {\n            return Matrix.fromArray(arguments);\n        }\n\n        //the constructor for sets\n        function set() {\n            return Set.fromArray(arguments);\n        }\n\n        function determinant(symbol) {\n            if(isMatrix(symbol)) {\n                return symbol.determinant();\n            }\n            return symbol;\n        }\n\n        function size(symbol) {\n            var retval;\n            if(isMatrix(symbol))\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\n            else if(isVector(symbol) || isSet(symbol))\n                retval = new Symbol(symbol.elements.length);\n            else\n                err('size expects a matrix or a vector');\n            return retval;\n        }\n\n        function dot(vec1, vec2) {\n            if(isVector(vec1) && isVector(vec2))\n                return vec1.dot(vec2);\n            err('function dot expects 2 vectors');\n        }\n\n        function cross(vec1, vec2) {\n            if(isVector(vec1) && isVector(vec2))\n                return vec1.cross(vec2);\n            err('function cross expects 2 vectors');\n        }\n\n        function transpose(mat) {\n            if(isMatrix(mat))\n                return mat.transpose();\n            err('function transpose expects a matrix');\n        }\n\n        function invert(mat) {\n            if(isMatrix(mat))\n                return mat.invert();\n            err('invert expects a matrix');\n        }\n\n        //basic set functions\n        function union(set1, set2) {\n            return set1.union(set2);\n        }\n\n        function intersection(set1, set2) {\n            return set1.intersection(set2);\n        }\n\n        function contains(set1, e) {\n            return set1.contains(e);\n        }\n\n        function difference(set1, set2) {\n            return set1.difference(set2);\n        }\n\n        function intersects(set1, set2) {\n            return new Symbol(Number(set1.intersects(set2)));\n        }\n\n        function is_subset(set1, set2) {\n            return new Symbol(Number(set1.is_subset(set2)));\n        }\n\n        function print() {\n            arguments2Array(arguments).map(function (x) {\n                console.log(x.toString());\n            });\n        }\n\n        function testSQRT(symbol) {\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n                var sign = symbol.power.sign();\n                //don't devide the power directly. Notice the use of toString. This makes it possible\n                //to use a bigNumber library in the future\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\n                //place back the sign of the power\n                if(sign < 0)\n                    retval.invert();\n                return retval;\n            }\n            return symbol;\n        }\n\n        //try to reduce a symbol by pulling its power\n        function testPow(symbol) {\n            if(symbol.group === P) {\n                var v = symbol.value;\n\n                var fct = primeFactors(v)[0];\n\n                //safety\n                if(!fct) {\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\n                    return symbol;\n                }\n\n                var n = new Frac(Math.log(v) / Math.log(fct)),\n                        p = n.multiply(symbol.power);\n\n                //we don't want a more complex number than before\n                if(p.den > symbol.power.den)\n                    return symbol;\n\n                if(isInt(p))\n                    symbol = Symbol(Math.pow(fct, p));\n                else\n                    symbol = new Symbol(fct).setPower(p);\n            }\n\n            return symbol;\n        }\n\n        //Link the functions to the parse so they're available outside of the library.\n        //This is strictly for convenience and may be deprecated.\n        this.expand = expand;\n        this.round = round;\n        this.clean = clean;\n        this.sqrt = sqrt;\n        this.cbrt = cbrt;\n        this.abs = abs;\n        this.log = log;\n        this.rationalize = rationalize;\n        this.nthroot = nthroot;\n        this.arg = arg;\n        this.conjugate = conjugate;\n        this.imagpart = imagpart;\n        this.realpart = realpart;\n\n        //TODO:\n        //Utilize the function below instead of the linked function\n        this.getFunction = function (name) {\n            return functions[name][0];\n        };\n\n//Parser.methods ===============================================================\n        this.addPreprocessor = function (name, action, order, shift_cells) {\n            var names = preprocessors.names;\n            var actions = preprocessors.actions;\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\n            if(!order) {\n                names.push(name);\n                actions.push(action);\n            }\n            else {\n                if(shift_cells) {\n                    names.splice(order, 0, name);\n                    actions.splice(order, 0, action);\n                }\n                else {\n                    names[order] = name;\n                    actions[order] = action;\n                }\n            }\n        };\n\n        this.getPreprocessors = function () {\n            var preprocessors = {};\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\n                var name = preprocessors.names[i];\n                preprocessors[name] = {\n                    order: i,\n                    action: preprocessors.actions[i]\n                };\n            }\n            return preprocessors;\n        };\n\n        this.removePreprocessor = function (name, shift_cells) {\n            var i = preprocessors.names.indexOf(name);\n            if(shift_cells) {\n                remove(preprocessors.names, i);\n                remove(preprocessors.actions, i);\n            }\n            else {\n                preprocessors.names[i] = undefined;\n                preprocessors.actions[i] = undefined;\n            }\n        };\n\n        //The loader for functions which are not part of Math2\n        this.mapped_function = function () {\n            var subs = {},\n                    params = this.params;\n\n            for(var i = 0; i < params.length; i++) {\n                subs[params[i]] = String(arguments[i]);\n            }\n\n            return _.parse(this.body, subs);\n        };\n        /**\n         * Adds two symbols\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.add = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with two symbols\n            if(aIsSymbol && bIsSymbol) {\n                //forward the adding of symbols with units to the Unit module\n                if(a.unit || b.unit) {\n                    return _.Unit.add(a, b);\n                }\n                //handle Infinity\n                //https://www.encyclopediaofmath.org/index.php/Infinity\n                if(a.isInfinity || b.isInfinity) {\n                    var aneg = a.multiplier.lessThan(0),\n                            bneg = b.multiplier.lessThan(0);\n\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n                    }\n\n                    var inf = Symbol.infinity();\n                    if(bneg)\n                        inf.negate();\n                    return inf;\n                }\n\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n                    a.distributeMultiplier();\n                    b.distributeMultiplier();\n                    // Fix for issue #606\n                    if(b.length > a.length && a.group === b.group) {\n                        [a, b] = [b, a];\n                    }\n                }\n                \n                //no need to waste time on zeroes\n                if(a.multiplier.equals(0))\n                    return b;\n                if(b.multiplier.equals(0))\n                    return a;\n\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n                    return result;\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        ap = a.power.toString(),\n                        bp = b.power.toString();\n\n                //always keep the greater group on the left.\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\n                    return this.add(b, a);\n                }\n\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\n                 * because it doesn't know which one to prioritize. */\n                //correction to PL dilemma\n                if(g1 === CB && g2 === PL && a.value === b.value) {\n                    //swap\n                    var t = a;\n                    a = b;\n                    b = t;\n                    g1 = a.group;\n                    g2 = b.group;\n                    ap = a.power.toString();\n                    bp = b.power.toString();\n                }\n\n                var powEQ = ap === bp,\n                        v1 = a.value,\n                        v2 = b.value,\n                        aIsComposite = a.isComposite(),\n                        bIsComposite = b.isComposite(),\n                        h1, h2, result;\n\n                if(aIsComposite)\n                    h1 = text(a, 'hash');\n                if(bIsComposite)\n                    h2 = text(b, 'hash');\n\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n                    return this.add(b, a);\n                }\n\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n                if(g1 === PL && g2 === PL) {\n                    v1 = h1;\n                    v2 = h2;\n                }\n\n                var PN = g1 === P && g2 === N,\n                        PNEQ = a.value === b.multiplier.toString(),\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\n\n                //equal values, equal powers\n                if(valEQ && powEQ && g1 === g2) {\n                    //make sure to convert N to something P can work with\n                    if(PN)\n                        b = b.convert(P);//CL\n\n                    //handle PL\n                    if(g1 === PL && (g2 === S || g2 === P)) {\n                        a.distributeMultiplier();\n                        result = a.attach(b);\n                    }\n                    else {\n                        result = a;//CL\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n                            for(var s in b.symbols) {\n                                var x = b.symbols[s];\n                                result.attach(x);\n                            }\n                        }\n                        else\n                            result.multiplier = result.multiplier.add(b.multiplier);\n                    }\n                }\n                //equal values uneven powers\n                else if(valEQ && g1 !== PL) {\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n                    if(g1 === CP && g2 === PL) {\n                        b.insert(a, 'add');\n                        result = b;\n                    }\n                    else {\n                        result = Symbol.shell(PL).attach([a, b]);\n                        //update the hash\n                        result.value = g1 === PL ? h1 : v1;\n                    }\n                }\n                else if(aIsComposite && a.isLinear()) {\n                    var canIterate = g1 === g2,\n                            bothPL = g1 === PL && g2 === PL;\n\n                    //we can only iterate group PL if they values match\n                    if(bothPL)\n                        canIterate = a.value === b.value;\n                    //distribute the multiplier over the entire symbol\n                    a.distributeMultiplier();\n\n                    if(b.isComposite() && b.isLinear() && canIterate) {\n                        b.distributeMultiplier();\n                        //CL\n                        for(var s in b.symbols) {\n                            var x = b.symbols[s];\n                            a.attach(x);\n                        }\n                        result = a;\n                    }\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n\n                    }\n                    else {\n                        result = a.attach(b);\n                    }\n                }\n                else {\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n                        var m = b.multiplier.clone();\n                        b = sqrt(b.toUnitMultiplier().toLinear());\n                        b.multiplier = m;\n                    }\n                    //fix for issue #3 and #159\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n                        result = _.add(expand(a), expand(b));\n                    }\n                    else {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n                    }\n                }\n\n                if(result.multiplier.equals(0))\n                    result = new Symbol(0);\n\n                //make sure to remove unnecessary wraps\n                if(result.length === 1) {\n                    var m = result.multiplier;\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(m);\n                }\n\n                return result;\n            }\n            else {\n                //keep symbols to the right\n                if(bIsSymbol && !aIsSymbol) {\n                    var t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var bIsMatrix = isMatrix(b);\n\n                if(aIsSymbol && bIsMatrix) {\n                    var M = new Matrix();\n                    b.eachElement(function (e, i, j) {\n                        M.set(i, j, _.add(a.clone(), e));\n                    });\n\n                    b = M\n                }\n                else {\n                    if(isMatrix(a) && bIsMatrix) {\n                        b = a.add(b);\n                    }\n                    else if(aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if(isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if(isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return _.add(b, a);\n                        }\n                        else if(isMatrix(a) && isVector(b)) {\n                            if(b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for(var j = 0; j < l; j++) {\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n                return b;\n            }\n\n        };\n        /**\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.subtract = function (a, b) {\n            var aIsSymbol = aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b), t;\n\n            if(aIsSymbol && bIsSymbol) {\n                if(a.unit || b.unit) {\n                    return _.Unit.subtract(a, b);\n                }\n                return this.add(a, b.negate());\n            }\n            else {\n                if(bIsSymbol && isVector(a)) {\n                    b = a.map(function (x) {\n                        return _.subtract(x, b.clone());\n                    });\n                }\n                else if(aIsSymbol && isVector(b)) {\n                    b = b.map(function (x) {\n                        return _.subtract(a.clone(), x);\n                    });\n                }\n                else if(isVector(a) && isVector(b)) {\n                    if(a.dimensions() === b.dimensions())\n                        b = a.subtract(b);\n                    else\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\n                }\n                else if(isMatrix(a) && isVector(b)) {\n                    if(b.elements.length === a.rows()) {\n                        var M = new Matrix(), l = a.cols();\n                        b.each(function (e, i) {\n                            var row = [];\n                            for(var j = 0; j < l; j++) {\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n                            }\n                            M.elements.push(row);\n                        });\n                        return M;\n                    }\n                    else\n                        err('Dimensions must match!');\n                }\n                else if(isVector(a) && isMatrix(b)) {\n                    var M = b.clone().negate();\n                    return _.add(M, a);\n                }\n                else if(isMatrix(a) && isMatrix(b)) {\n                    b = a.subtract(b);\n                }\n                else if(isMatrix(a) && bIsSymbol) {\n                    var M = new Matrix();\n                    a.each(function (x, i, j) {\n                        M.set(i, j, _.subtract(x, b.clone()));\n                    });\n                    b = M;\n                }\n                else if(aIsSymbol && isMatrix(b)) {\n                    var M = new Matrix();\n                    b.each(function (x, i, j) {\n                        M.set(i, j, _.subtract(a.clone(), x));\n                    });\n                    b = M;\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the * operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.multiply = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with function assignment here\n            if(aIsSymbol && b instanceof Collection) {\n                b.elements.push(a);\n                return b;\n            }\n            if(aIsSymbol && bIsSymbol) {\n                //if it has a unit then add it and return it right away.\n                if(b.isUnit) {\n                    var result = a.clone();\n                    a.unit = b;\n                    return result;\n                }\n                \n                //if it has units then just forward that problem to the unit module\n                if(a.unit || b.unit) {\n                    return _.Unit.multiply(a, b);\n                }\n\n                //handle Infinty\n                if(a.isInfinity || b.isInfinity) {\n                    if(a.equals(0) || b.equals(0))\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\n                    //x/infinity\n                    if(b.power.lessThan(0)) {\n                        if(!a.isInfinity) {\n                            return new Symbol(0);\n                        }\n                        else {\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\n                        }\n                    }\n\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\n                            inf = Symbol.infinity();\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\n                        if(sign < 0)\n                            inf.negate();\n\n                        return inf;\n                    }\n                }\n                //the quickies\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n                    var retval = new Symbol(t);\n                    return retval;\n                }\n\n                //don't waste time\n                if(a.isOne()) {\n                    return b.clone();\n                }\n                if(b.isOne()) {\n                    return a.clone();\n                }\n\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\n                    return new Symbol(0);\n\n                if(b.group > a.group && !(b.group === CP))\n                    return this.multiply(b, a);\n                //correction for PL/CB dilemma\n                if(a.group === CB && b.group === PL && a.value === b.value) {\n                    var t = a;\n                    a = b;\n                    b = t;//swap\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        bnum = b.multiplier.num,\n                        bden = b.multiplier.den;\n\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n                    //unwrap sqrt\n                    var a_pow = a.power;\n                    var a_multiplier = _.parse(a.multiplier);\n                    a = _.multiply(a_multiplier, a.args[0].clone());\n                    a.setPower(new Frac(0.5).multiply(a_pow));\n                    g1 = a.group;\n                }\n                //simplify n/sqrt(n). Being very specific\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n                    a = _.symfunction(SQRT, [b.clone()]);\n                    b = new Symbol(1);\n                }\n                ;\n\n                var v1 = a.value,\n                        v2 = b.value,\n                        sign = new Frac(a.sign()),\n                        //since P is just a morphed version of N we need to see if they relate\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\n                        //don't multiply the multiplier of b since that's equal to the value of a\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n                        result = a.clone().toUnitMultiplier();\n                b = b.clone().toUnitMultiplier(true);\n\n                //further simplification of sqrt\n                if(g1 === FN && g2 === FN) {\n                    var u = a.args[0].clone();\n                    var v = b.args[0].clone();\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n\n                        var q = _.divide(u, v).invert();\n                        if(q.gt(1) && isInt(q)) {\n                            //b contains a factor a which can be moved to a\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n                            b = new Symbol(1);\n                        }\n                    }\n                    //simplify factorial but only if\n                    //1 - It's division so b will have a negative power\n                    //2 - We're not dealing with factorials of numbers\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n                        //assume that n = positive\n                        var d = _.subtract(u.clone(), v.clone());\n\n                        //if it's not numeric then we don't know if we can simplify so just return\n                        if(d.isConstant()) {\n\n                            //there will never be a case where d == 0 since this will already have\n                            //been handled at the beginning of this function\n                            t = new Symbol(1);\n                            if(d < 0) {\n                                //If d is negative then the numerator is larger so expand that\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\n                                    var s = _.add(u.clone(), new Symbol(i));\n                                    t = _.multiply(t, s);\n                                }\n\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\n\n                                b = new Symbol(1);\n                            }\n                            else {\n                                //Otherwise the denominator is larger so expand that\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\n                                    var s = _.add(v.clone(), new Symbol(i));\n                                    t = _.multiply(t, s);\n                                }\n\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\n\n                                b = new Symbol(1);\n                            }\n                        }\n                    }\n                }\n\n\n                //if both are PL then their hashes have to match\n                if(v1 === v2 && g1 === PL && g1 === g2) {\n                    v1 = a.text('hash');\n                    v2 = b.text('hash');\n                }\n\n                //same issue with (x^2+1)^x*(x^2+1)\n                //EX needs an exception when multiplying because it needs to recognize\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\n                    v1 = text(a, 'hash', EX);\n                }\n\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n                    var p1 = a.power,\n                            p2 = b.power,\n                            isSymbolP1 = isSymbol(p1),\n                            isSymbolP2 = isSymbol(p2),\n                            toEX = (isSymbolP1 || isSymbolP2);\n                    //TODO: this needs cleaning up\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n                        result = new Symbol(0);\n                        a.each(function (x) {\n                            result = _.add(result, _.multiply(x, b.clone()));\n                        }, true);\n                    }\n                    else {\n                        //add the powers\n                        result.power = toEX ? _.add(\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\n\n                        //eliminate zero power values and convert them to numbers\n                        if(result.power.equals(0))\n                            result = result.convert(N);\n\n                        //properly convert to EX\n                        if(toEX)\n                            result.convert(EX);\n\n                        //take care of imaginaries\n                        if(a.imaginary && b.imaginary) {\n                            var isEven = even(result.power % 2);\n                            if(isEven) {\n                                result = new Symbol(1);\n                                m.negate();\n                            }\n                        }\n\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n                        if(result.group !== EX && result.previousGroup)\n                            result.previousGroup = undefined;\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n                        //the sign but this isn't true if they're equals symbols\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                }\n                else if(g1 === CB && a.isLinear()) {\n                    if(g2 === CB)\n                        b.distributeExponent();\n                    if(g2 === CB && b.isLinear()) {\n                        for(var s in b.symbols) {\n                            var x = b.symbols[s];\n                            result = result.combine(x);\n                        }\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                    else {\n                        result.combine(b);\n                    }\n                }\n                else {\n                    //the multiplier was already handled so nothing left to do\n                    if(g1 !== N) {\n                        if(g1 === CB) {\n                            result.distributeExponent();\n                            result.combine(b);\n                        }\n                        else if(!b.isOne()) {\n                            var bm = b.multiplier.clone();\n                            b.toUnitMultiplier();\n                            result = Symbol.shell(CB).combine([result, b]);\n                            //transfer the multiplier to the outside\n                            result.multiplier = result.multiplier.multiply(bm);\n                        }\n                    }\n                    else {\n                        result = b.clone().toUnitMultiplier();\n                    }\n                }\n\n                if(result.group === P) {\n                    var logV = Math.log(result.value),\n                            n1 = Math.log(bnum) / logV,\n                            n2 = Math.log(bden) / logV,\n                            ndiv = m.num / bnum,\n                            ddiv = m.den / bden;\n                    //we don't want to divide by zero no do we? Strange things happen.\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n                        result.power = result.power.add(new Frac(n1));\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\n                    }\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n                        result.power = result.power.subtract(new Frac(n2));\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\n                    }\n                }\n\n                //unpack CB if length is only one\n                if(result.length === 1) {\n                    var t = result.multiplier;\n                    //transfer the multiplier\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(t);\n                }\n\n                //reduce square root\n                var ps = result.power.toString();\n                if(even(ps) && result.fname === SQRT) {\n                    //grab the sign of the symbol\n                    sign = sign * result.sign();\n                    var p = result.power;\n                    result = result.args[0];\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\n                    //flip it back to the correct sign\n                    if(sign < 0)\n                        result.negate()\n                }\n                else {\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\n                    if(result.group === CP && result.isImaginary())\n                        result.distributeMultiplier();\n                }\n\n                //back convert group P to a simpler group N if possible\n                if(result.group === P && isInt(result.power.toDecimal()))\n                    result = result.convert(N);\n\n                return result;\n            }\n            else {\n                //****** Matrices & Vector *****//\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\n                    t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\n                if(aIsSymbol && isMatrixB) {\n                    var M = new Matrix();\n                    b.eachElement(function (e, i, j) {\n                        M.set(i, j, _.multiply(a.clone(), e));\n                    });\n\n                    b = M;\n                }\n                else {\n                    if(isMatrixA && isMatrixB) {\n                        b = a.multiply(b);\n                    }\n                    else if(aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if(isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if(isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return this.multiply(b, a);\n                        }\n                        else if(isMatrix(a) && isVector(b)) {\n                            if(b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for(var j = 0; j < l; j++) {\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the / operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.divide = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n\n            if(aIsSymbol && bIsSymbol) {\n                //forward to Unit division\n                if(a.unit || b.unit) {\n                    return _.Unit.divide(a, b);\n                }\n                var result;\n                if(b.equals(0))\n                    throw new DivisionByZero('Division by zero not allowed!');\n\n                if(a.isConstant() && b.isConstant()) {\n                    result = a.clone();\n                    result.multiplier = result.multiplier.divide(b.multiplier);\n                }\n                else {\n                    b.invert();\n                    result = _.multiply(a, b);\n                }\n                return result;\n            }\n            else {\n                //******* Vectors & Matrices *********//\n                var isVectorA = isVector(a), isVectorB = isVector(b);\n                if(aIsSymbol && isVectorB) {\n                    b = b.map(function (x) {\n                        return _.divide(a.clone(), x);\n                    });\n                }\n                else if(isVectorA && bIsSymbol) {\n                    b = a.map(function (x) {\n                        return _.divide(x, b.clone());\n                    });\n                }\n                else if(isVectorA && isVectorB) {\n                    if(a.dimensions() === b.dimensions()) {\n                        b = b.map(function (x, i) {\n                            return _.divide(a.elements[--i], x);\n                        });\n                    }\n                    else\n                        _.error('Cannot divide vectors. Dimensions do not match!');\n                }\n                else {\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\n                    if(isMatrixA && bIsSymbol) {\n                        var M = new Matrix();\n                        a.eachElement(function (x, i, j) {\n                            M.set(i, j, _.divide(x, b.clone()));\n                        });\n                        b = M;\n                    }\n                    else if(aIsSymbol && isMatrixB) {\n                        var M = new Matrix();\n                        b.eachElement(function (x, i, j) {\n                            M.set(i, j, _.divide(a.clone(), x));\n                        });\n                        b = M;\n                    }\n                    else if(isMatrixA && isMatrixB) {\n                        var M = new Matrix();\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\n                            a.eachElement(function (x, i, j) {\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\n                            });\n                            b = M;\n                        }\n                        else {\n                            _.error('Dimensions do not match!');\n                        }\n                    }\n                    else if(isMatrixA && isVectorB) {\n                        if(a.cols() === b.dimensions()) {\n                            var M = new Matrix();\n                            a.eachElement(function (x, i, j) {\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\n                            });\n                            b = M;\n                        }\n                        else {\n                            _.error('Unable to divide matrix by vector.');\n                        }\n                    }\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the ^ operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.pow = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            if(aIsSymbol && bIsSymbol) {\n                //it has units then it's the Unit module's problem\n                if(a.unit || b.unit) {\n                    return _.Unit.pow(a, b);\n                }\n                \n                // Handle abs\n                if(a.group === FN && a.fname === ABS && even(b)) {\n                    var m = a.multiplier.clone();\n                    var raised = _.pow(a.args[0], b);\n                    raised.multiplier = m;\n                    return raised;\n                }\n                \n                // Handle infinity\n                if(a.isInfinity || b.isInfinity) {\n                    if(a.isInfinity && b.isInfinity)\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n                    if(a.isConstant() && b.isInfinity) {\n                        if(a.equals(0)) {\n                            if(b.lessThan(0))\n                                throw new UndefinedError('0^Infinity is undefined!');\n                            return new Symbol(0);\n                        }\n                        if(a.equals(1))\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\n                        //a^-oo\n                        if(b.lessThan(0))\n                            return new Symbol(0);\n                        //a^oo\n                        if(!a.lessThan(0))\n                            return Symbol.infinity();\n                    }\n\n                    if(a.isInfinity && b.isConstant()) {\n                        if(b.equals(0))\n                            throw new UndefinedError(a + '^0 is undefined!');\n                        if(b.lessThan(0))\n                            return new Symbol(0);\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n                    }\n                }\n\n                var aIsZero = a.equals(0);\n                var bIsZero = b.equals(0);\n                if(aIsZero && bIsZero)\n                    throw new UndefinedError('0^0 is undefined!');\n\n                // Return 0 right away if possible\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\n                    return new Symbol(0);\n\n                if(bIsZero)\n                    return new Symbol(1);\n\n                var bIsConstant = b.isConstant(),\n                        aIsConstant = a.isConstant(),\n                        bIsInt = b.isInteger(),\n                        m = a.multiplier,\n                        result = a.clone();\n\n                // 0^0, 1/0, etc. Complain.\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\n                    throw new UndefinedError('Division by zero is not allowed!');\n\n                // Compute imaginary numbers right away\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n                    var k, re, im;\n                    k = Math.PI * b;\n                    re = new Symbol(Math.cos(k));\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n                    return _.add(re, im);\n                }\n\n                // Imaginary number under negative nthroot or to the n\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n                    var re, im, r, theta, nre, nim, phi;\n                    re = a.realpart();\n                    im = a.imagpart();\n                    if(re.isConstant('all') && im.isConstant('all')) {\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\n                        theta = new Symbol(phi);\n                        r = _.pow(Symbol.hyp(re, im), b);\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n                        nim = _.multiply(r, _.trig.sin(theta));\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n                    }\n                }\n\n                // Take care of the symbolic part\n                result.toUnitMultiplier();\n                //simpifly sqrt\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\n                    var s = result.args[0];\n                    s.multiplyPower(new Symbol(0.5));\n                    s.multiplier.multiply(result.multiplier);\n                    s.multiplyPower(b);\n                    result = s;\n                }\n                else {\n                    var sign = m.sign();\n                    //handle cases such as (-a^3)^(1/4)\n                    if(evenFraction(b) && sign < 0) {\n                        // Swaperoo\n                        // First put the sign back on the symbol\n                        result.negate();\n                        // Wrap it in brackets\n                        result = _.symfunction(PARENTHESIS, [result]);\n                        // Move the sign back the exterior and let nerdamer handle the rest\n                        result.negate();\n                    }\n\n                    result.multiplyPower(b);\n                }\n\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n                    var c;\n                    //remove the sign\n                    if(sign < 0) {\n                        a.negate();\n                        if(b.multiplier.den.equals(2))\n                            //we know that the numerator has to be odd and therefore it's i\n                            c = new Symbol(Settings.IMAGINARY);\n                        else if(isInt(b.multiplier)) {\n                            if(even(b.multiplier))\n                                c = new Symbol(1);\n                            else\n                                c = new Symbol(-1);\n                        }\n                        else if(!even(b.multiplier.den)) {\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\n                        }\n                        else {\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                        }\n                    }\n\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n                    //put the back sign\n                    if(c)\n                        result = _.multiply(result, c);\n                }\n                else if(bIsInt && !m.equals(1)) {\n                    var abs_b = b.abs();\n                    // Provide fall back to JS until big number implementation is improved\n                    if(abs_b.gt(Settings.MAX_EXP)) {\n                        if(b.sign() < 0)\n                            return new Symbol(0);\n                        return Symbol.infinity();\n                    }\n                    else {\n                        var p = b.multiplier.toDecimal();\n                        var sgn = Math.sign(p);\n                        p = Math.abs(p);\n                        var multiplier = new Frac(1);\n                        multiplier.num = m.num.pow(p);\n                        multiplier.den = m.den.pow(p);\n                        if(sgn < 0)\n                            multiplier.invert();\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n                        result.multiplier = result.multiplier.multiply(multiplier);\n                    }\n                }\n                else {\n                    var sign = a.sign();\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\n                        if(b.multiplier.den.equals(2)) {\n                            var i = new Symbol(Settings.IMAGINARY);\n                            a.negate();//remove the sign\n                            //if the power is negative then i is negative\n                            if(b.lessThan(0)) {\n                                i.negate();\n                                b.negate();//remove the sign from the power\n                            }\n                            //pull the power normally and put back the imaginary\n                            result = _.multiply(_.pow(a, b), i);\n                        }\n                        else {\n                            var aa = a.clone();\n                            aa.multiplier.negate();\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n                            var r = _.divide(_a, _b);\n                            result = _.multiply(result, r);\n                        }\n                    }\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n\n                        var re = b.realpart();\n                        var im = b.imagpart();\n                        /*\n                         if(b.group === CP && false) {\n                         var ex = _.pow(a.clone(), re);\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\n                         var xa = _.multiply(trig.cos(im), ex);\n                         result = _.add(xi, xa);\n                         }\n                         else {\n                         */\n                        var aa = a.clone().toLinear();\n                        var a1 = _.pow(aa.clone(), re);\n                        var log_a = log(aa.clone());\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n                        result = _.multiply(a1, _.add(b1, c1));\n                        result = _.expand(_.parse(result));\n                        /*\n                         }   \n                         */\n                    }\n                    else {\n                        //b is a symbol\n                        var neg_num = a.group === N && sign < 0,\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\n\n                        //eliminate imaginary if possible\n                        if(a.imaginary) {\n                            if(bIsInt) {\n                                var s, p, n;\n                                s = Math.sign(b);\n                                p = abs(b);\n                                n = p % 4;\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\n                                    result.negate();\n                                }\n                            }\n                            else {\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\n                                        tn = Math.pow(-1, nr.num);\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n                            }\n                        }\n                        //ensure that the sign is carried by the symbol and not the multiplier\n                        //this enables us to check down the line if the multiplier can indeed be transferred\n                        if(sign < 0 && !neg_num)\n                            result.negate();\n\n                        //retain the absolute value\n                        if(bIsConstant && a.group !== EX) {\n                            var evenr = even(b.multiplier.den),\n                                    evenp = even(a.power),\n                                    n = result.power.toDecimal(),\n                                    evennp = even(n);\n                            if(evenr && evenp && !evennp) {\n                                if(n === 1)\n                                    result = _.symfunction(ABS, [result]);\n                                else if(!isInt(n)) {\n                                    var p = result.power;\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                                }\n                                else {\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\n                                            result.clone().setPower(new Frac(n - 1)));\n                                }\n                                //quick workaround. Revisit\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\n                                    result = result.args[0];\n                            }\n                        }\n                        //multiply out sqrt\n                        if(b.equals(2) && result.group === CB) {\n                            var _result = new Symbol(1);\n                            result.each(function (sym) {\n                                _result = _.multiply(_result, _.pow(sym, b));\n                            });\n                            result = _result;\n                        }\n                    }\n                }\n\n                result = testSQRT(result);\n\n                // Don't multiply until we've tested the remaining symbol\n                if(num && den) {\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\n                }\n\n                // Reduce square root\n                if(result.fname === SQRT) {\n                    var isEX = result.group === EX;\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n                    if(even(t)) {\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                                m = result.multiplier;\n                        result = _.pow(result.args[0], pt);\n                        result.multiplier = result.multiplier.multiply(m);\n                    }\n                }\n                // Detect Euler's identity\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\n                    var theta = b.stripVar(Settings.IMAGINARY);\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n                }\n\n                return result;\n            }\n            else {\n                if(isVector(a) && bIsSymbol) {\n                    a = a.map(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                else if(isMatrix(a) && bIsSymbol) {\n                    var M = new Matrix();\n                    a.eachElement(function (x, i, j) {\n                        M.set(i, j, _.pow(x, b.clone()));\n                    });\n                    a = M;\n                }\n                else if(aIsSymbol && isMatrix(b)) {\n                    var M = new Matrix();\n                    b.eachElement(function (x, i, j) {\n                        M.set(i, j, _.pow(a.clone(), x));\n                    });\n                    a = M;\n                }\n                return a;\n            }\n        };\n        // Gets called when the parser finds the , operator.\n        // Commas return a Collector object which is roughly an array\n        this.comma = function (a, b) {\n            if(!(a instanceof Collection))\n                a = Collection.create(a);\n            a.append(b);\n            return a;\n        };\n        // Link to modulus\n        this.mod = function (a, b) {\n            return mod(a, b);\n        };\n        // Used to slice elements from arrays\n        this.slice = function (a, b) {\n            return new Slice(a, b);\n        };\n        // The equality setter\n        this.equals = function (a, b) {\n            // Equality can only be set for group S so complain it's not\n            if(a.group !== S && !a.isLinear())\n                err('Cannot set equality for ' + a.toString());\n            VARS[a.value] = b.clone();\n            return b;\n        };\n        // Percent\n        this.percent = function (a) {\n            return _.divide(a, new Symbol(100));\n        };\n        // Set variable\n        this.assign = function (a, b) {\n            if(a instanceof Collection && b instanceof Collection) {\n                a.elements.map(function (x, i) {\n                    return _.assign(x, b.elements[i]);\n                });\n                return Vector.fromArray(b.elements);\n            }\n            if(a.parent) {\n                // It's referring to the parent instead. The current item can be discarded\n                var e = a.parent;\n                e.elements[e.getter] = b;\n                delete e.getter;\n                return e;\n            }\n\n            if(a.group !== S)\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n            VARS[a.value] = b;\n            return b;\n        };\n        this.function_assign = function (a, b) {\n            var f = a.elements.pop();\n            return setFunction(f, a.elements, b);\n        };\n        // Function to quickly convert bools to Symbols\n        var bool2Symbol = function (x) {\n            return new Symbol(x === true ? 1 : 0);\n        };\n        //check for equality\n        this.eq = function (a, b) {\n            return bool2Symbol(a.equals(b));\n        };\n        //checks for greater than\n        this.gt = function (a, b) {\n            return bool2Symbol(a.gt(b));\n        };\n        //checks for greater than equal\n        this.gte = function (a, b) {\n            return bool2Symbol(a.gte(b));\n        };\n        //checks for less than\n        this.lt = function (a, b) {\n            return bool2Symbol(a.lt(b));\n        };\n        //checks for less than equal\n        this.lte = function (a, b) {\n            return bool2Symbol(a.lte(b));\n        };\n        // wraps the factorial\n        this.factorial = function (a) {\n            return this.symfunction(FACTORIAL, [a]);\n        };\n        // wraps the double factorial\n        this.dfactorial = function (a) {\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\n        };\n    }\n    ;\n\n    /* \"STATIC\" */\n    // converts a number to a fraction.\n    var Fraction = {\n        /**\n         * Converts a decimal to a fraction\n         * @param {number} value\n         * @param {object} opts\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        convert: function (value, opts) {\n            var frac;\n            if(value === 0) {\n                frac = [0, 1];\n            }\n            else {\n                if(value < 1e-6 || value > 1e20) {\n                    var qc = this.quickConversion(Number(value));\n                    if(qc[1] <= 1e20) {\n                        var abs = Math.abs(value);\n                        var sign = value / abs;\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n                        frac[0] = frac[0] * sign;\n                    }\n                    else {\n                        frac = qc;\n                    }\n                }\n                else {\n                    frac = this.fullConversion(value);\n                }\n            }\n            return frac;\n        },\n        /**\n         * If the fraction is too small or too large this gets called instead of fullConversion method\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        quickConversion: function (value) {\n            var stripSign = function (s) {\n                // Explicitely convert to a string\n                if(typeof s !== 'string') {\n                    s = s.toString();\n                }\n\n                var sign = '';\n\n                // Remove and store the sign\n                var start = s.charAt(0);\n                if(start === '-') {\n                    s = s.substr(1, s.length);\n                    sign = '-';\n                }\n                else if(start === '+') {\n                    // Just remove the plus sign\n                    s = s.substr(1, s.length);\n                }\n\n                return {\n                    sign: sign,\n                    value: s\n                };\n            };\n\n\n            function convert(value) {\n                // Explicitely convert to a decimal\n                if(Scientific.isScientific(value)) {\n                    value = scientificToDecimal(value);\n                }\n\n                // Split the value into the sign and the value\n                var nparts = stripSign(value);\n\n                // Split it at the decimal. We'll refer to it as the coeffient parts\n                var cparts = nparts.value.split('.');\n\n                // Combine the entire number by removing leading zero and adding the decimal part\n                // This would be teh same as moving the decimal point to the end\n                var num;\n                // We're dealing with integers\n                if(cparts.length === 1) {\n                    num = cparts[0];\n                }\n                else {\n                    num = cparts[0] + cparts[1];\n                }\n                var n = cparts[1] ? cparts[1].length : 0;\n                // Generate the padding for the zeros\n                var den = `1${'0'.repeat(n)}`;\n\n                if(num !== '0') {\n                    num = num.replace(/^0+/, '');\n                }\n                return [nparts.sign + num, den];\n            }\n\n            return convert(value);\n        },\n        /**\n         * Returns a good approximation of a fraction. This method gets called by convert\n         * http://mathforum.org/library/drmath/view/61772.html\n         * Decimal To Fraction Conversion - A Simpler Version\n         * Dr Peterson\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        fullConversion: function (dec) {\n            var done = false;\n            // you can adjust the epsilon to a larger number if you don't need very high precision\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\n            while(!done) {\n                n++;\n                if(n > 10000) {\n                    done = true;\n                }\n                var a = Math.floor(q);\n                var num = n1 + a * n2;\n                var den = d1 + a * d2;\n                var e = (q - a);\n                if(e < epsilon) {\n                    done = true;\n                }\n                q = 1 / e;\n                n1 = n2;\n                d1 = d2;\n                n2 = num;\n                d2 = den;\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\n                    done = true;\n                }\n            }\n            return [num, den];\n        }\n    };\n    //Depends on Fraction\n\n    //The latex generator\n    var LaTeX = {\n        parser: (function () {\n            // create a parser and strip it from everything except the items that you need\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n            var parser = new Parser();\n            for(var x in parser) {\n                if(keep.indexOf(x) === -1)\n                    delete parser[x];\n            }\n            // declare the operators\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; // bypass the slash\n                }\n            });\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\,',\n                action: 'slash_comma',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; // bypass the slash\n                }\n            });\n            // have braces not map to anything. We want them to be return as-is\n            var brackets = parser.getBrackets();\n            brackets['{'].maps_to = undefined;\n            return parser;\n        })(),\n        space: '~',\n        dot: ' \\\\cdot ',\n        // grab a list of supported functions but remove the excluded ones found in exclFN\n\n        latex: function (symbol, option) {\n            // it might be an array\n            if(symbol.clone) {\n                symbol = symbol.clone(); // leave original as-is\n            }\n            if(symbol instanceof _.classes.Collection)\n                symbol = symbol.elements;\n\n            if(isArray(symbol)) {\n                var LaTeXArray = [];\n                for(var i = 0; i < symbol.length; i++) {\n                    var sym = symbol[i];\n                    //This way I can generate LaTeX on an array of strings.\n                    if(!isSymbol(sym))\n                        sym = _.parse(sym);\n                    LaTeXArray.push(this.latex(sym, option));\n                }\n                return this.brackets(LaTeXArray.join(', '), 'square');\n            }\n\n            else if(isMatrix(symbol)) {\n                var TeX = '\\\\begin{pmatrix}\\n';\n                for(var i = 0; i < symbol.elements.length; i++) {\n                    var rowTeX = [],\n                            e = symbol.elements[i];\n                    for(var j = 0; j < e.length; j++) {\n                        rowTeX.push(this.latex(e[j], option));\n                    }\n                    TeX += rowTeX.join(' & ');\n                    if(i < symbol.elements.length - 1) {\n                        TeX += '\\\\\\\\\\n';\n                    }\n                }\n                TeX += '\\\\end{pmatrix}';\n                return TeX;\n            }\n\n            else if(isVector(symbol)) {\n                var TeX = '\\\\left[';\n                for(var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\right]';\n                return TeX;\n            }\n\n            else if(isSet(symbol)) {\n                var TeX = '\\\\{';\n                for(var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\}';\n                return TeX;\n            }\n\n            symbol = symbol.clone();\n\n            var decimal = (option === 'decimal' || option === 'decimals'),\n                    power = symbol.power,\n                    invert = isNegative(power),\n                    negative = symbol.multiplier.lessThan(0);\n\n            if(symbol.group === P && decimal) {\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n            }\n            else {\n                symbol.multiplier = symbol.multiplier.abs();\n\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\n                var m_array;\n\n                if(decimal) {\n                    var m = String(symbol.multiplier.toDecimal());\n                    // if(String(m) === '1' && !decimal) m = '';\n                    m_array = [m, ''];\n                }\n                else {\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\n                }\n                // get the value as a two part array\n                var v_array = this.value(symbol, invert, option, negative),\n                        p;\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\n                if(invert)\n                    power.negate();\n                // the power is simple since it requires no additional formatting. We can get it to a\n                // string right away. pass in true to neglect unit powers\n                if(decimal) {\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n                    if(String(p) === '1')\n                        p = '';\n                }\n                // get the latex representation\n                else if(isSymbol(power))\n                    p = this.latex(power, option);\n                // get it as a fraction\n                else\n                    p = this.formatFrac(power, true);\n                // use this array to specify if the power is getting attached to the top or the bottom\n                var p_array = ['', ''],\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n                        index = invert ? 1 : 0;\n                p_array[index] = p;\n\n                // special case group P and decimal\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n\n                return retval.replace(/\\+\\-/gi, '-');\n            }\n\n        },\n        // greek mapping\n        greek: {\n            alpha: '\\\\alpha',\n            beta: '\\\\beta',\n            gamma: '\\\\gamma',\n            delta: '\\\\delta',\n            epsilon: '\\\\epsilon',\n            zeta: '\\\\zeta',\n            eta: '\\\\eta',\n            theta: '\\\\theta',\n            iota: '\\\\iota',\n            kappa: '\\\\kappa',\n            lambda: '\\\\lambda',\n            mu: '\\\\mu',\n            nu: '\\\\nu',\n            xi: '\\\\xi',\n            omnikron: '\\\\omnikron',\n            pi: '\\\\pi',\n            rho: '\\\\rho',\n            sigma: '\\\\sigma',\n            tau: '\\\\tau',\n            upsilon: '\\\\upsilon',\n            phi: '\\\\phi',\n            chi: '\\\\chi',\n            psi: '\\\\psi',\n            omega: '\\\\omega',\n            Gamma: '\\\\Gamma',\n            Delta: '\\\\Delta',\n            Epsilon: '\\\\Epsilon',\n            Theta: '\\\\Theta',\n            Lambda: '\\\\Lambda',\n            Xi: '\\\\Xi',\n            Pi: '\\\\Pi',\n            Sigma: '\\\\Sigma',\n            Phi: '\\\\Phi',\n            Psi: '\\\\Psi',\n            Omega: '\\\\Omega'\n        },\n        symbols: {\n            arccos: '\\\\arccos',\n            cos: '\\\\cos',\n            csc: '\\\\csc',\n            exp: '\\\\exp',\n            ker: '\\\\ker',\n            limsup: '\\\\limsup',\n            min: '\\\\min',\n            sinh: '\\\\sinh',\n            arcsin: '\\\\arcsin',\n            cosh: '\\\\cosh',\n            deg: '\\\\deg',\n            gcd: '\\\\gcd',\n            lg: '\\\\lg',\n            ln: '\\\\ln',\n            Pr: '\\\\Pr',\n            sqrt: '\\\\sqrt',\n            sup: '\\\\sup',\n            arctan: '\\\\arctan',\n            cot: '\\\\cot',\n            det: '\\\\det',\n            hom: '\\\\hom',\n            lim: '\\\\lim',\n            log: '\\\\log',\n            LN: '\\\\LN',\n            sec: '\\\\sec',\n            tan: '\\\\tan',\n            arg: '\\\\arg',\n            coth: '\\\\coth',\n            dim: '\\\\dim',\n            inf: '\\\\inf',\n            liminf: '\\\\liminf',\n            max: '\\\\max',\n            sin: '\\\\sin',\n            tanh: '\\\\tanh'\n        },\n        // get the raw value of the symbol as an array\n        value: function (symbol, inverted, option, negative) {\n            var group = symbol.group,\n                    previousGroup = symbol.previousGroup,\n                    v = ['', ''],\n                    index = inverted ? 1 : 0;\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\n            if(symbol.isInfinity) {\n                v[index] = '\\\\infty';\n            }\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n                var value = this.formatSubscripts(symbol.value);\n                if(value.replace)\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\n                // split it so we can check for instances of alpha as well as alpha_b\n                var t_varray = String(value).split('_');\n                var greek = this.greek[t_varray[0]];\n                if(greek) {\n                    t_varray[0] = greek;\n                    value = t_varray.join('_');\n                }\n                var symbol = this.symbols[t_varray[0]];\n                if(symbol) {\n                    t_varray[0] = symbol;\n                    value = t_varray.join('_');\n                }\n                v[index] = value;\n            }\n            else if(group === FN || previousGroup === FN) {\n                var name,\n                        input = [],\n                        fname = symbol.fname;\n                // collect the arguments\n                for(var i = 0; i < symbol.args.length; i++) {\n                    var arg = symbol.args[i], item;\n                    if(typeof arg === 'string')\n                        item = arg;\n                    else {\n                        item = this.latex(arg, option);\n                    }\n                    input.push(item);\n                }\n\n                if(fname === SQRT) {\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\n                }\n                else if(fname === ABS) {\n                    v[index] = this.brackets(input.join(','), 'abs');\n                }\n                else if(fname === PARENTHESIS) {\n                    v[index] = this.brackets(input.join(','), 'parens');\n                }\n                else if(fname === 'limit') {\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n                }\n                else if(fname === 'integrate') {\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n                }\n                else if(fname === 'defint') {\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n                }\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n                    var arg = symbol.args[0];\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n                        input[0] = this.brackets(input[0]);\n                    }\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n                }\n                else if(fname === 'floor') {\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n                }\n                else if(fname === 'ceil') {\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n                }\n                // capture log(a, b)\n                else if(fname === Settings.LOG && input.length > 1) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n                }\n                // capture log(a, b)\n                else if(fname === Settings.LOG10) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n                }\n                else if(fname === 'sum') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if(fname === 'product') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if(fname === 'nthroot') {\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n                }\n                else if(fname === 'mod') {\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\n                }\n                else if(fname === 'realpart') {\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n                }\n                else if(fname === 'imagpart') {\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n                }\n                else {\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n                    if(symbol.isConversion)\n                        v[index] = name + this.brackets(input.join(''), 'parens');\n                    else\n                        v[index] = name + this.brackets(input.join(','), 'parens');\n                }\n            }\n            else if(symbol.isComposite()) {\n                var collected = symbol.collectSymbols().sort(\n                        group === CP || previousGroup === CP ?\n                        function (a, b) {\n                            return b.group - a.group;\n                        } :\n                        function (a, b) {\n                            var x = isSymbol(a.power) ? -1 : a.power;\n                            var y = isSymbol(b.power) ? -1 : b.power;\n                            return y - x;\n                        }\n                ),\n                        symbols = [],\n                        l = collected.length;\n                for(var i = 0; i < l; i++) {\n                    symbols.push(LaTeX.latex(collected[i], option));\n                }\n                var value = symbols.join('+');\n\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n            }\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\n                if(group === CB)\n                    symbol.distributeExponent();\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n                // to whether the symbol value is \"simple\" or not.\n                var denominator = [],\n                        numerator = [];\n                // Generate a profile\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\n                var setBrackets = function (container, map, counter) {\n                    if(counter > 1 && map.length > 0) {\n                        var l = map.length;\n                        for(var i = 0; i < l; i++) {\n                            var idx = map[i], item = container[idx];\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                                container[idx] = LaTeX.brackets(item, 'parens');\n                            }\n                        }\n                    }\n                    return container;\n                };\n\n                // Generate latex for each of them\n                symbol.each(function (x) {\n                    var isDenom = isNegative(x.power),\n                            laTex;\n\n                    if(isDenom) {\n                        laTex = LaTeX.latex(x.invert(), option);\n                        den_c++;\n                        if(x.isComposite()) {\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            den_map.push(denominator.length); // make a note of where the composite was found\n                        }\n\n                        denominator.push(laTex);\n                    }\n                    else {\n                        laTex = LaTeX.latex(x, option);\n                        num_c++;\n                        if(x.isComposite()) {\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            num_map.push(numerator.length);   // make a note of where the composite was found\n                        }\n                        numerator.push(laTex);\n                    }\n                });\n\n                // Apply brackets\n                setBrackets(numerator, num_map, num_c);\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\n\n                setBrackets(denominator, den_map, den_c);\n                v[1] = denominator.join(this.dot);\n            }\n\n            return v;\n        },\n        set: function (m, v, p, combine_power) {\n            var isBracketed = function (v) {\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n            };\n            // format the power if it exists\n            if(p)\n                p = this.formatP(p);\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\n            if(combine_power) {\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n                // of a case where this isn't true\n                var tp = p[0];\n                p[0] = ''; // temporarily make p blank\n            }\n\n            // merge v and p. Not that v MUST be first since the order matters\n            v = this.merge(v, p);\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\n            // filters\n            // if the top has a variable but the numerator is one drop it\n            if(vn && Number(mn) === 1)\n                mn = '';\n            // if denominator is 1 drop it always\n            if(Number(md) === 1)\n                md = '';\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n            // format the power if it exists\n            // make it a fraction if both top and bottom exists\n            if(top && bottom) {\n                var frac = this.frac(top, bottom);\n                if(combine_power && tp)\n                    frac = this.brackets(frac) + tp;\n                return frac;\n            }\n            // otherwise only the top exists so return that\n            else\n                return top;\n        },\n        merge: function (a, b) {\n            var r = [];\n            for(var i = 0; i < 2; i++)\n                r[i] = a[i] + b[i];\n            return r;\n        },\n        // joins together two strings if both exist\n        join: function (n, d, glue) {\n            if(!n && !d)\n                return '';\n            if(n && !d)\n                return n;\n            if(d && !n)\n                return d;\n            return n + glue + d;\n        },\n        /**\n         * Places subscripts in braces for proper formatting\n         * @param {String} v\n         * @returns {String}\n         */\n        formatSubscripts: function (v) {\n            // Split it at the underscore\n            var arr = v.toString().split('_');\n\n            var name = '';\n\n            // Loop over all entries except the first one\n            while(arr.length > 1) {\n                // Wrap all in braces except for the last one\n                if(arr.length > 0) {\n                    name = '_' + this.braces(arr.pop() + name);\n                }\n            }\n\n            return arr[0] + name;\n        },\n        formatP: function (p_array) {\n            for(var i = 0; i < 2; i++) {\n                var p = p_array[i];\n                if(p)\n                    p_array[i] = '^' + this.braces(p);\n            }\n            return p_array;\n        },\n        /**\n         * formats the fractions accordingly.\n         * @param {Frac} f\n         * @param {bool} is_pow\n         */\n        formatFrac: function (f, is_pow) {\n            var n = f.num.toString(),\n                    d = f.den.toString();\n            // no need to have x^1\n            if(is_pow && n === '1' && d === '1')\n                return '';\n            // no need to have x/1\n            if(d === '1')\n                return n;\n            return this.frac(n, d);\n        },\n        frac: function (n, d) {\n            return '\\\\frac' + this.braces(n) + this.braces(d);\n        },\n        braces: function (e) {\n            return '{' + e + '}';\n        },\n        brackets: function (e, typ) {\n            typ = typ || 'parens';\n            var bracketTypes = {\n                parens: ['(', ')'],\n                square: ['[', ']'],\n                brace: ['{', '}'],\n                abs: ['|', '|'],\n                angle: ['\\\\langle', '\\\\rangle']\n            };\n            var bracket = bracketTypes[typ];\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n        },\n        /**\n         * Removes extreneous tokens\n         * @param {Tokens[]} tokens\n         * @returns {Tokens[]}\n         */\n        filterTokens: function (tokens) {\n            var filtered = [];\n\n            // Copy over the type of the scope\n            if(isArray(tokens)) {\n                filtered.type = tokens.type;\n            }\n\n            // the items that need to be disposed\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n            for(var i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                var next_token = tokens[i + 1];\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\n                    filtered.push(token);\n                }\n                else if(isArray(token)) {\n                    filtered.push(LaTeX.filterTokens(token));\n                }\n                else if(d.indexOf(token.value) === -1) {\n                    filtered.push(token);\n                }\n            }\n            return filtered;\n        },\n        /*\n         * Parses tokens from LaTeX string. Does not do any error checking\n         * @param {Tokens[]} rpn\n         * @returns {String}\n         */\n        parse: function (raw_tokens) {\n            var i, l;\n            var retval = '';\n            var tokens = this.filterTokens(raw_tokens);\n            var replace = {\n                'cdot': '',\n                'times': '',\n                'infty': 'Infinity'\n            };\n            // get the next token\n            var next = function (n) {\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\n            };\n            var parse_next = function () {\n                return LaTeX.parse(next());\n            };\n            var get = function (token) {\n                if(token in replace) {\n                    return replace[token];\n                }\n                // A quirk with implicit multiplication forces us to check for *\n                if(token === '*' && tokens[i + 1].value === '&') {\n                    next(2); // skip this and the &\n                    return ',';\n                }\n\n                if(token === '&') {\n                    next();\n                    return ','; // Skip the *\n                }\n                // If it's the end of a row, return the row separator\n                if(token === '\\\\') {\n                    return '],[';\n                }\n                return token;\n            };\n\n            // start parsing the tokens\n            for(i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                // fractions\n                if(token.value === 'frac') {\n                    // parse and wrap it in brackets\n                    var n = parse_next();\n                    var d = parse_next();\n                    retval += n + '/' + d;\n                }\n                else if(token.value in LaTeX.symbols) {\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\n                        var base = parse_next();\n                        var expr = parse_next();\n                        retval += (expr + '^' + inBrackets('1/' + base));\n                    }\n                    else {\n                        retval += token.value + parse_next();\n                    }\n                }\n                else if(token.value === 'int') {\n                    var f = parse_next();\n                    // skip the comma\n                    i++;\n                    // get the variable of integration\n                    var dx = next().value;\n                    dx = get(dx.substring(1, dx.length));\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\n                }\n                else if(token.value === 'int_') {\n                    var l = parse_next(); // lower\n                    i++; // skip the ^\n                    var u = next().value; // upper\n                    // if it is in brackets\n                    if (u === undefined) {\n                        i--;\n                        var u = parse_next();\n                    }\n                    var f = parse_next(); // function\n                    \n                    // get the variable of integration\n                    var dx = next().value;\n                    // skip the comma\n                    if (dx === ',') {\n                        var dx = next().value;\n                    }\n                    // if 'd', skip\n                    if (dx === 'differentialD') {\n                        // skip the *\n                        i++;\n                        var dx = next().value;\n                    }\n                    if (dx === 'mathrm') {\n                        // skip the mathrm{d}\n                        i++;\n                        var dx = next().value;\n                    }\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\n                }\n                else if(token.value && token.value.startsWith('int_')) {\n                    // var l = parse_next(); // lower\n                    var l = token.value.replace('int_', '')\n                    console.log('uppernow')\n                    i++; // skip the ^\n                    var u = next().value; // upper\n                    // if it is in brackets\n                    if (u === undefined) {\n                        i--;\n                        var u = parse_next();\n                    }\n                    var f = parse_next(); // function\n                    \n                    // get the variable of integration\n                    var dx = next().value;\n                    // skip the comma\n                    if (dx === ',') {\n                        var dx = next().value;\n                    }\n                    // if 'd', skip\n                    if (dx === 'differentialD') {\n                        // skip the *\n                        i++;\n                        var dx = next().value;\n                    }\n                    if (dx === 'mathrm') {\n                        // skip the mathrm{d}\n                        i++;\n                        var dx = next().value;\n                    }\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\n                }\n                else if(token.value === 'mathrm') {\n                    var f = tokens[++i][0].value;\n                    retval += f + parse_next();\n                }\n                // sum and product\n                else if(token.value === 'sum_' || token.value === 'prod_') {\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\n                    var nxt = next();\n                    i++; // skip the caret\n                    var end = parse_next();\n                    var f = parse_next();\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n                }\n                else if(token.value === 'lim_') {\n                    var nxt = next();\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n                }\n                else if(token.value === 'begin') {\n                    var nxt = next();\n                    if(Array.isArray(nxt)) {\n                        var v = nxt[0].value;\n                        if(v === 'matrix') {\n                            // Start a matrix\n                            retval += 'matrix([';\n                        }\n                    }\n                }\n                else if(token.value === 'end') {\n                    var nxt = next();\n                    if(Array.isArray(nxt)) {\n                        var v = nxt[0].value;\n                        if(v === 'matrix') {\n                            // End a matrix\n                            retval += '])';\n                        }\n                    }\n                }\n                else {\n                    if(Array.isArray(token)) {\n                        retval += get(LaTeX.parse(token));\n                    }\n                    else {\n                        retval += get(token.value.toString());\n                    }\n                }\n            }\n\n            return inBrackets(retval);\n        }\n    };\n//Vector =======================================================================\n    function Vector(v) {\n        if(isVector(v))\n            this.elements = v.items.slice(0);\n        else if(isArray(v))\n            this.elements = v.slice(0);\n        else\n            this.elements = [].slice.call(arguments);\n    }\n    /*\n     * Generates a pre-filled array\n     * @param {type} n\n     * @param {type} val\n     * @returns {unresolved}\n     */\n    Vector.arrayPrefill = function (n, val) {\n        var a = [];\n        val = val || 0;\n        for(var i = 0; i < n; i++)\n            a[i] = val;\n        return a;\n    };\n    /**\n     * Generate a vector from and array\n     * @param {type} a\n     * @returns {unresolved}\n     */\n    Vector.fromArray = function (a) {\n        var v = new Vector();\n        v.elements = a;\n        return v;\n    };\n\n    /**\n     * Convert a Set to a Vector\n     * @param {Set} set\n     * @returns {Vector}\n     */\n    Vector.fromSet = function (set) {\n        return Vector.fromArray(set.elements);\n    };\n\n    //Ported from Sylvester.js\n    Vector.prototype = {\n        custom: true,\n        // Returns element i of the vector\n        e: function (i) {\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n        },\n\n        set: function (i, val) {\n            if(!isSymbol(val))\n                val = new Symbol(val);\n            this.elements[i] = val;\n        },\n\n        // Returns the number of elements the vector has\n        dimensions: function () {\n            return this.elements.length;\n        },\n\n        // Returns the modulus ('length') of the vector\n        modulus: function () {\n            return block('SAFE', function () {\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is equal to the argument\n        eql: function (vector) {\n            var n = this.elements.length;\n            var V = vector.elements || vector;\n            if(n !== V.length) {\n                return false;\n            }\n            do {\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n                    return false;\n                }\n            }\n            while(--n);\n            return true;\n        },\n\n        // Returns a clone of the vector\n        clone: function () {\n            var V = new Vector(),\n                    l = this.elements.length;\n            for(var i = 0; i < l; i++) {\n                //Rule: all items within the vector must have a clone method.\n                V.elements.push(this.elements[i].clone());\n            }\n            if(this.getter) {\n                V.getter = this.getter.clone();\n            }\n            return V;\n        },\n\n        // Maps the vector to another vector according to the given function\n        map: function (fn) {\n            var elements = [];\n            this.each(function (x, i) {\n                elements.push(fn(x, i));\n            });\n\n            return new Vector(elements);\n        },\n\n        // Calls the iterator for each element of the vector in turn\n        each: function (fn) {\n            var n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                fn(this.elements[i], i + 1);\n            }\n            while(--n);\n        },\n\n        // Returns a new vector created by normalizing the receiver\n        toUnitVector: function () {\n            return block('SAFE', function () {\n                var r = this.modulus();\n                if(r.valueOf() === 0) {\n                    return this.clone();\n                }\n                return this.map(function (x) {\n                    return _.divide(x, r);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the angle between the vector and the argument (also a vector)\n        angleFrom: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var n = this.elements.length;\n                if(n !== V.length) {\n                    return null;\n                }\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\n                // Work things out in parallel to save time\n                this.each(function (x, i) {\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\n                });\n                mod1 = _.pow(mod1, new Symbol(0.5));\n                mod2 = _.pow(mod2, new Symbol(0.5));\n                var product = _.multiply(mod1, mod2);\n                if(product.valueOf() === 0) {\n                    return null;\n                }\n                var theta = _.divide(dot, product);\n                var theta_val = theta.valueOf();\n                if(theta_val < -1) {\n                    theta = -1;\n                }\n                if(theta_val > 1) {\n                    theta = 1;\n                }\n                return new Symbol(Math.acos(theta));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is parallel to the argument\n        isParallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (angle <= PRECISION);\n        },\n\n        // Returns true iff the vector is antiparallel to the argument\n        isAntiparallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\n        },\n\n        // Returns true iff the vector is perpendicular to the argument\n        isPerpendicularTo: function (vector) {\n            var dot = this.dot(vector);\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\n        },\n\n        // Returns the result of adding the argument to the vector\n        add: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if(this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.add(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of subtracting the argument from the vector\n        subtract: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if(this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.subtract(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of multiplying the elements of the vector by the argument\n        multiply: function (k) {\n            return this.map(function (x) {\n                return x.clone() * k.clone();\n            });\n        },\n\n        x: function (k) {\n            return this.multiply(k);\n        },\n\n        // Returns the scalar product of the vector with the argument\n        // Both vectors must have equal dimensionality\n        dot: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var product = new Symbol(0), n = this.elements.length;\n                if(n !== V.length) {\n                    return null;\n                }\n                do {\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n                }\n                while(--n);\n                return product;\n            }, undefined, this);\n        },\n\n        // Returns the vector product of the vector with the argument\n        // Both vectors must have dimensionality 3\n        cross: function (vector) {\n            var B = vector.elements || vector;\n            if(this.elements.length !== 3 || B.length !== 3) {\n                return null;\n            }\n            var A = this.elements;\n            return block('SAFE', function () {\n                return new Vector([\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\n                ]);\n            }, undefined, this);\n        },\n\n        // Returns the (absolute) largest element of the vector\n        max: function () {\n            var m = 0, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n                    m = this.elements[i];\n                }\n            }\n            while(--n);\n            return m;\n        },\n        magnitude: function () {\n            var magnitude = new Symbol(0);\n            this.each(function (e) {\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n            });\n            return _.sqrt(magnitude);\n        },\n        // Returns the index of the first match found\n        indexOf: function (x) {\n            var index = null, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\n                    index = i + 1;\n                }\n            }\n            while(--n);\n            return index;\n        },\n        text: function (x) {\n            return text(this);\n        },\n        toString: function () {\n            return this.text();\n        },\n        latex: function (option) {\n            var tex = [];\n            for(var i = 0; i < this.elements.length; i++) {\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n            }\n            return '[' + tex.join(', ') + ']';\n        }\n    };\n\n//Matrix =======================================================================\n    function Matrix() {\n        var m = arguments,\n                l = m.length, i, el = [];\n        if(isMatrix(m)) { // if it's a matrix then make a clone\n            for(i = 0; i < l; i++) {\n                el.push(m[i].slice(0));\n            }\n        }\n        else {\n            var row, lw, rl;\n            for(i = 0; i < l; i++) {\n                row = m[i];\n                if(isVector(row))\n                    row = row.elements;\n                if(!isArray(row))\n                    row = [row];\n                rl = row.length;\n                if(lw && lw !== rl)\n                    err('Unable to create Matrix. Row dimensions do not match!');\n                el.push(row);\n                lw = rl;\n            }\n        }\n        this.elements = el;\n    }\n    Matrix.identity = function (n) {\n        var m = new Matrix();\n        for(var i = 0; i < n; i++) {\n            m.elements.push([]);\n            for(var j = 0; j < n; j++) {\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n            }\n        }\n        return m;\n    };\n    Matrix.fromArray = function (arr) {\n        function F(args) {\n            return Matrix.apply(this, args);\n        }\n        F.prototype = Matrix.prototype;\n\n        return new F(arr);\n    };\n    Matrix.zeroMatrix = function (rows, cols) {\n        var m = new Matrix();\n        for(var i = 0; i < rows; i++) {\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n        }\n        return m;\n    };\n    Matrix.prototype = {\n        // needs be true to let the parser know not to try to cast it to a symbol\n        custom: true,\n        get: function (row, column) {\n            if(!this.elements[row])\n                return undefined;\n            return this.elements[row][column];\n        },\n        map: function (f, raw_values) {\n            var M = new Matrix();\n            this.each(function (e, i, j) {\n                M.set(i, j, f.call(M, e), raw_values);\n            });\n            return M;\n        },\n        set: function (row, column, value, raw) {\n            if(!this.elements[row])\n                this.elements[row] = [];\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\n        },\n        cols: function () {\n            return this.elements[0].length;\n        },\n        rows: function () {\n            return this.elements.length;\n        },\n        row: function (n) {\n            if(!n || n > this.cols())\n                return [];\n            return this.elements[n - 1];\n        },\n        col: function (n) {\n            var nr = this.rows(),\n                    col = [];\n            if(n > this.cols() || !n)\n                return col;\n            for(var i = 0; i < nr; i++) {\n                col.push(this.elements[i][n - 1]);\n            }\n            return col;\n        },\n        eachElement: function (fn) {\n            var nr = this.rows(),\n                    nc = this.cols(), i, j;\n            for(i = 0; i < nr; i++) {\n                for(j = 0; j < nc; j++) {\n                    fn.call(this, this.elements[i][j], i, j);\n                }\n            }\n        },\n        // ported from Sylvester.js\n        determinant: function () {\n            if(!this.isSquare()) {\n                return null;\n            }\n            var M = this.toRightTriangular();\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\n            do {\n                i = k - n + 1;\n                det = _.multiply(det, M.elements[i][i]);\n            }\n            while(--n);\n            return det;\n        },\n        isSquare: function () {\n            return this.elements.length === this.elements[0].length;\n        },\n        isSingular: function () {\n            return this.isSquare() && this.determinant() === 0;\n        },\n        augment: function (m) {\n            var r = this.rows(), rr = m.rows();\n            if(r !== rr)\n                err(\"Cannot augment matrix. Rows don't match.\");\n            for(var i = 0; i < r; i++) {\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\n            }\n\n            return this;\n        },\n        clone: function () {\n            var r = this.rows(), c = this.cols(),\n                    m = new Matrix();\n            for(var i = 0; i < r; i++) {\n                m.elements[i] = [];\n                for(var j = 0; j < c; j++) {\n                    var symbol = this.elements[i][j];\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n                }\n            }\n            return m;\n        },\n        // ported from Sylvester.js\n        invert: function () {\n            if(!this.isSquare())\n                err('Matrix is not square!');\n            return block('SAFE', function () {\n                var ni = this.elements.length, ki = ni, i, j;\n                var imatrix = Matrix.identity(ni);\n                var M = this.augment(imatrix).toRightTriangular();\n                var np, kp = M.elements[0].length, p, els, divisor;\n                var inverse_elements = [], new_element;\n                // Matrix is non-singular so there will be no zeros on the diagonal\n                // Cycle through rows from last to first\n                do {\n                    i = ni - 1;\n                    // First, normalise diagonal elements to 1\n                    els = [];\n                    np = kp;\n                    inverse_elements[i] = [];\n                    divisor = M.elements[i][i];\n                    do {\n                        p = kp - np;\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\n                        els.push(new_element);\n                        // Shuffle of the current row of the right hand side into the results\n                        // array as it will not be modified by later runs through this loop\n                        if(p >= ki) {\n                            inverse_elements[i].push(new_element);\n                        }\n                    }\n                    while(--np);\n                    M.elements[i] = els;\n                    // Then, subtract this row from those above it to\n                    // give the identity matrix on the left hand side\n                    for(j = 0; j < i; j++) {\n                        els = [];\n                        np = kp;\n                        do {\n                            p = kp - np;\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n                        }\n                        while(--np);\n                        M.elements[j] = els;\n                    }\n                }\n                while(--ni);\n                return Matrix.fromArray(inverse_elements);\n            }, undefined, this);\n        },\n        // ported from Sylvester.js\n        toRightTriangular: function () {\n            return block('SAFE', function () {\n                var M = this.clone(), els, fel, nel,\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\n                do {\n                    i = k - n;\n                    fel = M.elements[i][i];\n                    if(fel.valueOf() === 0) {\n                        for(var j = i + 1; j < k; j++) {\n                            nel = M.elements[j][i];\n                            if(nel && nel.valueOf() !== 0) {\n                                els = [];\n                                np = kp;\n                                do {\n                                    p = kp - np;\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                                }\n                                while(--np);\n                                M.elements[i] = els;\n                                break;\n                            }\n                        }\n                    }\n                    var fel = M.elements[i][i];\n                    if(fel.valueOf() !== 0) {\n                        for(j = i + 1; j < k; j++) {\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n                            els = [];\n                            np = kp;\n                            do {\n                                p = kp - np;\n                                // Elements with column numbers up to an including the number\n                                // of the row that we're subtracting can safely be set straight to\n                                // zero, since that's the point of this routine and it avoids having\n                                // to loop over and correct rounding errors later\n                                els.push(p <= i ? new Symbol(0) :\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n                            }\n                            while(--np);\n                            M.elements[j] = els;\n                        }\n                    }\n                }\n                while(--n);\n\n                return M;\n            }, undefined, this);\n        },\n        transpose: function () {\n            var rows = this.elements.length, cols = this.elements[0].length;\n            var M = new Matrix(), ni = cols, i, nj, j;\n\n            do {\n                i = cols - ni;\n                M.elements[i] = [];\n                nj = rows;\n                do {\n                    j = rows - nj;\n                    M.elements[i][j] = this.elements[j][i].clone();\n                }\n                while(--nj);\n            }\n            while(--ni);\n            return M;\n        },\n        // Returns true if the matrix can multiply the argument from the left\n        canMultiplyFromLeft: function (matrix) {\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\n            // this.columns should equal matrix.rows\n            return (this.elements[0].length === l);\n        },\n        sameSize: function (matrix) {\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n        },\n        multiply: function (matrix) {\n            return block('SAFE', function () {\n                var M = matrix.elements || matrix;\n                if(!this.canMultiplyFromLeft(M)) {\n                    if(this.sameSize(matrix)) {\n                        var MM = new Matrix();\n                        var rows = this.rows();\n                        for(var i = 0; i < rows; i++) {\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n                            MM.elements[i] = e.elements;\n                        }\n                        return MM;\n                    }\n                    return null;\n                }\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\n                do {\n                    i = ki - ni;\n                    elements[i] = [];\n                    nj = kj;\n                    do {\n                        j = kj - nj;\n                        sum = new Symbol(0);\n                        nc = cols;\n                        do {\n                            c = cols - nc;\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n                        }\n                        while(--nc);\n                        elements[i][j] = sum;\n                    }\n                    while(--nj);\n                }\n                while(--ni);\n                return Matrix.fromArray(elements);\n            }, undefined, this);\n        },\n        add: function (matrix, callback) {\n            var M = new Matrix();\n            if(this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        subtract: function (matrix, callback) {\n            var M = new Matrix();\n            if(this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        negate: function () {\n            this.each(function (e) {\n                return e.negate();\n            });\n            return this;\n        },\n        toVector: function () {\n            if(this.rows() === 1 || this.cols() === 1) {\n                var v = new Vector();\n                v.elements = this.elements;\n                return v;\n            }\n            return this;\n        },\n        toString: function (newline, to_decimal) {\n            var l = this.rows(),\n                    s = [];\n            newline = newline === undefined ? '\\n' : newline;\n            for(var i = 0; i < l; i++) {\n                s.push('[' + this.elements[i].map(function (x) {\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n                    return x !== undefined ? v : '';\n                }).join(',') + ']');\n            }\n            return 'matrix' + inBrackets(s.join(','));\n        },\n        text: function () {\n            return 'matrix(' + this.elements.toString('') + ')';\n        },\n        latex: function (option) {\n            var cols = this.cols(), elements = this.elements;\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n                var tex = [];\n                for(var row in elements) {\n                    var row_tex = [];\n                    for(var i = 0; i < cols; i++) {\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n                    }\n                    tex.push(row_tex.join(' & '));\n                }\n                return tex.join(' \\\\cr ');\n            });\n        }\n    };\n    // aliases\n    Matrix.prototype.each = Matrix.prototype.eachElement;\n\n\n    function Set(set) {\n        this.elements = [];\n        // if the first object isn't an array, convert it to one.\n        if(!isVector(set))\n            set = Vector.fromArray(arguments);\n\n        if(set) {\n            var elements = set.elements;\n            for(var i = 0, l = elements.length; i < l; i++) {\n                this.add(elements[i]);\n            }\n        }\n    }\n\n    Set.fromArray = function (arr) {\n        function F(args) {\n            return Set.apply(this, args);\n        }\n        F.prototype = Set.prototype;\n\n        return new F(arr);\n    };\n\n    Set.prototype = {\n        add: function (x) {\n            if(!this.contains(x))\n                this.elements.push(x.clone());\n        },\n        contains: function (x) {\n            for(var i = 0; i < this.elements.length; i++) {\n                var e = this.elements[i];\n                if(x.equals(e))\n                    return true;\n            }\n            return false;\n        },\n        each: function (f) {\n            var elements = this.elements;\n            var set = new Set();\n            for(var i = 0, l = elements.length; i < l; i++) {\n                var e = elements[i];\n                f.call(this, e, set, i);\n            }\n            return set;\n        },\n        clone: function () {\n            var set = new Set();\n            this.each(function (e) {\n                set.add(e.clone());\n            });\n            return set;\n        },\n        union: function (set) {\n            var _union = this.clone();\n            set.each(function (e) {\n                _union.add(e);\n            });\n\n            return _union;\n        },\n        difference: function (set) {\n            var diff = this.clone();\n            set.each(function (e) {\n                diff.remove(e);\n            });\n            return diff;\n        },\n        remove: function (element) {\n            for(var i = 0, l = this.elements.length; i < l; i++) {\n                var e = this.elements[i];\n                if(e.equals(element)) {\n                    remove(this.elements, i);\n                    return true;\n                }\n            }\n            return false;\n        },\n        intersection: function (set) {\n            var _intersection = new Set();\n            var A = this;\n            set.each(function (e) {\n                if(A.contains(e)) {\n                    _intersection.add(e);\n                }\n                ;\n            });\n\n            return _intersection;\n        },\n        intersects: function (set) {\n            return this.intersection(set).elements.length > 0;\n        },\n        is_subset: function (set) {\n            var elements = set.elements;\n            for(var i = 0, l = elements.length; i < l; i++) {\n                if(!this.contains(elements[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        toString: function () {\n            return '{' + this.elements.join(',') + '}';\n        }\n    };\n\n//build ========================================================================\n    var Build = {\n        dependencies: {\n            _rename: {\n                'Math2.factorial': 'factorial'\n            },\n            factorial: {\n                'Math2.gamma': Math2.gamma\n            },\n            gamma_incomplete: {\n                'Math2.factorial': Math2.factorial\n            },\n            Li: {\n                'Math2.Ei': Math2.Ei,\n                'Math2.bigLog': Math2.bigLog,\n                'Frac': Frac\n            },\n            Ci: {\n                'Math2.factorial': Math2.factorial\n            },\n            Ei: {\n                'Math2.factorial': Math2.factorial\n            },\n            Si: {\n                'Math2.factorial': Math2.factorial\n            },\n            Shi: {\n                'Math2.factorial': Math2.factorial\n            },\n            Chi: {\n                'isInt': isInt,\n                'nround': nround,\n                'Math2.num_integrate': Math2.num_integrate\n            },\n            factor: {\n                'Math2.ifactor': Math2.ifactor,\n                'Symbol': Symbol\n            },\n            num_integrate: {\n                'Math2.simpson': Math2.simpson,\n                'nround': nround\n            },\n            fib: {\n                'even': even\n            }\n        },\n        /* Some functions need to be made numeric safe. Build checks if there's a\n         * reformat option and calls that instead when compiling the function string.\n         */\n        reformat: {\n            // this simply extends the build function\n            diff: function (symbol, deps) {\n                var v = symbol.args[1].toString();\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\n                deps[1] += f;\n\n                return ['diff(f)(' + v + ')', deps];\n            }\n        },\n        getProperName: function (f) {\n            var map = {\n                continued_fraction: 'continuedFraction'\n            };\n            return map[f] || f;\n        },\n        // assumes that dependences are at max 2 levels\n        compileDependencies: function (f, deps) {\n            // grab the predefined dependiences\n            var dependencies = Build.dependencies[f];\n\n            // the dependency string\n            var dep_string = deps && deps[1] ? deps[1] : '';\n\n            // the functions to be replaced\n            var replacements = deps && deps[0] ? deps[0] : {};\n\n            // loop through them and add them to the list\n            for(var x in dependencies) {\n                if(typeof dependencies[x] === 'object')\n                    continue; // skip object\n                var components = x.split('.'); //Math.f becomes f\n                // if the function isn't part of an object then reference the function itself\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\n                replacements[x] = components.pop();\n            }\n\n            return [replacements, dep_string];\n        },\n        getArgsDeps: function (symbol, dependencies) {\n            var args = symbol.args;\n            for(var i = 0; i < args.length; i++) {\n                symbol.args[i].each(function (x) {\n                    if(x.group === FN)\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\n                });\n            }\n            return dependencies;\n        },\n        build: function (symbol, arg_array) {\n            symbol = block('PARSE2NUMBER', function () {\n                return _.parse(symbol);\n            }, true);\n            var args = variables(symbol);\n            var supplements = [];\n            var dependencies = [];\n            var ftext = function (symbol, xports) {\n                //Fix for #545 - Parentheses confuse build.\n                if(symbol.fname === '') {\n                    symbol = Symbol.unwrapPARENS(symbol);\n                }\n                xports = xports || [];\n                var c = [],\n                        group = symbol.group,\n                        prefix = '';\n\n                var ftext_complex = function (group) {\n                    var d = group === CB ? '*' : '+',\n                            cc = [];\n\n                    for(var x in symbol.symbols) {\n                        var sym = symbol.symbols[x],\n                                ft = ftext(sym, xports)[0];\n                        // wrap it in brackets if it's group PL or CP\n                        if(sym.isComposite())\n                            ft = inBrackets(ft);\n                        cc.push(ft);\n                    }\n                    var retval = cc.join(d);\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n                    return retval;\n                },\n                        ftext_function = function (bn) {\n                            var retval;\n                            if(bn in Math)\n                                retval = 'Math.' + bn;\n                            else {\n                                bn = Build.getProperName(bn);\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\n                                    //Math2 functions aren't part of the standard javascript\n                                    //Math library and must be exported.\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n                                    supplements.push(bn);\n                                }\n                                retval = bn;\n                            }\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\n                                return ftext(x, xports)[0];\n                            }).join(','));\n\n                            return retval;\n                        };\n\n                // the multiplier\n                if(group === N)\n                    c.push(symbol.multiplier.toDecimal());\n                else if(symbol.multiplier.equals(-1))\n                    prefix = '-';\n                else if(!symbol.multiplier.equals(1))\n                    c.push(symbol.multiplier.toDecimal());\n                // the value\n                var value;\n\n                if(group === S || group === P)\n                    value = symbol.value;\n                else if(group === FN) {\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\n                    if(Build.reformat[symbol.fname]) {\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\n                        dependencies = components[1];\n                        value = components[0];\n                    }\n                    else {\n                        value = ftext_function(symbol.fname);\n                    }\n\n                }\n                else if(group === EX) {\n                    var pg = symbol.previousGroup;\n                    if(pg === N || pg === S)\n                        value = symbol.value;\n                    else if(pg === FN) {\n                        value = ftext_function(symbol.fname);\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\n                    }\n                    else\n                        value = ftext_complex(symbol.previousGroup);\n                }\n                else {\n                    value = ftext_complex(symbol.group);\n                }\n\n                if(symbol.group !== N && !symbol.power.equals(1)) {\n                    var pow = ftext(_.parse(symbol.power));\n                    xports.push(pow[1]);\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n                }\n\n                if(value)\n                    c.push(prefix + value);\n\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n            };\n            if(arg_array) {\n                // Fix for issue #546\n                // Disable argument checking since it's a bit presumptuous.\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \n                // this check will fail and complain since the function doesn't contain x.\n                /*\n                 for (var i = 0; i < args.length; i++) {\n                 var arg = args[i];\n                 if (arg_array.indexOf(arg) === -1)\n                 err(arg + ' not found in argument array');\n                 }\n                 */\n                args = arg_array;\n            }\n\n            var f_array = ftext(symbol);\n\n            // make all the substitutions;\n            for(var x in dependencies[0]) {\n                var alias = dependencies[0][x];\n                f_array[1] = f_array[1].replace(x, alias);\n                dependencies[1] = dependencies[1].replace(x, alias);\n            }\n\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n\n            return f;\n        }\n    };\n\n\n//finalize =====================================================================\n    /* FINALIZE */\n    (function () {\n        reserveNames(_.CONSTANTS);\n        reserveNames(_.functions);\n        _.initConstants();\n        //bug fix for error but needs to be revisited\n        if(!_.error)\n            _.error = err;\n\n        //Store the log and log10 functions\n        Settings.LOG_FNS = {\n            log: _.functions['log'],\n            log10: _.functions['log10']\n        };\n\n    })();\n\n    /* END FINALIZE */\n\n//Core =========================================================================\n    var Utils = {\n        allSame: allSame,\n        allNumeric: allNumeric,\n        arguments2Array: arguments2Array,\n        arrayAddSlices: arrayAddSlices,\n        arrayClone: arrayClone,\n        arrayMax: arrayMax,\n        arrayMin: arrayMin,\n        arrayEqual: arrayEqual,\n        arrayUnique: arrayUnique,\n        arrayGetVariables: arrayGetVariables,\n        arraySum: arraySum,\n        block: block,\n        build: Build.build,\n        clearU: clearU,\n        comboSort: comboSort,\n        compare: compare,\n        convertToVector: convertToVector,\n        customError: customError,\n        customType: customType,\n        decompose_fn: decompose_fn,\n        each: each,\n        evaluate: evaluate,\n        even: even,\n        evenFraction: evenFraction,\n        fillHoles: fillHoles,\n        firstObject: firstObject,\n        format: format,\n        generatePrimes: generatePrimes,\n        getCoeffs: getCoeffs,\n        getU: getU,\n        importFunctions: importFunctions,\n        inBrackets: inBrackets,\n        isArray: isArray,\n        isExpression: isExpression,\n        isFraction: isFraction,\n        isInt: isInt,\n        isMatrix: isMatrix,\n        isNegative: isNegative,\n        isNumericSymbol: isNumericSymbol,\n        isPrime: isPrime,\n        isReserved: isReserved,\n        isSymbol: isSymbol,\n        isVariableSymbol: isVariableSymbol,\n        isVector: isVector,\n        keys: keys,\n        knownVariable: knownVariable,\n        nroots: nroots,\n        remove: remove,\n        reserveNames: reserveNames,\n        range: range,\n        round: nround,\n        sameSign: sameSign,\n        scientificToDecimal: scientificToDecimal,\n        separate: separate,\n        stringReplace: stringReplace,\n        text: text,\n        validateName: validateName,\n        variables: variables,\n        warn: warn\n    };\n\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\n    //to be used.\n    var C = {\n        groups: Groups,\n        Symbol: Symbol,\n        Expression: Expression,\n        Frac: Frac,\n        Vector: Vector,\n        Matrix: Matrix,\n        Parser: Parser,\n        Scientific: Scientific,\n        Fraction: Fraction,\n        Math2: Math2,\n        LaTeX: LaTeX,\n        Utils: Utils,\n        PARSER: _,\n        PARENTHESIS: PARENTHESIS,\n        Settings: Settings,\n        err: err,\n        bigInt: bigInt,\n        bigDec: bigDec,\n        exceptions: exceptions\n    };\n\n//libExports ===================================================================\n    /**\n     *\n     * @param {String} expression the expression to be evaluated\n     * @param {Object} subs the object containing the variable values\n     * @param {Integer} location a specific location in the equation list to\n     * insert the evaluated expression\n     * @param {String} option additional options\n     * @returns {Expression}\n     */\n    var libExports = function (expression, subs, option, location) {\n        // Initiate the numer flag\n        var numer = false;\n\n        // Is the user declaring a function?\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n        if(fndec)\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n\n        // var variable, fn, args;\n        // Convert any expression passed in to a string\n        if(expression instanceof Expression)\n            expression = expression.toString();\n\n        // Convert it to an array for simplicity\n        if(!isArray(option)) {\n            option = typeof option === 'undefined' ? [] : [option];\n        }\n\n        option.forEach(function (o) {\n            // Turn on the numer flag if requested\n            if(o === 'numer') {\n                numer = true;\n                return;\n            }\n            // Wrap it in a function if requested. This only holds true for\n            // functions that take a single argument which is the expression\n            var f = _.functions[option];\n            // If there's a function and it takes a single argument, then wrap\n            // the expression in it\n            if(f && f[1] === 1) {\n                expression = `${o}(${expression})`;\n            }\n        });\n\n        var e = block('PARSE2NUMBER', function () {\n            return _.parse(expression, subs);\n        }, numer || Settings.PARSE2NUMBER);\n\n        if(location) {\n            EXPRESSIONS[location - 1] = e;\n        }\n        else {\n            EXPRESSIONS.push(e);\n        }\n\n        return new Expression(e);\n    };\n    /**\n     * Converts expression into rpn form\n     * @param {String} expression\n     * @returns {Token[]}\n     */\n    libExports.rpn = function (expression) {\n        return _.tokenize(_.toRPN(expression));\n    };\n\n    /**\n     * Generates LaTeX from expression string\n     * @param {String} e\n     * @param {object} opt\n     * @returns {String}\n     */\n    libExports.convertToLaTeX = function (e, opt) {\n        return _.toTeX(e, opt);\n    };\n\n    /**\n     * Converts latex to text - Very very very basic at the moment\n     * @param {String} e\n     * @returns {String}\n     */\n    libExports.convertFromLaTeX = function (e) {\n        var txt = LaTeX.parse(_.tokenize(e));\n        return new Expression(_.parse(txt));\n    };\n\n    /**\n     * Get the version of nerdamer or a loaded add-on\n     * @param {String} add_on - The add-on being checked\n     * @returns {String} returns the version of nerdamer\n     */\n    libExports.version = function (add_on) {\n        if(add_on) {\n            try {\n                return C[add_on].version;\n            }\n            catch(e) {\n                return \"No module named \" + add_on + \" found!\";\n            }\n        }\n        return version;\n    };\n\n    /**\n     * Get nerdamer generated warnings\n     * @returns {String[]}\n     */\n    libExports.getWarnings = function () {\n        return WARNINGS;\n    };\n\n    /**\n     *\n     * @param {String} constant The name of the constant to be set\n     * @param {mixed} value The value of the constant\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setConstant = function (constant, value) {\n        validateName(constant);\n        if(!isReserved(constant)) {\n            //fix for issue #127\n            if(value === 'delete' || value === '') {\n                delete _.CONSTANTS[constant];\n            }\n            else {\n                if(isNaN(value))\n                    throw new NerdamerTypeError('Constant must be a number!');\n                _.CONSTANTS[constant] = value;\n            }\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a previously set constant\n     * @param {type} constant\n     * @returns {String}\n     */\n    libExports.getConstant = function (constant) {\n        return String(_.constant[constant]);\n    };\n\n    /**\n     *\n     * @param {String} name The name of the function\n     * @param {Array} params_array A list containing the parameter name of the functions\n     * @param {String} body The body of the function\n     * @returns {Boolean} returns true if succeeded and falls on fail\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n     */\n    libExports.setFunction = setFunction;\n\n    /**\n     *\n     * @returns {C} Exports the nerdamer core functions and objects\n     */\n    libExports.getCore = function () {\n        return C;\n    };\n\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\n\n    /**\n     *\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\n     * @returns {String|Array}\n     */\n    libExports.reserved = function (asArray) {\n        if(asArray) {\n            return RESERVED;\n        }\n        return RESERVED.join(', ');\n    };\n\n    /**\n     *\n     * @param {Integer} equation_number the number of the equation to clear.\n     * If 'all' is supplied then all equations are cleared\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n        if(equation_number === 'all') {\n            EXPRESSIONS = [];\n        }\n        else if(equation_number === 'last') {\n            EXPRESSIONS.pop();\n        }\n        else if(equation_number === 'first') {\n            EXPRESSIONS.shift();\n        }\n        else {\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n        }\n        return this;\n    };\n\n    /**\n     * Alias for nerdamer.clear('all')\n     */\n    libExports.flush = function () {\n        this.clear('all');\n        return this;\n    };\n\n    /**\n     *\n     * @param {Boolean} asObject\n     * @param {Boolean} asLaTeX\n     * @param {String|String[]} option\n     * @returns {Array}\n     */\n    libExports.expressions = function (asObject, asLaTeX, option) {\n        var result = asObject ? {} : [];\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n            asObject ? result[i + 1] = eq : result.push(eq);\n        }\n        return result;\n    };\n\n    //the method for registering modules\n    libExports.register = function (obj) {\n        var core = this.getCore();\n\n        if(isArray(obj)) {\n            for(var i = 0; i < obj.length; i++) {\n                if(obj)\n                    this.register(obj[i]);\n            }\n        }\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\n            //make sure all the dependencies are available\n            if(obj.dependencies) {\n                for(var i = 0; i < obj.dependencies.length; i++)\n                    if(!core[obj.dependencies[i]])\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n            }\n            //if no parent object is provided then the function does not have an address and cannot be called directly\n            var parent_obj = obj.parent,\n                    fn = obj.build.call(core); //call constructor to get function\n            if(parent_obj) {\n                if(!core[parent_obj])\n                    core[obj.parent] = {};\n\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\n                //attach the function to the core\n                ref_obj[obj.name] = fn;\n            }\n            if(obj.visible)\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n\n        }\n    };\n\n    /**\n     * @param {String} name variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validateName = validateName;\n\n    /**\n     * @param {String} varname variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validVarName = function (varname) {\n        try {\n            validateName(varname);\n            return RESERVED.indexOf(varname) === -1;\n        }\n        catch(e) {\n            return false;\n        }\n    };\n\n    /**\n     *\n     * @returns {Array} Array of functions currently supported by nerdamer\n     */\n    libExports.supported = function () {\n        return keys(_.functions);\n    };\n\n    /**\n     *\n     * @returns {Number} The number equations/expressions currently loaded\n     */\n    libExports.numEquations = libExports.numExpressions = function () {\n        return EXPRESSIONS.length;\n    };\n    /* END EXPORTS */\n\n    /**\n     *\n     * @param {String} v variable to be set\n     * @param {String} val value of variable. This can be a variable expression or number\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setVar = function (v, val) {\n        validateName(v);\n        //check if it's not already a constant\n        if(v in _.CONSTANTS)\n            err('Cannot set value for constant ' + v);\n        if(val === 'delete' || val === '')\n            delete VARS[v];\n        else {\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a set variable\n     * @param {type} v\n     * @returns {varies}\n     */\n    libExports.getVar = function (v) {\n        return VARS[v];\n    };\n    /**\n     * Clear the variables from the VARS object\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clearVars = function () {\n        VARS = {};\n        return this;\n    };\n\n    /**\n     *\n     * @param {Function} loader\n     * @returns {nerdamer}\n     */\n    libExports.load = function (loader) {\n        loader.call(this);\n        return this;\n    };\n\n    /**\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n     * @param {String|String[]} option\n     * @returns {Object} Returns an object with the variables\n     */\n    libExports.getVars = function (output, option) {\n        output = output || 'text';\n        var variables = {};\n        if(output === 'object')\n            variables = VARS;\n        else {\n            for(var v in VARS) {\n                if(output === 'latex') {\n                    variables[v] = VARS[v].latex(option);\n                }\n                else if(output === 'text') {\n                    variables[v] = VARS[v].text(option);\n                }\n            }\n        }\n        return variables;\n    };\n\n    /**\n     * Set the value of a setting\n     * @param {String} setting The setting to be changed\n     * @param {boolean} value\n     */\n    libExports.set = function (setting, value) {\n        //current options:\n        //PARSE2NUMBER, suppress_errors\n        if(typeof setting === 'object')\n            for(var x in setting) {\n                libExports.set(x, setting[x]);\n            }\n\n        var disallowed = ['SAFE'];\n        if(disallowed.indexOf(setting) !== -1)\n            err('Cannot modify setting: ' + setting);\n\n        if(setting === 'PRECISION') {\n            bigDec.set({precision: value});\n            Settings.PRECISION = value;\n\n            // Avoid that nerdamer puts out garbage after 21 decimal place\n            if(value > 21) {\n                this.set('USE_BIG', true);\n            }\n        }\n        else if(setting === 'USE_LN' && value === true) {\n            //set log as LN\n            Settings.LOG = 'LN';\n            //set log10 as log\n            Settings.LOG10 = 'log';\n            //point the functions in the right direction\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n            //the log10 function must be explicitly set\n            _.functions['log'][0] = function (x) {\n                if(x.isConstant())\n                    return new Symbol(Math.log10(x));\n                return _.symfunction(Settings.LOG10, [x]);\n            };\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n\n            //remove log10\n            delete _.functions['log10'];\n        }\n        else\n            Settings[setting] = value;\n    };\n\n    /**\n     * Get the value of a setting\n     * @param {type} setting\n     * @returns {undefined}\n     */\n    libExports.get = function (setting) {\n        return Settings[setting];\n    };\n\n    /**\n     * This functions makes internal functions available externally\n     * @param {bool} override Override the functions when calling api if it exists\n     */\n    libExports.api = function (override) {\n        //Map internal functions to external ones\n        var linker = function (fname) {\n            return function () {\n                var args = [].slice.call(arguments);\n                for(var i = 0; i < args.length; i++)\n                    args[i] = _.parse(args[i]);\n                return new Expression(block('PARSE2NUMBER', function () {\n                    return _.callfunction(fname, args);\n                }));\n            };\n        };\n        //perform the mapping\n        for(var x in _.functions)\n            if(!(x in libExports) || override)\n                libExports[x] = linker(x);\n    };\n\n    libExports.replaceFunction = function (name, fn, num_args) {\n        var existing = _.functions[name];\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n    };\n\n    libExports.setOperator = function (operator, shift) {\n        _.setOperator(operator, shift);\n    };\n\n    libExports.getOperator = function (operator) {\n        return _.getOperator(operator);\n    };\n\n    libExports.aliasOperator = function (operator, withOperator) {\n        _.aliasOperator(operator, withOperator);\n    };\n\n    libExports.tree = function (expression) {\n        return _.tree(_.toRPN(_.tokenize(expression)));\n    };\n\n    libExports.htmlTree = function (expression, indent) {\n        var tree = this.tree(expression);\n\n        return '<div class=\"tree\">\\n' +\n                '    <ul>\\n' +\n                '        <li>\\n' +\n                tree.toHTML(3, indent) + '\\n' +\n                '        </li>\\n' +\n                '    </ul>\\n' +\n                '</div>';\n    };\n\n    libExports.addPeeker = function (name, f) {\n        if(_.peekers[name])\n            _.peekers[name].push(f);\n    };\n\n    libExports.removePeeker = function (name, f) {\n        remove(_.peekers[name], f);\n    };\n\n    libExports.parse = function (e) {\n        return String(e).split(';').map(function (x) {\n            return _.parse(x);\n        });\n    };\n\n    libExports.api();\n\n    return libExports; //Done\n//imports ======================================================================\n})({\n    //https://github.com/peterolson/BigInteger.js\n    bigInt: (function(){\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if( true&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return bigInt}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}\n        return bigInt;\n    })(),\n    /*\n     *  decimal.js v10.2.1\n     *  An arbitrary-precision Decimal type for JavaScript.\n     *  https://github.com/MikeMcl/decimal.js\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\n     *  MIT Licence\n     */\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f), true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return e}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0,e}(this)\n//    bigDec: require('decimal.js')\n});\n\nif(true) {\n    module.exports = nerdamer;\n};\n\n\n//# sourceURL=webpack://graph-art-creator/./src/nerdamer/nerdamer.core.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.user.ts");
/******/ 	
/******/ })()
;