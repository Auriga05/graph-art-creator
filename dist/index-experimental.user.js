// ==UserScript==
// @name         Graph Art Creator - Experimental
// @namespace    http://tampermonkey.net/
// @version      1.0a
// @description  precal thing
// @author       Auriga05
// @match        https://www.desmos.com/calculator*
// @icon         https://www.google.com/s2/favicons?domain=desmos.com
// @grant        unsafeWindow
// @updateURL    https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js
// @downloadURL  https://github.com/Auriga05/graph-art-creator/raw/master/index.user.js
// @require      https://code.jquery.com/jquery-3.5.1.slim.min.js
// @require      https://cdn.jsdelivr.net/npm/evaluatex@2.2.0/dist/evaluatex.min.js
// ==/UserScript==
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/classes/CroppableGraph.ts":
/*!***************************************!*\
  !*** ./src/classes/CroppableGraph.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CroppableGraph\": () => (/* binding */ CroppableGraph)\n/* harmony export */ });\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.ts\");\n/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graph */ \"./src/classes/Graph.ts\");\n\r\n\r\n\r\nclass CroppableGraph extends _Graph__WEBPACK_IMPORTED_MODULE_2__.Graph {\r\n    constructor(id) {\r\n        super(id);\r\n        this.cropVariables = {\r\n            minX: -8,\r\n            minY: -4,\r\n            maxX: 8,\r\n            maxY: 4,\r\n        };\r\n        this.focused = false;\r\n        this.shown = false;\r\n        this._variables = {\r\n            h: 0,\r\n            k: 0,\r\n        };\r\n    }\r\n    get variables() {\r\n        return { ...this._variables, ...this.convertedCropVariables };\r\n    }\r\n    set variables(value) {\r\n        this.cropVariables = {\r\n            minX: value[\"c_{x1}\"] + this._variables.h,\r\n            maxX: value[\"c_{x2}\"] + this._variables.h,\r\n            minY: value[\"c_{y1}\"] + this._variables.k,\r\n            maxY: value[\"c_{y2}\"] + this._variables.k,\r\n        };\r\n        this._variables = {\r\n            ...this._variables,\r\n            ...(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.omit)(value, [\r\n                \"c_{x1}\",\r\n                \"c_{x2}\",\r\n                \"c_{y1}\",\r\n                \"c_{y2}\",\r\n            ])\r\n        };\r\n    }\r\n    get convertedCropVariables() {\r\n        return {\r\n            'c_{x1}': this.cropVariables.minX - this._variables.h,\r\n            'c_{y1}': this.cropVariables.minY - this._variables.k,\r\n            'c_{x2}': this.cropVariables.maxX - this._variables.h,\r\n            'c_{y2}': this.cropVariables.maxY - this._variables.k,\r\n        };\r\n    }\r\n    focus() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setVariables([\r\n            { key: 'c_{x1}', value: this.cropVariables.minX - this.variables.h },\r\n            { key: 'c_{y1}', value: this.cropVariables.minY - this.variables.k },\r\n            { key: 'c_{x2}', value: this.cropVariables.maxX - this.variables.h },\r\n            { key: 'c_{y2}', value: this.cropVariables.maxY - this.variables.k },\r\n        ]);\r\n        this.focused = true;\r\n        super.focus();\r\n    }\r\n    get allVariableNames() {\r\n        return [\r\n            ...Object.keys(this.variables),\r\n            ...CroppableGraph.boundVariableNames\r\n        ];\r\n    }\r\n    update() {\r\n        super.update();\r\n        if (this.focused) {\r\n            _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.recalculateBoundVariables();\r\n            this.cropVariables = _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.getMinMaxBoundVariables();\r\n        }\r\n    }\r\n    getHelperExpressions() {\r\n        console.log(this.variables);\r\n        const helperExpressions = [\r\n            ..._index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.getVariableExpressions([\"c_{x1}\", \"c_{y1}\", \"c_{x2}\", \"c_{y2}\"]),\r\n            ...CroppableGraph.showBounds(),\r\n        ];\r\n        let helperExpressionIndex = 0;\r\n        const transformedHelperExpressions = helperExpressions.map(helperExpression => {\r\n            if (!helperExpression.id) {\r\n                helperExpression.id = `graphhelper_${helperExpressionIndex}`;\r\n                helperExpressionIndex += 1;\r\n            }\r\n            return helperExpression;\r\n        });\r\n        return transformedHelperExpressions;\r\n    }\r\n    standardizedBoundsLatex() {\r\n        const { minX, minY, maxX, maxY } = _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.getMinMaxBoundVariables();\r\n        return `\\\\left\\\\{${minX}<x<${maxX}\\\\right\\\\}\\\\left\\\\{${minY}<y<${maxY}\\\\right\\\\}`;\r\n    }\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            cropVariables: this.cropVariables,\r\n            focused: this.focused,\r\n            shown: this.shown,\r\n            variables: this.variables,\r\n            graphType: \"ellipse_or_hyperbola\",\r\n        };\r\n    }\r\n    static showBounds() {\r\n        const defaultExpressionSettings = {\r\n            type: \"expression\", hidden: false, color: \"black\"\r\n        };\r\n        return [\r\n            { ...defaultExpressionSettings, latex: \"c_{x1a}=c_{x1} + h\", id: \"variable_c_{x1a}\" },\r\n            { ...defaultExpressionSettings, latex: \"c_{x2a}=c_{x2} + h\", id: \"variable_c_{x2a}\" },\r\n            { ...defaultExpressionSettings, latex: \"c_{y1a}=c_{y1} + k\", id: \"variable_c_{y1a}\" },\r\n            { ...defaultExpressionSettings, latex: \"c_{y2a}=c_{y2} + k\", id: \"variable_c_{y2a}\" },\r\n            { ...defaultExpressionSettings, latex: `\\\\left(c_{x1} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('h')},c_{y1} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('k')}\\\\right)`, id: `point_1` },\r\n            { ...defaultExpressionSettings, latex: `\\\\left(c_{x1} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('h')},c_{y2} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('k')}\\\\right)` },\r\n            { ...defaultExpressionSettings, latex: `\\\\left(c_{x2} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('h')},c_{y1} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('k')}\\\\right)` },\r\n            { ...defaultExpressionSettings, latex: `\\\\left(c_{x2} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('h')},c_{y2} + ${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.abssgn)('k')}\\\\right)` },\r\n            { ...defaultExpressionSettings, latex: \"\\\\left(c_{x1a},c_{y1a}+\\\\left(c_{y2a}-c_{y1a}\\\\right)t\\\\right)\" },\r\n            { ...defaultExpressionSettings, latex: \"\\\\left(c_{x2a},c_{y1a}+\\\\left(c_{y2a}-c_{y1a}\\\\right)t\\\\right)\" },\r\n            { ...defaultExpressionSettings, latex: \"\\\\left(c_{x1a}+\\\\left(c_{x2a}-c_{x1a}\\\\right)t,c_{y1a}\\\\right)\" },\r\n            { ...defaultExpressionSettings, latex: \"\\\\left(c_{x1a}+\\\\left(c_{x2a}-c_{x1a}\\\\right)t,c_{y2a}\\\\right)\" },\r\n        ];\r\n    }\r\n}\r\nCroppableGraph.boundVariableNames = ['c_{x1}', 'c_{y1}', 'c_{x2}', 'c_{y2}'];\r\nCroppableGraph.defaultCropVariables = [\r\n    { key: \"c_{x1}\", value: 8 },\r\n    { key: \"c_{y1}\", value: 4 },\r\n    { key: \"c_{x2}\", value: -8 },\r\n    { key: \"c_{y2}\", value: -4 },\r\n    { key: \"c_{x1a}\", value: 8 },\r\n    { key: \"c_{y1a}\", value: 4 },\r\n    { key: \"c_{x2a}\", value: -8 },\r\n    { key: \"c_{y2a}\", value: -4 },\r\n];\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/classes/CroppableGraph.ts?");

/***/ }),

/***/ "./src/classes/Graph.ts":
/*!******************************!*\
  !*** ./src/classes/Graph.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Graph\": () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.ts\");\n\r\n\r\nclass Graph {\r\n    constructor(id) {\r\n        this.id = id ?? _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.nextId();\r\n        this.focused = false;\r\n        this.shown = false;\r\n        this._variables = {};\r\n    }\r\n    set variables(value) {\r\n        this._variables = value;\r\n    }\r\n    get variables() {\r\n        return this._variables;\r\n    }\r\n    getSymbolicExpressions() {\r\n        this.shown = true;\r\n        return [];\r\n    }\r\n    get allVariableNames() {\r\n        return [\r\n            ...Object.keys(this.variables)\r\n        ];\r\n    }\r\n    getVariableExpressions(variableList) {\r\n        console.log(this.variables);\r\n        const variables = variableList.map(variableName => {\r\n            return {\r\n                type: \"expression\",\r\n                latex: `${variableName}=${this.variables[variableName]}`,\r\n                id: `variable_${variableName}`,\r\n                hidden: true,\r\n            };\r\n        });\r\n        return variables;\r\n    }\r\n    showSymbolic() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions(this.getSymbolicExpressions());\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions(this.getVariableExpressions(this.allVariableNames));\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions(this.getHelperExpressions());\r\n    }\r\n    focus() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setVariables((0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.convertToVariableObjects)(this.variables));\r\n        this.showSymbolic();\r\n    }\r\n    defocus() {\r\n        this.focused = false;\r\n        this.standardize();\r\n    }\r\n    update() {\r\n        if (this.focused) {\r\n            this.variables = Object.fromEntries(Object.keys(this.variables).map(variableName => [variableName, _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.variables[variableName].value]));\r\n            if (!this.shown) {\r\n                _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions(this.getSymbolicExpressions());\r\n            }\r\n        }\r\n    }\r\n    getGraphId() {\r\n        return `graph_${this.id}`;\r\n    }\r\n    standardize() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions(_index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.getVariableExpressions(this.allVariableNames));\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.removeGraphPoints();\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setExpressions([\r\n            {\r\n                type: \"expression\",\r\n                id: `graph_${this.id}`,\r\n                latex: this.getExpressionLatex()\r\n            }\r\n        ]);\r\n    }\r\n    remove() {\r\n        this.focused = false;\r\n        _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.removeGraphPoints();\r\n        const expression = _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.getExpression(this.getGraphId());\r\n        if (expression) {\r\n            _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.removeExpressions([expression]);\r\n        }\r\n        else {\r\n            throw new Error(`Failed removing expression of graph ${this.getGraphId()}`);\r\n        }\r\n    }\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            focused: this.focused,\r\n            shown: this.shown,\r\n            variables: this.variables,\r\n            graphType: \"ellipse_or_hyperbola\",\r\n        };\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/classes/Graph.ts?");

/***/ }),

/***/ "./src/classes/Variable.ts":
/*!*********************************!*\
  !*** ./src/classes/Variable.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Variable\": () => (/* binding */ Variable)\n/* harmony export */ });\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _types_desmosTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/desmosTypes */ \"./src/types/desmosTypes.ts\");\n\r\n\r\nclass Variable {\r\n    constructor(key, value) {\r\n        this.key = key.toString();\r\n        this.value = value;\r\n        this.helperExpression = _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.Calc.HelperExpression({ latex: this.key });\r\n        this.callback = () => {\r\n            const analysis = _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.Calc.expressionAnalysis[`variable_${this.key}`];\r\n            if ((0,_types_desmosTypes__WEBPACK_IMPORTED_MODULE_1__.isValueAnalysis)(analysis)) {\r\n                this.value = analysis.evaluation.value;\r\n            }\r\n        };\r\n        this.helperExpression.observe('numericValue', this.callback);\r\n    }\r\n    setCallback(callback) {\r\n        this.helperExpression.observe('numericValue', callback);\r\n        this.callback = callback;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/classes/Variable.ts?");

/***/ }),

/***/ "./src/classes/VirtualCalc.ts":
/*!************************************!*\
  !*** ./src/classes/VirtualCalc.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VirtualCalcClass\": () => (/* binding */ VirtualCalcClass)\n/* harmony export */ });\n/* harmony import */ var _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/symbolicLib */ \"./src/lib/symbolicLib.ts\");\n/* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/types */ \"./src/types/types.ts\");\n/* harmony import */ var _CroppableGraph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CroppableGraph */ \"./src/classes/CroppableGraph.ts\");\n/* harmony import */ var _Variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Variable */ \"./src/classes/Variable.ts\");\n\r\n\r\n\r\n\r\nclass VirtualCalcClass {\r\n    constructor(_Calc) {\r\n        this.graphs = {};\r\n        this.variables = {};\r\n        this.lastId = -1;\r\n        this.Calc = _Calc;\r\n        this.Controller = _Calc.controller;\r\n        this.focus = null;\r\n        this.helperExpressions = [];\r\n        this.isShowingBounds = false;\r\n        this.expressionsToSet = [];\r\n        this.expressionsToRemove = [];\r\n    }\r\n    save() {\r\n        const value = {\r\n            graphs: Object.values(this.graphs).map(graph => graph.toObject()),\r\n            variables: Object.values(this.variables).map(variable => {\r\n                return { key: variable.key, value: variable.value };\r\n            }),\r\n            lastId: this.lastId,\r\n            points: this.helperExpressions,\r\n        };\r\n        const valueToJSON = JSON.stringify(value);\r\n        this.setExpressions([\r\n            {\r\n                type: \"expression\",\r\n                id: \"graph_data\",\r\n                latex: \"0\",\r\n                label: valueToJSON,\r\n            }\r\n        ], () => { return; }, true);\r\n        console.log(valueToJSON);\r\n    }\r\n    load() {\r\n        const expression = this.getExpression(\"graph_data\");\r\n        if (!expression)\r\n            return;\r\n        if (expression.type === \"expression\") {\r\n            const value = JSON.parse(expression.label);\r\n            this.lastId = value.lastId;\r\n            this.helperExpressions = value.points;\r\n            this.variables = Object.fromEntries(value.variables\r\n                .map(variable => new _Variable__WEBPACK_IMPORTED_MODULE_3__.Variable(variable.key, variable.value))\r\n                .map(variable => [variable.key, variable]));\r\n            this.graphs = Object.fromEntries(value.graphs.map(graph => this.fromGraph(graph))\r\n                .map(graph => [graph.id, graph]));\r\n        }\r\n    }\r\n    fromGraph(expression) {\r\n        const newGraph = new _types_types__WEBPACK_IMPORTED_MODULE_1__.GraphTypes[expression.graphType](expression.variables);\r\n        this.graphs[newGraph.id] = newGraph;\r\n        return newGraph;\r\n    }\r\n    nextId() {\r\n        this.lastId += 1;\r\n        return this.lastId;\r\n    }\r\n    setVariables(variables) {\r\n        variables.forEach((variable) => {\r\n            const { key, value } = variable;\r\n            if (key in this.variables) {\r\n                this.variables[key].value = value;\r\n            }\r\n            else {\r\n                this.variables[key] = new _Variable__WEBPACK_IMPORTED_MODULE_3__.Variable(key, value);\r\n            }\r\n        });\r\n    }\r\n    // pushVariables(variableList?: string[]) {\r\n    // \tconst newVariables: Variable<number>[] = []\r\n    // \tconst analysis = this.Calc.expressionAnalysis\r\n    // \tconst variableNames = variableList ?? Object.keys(this.variables)\r\n    // \tvariableNames.forEach((variable) => {\r\n    // \t\tconst variableAnalysis = analysis[`variable_${variable}`]\r\n    // \t\tif (!variableAnalysis) throw new Error(`Analysis of ${variable} not found`)\r\n    // \t\tif (!variableAnalysis.evaluation) return\r\n    // \t\tif (variableAnalysis.evaluation.type === \"Number\") {\r\n    // \t\t\tnewVariables.push(new Variable(variable, variableAnalysis.evaluation.value))\r\n    // \t\t}\r\n    // \t})\r\n    // \tthis.setVariables(newVariables)\r\n    // }\r\n    addGraph(graphType, variables) {\r\n        let newGraph;\r\n        if (variables) {\r\n            newGraph = new _types_types__WEBPACK_IMPORTED_MODULE_1__.GraphTypes[graphType](variables);\r\n        }\r\n        else {\r\n            newGraph = new Proxy(_types_types__WEBPACK_IMPORTED_MODULE_1__.GraphTypes[graphType].createDefault(), {\r\n                get: (target, prop, receiver) => {\r\n                    // console.log(`Getting ${prop.toString()} from graph ${target.id}`)\r\n                    return Reflect.get(target, prop, receiver);\r\n                },\r\n                set: (target, prop, value, receiver) => {\r\n                    // console.log(`Setting ${prop.toString()} to ${value.toString()} from graph ${target.id}`)\r\n                    return Reflect.set(target, prop, value, receiver);\r\n                },\r\n                apply: (target, thisArg, argArray) => {\r\n                    // console.log(`Applying ${thisArg.toString()} from graph ${target.id}`)\r\n                    return Reflect.apply(target, thisArg, argArray);\r\n                }\r\n            });\r\n        }\r\n        this.graphs[newGraph.id] = newGraph;\r\n        this.setFocus(newGraph);\r\n    }\r\n    hideBounds() {\r\n        this.isShowingBounds = false;\r\n        // return this.showBounds().map(x => {\r\n        // \tx.hidden = true\r\n        // \treturn x\r\n        // })\r\n        return [];\r\n    }\r\n    setFocus(newGraph) {\r\n        if (newGraph instanceof _CroppableGraph__WEBPACK_IMPORTED_MODULE_2__.CroppableGraph) {\r\n            const isShowingBounds = this.getExpression('point_1');\r\n            if (isShowingBounds) {\r\n                if (newGraph && isShowingBounds.hidden) {\r\n                    this.setExpressions(newGraph.getHelperExpressions());\r\n                }\r\n            }\r\n        }\r\n        if (this.focus != newGraph) {\r\n            this.focus?.defocus();\r\n            if (newGraph) {\r\n                this.focus = newGraph;\r\n                newGraph.focus();\r\n                newGraph.update();\r\n            }\r\n            else {\r\n                this.setExpressions(this.hideBounds());\r\n            }\r\n        }\r\n        this.confirmChangeExpressions();\r\n    }\r\n    setExpressions(expressions, callback, immediate) {\r\n        if (immediate) {\r\n            this.Calc.setExpressions(expressions);\r\n            if (callback)\r\n                callback();\r\n            console.log(\"SET EXPRESSIONS\", expressions);\r\n            console.trace();\r\n        }\r\n        else {\r\n            console.log(\"ADD EXPRESSIONS\", expressions);\r\n            console.trace();\r\n            if (callback) {\r\n                this.expressionsToSet.push({\r\n                    callback,\r\n                    expressions,\r\n                });\r\n            }\r\n            else {\r\n                this.expressionsToSet.push({\r\n                    expressions\r\n                });\r\n            }\r\n        }\r\n    }\r\n    confirmChangeExpressions() {\r\n        const expressionsToSet = this.expressionsToSet.map(value => value.expressions).flat();\r\n        const expressionsToSetId = new Set(expressionsToSet.map(expression => expression.id));\r\n        const expressionsToRemove = this.expressionsToRemove\r\n            .map(value => value.expressions)\r\n            .flat()\r\n            .filter(expression => !expressionsToSetId.has(expression.id));\r\n        this.expressionsToRemove.forEach(value => {\r\n            if (value.callback) {\r\n                value.callback();\r\n            }\r\n        });\r\n        this.expressionsToSet.forEach(value => {\r\n            if (value.callback) {\r\n                value.callback();\r\n            }\r\n        });\r\n        if (expressionsToRemove.length > 0) {\r\n            this.Calc.removeExpressions(expressionsToRemove);\r\n            console.log(\"REMOVED EXPRESSIONS\", expressionsToRemove);\r\n        }\r\n        if (expressionsToSet.length > 0) {\r\n            this.Calc.setExpressions(expressionsToSet);\r\n            console.log(\"SET EXPRESSIONS\", expressionsToSet);\r\n        }\r\n        if ((expressionsToRemove.length > 0) || (expressionsToSet.length > 0)) {\r\n            console.trace();\r\n        }\r\n        console.log(\"=======================================================\");\r\n        this.expressionsToSet = [];\r\n        this.expressionsToRemove = [];\r\n    }\r\n    getVariableExpressions(variableList) {\r\n        const variables = variableList.map(variableName => {\r\n            return {\r\n                type: \"expression\",\r\n                latex: `${variableName}=${this.variables[variableName].value}`,\r\n                id: `variable_${variableName}`,\r\n                hidden: true,\r\n            };\r\n        });\r\n        return variables;\r\n    }\r\n    onChange() {\r\n        Object.values(this.graphs).forEach(graph => {\r\n            graph.update();\r\n        });\r\n        if (this.selectedExpressionId) {\r\n            if (this.selectedExpressionId.startsWith('graph_')) {\r\n                const newFocusId = this.selectedExpressionId.replace('graph_', '');\r\n                this.setFocus(this.graphs[newFocusId]);\r\n            }\r\n        }\r\n        this.confirmChangeExpressions();\r\n    }\r\n    getMinMaxBoundVariables() {\r\n        const minX = Math.min(this.variables['c_{x1a}'].value, this.variables['c_{x2a}'].value);\r\n        const maxX = Math.max(this.variables['c_{x1a}'].value, this.variables['c_{x2a}'].value);\r\n        const minY = Math.min(this.variables['c_{y1a}'].value, this.variables['c_{y2a}'].value);\r\n        const maxY = Math.max(this.variables['c_{y1a}'].value, this.variables['c_{y2a}'].value);\r\n        return { minX, minY, maxX, maxY };\r\n    }\r\n    recalculateBoundVariables() {\r\n        this.setVariables([\r\n            { key: 'c_{x1a}', value: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_0__.Add('c_{x1}', 'h').getValue() },\r\n            { key: 'c_{x2a}', value: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_0__.Add('c_{x2}', 'h').getValue() },\r\n            { key: 'c_{y1a}', value: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_0__.Add('c_{y1}', 'k').getValue() },\r\n            { key: 'c_{y2a}', value: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_0__.Add('c_{y2}', 'k').getValue() },\r\n        ]);\r\n    }\r\n    removeGraphPoints() {\r\n        this.removeExpressions(this.helperExpressions);\r\n    }\r\n    removeGraph() {\r\n        this.focus = null;\r\n        this.setExpressions(this.hideBounds());\r\n        if (this.Calc.selectedExpressionId?.startsWith(\"graph_\")) {\r\n            const graphId = this.Calc.selectedExpressionId.replace(\"graph_\", \"\");\r\n            const graph = this.graphs[graphId];\r\n            graph.remove();\r\n            delete this.graphs[graphId];\r\n        }\r\n    }\r\n    getItemCount() {\r\n        return this.Controller.getItemCount();\r\n    }\r\n    set selectedExpressionId(id) {\r\n        this.Controller.dispatch({ type: \"set-selected-id\", id: id });\r\n    }\r\n    get selectedExpressionId() {\r\n        return this.Calc.selectedExpressionId;\r\n    }\r\n    getExpression(_id) {\r\n        const expression = this.Controller.getItemModel(_id);\r\n        if (expression) {\r\n            return expression;\r\n        }\r\n    }\r\n    removeExpressions(expressions, callback, immediate) {\r\n        if (immediate) {\r\n            this.Calc.removeExpressions(expressions);\r\n            if (callback)\r\n                callback();\r\n            console.log(\"REMOVED EXPRESSIONS\", expressions);\r\n            console.trace();\r\n        }\r\n        else {\r\n            console.log(\"EXPRESSIONS TO REMOVE\", expressions);\r\n            console.trace();\r\n            if (callback) {\r\n                this.expressionsToRemove.push({\r\n                    callback,\r\n                    expressions,\r\n                });\r\n            }\r\n            else {\r\n                this.expressionsToRemove.push({\r\n                    expressions\r\n                });\r\n            }\r\n        }\r\n    }\r\n    onShift() {\r\n        Object.values(this.graphs).forEach(graph => graph.onShift());\r\n    }\r\n    onUnshift() {\r\n        Object.values(this.graphs).forEach(graph => graph.onUnshift());\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/classes/VirtualCalc.ts?");

/***/ }),

/***/ "./src/graphs/Bezier.ts":
/*!******************************!*\
  !*** ./src/graphs/Bezier.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bezier\": () => (/* binding */ Bezier)\n/* harmony export */ });\n/* harmony import */ var _classes_Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Graph */ \"./src/classes/Graph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/symbolicLib */ \"./src/lib/symbolicLib.ts\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.ts\");\n\r\n\r\n\r\n\r\nclass Bezier extends _classes_Graph__WEBPACK_IMPORTED_MODULE_0__.Graph {\r\n    constructor(variables) {\r\n        super();\r\n        this._variables = variables;\r\n    }\r\n    static createDefault() {\r\n        return new Bezier(this.defaultVariables);\r\n    }\r\n    getExpressionLatex() {\r\n        const table = _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.getExpression('graphhelper_table');\r\n        if (!table)\r\n            throw new Error(\"Can't find bezier table\");\r\n        if (table.type == \"table\") {\r\n            const col1 = table.columns[0].values.filter(x => x !== \"\").map(x => parseFloat(x));\r\n            const col2 = table.columns[1].values.filter(x => x !== \"\").map(x => parseFloat(x));\r\n            const toPolynomial = (coefficient, index, array) => {\r\n                return new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Operator(\"nCr\", _utils_utils__WEBPACK_IMPORTED_MODULE_3__.nCr, 3, index), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(1, 't'), 3 - index), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent('t', index), coefficient - array[0]);\r\n            };\r\n            const point = new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Point(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(col1[0], ...col1.map(toPolynomial)), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(col2[0], ...col2.map(toPolynomial))).toString();\r\n            console.log(point);\r\n            return point;\r\n        }\r\n        throw new Error('graphhelper_table is not a table');\r\n    }\r\n    focus() {\r\n        this.showSymbolic();\r\n    }\r\n    getSymbolicExpressions() {\r\n        super.getSymbolicExpressions();\r\n        const expressions = [{\r\n                id: `${this.getGraphId()}`,\r\n                type: 'expression',\r\n                latex: '\\\\left(B_{x}\\\\left(t\\\\right),B_{y}\\\\left(t\\\\right)\\\\right)'\r\n            }];\r\n        return expressions;\r\n    }\r\n    getHelperExpressions() {\r\n        const B1 = {\r\n            id: `graphhelper_${0}`,\r\n            type: \"expression\",\r\n            hidden: true,\r\n            latex: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Equal(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.SymbolicFunction('B_{x}', 't'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 1), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Sum('i', 0, 3, new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Operator('nCr', _utils_utils__WEBPACK_IMPORTED_MODULE_3__.nCr, 3, 'i'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(1, 't'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(3, 'i')), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent('t', 'i'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add('i', 1)), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', '1')))))).toString()\r\n        };\r\n        const B2 = {\r\n            id: `graphhelper_${1}`,\r\n            type: \"expression\",\r\n            hidden: true,\r\n            latex: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Equal(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.SymbolicFunction('B_{y}', 't'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 1), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Sum('i', 1, 3, new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Operator('nCr', _utils_utils__WEBPACK_IMPORTED_MODULE_3__.nCr, 3, 'i'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(1, 't'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(3, 'i')), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Exponent('t', 'i'), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add('i', 1)), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', '1')))))).toString()\r\n        };\r\n        const B3 = {\r\n            id: `graphhelper_${2}`,\r\n            type: \"expression\",\r\n            latex: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Point(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 3), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 4), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 3)), 't')), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 3), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 4), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 3)), 't'))).toString()\r\n        };\r\n        const B4 = {\r\n            id: `graphhelper_${3}`,\r\n            type: \"expression\",\r\n            latex: new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Point(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 1), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 2), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{x}', 1)), 't')), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Add(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 1), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Multiply(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.Subtract(new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 2), new _lib_symbolicLib__WEBPACK_IMPORTED_MODULE_2__.ArrayIndex('b_{y}', 1)), 't'))).toString()\r\n        };\r\n        const B5 = {\r\n            id: `graphhelper_table`,\r\n            type: \"table\",\r\n            columns: [\r\n                {\r\n                    id: \"column_b_{x}\",\r\n                    latex: \"b_{x}\",\r\n                    color: \"#c74440\",\r\n                    hidden: true,\r\n                    pointStyle: \"POINT\",\r\n                    points: true,\r\n                    lines: false,\r\n                    dragMode: \"NONE\",\r\n                    values: [\r\n                        this.variables.x_1.toString(),\r\n                        this.variables.x_2.toString(),\r\n                        this.variables.x_3.toString(),\r\n                        this.variables.x_4.toString(),\r\n                    ]\r\n                },\r\n                {\r\n                    id: \"column_b_{y}\",\r\n                    latex: \"b_{y}\",\r\n                    color: \"#2d70b3\",\r\n                    hidden: false,\r\n                    pointStyle: \"POINT\",\r\n                    points: true,\r\n                    lines: false,\r\n                    dragMode: \"XY\",\r\n                    values: [\r\n                        this.variables.y_1.toString(),\r\n                        this.variables.y_2.toString(),\r\n                        this.variables.y_3.toString(),\r\n                        this.variables.y_4.toString(),\r\n                    ]\r\n                }\r\n            ]\r\n        };\r\n        const helperExpressions = [B1, B2, B3, B4, B5];\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.helperExpressions = helperExpressions;\r\n        return helperExpressions;\r\n    }\r\n    toObject() {\r\n        return {\r\n            ...super.toObject(),\r\n            graphType: Bezier.graphType,\r\n        };\r\n    }\r\n    onShift() {\r\n        //\r\n    }\r\n    onUnshift() {\r\n        //\r\n    }\r\n    addGraph() {\r\n    }\r\n    update() {\r\n        if (this.focused) {\r\n            const table = _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.getExpression('graphhelper_table');\r\n            if (table?.type !== \"table\")\r\n                throw new Error(\"Table not found\");\r\n            const [x_1, x_2, x_3, x_4] = table.columns[0].values.map(x => parseFloat(x));\r\n            const [y_1, y_2, y_3, y_4] = table.columns[1].values.map(x => parseFloat(x));\r\n            this.variables = { x_1, x_2, x_3, x_4, y_1, y_2, y_3, y_4 };\r\n        }\r\n    }\r\n    showSymbolic() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.setExpressions(this.getSymbolicExpressions());\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.setExpressions(this.getHelperExpressions());\r\n    }\r\n    standardize() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.removeGraphPoints();\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.setExpressions([\r\n            {\r\n                type: \"expression\",\r\n                id: `graph_${this.id}`,\r\n                latex: this.getExpressionLatex()\r\n            }\r\n        ]);\r\n    }\r\n}\r\nBezier.graphType = \"bezier\";\r\nBezier.defaultVariables = {\r\n    x_1: -2.57,\r\n    x_2: -4.06,\r\n    x_3: -6.31,\r\n    x_4: -5.5,\r\n    y_1: 2.93,\r\n    y_2: 9.02,\r\n    y_3: 1.6,\r\n    y_4: 4.43,\r\n};\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/Bezier.ts?");

/***/ }),

/***/ "./src/graphs/EllipseOrHyperbola.ts":
/*!******************************************!*\
  !*** ./src/graphs/EllipseOrHyperbola.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EllipseOrHyperbola\": () => (/* binding */ EllipseOrHyperbola)\n/* harmony export */ });\n/* harmony import */ var _classes_CroppableGraph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/CroppableGraph */ \"./src/classes/CroppableGraph.ts\");\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ \"./src/utils/utils.ts\");\n\r\n\r\n\r\nclass EllipseOrHyperbola extends _classes_CroppableGraph__WEBPACK_IMPORTED_MODULE_0__.CroppableGraph {\r\n    constructor(variables) {\r\n        super();\r\n        this._variables = variables;\r\n    }\r\n    static createDefault() {\r\n        return new EllipseOrHyperbola(this.defaultVariables);\r\n    }\r\n    getExpressionLatex() {\r\n        return (Math.sign(this.variables.b) == 1 ? `` : `-`) +\r\n            `\\\\frac{\\\\left(x-${(this.variables.h).toPrecision(4)}\\\\right)^{2}}{${(this.variables.a ** 2).toPrecision(4)}}` +\r\n            (Math.sign(this.variables.a) == 1 ? `+` : `-`) +\r\n            `\\\\frac{\\\\left(y-${(this.variables.k).toPrecision(4)}\\\\right)^{2}}{${(this.variables.b ** 2).toPrecision(4)}}=1` +\r\n            `${this.standardizedBoundsLatex()}`;\r\n    }\r\n    addGraph() {\r\n        this.showSymbolic();\r\n    }\r\n    getSymbolicExpressions() {\r\n        super.getSymbolicExpressions();\r\n        const expressions = [{\r\n                type: \"expression\",\r\n                id: this.getGraphId(),\r\n                latex: \"\\\\frac{\\\\left(x-h\\\\right)^{2}}{a^{2}}\\\\operatorname{sgn}\\\\left(b\\\\right)+\\\\frac{\\\\left(y-k\\\\right)^{2}}{b^{2}}\\\\operatorname{sgn}\\\\left(a\\\\right)=1\" +\r\n                    \"\\\\left\\\\{\\\\min\\\\left(c_{x1a},c_{x2a}\\\\right)<x<\\\\max\\\\left(c_{x1a},c_{x2a}\\\\right)\\\\right\\\\}\" +\r\n                    \"\\\\left\\\\{\\\\min\\\\left(c_{y1a},c_{y2a}\\\\right)<y<\\\\max\\\\left(c_{y1a},c_{y2a}\\\\right)\\\\right\\\\}\"\r\n            }];\r\n        return expressions;\r\n    }\r\n    getHelperExpressions() {\r\n        const helperExpressions = super.getHelperExpressions();\r\n        const helperPoints = [\r\n            { type: \"expression\", latex: \"\\\\left(h,k\\\\right)\", id: \"graphhelper_center\" },\r\n            { type: \"expression\", latex: `\\\\left(h+a,${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.abssgn)('k')}\\\\right)`, id: \"graphhelper_horizontal\" },\r\n            { type: \"expression\", latex: `\\\\left(${(0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.abssgn)('h')},k+b\\\\right)`, id: \"graphhelper_vertical\" },\r\n        ];\r\n        console.log(helperExpressions, helperPoints);\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.helperExpressions = [...helperExpressions, ...helperPoints];\r\n        return [...helperExpressions, ...helperPoints];\r\n    }\r\n    toObject() {\r\n        return {\r\n            ...super.toObject(),\r\n            graphType: EllipseOrHyperbola.graphType,\r\n        };\r\n    }\r\n    onShift() {\r\n        const sign = Math.sign(_index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.variables.b.value) * Math.sign(_index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.variables.a.value);\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.setExpressions([\r\n            { type: 'expression', id: 'variable_b', latex: sign == 1 ? `b=a` : `b=-a` }\r\n        ], undefined, true);\r\n    }\r\n    onUnshift() {\r\n        _index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.setExpressions([\r\n            { type: 'expression', id: 'variable_b', latex: `b=${_index_user__WEBPACK_IMPORTED_MODULE_1__.virtualCalc.variables.b.value}` }\r\n        ], undefined, true);\r\n    }\r\n}\r\nEllipseOrHyperbola.graphType = \"ellipse_or_hyperbola\";\r\nEllipseOrHyperbola.defaultVariables = { h: 0, k: 0, a: 3, b: 2 };\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/graphs/EllipseOrHyperbola.ts?");

/***/ }),

/***/ "./src/index.user.ts":
/*!***************************!*\
  !*** ./src/index.user.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"virtualCalc\": () => (/* binding */ virtualCalc)\n/* harmony export */ });\n/* harmony import */ var _classes_Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/Graph */ \"./src/classes/Graph.ts\");\n/* harmony import */ var _classes_VirtualCalc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/VirtualCalc */ \"./src/classes/VirtualCalc.ts\");\n\r\n\r\nlet virtualCalc;\r\nclass App {\r\n    constructor() {\r\n        this.isShifting = false;\r\n        this.keyDownFired = false;\r\n        document.addEventListener('keydown', (e) => this.keyDownHandler(e), false);\r\n        document.addEventListener('keyup', (e) => this.keyUpHandler(e), false);\r\n        document.addEventListener('pointerup', (e) => this.mouseUpHandler(e), false);\r\n        document.addEventListener('pointerdown', (e) => this.mouseDownHandler(e), false);\r\n        virtualCalc = new _classes_VirtualCalc__WEBPACK_IMPORTED_MODULE_1__.VirtualCalcClass(Calc);\r\n        unsafeWindow.VirtualCalc = virtualCalc;\r\n        unsafeWindow.Graph = _classes_Graph__WEBPACK_IMPORTED_MODULE_0__.Graph;\r\n    }\r\n    keyUpHandler(e) {\r\n        if (!e.shiftKey) {\r\n            if (this.isShifting) {\r\n                e.preventDefault();\r\n                this.onChange();\r\n                virtualCalc.onUnshift();\r\n            }\r\n            this.isShifting = false;\r\n        }\r\n        // this.onChange()\r\n        // e.preventDefault();\r\n    }\r\n    keyDownHandler(e) {\r\n        if (e.shiftKey) {\r\n            if (!this.isShifting) {\r\n                e.preventDefault();\r\n                this.onChange();\r\n                virtualCalc.onShift();\r\n            }\r\n            this.isShifting = true;\r\n        }\r\n        if (e.altKey) {\r\n            e.preventDefault();\r\n            if (e.key === \"1\") {\r\n                this.onChange();\r\n                virtualCalc.addGraph(\"ellipse_or_hyperbola\");\r\n            }\r\n            else if (e.key === \"2\") {\r\n                this.onChange();\r\n                virtualCalc.addGraph(\"bezier\");\r\n            }\r\n            else if (e.key === \"a\") {\r\n                this.onChange();\r\n                virtualCalc.setFocus(null);\r\n            }\r\n            else if (e.key === \"s\") {\r\n                this.onChange();\r\n                virtualCalc.save();\r\n            }\r\n            else if (e.key === \"c\") {\r\n                this.onChange();\r\n                virtualCalc.removeGraph();\r\n            }\r\n        }\r\n    }\r\n    mouseUpHandler(e) {\r\n        this.onChange();\r\n        // e.preventDefault();\r\n    }\r\n    mouseDownHandler(e) {\r\n        this.onChange();\r\n        // e.preventDefault();\r\n    }\r\n    onChange() {\r\n        virtualCalc.onChange();\r\n    }\r\n    getOffset() {\r\n        const graphContainer = document.querySelector('#graph-container');\r\n        const graphContainerRect = graphContainer.getBoundingClientRect();\r\n        return { x: graphContainerRect.left, y: graphContainerRect.top };\r\n    }\r\n    pixelsToMath(point) {\r\n        const { x: xOffset, y: yOffset } = this.getOffset();\r\n        return virtualCalc.Calc.pixelsToMath({\r\n            x: point.x - xOffset,\r\n            y: point.y - yOffset,\r\n        });\r\n    }\r\n}\r\n(async () => {\r\n    while (typeof Calc === 'undefined') {\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    }\r\n    const app = new App();\r\n})();\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/index.user.ts?");

/***/ }),

/***/ "./src/lib/symbolicLib.ts":
/*!********************************!*\
  !*** ./src/lib/symbolicLib.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SymbolicVariable\": () => (/* binding */ SymbolicVariable),\n/* harmony export */   \"Constant\": () => (/* binding */ Constant),\n/* harmony export */   \"Add\": () => (/* binding */ Add),\n/* harmony export */   \"Multiply\": () => (/* binding */ Multiply),\n/* harmony export */   \"Subtract\": () => (/* binding */ Subtract),\n/* harmony export */   \"Point\": () => (/* binding */ Point),\n/* harmony export */   \"Operator\": () => (/* binding */ Operator),\n/* harmony export */   \"Equal\": () => (/* binding */ Equal),\n/* harmony export */   \"SymbolicFunction\": () => (/* binding */ SymbolicFunction),\n/* harmony export */   \"ArrayIndex\": () => (/* binding */ ArrayIndex),\n/* harmony export */   \"Exponent\": () => (/* binding */ Exponent),\n/* harmony export */   \"Sum\": () => (/* binding */ Sum)\n/* harmony export */ });\n/* harmony import */ var _index_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.user */ \"./src/index.user.ts\");\n\r\nclass SymbolicExpression {\r\n}\r\nclass SymbolicVariable extends SymbolicExpression {\r\n    constructor(name) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.name = name;\r\n    }\r\n    toString() {\r\n        return this.name;\r\n    }\r\n    getValue() {\r\n        return _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.variables[this.name].value;\r\n    }\r\n}\r\nclass Constant extends SymbolicExpression {\r\n    constructor(value) {\r\n        super();\r\n        this.requiresParenthesis = true;\r\n        this.value = value;\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n}\r\nfunction TransformInputExpression(expression) {\r\n    if (typeof expression === \"number\") {\r\n        return new Constant(expression);\r\n    }\r\n    else if (typeof expression === \"string\") {\r\n        return new SymbolicVariable(expression);\r\n    }\r\n    return expression;\r\n}\r\nclass Add extends SymbolicExpression {\r\n    constructor(...subexpressions) {\r\n        super();\r\n        this.requiresParenthesis = true;\r\n        this.subexpressions = subexpressions.map(subexpression => TransformInputExpression(subexpression));\r\n    }\r\n    toString() {\r\n        return this.subexpressions.map(subexpression => subexpression.toString()).join(\"+\");\r\n    }\r\n    getValue() {\r\n        return this.subexpressions\r\n            .map(subexpression => subexpression.getValue())\r\n            .reduce((x, y) => x + y);\r\n    }\r\n}\r\nclass Multiply extends SymbolicExpression {\r\n    constructor(...subexpressions) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.subexpressions = subexpressions.map(subexpression => TransformInputExpression(subexpression));\r\n    }\r\n    toString() {\r\n        return this.subexpressions.map(subexpression => {\r\n            if (subexpression.requiresParenthesis) {\r\n                return `\\\\left(${subexpression.toString()}\\\\right)`;\r\n            }\r\n            else {\r\n                return subexpression.toString();\r\n            }\r\n        }).join(\"\");\r\n    }\r\n    getValue() {\r\n        return this.subexpressions\r\n            .map(subexpression => subexpression.getValue())\r\n            .reduce((x, y) => x * y);\r\n    }\r\n}\r\nclass Subtract extends SymbolicExpression {\r\n    constructor(...subexpressions) {\r\n        super();\r\n        this.requiresParenthesis = true;\r\n        this.subexpressions = subexpressions.map(subexpression => TransformInputExpression(subexpression));\r\n    }\r\n    toString() {\r\n        return this.subexpressions.map(subexpression => subexpression.toString()).join(\"-\");\r\n    }\r\n    getValue() {\r\n        return this.subexpressions\r\n            .map(subexpression => subexpression.getValue())\r\n            .reduce((x, y) => x - y);\r\n    }\r\n}\r\nclass Point extends SymbolicExpression {\r\n    constructor(...subexpressions) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.subexpressions = subexpressions.map(subexpression => TransformInputExpression(subexpression));\r\n    }\r\n    toString() {\r\n        return `\\\\left(${this.subexpressions.map(subexpression => subexpression.toString()).join(\",\")}\\\\right)`;\r\n    }\r\n    getValue() {\r\n        return this.subexpressions.map(subexpression => subexpression.getValue());\r\n    }\r\n}\r\nclass Operator extends SymbolicExpression {\r\n    constructor(operatorName, valueFunction, ...subexpressions) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.operatorName = operatorName;\r\n        this.subexpressions = subexpressions.map((subexpression) => TransformInputExpression(subexpression));\r\n        this.valueFunction = valueFunction;\r\n    }\r\n    toString() {\r\n        return `\\\\operatorname{${this.operatorName}}\\\\left(${this.subexpressions.map(subexpression => subexpression.toString()).join(\",\")}\\\\right)`;\r\n    }\r\n    getValue() {\r\n        return this.valueFunction(...this.subexpressions.map(subexpression => subexpression.getValue()));\r\n    }\r\n}\r\nclass Equal extends SymbolicExpression {\r\n    constructor(lhs, rhs) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.lhs = TransformInputExpression(lhs);\r\n        this.rhs = TransformInputExpression(rhs);\r\n    }\r\n    toString() {\r\n        return `${this.lhs}=${this.rhs}`;\r\n    }\r\n    getValue() {\r\n        return this.rhs.getValue();\r\n    }\r\n}\r\nclass SymbolicFunction extends SymbolicExpression {\r\n    constructor(functionName, variables) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.functionName = TransformInputExpression(functionName);\r\n        this.variables = TransformInputExpression(variables);\r\n    }\r\n    toString() {\r\n        return `${this.functionName}\\\\left(${this.variables}\\\\right)`;\r\n    }\r\n    getValue() {\r\n        return 0; // TODO return value based on variables\r\n    }\r\n}\r\nclass ArrayIndex extends SymbolicExpression {\r\n    constructor(arrayName, variables) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.arrayName = arrayName;\r\n        this.variables = TransformInputExpression(variables);\r\n    }\r\n    toString() {\r\n        return `${this.arrayName}\\\\left[${this.variables}\\\\right]`;\r\n    }\r\n    getValue() {\r\n        return 0; // TODO return value based on variables\r\n    }\r\n}\r\nclass Exponent extends SymbolicExpression {\r\n    constructor(base, exponent) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.base = TransformInputExpression(base);\r\n        this.exponent = TransformInputExpression(exponent);\r\n    }\r\n    toString() {\r\n        if (this.base.requiresParenthesis) {\r\n            return `\\\\left(${this.base}\\\\right)^{${this.exponent}}`;\r\n        }\r\n        else {\r\n            return `${this.base}^{${this.exponent}}`;\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.base.getValue() ** this.exponent.getValue();\r\n    }\r\n}\r\nclass Sum extends SymbolicExpression {\r\n    constructor(variable, start, end, subexpression) {\r\n        super();\r\n        this.requiresParenthesis = false;\r\n        this.variable = variable;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.subexpression = TransformInputExpression(subexpression);\r\n    }\r\n    toString() {\r\n        return `\\\\sum_{${this.variable}=${this.start}}^{${this.end}}\\\\left(${this.subexpression}\\\\right)`;\r\n    }\r\n    getValue() {\r\n        let total = 0;\r\n        for (let i = this.start; i <= this.end; i++) {\r\n            _index_user__WEBPACK_IMPORTED_MODULE_0__.virtualCalc.setVariables([{ key: this.variable, value: i }]);\r\n            total += this.subexpression.getValue();\r\n        }\r\n        return total;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/lib/symbolicLib.ts?");

/***/ }),

/***/ "./src/types/desmosTypes.ts":
/*!**********************************!*\
  !*** ./src/types/desmosTypes.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isValueAnalysis\": () => (/* binding */ isValueAnalysis)\n/* harmony export */ });\nfunction isValueAnalysis(analysis) {\r\n    return analysis.evaluation !== undefined;\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/types/desmosTypes.ts?");

/***/ }),

/***/ "./src/types/types.ts":
/*!****************************!*\
  !*** ./src/types/types.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GraphTypes\": () => (/* binding */ GraphTypes)\n/* harmony export */ });\n/* harmony import */ var _graphs_Bezier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../graphs/Bezier */ \"./src/graphs/Bezier.ts\");\n/* harmony import */ var _graphs_EllipseOrHyperbola__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../graphs/EllipseOrHyperbola */ \"./src/graphs/EllipseOrHyperbola.ts\");\n\r\n\r\nconst GraphTypesClass = [_graphs_EllipseOrHyperbola__WEBPACK_IMPORTED_MODULE_1__.EllipseOrHyperbola, _graphs_Bezier__WEBPACK_IMPORTED_MODULE_0__.Bezier];\r\nconst GraphTypes = Object.fromEntries(GraphTypesClass.map(graphType => [graphType.graphType, graphType]));\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/types/types.ts?");

/***/ }),

/***/ "./src/utils/utils.ts":
/*!****************************!*\
  !*** ./src/utils/utils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"convertToKeyValuePairs\": () => (/* binding */ convertToKeyValuePairs),\n/* harmony export */   \"convertToVariableObjects\": () => (/* binding */ convertToVariableObjects),\n/* harmony export */   \"abssgn\": () => (/* binding */ abssgn),\n/* harmony export */   \"nCr\": () => (/* binding */ nCr),\n/* harmony export */   \"omit\": () => (/* binding */ omit)\n/* harmony export */ });\n/* harmony import */ var _classes_Variable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Variable */ \"./src/classes/Variable.ts\");\n\r\nfunction convertToKeyValuePairs(arg) {\r\n    return Object.entries(arg).map((entry) => {\r\n        const [key, value] = entry;\r\n        return { key, value };\r\n    });\r\n}\r\nfunction convertToVariableObjects(arg) {\r\n    return Object.entries(arg).map((entry) => {\r\n        const [key, value] = entry;\r\n        return new _classes_Variable__WEBPACK_IMPORTED_MODULE_0__.Variable(key, value);\r\n    });\r\n}\r\nfunction abssgn(text) {\r\n    return `\\\\operatorname{abs}\\\\left(${text}\\\\right)\\\\operatorname{sgn}\\\\left(${text}\\\\right)`;\r\n}\r\nfunction productRange(min, max) {\r\n    let total = 1;\r\n    for (let i = min; i <= max; i++) {\r\n        total *= i;\r\n    }\r\n    return total;\r\n}\r\nfunction nCr(n, r) {\r\n    if (n == r) {\r\n        return 1;\r\n    }\r\n    return productRange(r + 1, n) / productRange(1, n - r);\r\n}\r\nfunction omit(obj, keys) {\r\n    const keysToRemove = new Set(keys); // flatten the props, and convert to a Set\r\n    return Object.fromEntries(// convert the entries back to object\r\n    Object.entries(obj) // convert the object to entries\r\n        .filter(([k]) => !keysToRemove.has(k)) // remove entries with keys that exist in the Set\r\n    );\r\n}\r\n\n\n//# sourceURL=webpack://graph-art-creator/./src/utils/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.user.ts");
/******/ 	
/******/ })()
;